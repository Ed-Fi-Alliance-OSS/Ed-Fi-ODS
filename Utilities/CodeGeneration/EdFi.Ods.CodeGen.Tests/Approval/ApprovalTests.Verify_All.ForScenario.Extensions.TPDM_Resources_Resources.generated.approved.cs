using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;
using EdFi.Common.Extensions;
using EdFi.Ods.Api.Models;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Models.Domain;
using EdFi.Ods.Common.Serialization;
using EdFi.Ods.Api.Attributes;
using EdFi.Ods.Common.Adapters;
using EdFi.Ods.Common.Attributes;
using EdFi.Ods.Common.Dependencies;
using EdFi.Ods.Common.Models;
using EdFi.Ods.Common.Validation;
using EdFi.Ods.Entities.Common.EdFi;
using EdFi.Ods.Entities.Common.TPDM;
using Newtonsoft.Json;
using FluentValidation.Results;

// Aggregate: AccreditationStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.AccreditationStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.AccreditationStatusDescriptor table of the AccreditationStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class AccreditationStatusDescriptor : Entities.Common.TPDM.IAccreditationStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the AccreditationStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="accreditationStatusDescriptorId"), NaturalKeyMember]
        public int AccreditationStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AccreditationStatusDescriptorId; }
            set { AccreditationStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IAccreditationStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IAccreditationStatusDescriptor).AccreditationStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.IAccreditationStatusDescriptor).AccreditationStatusDescriptorId.Equals(compareTo.AccreditationStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IAccreditationStatusDescriptor).AccreditationStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IAccreditationStatusDescriptor).AccreditationStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.AccreditationStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IAccreditationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.AccreditationStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IAccreditationStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class AccreditationStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<AccreditationStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<AccreditationStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.AidTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.AidTypeDescriptor table of the AidTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class AidTypeDescriptor : Entities.Common.TPDM.IAidTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the AidTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="aidTypeDescriptorId"), NaturalKeyMember]
        public int AidTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AidTypeDescriptorId; }
            set { AidTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IAidTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IAidTypeDescriptor).AidTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IAidTypeDescriptor).AidTypeDescriptorId.Equals(compareTo.AidTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IAidTypeDescriptor).AidTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IAidTypeDescriptor).AidTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.AidTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IAidTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.AidTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IAidTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class AidTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<AidTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<AidTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ApplicantProfile

namespace EdFi.Ods.Api.Common.Models.Resources.ApplicantProfile.TPDM
{
    /// <summary>
    /// Represents a reference to the ApplicantProfile resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileReference
    {
        [DataMember(Name="applicantProfileIdentifier"), NaturalKeyMember]
        public string ApplicantProfileIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantProfileIdentifier != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "ApplicantProfile",
                Href = $"/tpdm/applicantProfiles/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfile table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfile : Entities.Common.TPDM.IApplicantProfile, IHasETag, Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public ApplicantProfile()
        {
            ApplicantProfileAddresses = new List<ApplicantProfileAddress>();
            ApplicantProfileApplicantCharacteristics = new List<ApplicantProfileApplicantCharacteristic>();
            ApplicantProfileBackgroundChecks = new List<ApplicantProfileBackgroundCheck>();
            ApplicantProfileDisabilities = new List<ApplicantProfileDisability>();
            ApplicantProfileEducatorPreparationProgramNames = new List<ApplicantProfileEducatorPreparationProgramName>();
            ApplicantProfileElectronicMails = new List<ApplicantProfileElectronicMail>();
            ApplicantProfileGradePointAverages = new List<ApplicantProfileGradePointAverage>();
            ApplicantProfileHighlyQualifiedAcademicSubjects = new List<ApplicantProfileHighlyQualifiedAcademicSubject>();
            ApplicantProfileIdentificationDocuments = new List<ApplicantProfileIdentificationDocument>();
            ApplicantProfileInternationalAddresses = new List<ApplicantProfileInternationalAddress>();
            ApplicantProfileLanguages = new List<ApplicantProfileLanguage>();
            ApplicantProfilePersonalIdentificationDocuments = new List<ApplicantProfilePersonalIdentificationDocument>();
            ApplicantProfileRaces = new List<ApplicantProfileRace>();
            ApplicantProfileTelephones = new List<ApplicantProfileTelephone>();
            ApplicantProfileVisas = new List<ApplicantProfileVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ApplicantProfile resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier assigned to a person making formal application for entrance into a program or an open staff position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantProfileIdentifier"), NaturalKeyMember]
        public string ApplicantProfileIdentifier { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfile;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfile).ApplicantProfileIdentifier == null
                || !(this as Entities.Common.TPDM.IApplicantProfile).ApplicantProfileIdentifier.Equals(compareTo.ApplicantProfileIdentifier))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfile).ApplicantProfileIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfile).ApplicantProfileIdentifier.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="economicDisadvantaged")]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstGenerationStudent")]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="genderDescriptor")]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino\".
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantProfileAddress> _applicantProfileAddresses;
        private ICollection<Entities.Common.TPDM.IApplicantProfileAddress> _applicantProfileAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantProfileAddress> ApplicantProfileAddresses
        {
            get { return _applicantProfileAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileAddress>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileAddress)e.Item).ApplicantProfile = this);
                _applicantProfileAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileAddress, ApplicantProfileAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileAddress)e.Item).ApplicantProfile = this;
                _applicantProfileAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileAddress> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileAddresses
        {
            get { return _applicantProfileAddressesCovariant; }
            set { ApplicantProfileAddresses = new List<ApplicantProfileAddress>(value.Cast<ApplicantProfileAddress>()); }
        }

        private ICollection<ApplicantProfileApplicantCharacteristic> _applicantProfileApplicantCharacteristics;
        private ICollection<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic> _applicantProfileApplicantCharacteristicsCovariant;

        [DataMember(Name="applicantCharacteristics"), NoDuplicateMembers]
        public ICollection<ApplicantProfileApplicantCharacteristic> ApplicantProfileApplicantCharacteristics
        {
            get { return _applicantProfileApplicantCharacteristics; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileApplicantCharacteristic>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic)e.Item).ApplicantProfile = this);
                _applicantProfileApplicantCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, ApplicantProfileApplicantCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic)e.Item).ApplicantProfile = this;
                _applicantProfileApplicantCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileApplicantCharacteristics
        {
            get { return _applicantProfileApplicantCharacteristicsCovariant; }
            set { ApplicantProfileApplicantCharacteristics = new List<ApplicantProfileApplicantCharacteristic>(value.Cast<ApplicantProfileApplicantCharacteristic>()); }
        }

        private ICollection<ApplicantProfileBackgroundCheck> _applicantProfileBackgroundChecks;
        private ICollection<Entities.Common.TPDM.IApplicantProfileBackgroundCheck> _applicantProfileBackgroundChecksCovariant;

        [DataMember(Name="backgroundChecks"), NoDuplicateMembers]
        public ICollection<ApplicantProfileBackgroundCheck> ApplicantProfileBackgroundChecks
        {
            get { return _applicantProfileBackgroundChecks; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileBackgroundCheck>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileBackgroundCheck)e.Item).ApplicantProfile = this);
                _applicantProfileBackgroundChecks = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileBackgroundCheck, ApplicantProfileBackgroundCheck>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileBackgroundCheck)e.Item).ApplicantProfile = this;
                _applicantProfileBackgroundChecksCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileBackgroundCheck> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileBackgroundChecks
        {
            get { return _applicantProfileBackgroundChecksCovariant; }
            set { ApplicantProfileBackgroundChecks = new List<ApplicantProfileBackgroundCheck>(value.Cast<ApplicantProfileBackgroundCheck>()); }
        }

        private ICollection<ApplicantProfileDisability> _applicantProfileDisabilities;
        private ICollection<Entities.Common.TPDM.IApplicantProfileDisability> _applicantProfileDisabilitiesCovariant;

        [DataMember(Name="disabilities"), NoDuplicateMembers]
        public ICollection<ApplicantProfileDisability> ApplicantProfileDisabilities
        {
            get { return _applicantProfileDisabilities; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileDisability>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileDisability)e.Item).ApplicantProfile = this);
                _applicantProfileDisabilities = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileDisability, ApplicantProfileDisability>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileDisability)e.Item).ApplicantProfile = this;
                _applicantProfileDisabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileDisability> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileDisabilities
        {
            get { return _applicantProfileDisabilitiesCovariant; }
            set { ApplicantProfileDisabilities = new List<ApplicantProfileDisability>(value.Cast<ApplicantProfileDisability>()); }
        }

        private ICollection<ApplicantProfileEducatorPreparationProgramName> _applicantProfileEducatorPreparationProgramNames;
        private ICollection<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName> _applicantProfileEducatorPreparationProgramNamesCovariant;

        [DataMember(Name="educatorPreparationProgramNames"), NoDuplicateMembers]
        public ICollection<ApplicantProfileEducatorPreparationProgramName> ApplicantProfileEducatorPreparationProgramNames
        {
            get { return _applicantProfileEducatorPreparationProgramNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileEducatorPreparationProgramName>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName)e.Item).ApplicantProfile = this);
                _applicantProfileEducatorPreparationProgramNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, ApplicantProfileEducatorPreparationProgramName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName)e.Item).ApplicantProfile = this;
                _applicantProfileEducatorPreparationProgramNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileEducatorPreparationProgramNames
        {
            get { return _applicantProfileEducatorPreparationProgramNamesCovariant; }
            set { ApplicantProfileEducatorPreparationProgramNames = new List<ApplicantProfileEducatorPreparationProgramName>(value.Cast<ApplicantProfileEducatorPreparationProgramName>()); }
        }

        private ICollection<ApplicantProfileElectronicMail> _applicantProfileElectronicMails;
        private ICollection<Entities.Common.TPDM.IApplicantProfileElectronicMail> _applicantProfileElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<ApplicantProfileElectronicMail> ApplicantProfileElectronicMails
        {
            get { return _applicantProfileElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileElectronicMail>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileElectronicMail)e.Item).ApplicantProfile = this);
                _applicantProfileElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileElectronicMail, ApplicantProfileElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileElectronicMail)e.Item).ApplicantProfile = this;
                _applicantProfileElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileElectronicMail> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileElectronicMails
        {
            get { return _applicantProfileElectronicMailsCovariant; }
            set { ApplicantProfileElectronicMails = new List<ApplicantProfileElectronicMail>(value.Cast<ApplicantProfileElectronicMail>()); }
        }

        private ICollection<ApplicantProfileGradePointAverage> _applicantProfileGradePointAverages;
        private ICollection<Entities.Common.TPDM.IApplicantProfileGradePointAverage> _applicantProfileGradePointAveragesCovariant;

        [DataMember(Name="gradePointAverages"), NoDuplicateMembers]
        public ICollection<ApplicantProfileGradePointAverage> ApplicantProfileGradePointAverages
        {
            get { return _applicantProfileGradePointAverages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileGradePointAverage>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileGradePointAverage)e.Item).ApplicantProfile = this);
                _applicantProfileGradePointAverages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileGradePointAverage, ApplicantProfileGradePointAverage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileGradePointAverage)e.Item).ApplicantProfile = this;
                _applicantProfileGradePointAveragesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileGradePointAverage> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileGradePointAverages
        {
            get { return _applicantProfileGradePointAveragesCovariant; }
            set { ApplicantProfileGradePointAverages = new List<ApplicantProfileGradePointAverage>(value.Cast<ApplicantProfileGradePointAverage>()); }
        }

        private ICollection<ApplicantProfileHighlyQualifiedAcademicSubject> _applicantProfileHighlyQualifiedAcademicSubjects;
        private ICollection<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject> _applicantProfileHighlyQualifiedAcademicSubjectsCovariant;

        [DataMember(Name="highlyQualifiedAcademicSubjects"), NoDuplicateMembers]
        public ICollection<ApplicantProfileHighlyQualifiedAcademicSubject> ApplicantProfileHighlyQualifiedAcademicSubjects
        {
            get { return _applicantProfileHighlyQualifiedAcademicSubjects; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileHighlyQualifiedAcademicSubject>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject)e.Item).ApplicantProfile = this);
                _applicantProfileHighlyQualifiedAcademicSubjects = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, ApplicantProfileHighlyQualifiedAcademicSubject>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject)e.Item).ApplicantProfile = this;
                _applicantProfileHighlyQualifiedAcademicSubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileHighlyQualifiedAcademicSubjects
        {
            get { return _applicantProfileHighlyQualifiedAcademicSubjectsCovariant; }
            set { ApplicantProfileHighlyQualifiedAcademicSubjects = new List<ApplicantProfileHighlyQualifiedAcademicSubject>(value.Cast<ApplicantProfileHighlyQualifiedAcademicSubject>()); }
        }

        private ICollection<ApplicantProfileIdentificationDocument> _applicantProfileIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IApplicantProfileIdentificationDocument> _applicantProfileIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<ApplicantProfileIdentificationDocument> ApplicantProfileIdentificationDocuments
        {
            get { return _applicantProfileIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileIdentificationDocument)e.Item).ApplicantProfile = this);
                _applicantProfileIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileIdentificationDocument, ApplicantProfileIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileIdentificationDocument)e.Item).ApplicantProfile = this;
                _applicantProfileIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileIdentificationDocument> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileIdentificationDocuments
        {
            get { return _applicantProfileIdentificationDocumentsCovariant; }
            set { ApplicantProfileIdentificationDocuments = new List<ApplicantProfileIdentificationDocument>(value.Cast<ApplicantProfileIdentificationDocument>()); }
        }

        private ICollection<ApplicantProfileInternationalAddress> _applicantProfileInternationalAddresses;
        private ICollection<Entities.Common.TPDM.IApplicantProfileInternationalAddress> _applicantProfileInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<ApplicantProfileInternationalAddress> ApplicantProfileInternationalAddresses
        {
            get { return _applicantProfileInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileInternationalAddress>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileInternationalAddress)e.Item).ApplicantProfile = this);
                _applicantProfileInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileInternationalAddress, ApplicantProfileInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileInternationalAddress)e.Item).ApplicantProfile = this;
                _applicantProfileInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileInternationalAddress> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileInternationalAddresses
        {
            get { return _applicantProfileInternationalAddressesCovariant; }
            set { ApplicantProfileInternationalAddresses = new List<ApplicantProfileInternationalAddress>(value.Cast<ApplicantProfileInternationalAddress>()); }
        }

        private ICollection<ApplicantProfileLanguage> _applicantProfileLanguages;
        private ICollection<Entities.Common.TPDM.IApplicantProfileLanguage> _applicantProfileLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<ApplicantProfileLanguage> ApplicantProfileLanguages
        {
            get { return _applicantProfileLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileLanguage>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileLanguage)e.Item).ApplicantProfile = this);
                _applicantProfileLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileLanguage, ApplicantProfileLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileLanguage)e.Item).ApplicantProfile = this;
                _applicantProfileLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileLanguage> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileLanguages
        {
            get { return _applicantProfileLanguagesCovariant; }
            set { ApplicantProfileLanguages = new List<ApplicantProfileLanguage>(value.Cast<ApplicantProfileLanguage>()); }
        }

        private ICollection<ApplicantProfilePersonalIdentificationDocument> _applicantProfilePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument> _applicantProfilePersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<ApplicantProfilePersonalIdentificationDocument> ApplicantProfilePersonalIdentificationDocuments
        {
            get { return _applicantProfilePersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfilePersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument)e.Item).ApplicantProfile = this);
                _applicantProfilePersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, ApplicantProfilePersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument)e.Item).ApplicantProfile = this;
                _applicantProfilePersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument> Entities.Common.TPDM.IApplicantProfile.ApplicantProfilePersonalIdentificationDocuments
        {
            get { return _applicantProfilePersonalIdentificationDocumentsCovariant; }
            set { ApplicantProfilePersonalIdentificationDocuments = new List<ApplicantProfilePersonalIdentificationDocument>(value.Cast<ApplicantProfilePersonalIdentificationDocument>()); }
        }

        private ICollection<ApplicantProfileRace> _applicantProfileRaces;
        private ICollection<Entities.Common.TPDM.IApplicantProfileRace> _applicantProfileRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<ApplicantProfileRace> ApplicantProfileRaces
        {
            get { return _applicantProfileRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileRace>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileRace)e.Item).ApplicantProfile = this);
                _applicantProfileRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileRace, ApplicantProfileRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileRace)e.Item).ApplicantProfile = this;
                _applicantProfileRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileRace> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileRaces
        {
            get { return _applicantProfileRacesCovariant; }
            set { ApplicantProfileRaces = new List<ApplicantProfileRace>(value.Cast<ApplicantProfileRace>()); }
        }

        private ICollection<ApplicantProfileTelephone> _applicantProfileTelephones;
        private ICollection<Entities.Common.TPDM.IApplicantProfileTelephone> _applicantProfileTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<ApplicantProfileTelephone> ApplicantProfileTelephones
        {
            get { return _applicantProfileTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileTelephone>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileTelephone)e.Item).ApplicantProfile = this);
                _applicantProfileTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileTelephone, ApplicantProfileTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileTelephone)e.Item).ApplicantProfile = this;
                _applicantProfileTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileTelephone> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileTelephones
        {
            get { return _applicantProfileTelephonesCovariant; }
            set { ApplicantProfileTelephones = new List<ApplicantProfileTelephone>(value.Cast<ApplicantProfileTelephone>()); }
        }

        private ICollection<ApplicantProfileVisa> _applicantProfileVisas;
        private ICollection<Entities.Common.TPDM.IApplicantProfileVisa> _applicantProfileVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<ApplicantProfileVisa> ApplicantProfileVisas
        {
            get { return _applicantProfileVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileVisa>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileVisa)e.Item).ApplicantProfile = this);
                _applicantProfileVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileVisa, ApplicantProfileVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileVisa)e.Item).ApplicantProfile = this;
                _applicantProfileVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileVisa> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileVisas
        {
            get { return _applicantProfileVisasCovariant; }
            set { ApplicantProfileVisas = new List<ApplicantProfileVisa>(value.Cast<ApplicantProfileVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantProfileAddresses != null) foreach (var item in _applicantProfileAddresses)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileApplicantCharacteristics != null) foreach (var item in _applicantProfileApplicantCharacteristics)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileBackgroundChecks != null) foreach (var item in _applicantProfileBackgroundChecks)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileDisabilities != null) foreach (var item in _applicantProfileDisabilities)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileEducatorPreparationProgramNames != null) foreach (var item in _applicantProfileEducatorPreparationProgramNames)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileElectronicMails != null) foreach (var item in _applicantProfileElectronicMails)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileGradePointAverages != null) foreach (var item in _applicantProfileGradePointAverages)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileHighlyQualifiedAcademicSubjects != null) foreach (var item in _applicantProfileHighlyQualifiedAcademicSubjects)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileIdentificationDocuments != null) foreach (var item in _applicantProfileIdentificationDocuments)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileInternationalAddresses != null) foreach (var item in _applicantProfileInternationalAddresses)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileLanguages != null) foreach (var item in _applicantProfileLanguages)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfilePersonalIdentificationDocuments != null) foreach (var item in _applicantProfilePersonalIdentificationDocuments)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileRaces != null) foreach (var item in _applicantProfileRaces)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileTelephones != null) foreach (var item in _applicantProfileTelephones)
            {
                item.ApplicantProfile = this;
            }

            if (_applicantProfileVisas != null) foreach (var item in _applicantProfileVisas)
            {
                item.ApplicantProfile = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfile)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfile)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileAddressesSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileApplicantCharacteristicsSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileBackgroundChecksSupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileDisabilitiesSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileEducatorPreparationProgramNamesSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileElectronicMailsSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileGradePointAveragesSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileIdentificationDocumentsSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileInternationalAddressesSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileLanguagesSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfilePersonalIdentificationDocumentsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileRacesSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileTelephonesSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileVisasSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsBirthDateSupported                                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsEconomicDisadvantagedSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsFirstGenerationStudentSupported                           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsFirstNameSupported                                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsGenderDescriptorSupported                                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsLastSurnameSupported                                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsMaidenNameSupported                                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsMiddleNameSupported                                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                              { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsSexDescriptorSupported                                    { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported                   { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IApplicantProfileAddress, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileAddressIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileApplicantCharacteristicIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileBackgroundCheck, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileBackgroundCheckIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileDisability, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileDisabilityIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileEducatorPreparationProgramNameIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileElectronicMail, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileElectronicMailIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileGradePointAverage, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileGradePointAverageIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileIdentificationDocument, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileIdentificationDocumentIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileInternationalAddress, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileInternationalAddressIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileLanguage, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileLanguageIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfilePersonalIdentificationDocumentIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileRace, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileRaceIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileTelephone, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileTelephoneIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicantProfileVisa, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileVisaIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfilePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfile>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfile> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var applicantProfileAddressesValidator = new ApplicantProfileAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileAddresses)
            {
                var validationResult = applicantProfileAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileApplicantCharacteristicsValidator = new ApplicantProfileApplicantCharacteristicPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileApplicantCharacteristics)
            {
                var validationResult = applicantProfileApplicantCharacteristicsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileBackgroundChecksValidator = new ApplicantProfileBackgroundCheckPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileBackgroundChecks)
            {
                var validationResult = applicantProfileBackgroundChecksValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileDisabilitiesValidator = new ApplicantProfileDisabilityPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileDisabilities)
            {
                var validationResult = applicantProfileDisabilitiesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileEducatorPreparationProgramNamesValidator = new ApplicantProfileEducatorPreparationProgramNamePutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileEducatorPreparationProgramNames)
            {
                var validationResult = applicantProfileEducatorPreparationProgramNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileElectronicMailsValidator = new ApplicantProfileElectronicMailPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileElectronicMails)
            {
                var validationResult = applicantProfileElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileGradePointAveragesValidator = new ApplicantProfileGradePointAveragePutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileGradePointAverages)
            {
                var validationResult = applicantProfileGradePointAveragesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileHighlyQualifiedAcademicSubjectsValidator = new ApplicantProfileHighlyQualifiedAcademicSubjectPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileHighlyQualifiedAcademicSubjects)
            {
                var validationResult = applicantProfileHighlyQualifiedAcademicSubjectsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileIdentificationDocumentsValidator = new ApplicantProfileIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileIdentificationDocuments)
            {
                var validationResult = applicantProfileIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileInternationalAddressesValidator = new ApplicantProfileInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileInternationalAddresses)
            {
                var validationResult = applicantProfileInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileLanguagesValidator = new ApplicantProfileLanguagePutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileLanguages)
            {
                var validationResult = applicantProfileLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfilePersonalIdentificationDocumentsValidator = new ApplicantProfilePersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfilePersonalIdentificationDocuments)
            {
                var validationResult = applicantProfilePersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileRacesValidator = new ApplicantProfileRacePutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileRaces)
            {
                var validationResult = applicantProfileRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileTelephonesValidator = new ApplicantProfileTelephonePutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileTelephones)
            {
                var validationResult = applicantProfileTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicantProfileVisasValidator = new ApplicantProfileVisaPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileVisas)
            {
                var validationResult = applicantProfileVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileAddress table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileAddress : Entities.Common.TPDM.IApplicantProfileAddress, Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public ApplicantProfileAddress()
        {
            ApplicantProfileAddressPeriods = new List<ApplicantProfileAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileAddress.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileAddress;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileAddress).City == null
                || !(this as Entities.Common.TPDM.IApplicantProfileAddress).City.Equals(compareTo.City))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileAddress).PostalCode == null
                || !(this as Entities.Common.TPDM.IApplicantProfileAddress).PostalCode.Equals(compareTo.PostalCode))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileAddress).StreetNumberName == null
                || !(this as Entities.Common.TPDM.IApplicantProfileAddress).StreetNumberName.Equals(compareTo.StreetNumberName))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileAddress).AddressTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileAddress).AddressTypeDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileAddress).City != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileAddress).City.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileAddress).PostalCode != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileAddress).PostalCode.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileAddress).StateAbbreviationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileAddress).StateAbbreviationDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileAddress).StreetNumberName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                      'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantProfileAddressPeriod> _applicantProfileAddressPeriods;
        private ICollection<Entities.Common.TPDM.IApplicantProfileAddressPeriod> _applicantProfileAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<ApplicantProfileAddressPeriod> ApplicantProfileAddressPeriods
        {
            get { return _applicantProfileAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileAddressPeriod>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileAddressPeriod)e.Item).ApplicantProfileAddress = this);
                _applicantProfileAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileAddressPeriod, ApplicantProfileAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileAddressPeriod)e.Item).ApplicantProfileAddress = this;
                _applicantProfileAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileAddressPeriod> Entities.Common.TPDM.IApplicantProfileAddress.ApplicantProfileAddressPeriods
        {
            get { return _applicantProfileAddressPeriodsCovariant; }
            set { ApplicantProfileAddressPeriods = new List<ApplicantProfileAddressPeriod>(value.Cast<ApplicantProfileAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantProfileAddressPeriods != null) foreach (var item in _applicantProfileAddressPeriods)
            {
                item.ApplicantProfileAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileAddressMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileAddressMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsApplicantProfileAddressPeriodsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsLatitudeSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsLongitudeSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsNameOfCountySupported                    { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IApplicantProfileAddressPeriod, bool> Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsApplicantProfileAddressPeriodIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var applicantProfileAddressPeriodsValidator = new ApplicantProfileAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileAddressPeriods)
            {
                var validationResult = applicantProfileAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileAddressPeriod table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileAddressPeriod : Entities.Common.TPDM.IApplicantProfileAddressPeriod, Entities.Common.TPDM.IApplicantProfileAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfileAddress _applicantProfileAddress;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfileAddress Entities.Common.TPDM.IApplicantProfileAddressPeriod.ApplicantProfileAddress
        {
            get { return _applicantProfileAddress; }
            set { SetApplicantProfileAddress(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfileAddress ApplicantProfileAddress
        {
            set { SetApplicantProfileAddress(value); }
        }

        private void SetApplicantProfileAddress(Entities.Common.TPDM.IApplicantProfileAddress value)
        {
            _applicantProfileAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileAddressPeriod;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfileAddress == null || !_applicantProfileAddress.Equals(compareTo.ApplicantProfileAddress))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileAddressPeriod).BeginDate == null
                || !(this as Entities.Common.TPDM.IApplicantProfileAddressPeriod).BeginDate.Equals(compareTo.BeginDate))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfileAddress != null)
                    hash = hash * 23 + _applicantProfileAddress.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileAddressPeriod).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileAddressPeriodMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileApplicantCharacteristic table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileApplicantCharacteristic : Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The characteristic designated for the Student.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="studentCharacteristicDescriptor"), NaturalKeyMember]
        public string StudentCharacteristicDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic).StudentCharacteristicDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic).StudentCharacteristicDescriptor.Equals(compareTo.StudentCharacteristicDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic).StudentCharacteristicDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic).StudentCharacteristicDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the characteristic was designated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the characteristic.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the characteristic was removed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileApplicantCharacteristicMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileApplicantCharacteristicMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport.IsBeginDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport.IsEndDateSupported       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileApplicantCharacteristicPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileApplicantCharacteristic>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileApplicantCharacteristic> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileBackgroundCheck table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileBackgroundCheck : Entities.Common.TPDM.IApplicantProfileBackgroundCheck, Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileBackgroundCheck.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The type of background check (e.g., online, criminal, employment).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="backgroundCheckTypeDescriptor"), NaturalKeyMember]
        public string BackgroundCheckTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileBackgroundCheck;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileBackgroundCheck).BackgroundCheckTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileBackgroundCheck).BackgroundCheckTypeDescriptor.Equals(compareTo.BackgroundCheckTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileBackgroundCheck).BackgroundCheckTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileBackgroundCheck).BackgroundCheckTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the background check was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckCompletedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BackgroundCheckCompletedDate { get; set; }

        /// <summary>
        /// The date the background check was requested.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckRequestedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BackgroundCheckRequestedDate { get; set; }

        /// <summary>
        /// The status of the background check (e.g., pending, under investigation, offense(s) found, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="backgroundCheckStatusDescriptor")]
        public string BackgroundCheckStatusDescriptor { get; set; }

        /// <summary>
        /// Indicates that a person has or has not completed a fingerprint.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fingerprint")]
        public bool? Fingerprint { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileBackgroundCheckMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileBackgroundCheckMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileBackgroundCheck)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported                      { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileBackgroundCheckPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileBackgroundCheck>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileBackgroundCheck> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileDisability table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileDisability : Entities.Common.TPDM.IApplicantProfileDisability, Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public ApplicantProfileDisability()
        {
            ApplicantProfileDisabilityDesignations = new List<ApplicantProfileDisabilityDesignation>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileDisability.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// A disability category that describes a child's impairment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDescriptor"), NaturalKeyMember]
        public string DisabilityDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileDisability;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileDisability).DisabilityDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileDisability).DisabilityDescriptor.Equals(compareTo.DisabilityDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileDisability).DisabilityDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileDisability).DisabilityDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDeterminationSourceTypeDescriptor")]
        public string DisabilityDeterminationSourceTypeDescriptor { get; set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDiagnosis")]
        public string DisabilityDiagnosis { get; set; }

        /// <summary>
        /// The order by severity of student's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfDisability")]
        public int? OrderOfDisability { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantProfileDisabilityDesignation> _applicantProfileDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation> _applicantProfileDisabilityDesignationsCovariant;

        [DataMember(Name="designations"), NoDuplicateMembers]
        public ICollection<ApplicantProfileDisabilityDesignation> ApplicantProfileDisabilityDesignations
        {
            get { return _applicantProfileDisabilityDesignations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileDisabilityDesignation>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileDisabilityDesignation)e.Item).ApplicantProfileDisability = this);
                _applicantProfileDisabilityDesignations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, ApplicantProfileDisabilityDesignation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileDisabilityDesignation)e.Item).ApplicantProfileDisability = this;
                _applicantProfileDisabilityDesignationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation> Entities.Common.TPDM.IApplicantProfileDisability.ApplicantProfileDisabilityDesignations
        {
            get { return _applicantProfileDisabilityDesignationsCovariant; }
            set { ApplicantProfileDisabilityDesignations = new List<ApplicantProfileDisabilityDesignation>(value.Cast<ApplicantProfileDisabilityDesignation>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantProfileDisabilityDesignations != null) foreach (var item in _applicantProfileDisabilityDesignations)
            {
                item.ApplicantProfileDisability = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileDisabilityMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileDisability)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileDisabilityMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileDisability)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsApplicantProfileDisabilityDesignationsSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported                            { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, bool> Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsApplicantProfileDisabilityDesignationIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileDisabilityPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileDisability>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileDisability> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var applicantProfileDisabilityDesignationsValidator = new ApplicantProfileDisabilityDesignationPutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileDisabilityDesignations)
            {
                var validationResult = applicantProfileDisabilityDesignationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileDisabilityDesignation table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileDisabilityDesignation : Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, Entities.Common.TPDM.IApplicantProfileDisabilityDesignationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfileDisability _applicantProfileDisability;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfileDisability Entities.Common.TPDM.IApplicantProfileDisabilityDesignation.ApplicantProfileDisability
        {
            get { return _applicantProfileDisability; }
            set { SetApplicantProfileDisability(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfileDisability ApplicantProfileDisability
        {
            set { SetApplicantProfileDisability(value); }
        }

        private void SetApplicantProfileDisability(Entities.Common.TPDM.IApplicantProfileDisability value)
        {
            _applicantProfileDisability = value;
        }

        /// <summary>
        /// Whether the disability is IDEA, Section 504, or other disability designation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDesignationDescriptor"), NaturalKeyMember]
        public string DisabilityDesignationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileDisabilityDesignation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfileDisability == null || !_applicantProfileDisability.Equals(compareTo.ApplicantProfileDisability))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileDisabilityDesignation).DisabilityDesignationDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileDisabilityDesignation).DisabilityDesignationDescriptor.Equals(compareTo.DisabilityDesignationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfileDisability != null)
                    hash = hash * 23 + _applicantProfileDisability.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileDisabilityDesignation).DisabilityDesignationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileDisabilityDesignation).DisabilityDesignationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileDisabilityDesignationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileDisabilityDesignationMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileDisabilityDesignation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileDisabilityDesignationPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileDisabilityDesignation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileDisabilityDesignation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileEducatorPreparationProgramName table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileEducatorPreparationProgramName : Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The Teacher Preparation Program(s) completed by the teacher.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educatorPreparationProgramName"), NaturalKeyMember]
        public string EducatorPreparationProgramName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName).EducatorPreparationProgramName == null
                || !(this as Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName).EducatorPreparationProgramName.Equals(compareTo.EducatorPreparationProgramName))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName).EducatorPreparationProgramName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName).EducatorPreparationProgramName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileEducatorPreparationProgramNameMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileEducatorPreparationProgramNameMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileEducatorPreparationProgramNamePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileEducatorPreparationProgramName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileEducatorPreparationProgramName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileElectronicMail table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileElectronicMail : Entities.Common.TPDM.IApplicantProfileElectronicMail, Entities.Common.TPDM.IApplicantProfileElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileElectronicMail.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileElectronicMail;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailAddress != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailAddress.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileElectronicMailMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileElectronicMailMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileGradePointAverage table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileGradePointAverage : Entities.Common.TPDM.IApplicantProfileGradePointAverage, Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileGradePointAverage.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The system used for calculating the grade point average for an individual.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradePointAverageTypeDescriptor"), NaturalKeyMember]
        public string GradePointAverageTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileGradePointAverage;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileGradePointAverage).GradePointAverageTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileGradePointAverage).GradePointAverageTypeDescriptor.Equals(compareTo.GradePointAverageTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileGradePointAverage).GradePointAverageTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileGradePointAverage).GradePointAverageTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The value of the grade points earned divided by the number of credits attempted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="gradePointAverageValue")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal GradePointAverageValue { get; set; }

        /// <summary>
        /// Indicator of whether or not the Grade Point Average value is cumulative.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isCumulative")]
        public bool? IsCumulative { get; set; }

        /// <summary>
        /// The maximum value for the grade point average.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxGradePointAverageValue")][Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public decimal? MaxGradePointAverageValue { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileGradePointAverageMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileGradePointAverage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileGradePointAverageMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileGradePointAverage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport.IsGradePointAverageValueSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport.IsIsCumulativeSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport.IsMaxGradePointAverageValueSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileGradePointAveragePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileGradePointAverage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileGradePointAverage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileHighlyQualifiedAcademicSubject table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileHighlyQualifiedAcademicSubject : Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The academic subject(s) in which the staff is deemed to be \"highly qualified\".
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor.Equals(compareTo.AcademicSubjectDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileHighlyQualifiedAcademicSubjectMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileHighlyQualifiedAcademicSubjectMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileHighlyQualifiedAcademicSubjectPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileHighlyQualifiedAcademicSubject>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileHighlyQualifiedAcademicSubject> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileIdentificationDocument table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileIdentificationDocument : Entities.Common.TPDM.IApplicantProfileIdentificationDocument, Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileIdentificationDocument.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileIdentificationDocument;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).IdentificationDocumentUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).PersonalInformationVerificationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileIdentificationDocumentMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileInternationalAddress table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileInternationalAddress : Entities.Common.TPDM.IApplicantProfileInternationalAddress, Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileInternationalAddress.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileInternationalAddress;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileInternationalAddress).AddressTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileInternationalAddressMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileLanguage table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileLanguage : Entities.Common.TPDM.IApplicantProfileLanguage, Entities.Common.TPDM.IApplicantProfileLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public ApplicantProfileLanguage()
        {
            ApplicantProfileLanguageUses = new List<ApplicantProfileLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileLanguage.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileLanguage;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileLanguage).LanguageDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantProfileLanguageUse> _applicantProfileLanguageUses;
        private ICollection<Entities.Common.TPDM.IApplicantProfileLanguageUse> _applicantProfileLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<ApplicantProfileLanguageUse> ApplicantProfileLanguageUses
        {
            get { return _applicantProfileLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantProfileLanguageUse>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicantProfileLanguageUse)e.Item).ApplicantProfileLanguage = this);
                _applicantProfileLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicantProfileLanguageUse, ApplicantProfileLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicantProfileLanguageUse)e.Item).ApplicantProfileLanguage = this;
                _applicantProfileLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileLanguageUse> Entities.Common.TPDM.IApplicantProfileLanguage.ApplicantProfileLanguageUses
        {
            get { return _applicantProfileLanguageUsesCovariant; }
            set { ApplicantProfileLanguageUses = new List<ApplicantProfileLanguageUse>(value.Cast<ApplicantProfileLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantProfileLanguageUses != null) foreach (var item in _applicantProfileLanguageUses)
            {
                item.ApplicantProfileLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileLanguageMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileLanguageMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileLanguageSynchronizationSourceSupport.IsApplicantProfileLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IApplicantProfileLanguageUse, bool> Entities.Common.TPDM.IApplicantProfileLanguageSynchronizationSourceSupport.IsApplicantProfileLanguageUseIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var applicantProfileLanguageUsesValidator = new ApplicantProfileLanguageUsePutPostRequestValidator();

            foreach (var item in instance.ApplicantProfileLanguageUses)
            {
                var validationResult = applicantProfileLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileLanguageUse table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileLanguageUse : Entities.Common.TPDM.IApplicantProfileLanguageUse, Entities.Common.TPDM.IApplicantProfileLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfileLanguage _applicantProfileLanguage;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfileLanguage Entities.Common.TPDM.IApplicantProfileLanguageUse.ApplicantProfileLanguage
        {
            get { return _applicantProfileLanguage; }
            set { SetApplicantProfileLanguage(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfileLanguage ApplicantProfileLanguage
        {
            set { SetApplicantProfileLanguage(value); }
        }

        private void SetApplicantProfileLanguage(Entities.Common.TPDM.IApplicantProfileLanguage value)
        {
            _applicantProfileLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileLanguageUse;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfileLanguage == null || !_applicantProfileLanguage.Equals(compareTo.ApplicantProfileLanguage))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfileLanguage != null)
                    hash = hash * 23 + _applicantProfileLanguage.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileLanguageUse).LanguageUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileLanguageUseMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileLanguageUseMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfilePersonalIdentificationDocument table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfilePersonalIdentificationDocument : Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfilePersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfilePersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfilePersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfilePersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfilePersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileRace table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileRace : Entities.Common.TPDM.IApplicantProfileRace, Entities.Common.TPDM.IApplicantProfileRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileRace.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileRace;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileRace).RaceDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileRace).RaceDescriptor.Equals(compareTo.RaceDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileRace).RaceDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileRaceMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileRaceMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileRacePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileTelephone table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileTelephone : Entities.Common.TPDM.IApplicantProfileTelephone, Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileTelephone.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileTelephone;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumber == null
                || !(this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumber != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumber.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumberTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileTelephoneMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileTelephoneMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileVisa table of the ApplicantProfile aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileVisa : Entities.Common.TPDM.IApplicantProfileVisa, Entities.Common.TPDM.IApplicantProfileVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplicantProfile _applicantProfile;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplicantProfile Entities.Common.TPDM.IApplicantProfileVisa.ApplicantProfile
        {
            get { return _applicantProfile; }
            set { SetApplicantProfile(value); }
        }

        internal Entities.Common.TPDM.IApplicantProfile ApplicantProfile
        {
            set { SetApplicantProfile(value); }
        }

        private void SetApplicantProfile(Entities.Common.TPDM.IApplicantProfile value)
        {
            _applicantProfile = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicantProfileVisa;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_applicantProfile == null || !_applicantProfile.Equals(compareTo.ApplicantProfile))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicantProfileVisa).VisaDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicantProfileVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicantProfile != null)
                    hash = hash * 23 + _applicantProfile.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicantProfileVisa).VisaDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicantProfileVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicantProfileVisaMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicantProfileVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicantProfileVisaMapper.MapTo(this, (Entities.Common.TPDM.IApplicantProfileVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantProfileVisaPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantProfileVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantProfileVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Application

namespace EdFi.Ods.Api.Common.Models.Resources.Application.TPDM
{
    /// <summary>
    /// Represents a reference to the Application resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationReference
    {
        [DataMember(Name="applicantProfileIdentifier"), NaturalKeyMember]
        public string ApplicantProfileIdentifier { get; set; }

        [DataMember(Name="applicationIdentifier"), NaturalKeyMember]
        public string ApplicationIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantProfileIdentifier != default(string) && ApplicationIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Application",
                Href = $"/tpdm/applications/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Application table of the Application aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Application : Entities.Common.TPDM.IApplication, IHasETag, Entities.Common.TPDM.IApplicationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Application()
        {
            ApplicationRecruitmentEventAttendances = new List<ApplicationRecruitmentEventAttendance>();
            ApplicationScoreResults = new List<ApplicationScoreResult>();
            ApplicationTerms = new List<ApplicationTerm>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Application resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _applicantProfileReferenceExplicitlyAssigned;
        private ApplicantProfile.TPDM.ApplicantProfileReference _applicantProfileReference;
        private ApplicantProfile.TPDM.ApplicantProfileReference ImplicitApplicantProfileReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_applicantProfileReference == null && !_applicantProfileReferenceExplicitlyAssigned)
                    _applicantProfileReference = new ApplicantProfile.TPDM.ApplicantProfileReference();

                return _applicantProfileReference;
            }
        }

        [DataMember(Name="applicantProfileReference")][NaturalKeyMember]
        public ApplicantProfile.TPDM.ApplicantProfileReference ApplicantProfileReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitApplicantProfileReference != null
                    && (_applicantProfileReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitApplicantProfileReference.IsReferenceFullyDefined()))
                    return ImplicitApplicantProfileReference;

                return null;
            }
            set
            {
                _applicantProfileReferenceExplicitlyAssigned = true;
                _applicantProfileReference = value;
            }
        }
        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _openStaffPositionReferenceExplicitlyAssigned;
        private OpenStaffPosition.EdFi.OpenStaffPositionReference _openStaffPositionReference;
        private OpenStaffPosition.EdFi.OpenStaffPositionReference ImplicitOpenStaffPositionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_openStaffPositionReference == null && !_openStaffPositionReferenceExplicitlyAssigned)
                    _openStaffPositionReference = new OpenStaffPosition.EdFi.OpenStaffPositionReference();

                return _openStaffPositionReference;
            }
        }

        [DataMember(Name="openStaffPositionReference")]
        public OpenStaffPosition.EdFi.OpenStaffPositionReference OpenStaffPositionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitOpenStaffPositionReference != null
                    && (_openStaffPositionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    return ImplicitOpenStaffPositionReference;

                return null;
            }
            set
            {
                _openStaffPositionReferenceExplicitlyAssigned = true;
                _openStaffPositionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier assigned to a person making formal application for entrance into a program or an open staff position.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IApplication.ApplicantProfileIdentifier
        {
            get
            {
                if (ImplicitApplicantProfileReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicantProfileReference.IsReferenceFullyDefined()))
                    return ImplicitApplicantProfileReference.ApplicantProfileIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ApplicantProfile
                _applicantProfileReferenceExplicitlyAssigned = false;
                ImplicitApplicantProfileReference.ApplicantProfileIdentifier = value;
            }
        }

        /// <summary>
        /// Identifier assigned to the application for a candidate or open staff position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationIdentifier"), NaturalKeyMember]
        public string ApplicationIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IApplication.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;

                // OpenStaffPosition
                _openStaffPositionReferenceExplicitlyAssigned = false;
                ImplicitOpenStaffPositionReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplication;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplication).ApplicantProfileIdentifier == null
                || !(this as Entities.Common.TPDM.IApplication).ApplicantProfileIdentifier.Equals(compareTo.ApplicantProfileIdentifier))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplication).ApplicationIdentifier == null
                || !(this as Entities.Common.TPDM.IApplication).ApplicationIdentifier.Equals(compareTo.ApplicationIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplication).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IApplication).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplication).ApplicantProfileIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplication).ApplicantProfileIdentifier.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplication).ApplicationIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplication).ApplicationIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplication).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplication).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The academic subject for which the application is made.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The date of acceptance, if offered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="acceptedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? AcceptedDate { get; set; }

        /// <summary>
        /// The month, day, and year the application was submitted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime ApplicationDate { get; set; }

        /// <summary>
        /// Specifies the source for the application (e.g., Job fair, website, referral).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="applicationSourceDescriptor")]
        public string ApplicationSourceDescriptor { get; set; }

        /// <summary>
        /// Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="applicationStatusDescriptor")]
        public string ApplicationStatusDescriptor { get; set; }

        /// <summary>
        /// Indicator as to whether the applicant is a current employee of the school district.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="currentEmployee")]
        public bool? CurrentEmployee { get; set; }

        /// <summary>
        /// Date applicant was first contacted after submitting application.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstContactDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstContactDate { get; set; }

        /// <summary>
        /// The high need academic subject for the application, if any.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highNeedsAcademicSubjectDescriptor")]
        public string HighNeedsAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="hireStatusDescriptor")]
        public string HireStatusDescriptor { get; set; }

        /// <summary>
        /// The source for the application (e.g.,job fair, website, referral, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="hiringSourceDescriptor")]
        public string HiringSourceDescriptor { get; set; }

        /// <summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IApplication.RequisitionNumber
        {
            get
            {
                if (ImplicitOpenStaffPositionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitOpenStaffPositionReference.RequisitionNumber;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // OpenStaffPosition
                _openStaffPositionReferenceExplicitlyAssigned = false;
                ImplicitOpenStaffPositionReference.RequisitionNumber = value;
            }
        }

        /// <summary>
        /// The date the application was withdrawn by the applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="withdrawDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? WithdrawDate { get; set; }

        /// <summary>
        /// Reason applicant withdrew application.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="withdrawReasonDescriptor")]
        public string WithdrawReasonDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicationRecruitmentEventAttendance> _applicationRecruitmentEventAttendances;
        private ICollection<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance> _applicationRecruitmentEventAttendancesCovariant;

        [DataMember(Name="recruitmentEventAttendances"), NoDuplicateMembers]
        public ICollection<ApplicationRecruitmentEventAttendance> ApplicationRecruitmentEventAttendances
        {
            get { return _applicationRecruitmentEventAttendances; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicationRecruitmentEventAttendance>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicationRecruitmentEventAttendance)e.Item).Application = this);
                _applicationRecruitmentEventAttendances = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, ApplicationRecruitmentEventAttendance>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicationRecruitmentEventAttendance)e.Item).Application = this;
                _applicationRecruitmentEventAttendancesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance> Entities.Common.TPDM.IApplication.ApplicationRecruitmentEventAttendances
        {
            get { return _applicationRecruitmentEventAttendancesCovariant; }
            set { ApplicationRecruitmentEventAttendances = new List<ApplicationRecruitmentEventAttendance>(value.Cast<ApplicationRecruitmentEventAttendance>()); }
        }

        private ICollection<ApplicationScoreResult> _applicationScoreResults;
        private ICollection<Entities.Common.TPDM.IApplicationScoreResult> _applicationScoreResultsCovariant;

        [DataMember(Name="scoreResults"), NoDuplicateMembers]
        public ICollection<ApplicationScoreResult> ApplicationScoreResults
        {
            get { return _applicationScoreResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicationScoreResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicationScoreResult)e.Item).Application = this);
                _applicationScoreResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicationScoreResult, ApplicationScoreResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicationScoreResult)e.Item).Application = this;
                _applicationScoreResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationScoreResult> Entities.Common.TPDM.IApplication.ApplicationScoreResults
        {
            get { return _applicationScoreResultsCovariant; }
            set { ApplicationScoreResults = new List<ApplicationScoreResult>(value.Cast<ApplicationScoreResult>()); }
        }

        private ICollection<ApplicationTerm> _applicationTerms;
        private ICollection<Entities.Common.TPDM.IApplicationTerm> _applicationTermsCovariant;

        [DataMember(Name="terms"), NoDuplicateMembers]
        public ICollection<ApplicationTerm> ApplicationTerms
        {
            get { return _applicationTerms; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicationTerm>(value,
                    (s, e) => ((Entities.Common.TPDM.IApplicationTerm)e.Item).Application = this);
                _applicationTerms = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IApplicationTerm, ApplicationTerm>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IApplicationTerm)e.Item).Application = this;
                _applicationTermsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationTerm> Entities.Common.TPDM.IApplication.ApplicationTerms
        {
            get { return _applicationTermsCovariant; }
            set { ApplicationTerms = new List<ApplicationTerm>(value.Cast<ApplicationTerm>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicationRecruitmentEventAttendances != null) foreach (var item in _applicationRecruitmentEventAttendances)
            {
                item.Application = this;
            }

            if (_applicationScoreResults != null) foreach (var item in _applicationScoreResults)
            {
                item.Application = this;
            }

            if (_applicationTerms != null) foreach (var item in _applicationTerms)
            {
                item.Application = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplication)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationMapper.MapTo(this, (Entities.Common.TPDM.IApplication)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsAcceptedDateSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationDateSupported                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationRecruitmentEventAttendancesSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationScoreResultsSupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationSourceDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationStatusDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationTermsSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsCurrentEmployeeSupported                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsFirstContactDateSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHighNeedsAcademicSubjectDescriptorSupported      { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHireStatusDescriptorSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHiringSourceDescriptorSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsRequisitionNumberSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsWithdrawDateSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsWithdrawReasonDescriptorSupported                { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationRecruitmentEventAttendanceIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicationScoreResult, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationScoreResultIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IApplicationTerm, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationTermIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IApplication.ApplicantProfileResourceId
        {
            get { return null; }
            set { ImplicitApplicantProfileReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IApplication.ApplicantProfileDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitApplicantProfileReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IApplication.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IApplication.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IApplication.OpenStaffPositionResourceId
        {
            get { return null; }
            set { ImplicitOpenStaffPositionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IApplication.OpenStaffPositionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitOpenStaffPositionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationPutPostRequestValidator : FluentValidation.AbstractValidator<Application>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Application> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'Application' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, int>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEducationOrganizationReference = instance.EducationOrganizationReference?.EducationOrganizationId;

                if (valueFromEducationOrganizationReference != null)
                {
                    yield return Tuple.Create("educationOrganizationReference.educationOrganizationId", instance.EducationOrganizationReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromOpenStaffPositionReference = instance.OpenStaffPositionReference?.EducationOrganizationId;

                if (valueFromOpenStaffPositionReference != null)
                {
                    yield return Tuple.Create("openStaffPositionReference.educationOrganizationId", instance.OpenStaffPositionReference.EducationOrganizationId);
                }

            }

            // Recursively invoke the child collection item validators
            var applicationRecruitmentEventAttendancesValidator = new ApplicationRecruitmentEventAttendancePutPostRequestValidator();

            foreach (var item in instance.ApplicationRecruitmentEventAttendances)
            {
                var validationResult = applicationRecruitmentEventAttendancesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicationScoreResultsValidator = new ApplicationScoreResultPutPostRequestValidator();

            foreach (var item in instance.ApplicationScoreResults)
            {
                var validationResult = applicationScoreResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var applicationTermsValidator = new ApplicationTermPutPostRequestValidator();

            foreach (var item in instance.ApplicationTerms)
            {
                var validationResult = applicationTermsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// Represents a reference from the ApplicationRecruitmentEventAttendance entity to the RecruitmentEventAttendance resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference
    {
        private Entities.Common.TPDM.IApplicationRecruitmentEventAttendance backReference;

        // Parameterless constructor for deserialization
        public ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference() { }

        // Constructor for inline initialization in parent
        public ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference(Entities.Common.TPDM.IApplicationRecruitmentEventAttendance backReference)
        {
            this.backReference = backReference;
        }

        // Expose back reference internally for access after JSON deserialization to enable link generation
        internal Entities.Common.TPDM.IApplicationRecruitmentEventAttendance BackReference
        {
            get { return backReference; }
            set { backReference = value; }
        }

        private int _educationOrganizationId;

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId
        {
            get => _educationOrganizationId == default(int)
                    ? BackReference.Application.EducationOrganizationId
                    : _educationOrganizationId;
            set => _educationOrganizationId = value;
        }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="eventTitle"), NaturalKeyMember]
        public string EventTitle { get; set; }

        [DataMember(Name="recruitmentEventAttendeeIdentifier"), NaturalKeyMember]
        public string RecruitmentEventAttendeeIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the referenced resource's identifier (i.e. "id" property).
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when a resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }

        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Can't generate a link without the back reference
                    if (backReference == null)
                        return null;

                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EventDate != default(DateTime)
                && EventTitle != default(string)
                && RecruitmentEventAttendeeIdentifier != default(string)
                ;
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "RecruitmentEventAttendance",
                Href = $"/tpdm/recruitmentEventAttendances/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    }

    /// <summary>
    /// A class which represents the tpdm.ApplicationRecruitmentEventAttendance table of the Application aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationRecruitmentEventAttendance : Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, Entities.Common.TPDM.IApplicationRecruitmentEventAttendanceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _recruitmentEventAttendanceReferenceExplicitlyAssigned;
        private ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference _recruitmentEventAttendanceReference;
        private ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference ImplicitRecruitmentEventAttendanceReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_recruitmentEventAttendanceReference == null && !_recruitmentEventAttendanceReferenceExplicitlyAssigned)
                    _recruitmentEventAttendanceReference = new ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference(this);

                return _recruitmentEventAttendanceReference;
            }
        }

        [DataMember(Name="recruitmentEventAttendanceReference")][NaturalKeyMember]
        public ApplicationRecruitmentEventAttendanceToRecruitmentEventAttendanceReference RecruitmentEventAttendanceReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitRecruitmentEventAttendanceReference != null
                    && (_recruitmentEventAttendanceReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventAttendanceReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventAttendanceReference;

                return null;
            }
            set
            {
                _recruitmentEventAttendanceReferenceExplicitlyAssigned = true;
                _recruitmentEventAttendanceReference = value;
                _recruitmentEventAttendanceReference.BackReference = this;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplication _application;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplication Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.Application
        {
            get { return _application; }
            set { SetApplication(value); }
        }

        internal Entities.Common.TPDM.IApplication Application
        {
            set { SetApplication(value); }
        }

        private void SetApplication(Entities.Common.TPDM.IApplication value)
        {
            _application = value;

            // Initialize unified key values from parent context when reference is being formed by outbound mapper
            if (!_recruitmentEventAttendanceReferenceExplicitlyAssigned)
            {
                ImplicitRecruitmentEventAttendanceReference.EducationOrganizationId = _application.EducationOrganizationId;
            }
        }

        /// <summary>
        /// The date of the event.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.EventDate
        {
            get
            {
                if (ImplicitRecruitmentEventAttendanceReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventAttendanceReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventAttendanceReference.EventDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // RecruitmentEventAttendance
                _recruitmentEventAttendanceReferenceExplicitlyAssigned = false;
                ImplicitRecruitmentEventAttendanceReference.EventDate = value;
            }
        }

        /// <summary>
        /// The title of the event.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.EventTitle
        {
            get
            {
                if (ImplicitRecruitmentEventAttendanceReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventAttendanceReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventAttendanceReference.EventTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // RecruitmentEventAttendance
                _recruitmentEventAttendanceReferenceExplicitlyAssigned = false;
                ImplicitRecruitmentEventAttendanceReference.EventTitle = value;
            }
        }

        /// <summary>
        /// The identifier for the attendee to a recuitment event.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.RecruitmentEventAttendeeIdentifier
        {
            get
            {
                if (ImplicitRecruitmentEventAttendanceReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventAttendanceReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventAttendanceReference.RecruitmentEventAttendeeIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // RecruitmentEventAttendance
                _recruitmentEventAttendanceReferenceExplicitlyAssigned = false;
                ImplicitRecruitmentEventAttendanceReference.RecruitmentEventAttendeeIdentifier = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_application == null || !_application.Equals(compareTo.Application))
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventDate == null
                || !(this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventDate.Equals(compareTo.EventDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventTitle == null
                || !(this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventTitle.Equals(compareTo.EventTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier == null
                || !(this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier.Equals(compareTo.RecruitmentEventAttendeeIdentifier))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_application != null)
                    hash = hash * 23 + _application.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).EventTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_recruitmentEventAttendanceReference != null)
                _recruitmentEventAttendanceReference.BackReference = this;
        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationRecruitmentEventAttendanceMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationRecruitmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationRecruitmentEventAttendanceMapper.MapTo(this, (Entities.Common.TPDM.IApplicationRecruitmentEventAttendance)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.RecruitmentEventAttendanceResourceId
        {
            get { return null; }
            set { ImplicitRecruitmentEventAttendanceReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.RecruitmentEventAttendanceDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitRecruitmentEventAttendanceReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationRecruitmentEventAttendancePutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationRecruitmentEventAttendance>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationRecruitmentEventAttendance> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'ApplicationRecruitmentEventAttendance' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, int>> GetEducationOrganizationIdSources()
            {
                // Obtain value from the parent
                yield return Tuple.Create("educationOrganizationId (from parent context)", (instance as Entities.Common.TPDM.IApplicationRecruitmentEventAttendance).Application.EducationOrganizationId);

                // Obtain value from other references
                var valueFromRecruitmentEventAttendanceReference = instance.RecruitmentEventAttendanceReference?.EducationOrganizationId;

                if (valueFromRecruitmentEventAttendanceReference != null)
                {
                    yield return Tuple.Create("recruitmentEventAttendanceReference.educationOrganizationId", instance.RecruitmentEventAttendanceReference.EducationOrganizationId);
                }

            }

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicationScoreResult table of the Application aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationScoreResult : Entities.Common.TPDM.IApplicationScoreResult, Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplication _application;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplication Entities.Common.TPDM.IApplicationScoreResult.Application
        {
            get { return _application; }
            set { SetApplication(value); }
        }

        internal Entities.Common.TPDM.IApplication Application
        {
            set { SetApplication(value); }
        }

        private void SetApplication(Entities.Common.TPDM.IApplication value)
        {
            _application = value;
        }

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="assessmentReportingMethodDescriptor"), NaturalKeyMember]
        public string AssessmentReportingMethodDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationScoreResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_application == null || !_application.Equals(compareTo.Application))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicationScoreResult).AssessmentReportingMethodDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicationScoreResult).AssessmentReportingMethodDescriptor.Equals(compareTo.AssessmentReportingMethodDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_application != null)
                    hash = hash * 23 + _application.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicationScoreResult).AssessmentReportingMethodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationScoreResult).AssessmentReportingMethodDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="result")]
        public string Result { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationScoreResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationScoreResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationScoreResultMapper.MapTo(this, (Entities.Common.TPDM.IApplicationScoreResult)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport.IsResultSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationScoreResultPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationScoreResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationScoreResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.ApplicationTerm table of the Application aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationTerm : Entities.Common.TPDM.IApplicationTerm, Entities.Common.TPDM.IApplicationTermSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IApplication _application;

        [IgnoreDataMember]
        Entities.Common.TPDM.IApplication Entities.Common.TPDM.IApplicationTerm.Application
        {
            get { return _application; }
            set { SetApplication(value); }
        }

        internal Entities.Common.TPDM.IApplication Application
        {
            set { SetApplication(value); }
        }

        private void SetApplication(Entities.Common.TPDM.IApplication value)
        {
            _application = value;
        }

        /// <summary>
        /// The intended term of enrollment for which the application is being submitted.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationTerm;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_application == null || !_application.Equals(compareTo.Application))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicationTerm).TermDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicationTerm).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_application != null)
                    hash = hash * 23 + _application.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicationTerm).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationTerm).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationTermMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationTerm)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationTermMapper.MapTo(this, (Entities.Common.TPDM.IApplicationTerm)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationTermPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationTerm>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationTerm> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ApplicationEvent

namespace EdFi.Ods.Api.Common.Models.Resources.ApplicationEvent.TPDM
{
    /// <summary>
    /// Represents a reference to the ApplicationEvent resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventReference
    {
        [DataMember(Name="applicantProfileIdentifier"), NaturalKeyMember]
        public string ApplicantProfileIdentifier { get; set; }

        [DataMember(Name="applicationEventTypeDescriptor"), NaturalKeyMember]
        public string ApplicationEventTypeDescriptor { get; set; }

        [DataMember(Name="applicationIdentifier"), NaturalKeyMember]
        public string ApplicationIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="sequenceNumber"), NaturalKeyMember]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantProfileIdentifier != default(string) && ApplicationEventTypeDescriptor != default(string) && ApplicationIdentifier != default(string) && EducationOrganizationId != default(int) && EventDate != default(DateTime) && SequenceNumber != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "ApplicationEvent",
                Href = $"/tpdm/applicationEvents/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.ApplicationEvent table of the ApplicationEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationEvent : Entities.Common.TPDM.IApplicationEvent, IHasETag, Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ApplicationEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _applicationReferenceExplicitlyAssigned;
        private Application.TPDM.ApplicationReference _applicationReference;
        private Application.TPDM.ApplicationReference ImplicitApplicationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_applicationReference == null && !_applicationReferenceExplicitlyAssigned)
                    _applicationReference = new Application.TPDM.ApplicationReference();

                return _applicationReference;
            }
        }

        [DataMember(Name="applicationReference")][NaturalKeyMember]
        public Application.TPDM.ApplicationReference ApplicationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitApplicationReference != null
                    && (_applicationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    return ImplicitApplicationReference;

                return null;
            }
            set
            {
                _applicationReferenceExplicitlyAssigned = true;
                _applicationReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.EdFi.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.EdFi.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.EdFi.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")]
        public SchoolYearType.EdFi.SchoolYearTypeReference SchoolYearTypeReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set
            {
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier assigned to a person making formal application for entrance into a program or an open staff position.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IApplicationEvent.ApplicantProfileIdentifier
        {
            get
            {
                if (ImplicitApplicationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    return ImplicitApplicationReference.ApplicantProfileIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Application
                _applicationReferenceExplicitlyAssigned = false;
                ImplicitApplicationReference.ApplicantProfileIdentifier = value;
            }
        }

        /// <summary>
        /// Description of application event (e.g., added to pool, phone screen, interview, sample lesson).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="applicationEventTypeDescriptor"), NaturalKeyMember]
        public string ApplicationEventTypeDescriptor { get; set; }

        /// <summary>
        /// Identifier assigned to the application for a candidate or open staff position.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IApplicationEvent.ApplicationIdentifier
        {
            get
            {
                if (ImplicitApplicationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    return ImplicitApplicationReference.ApplicationIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Application
                _applicationReferenceExplicitlyAssigned = false;
                ImplicitApplicationReference.ApplicationIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IApplicationEvent.EducationOrganizationId
        {
            get
            {
                if (ImplicitApplicationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    return ImplicitApplicationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Application
                _applicationReferenceExplicitlyAssigned = false;
                ImplicitApplicationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date of the application event, or begin date if an interval.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The sequence number of the application events. This is used to discriminate between mutiple events of the same type in the same day.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sequenceNumber"), NaturalKeyMember]
        public int SequenceNumber { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationEvent;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplicationEvent).ApplicantProfileIdentifier == null
                || !(this as Entities.Common.TPDM.IApplicationEvent).ApplicantProfileIdentifier.Equals(compareTo.ApplicantProfileIdentifier))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicationEvent).ApplicationEventTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IApplicationEvent).ApplicationEventTypeDescriptor.Equals(compareTo.ApplicationEventTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplicationEvent).ApplicationIdentifier == null
                || !(this as Entities.Common.TPDM.IApplicationEvent).ApplicationIdentifier.Equals(compareTo.ApplicationIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IApplicationEvent).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IApplicationEvent).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicationEvent).EventDate == null
                || !(this as Entities.Common.TPDM.IApplicationEvent).EventDate.Equals(compareTo.EventDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IApplicationEvent).SequenceNumber == null
                || !(this as Entities.Common.TPDM.IApplicationEvent).SequenceNumber.Equals(compareTo.SequenceNumber))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplicationEvent).ApplicantProfileIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEvent).ApplicantProfileIdentifier.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicationEvent).ApplicationEventTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEvent).ApplicationEventTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplicationEvent).ApplicationIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEvent).ApplicationIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IApplicationEvent).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEvent).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicationEvent).EventDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEvent).EventDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IApplicationEvent).SequenceNumber != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEvent).SequenceNumber.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Application evaluation score, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationEvaluationScore")][Range(typeof(decimal), "-999999999999999999.999999999999999999", "999999999999999999.999999999999999999")]
        public decimal? ApplicationEvaluationScore { get; set; }

        /// <summary>
        /// The recommendation, result or conclusion of the application event (e.g., Continue, exit, recommend for hire).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="applicationEventResultDescriptor")]
        public string ApplicationEventResultDescriptor { get; set; }

        /// <summary>
        /// The end date of the event, if an interval.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EventEndDate { get; set; }

        /// <summary>
        /// Identifier for a school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IApplicationEvent.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSchoolYearTypeReference.SchoolYear;
                    }

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the term of a session during the school year (e.g., Fall Semester).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor")]
        public string TermDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationEventMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationEvent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationEventMapper.MapTo(this, (Entities.Common.TPDM.IApplicationEvent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsApplicationEvaluationScoreSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsApplicationEventResultDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsEventEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsSchoolYearSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsTermDescriptorSupported                    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IApplicationEvent.ApplicationResourceId
        {
            get { return null; }
            set { ImplicitApplicationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IApplicationEvent.ApplicationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitApplicationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IApplicationEvent.SchoolYearTypeResourceId
        {
            get { return null; }
            set { ImplicitSchoolYearTypeReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationEventPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationEvent>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationEvent> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ApplicationEventResultDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ApplicationEventResultDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ApplicationEventResultDescriptor table of the ApplicationEventResultDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventResultDescriptor : Entities.Common.TPDM.IApplicationEventResultDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ApplicationEventResultDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationEventResultDescriptorId"), NaturalKeyMember]
        public int ApplicationEventResultDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ApplicationEventResultDescriptorId; }
            set { ApplicationEventResultDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationEventResultDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IApplicationEventResultDescriptor).ApplicationEventResultDescriptorId == null
                || !(this as Entities.Common.TPDM.IApplicationEventResultDescriptor).ApplicationEventResultDescriptorId.Equals(compareTo.ApplicationEventResultDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IApplicationEventResultDescriptor).ApplicationEventResultDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEventResultDescriptor).ApplicationEventResultDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationEventResultDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationEventResultDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationEventResultDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IApplicationEventResultDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationEventResultDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationEventResultDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationEventResultDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ApplicationEventTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ApplicationEventTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ApplicationEventTypeDescriptor table of the ApplicationEventTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventTypeDescriptor : Entities.Common.TPDM.IApplicationEventTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ApplicationEventTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationEventTypeDescriptorId"), NaturalKeyMember]
        public int ApplicationEventTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ApplicationEventTypeDescriptorId; }
            set { ApplicationEventTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationEventTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IApplicationEventTypeDescriptor).ApplicationEventTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IApplicationEventTypeDescriptor).ApplicationEventTypeDescriptorId.Equals(compareTo.ApplicationEventTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IApplicationEventTypeDescriptor).ApplicationEventTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationEventTypeDescriptor).ApplicationEventTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationEventTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationEventTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IApplicationEventTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationEventTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationEventTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationEventTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ApplicationSourceDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ApplicationSourceDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ApplicationSourceDescriptor table of the ApplicationSourceDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationSourceDescriptor : Entities.Common.TPDM.IApplicationSourceDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ApplicationSourceDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationSourceDescriptorId"), NaturalKeyMember]
        public int ApplicationSourceDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ApplicationSourceDescriptorId; }
            set { ApplicationSourceDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationSourceDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IApplicationSourceDescriptor).ApplicationSourceDescriptorId == null
                || !(this as Entities.Common.TPDM.IApplicationSourceDescriptor).ApplicationSourceDescriptorId.Equals(compareTo.ApplicationSourceDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IApplicationSourceDescriptor).ApplicationSourceDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationSourceDescriptor).ApplicationSourceDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationSourceDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationSourceDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IApplicationSourceDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationSourceDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationSourceDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationSourceDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ApplicationStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ApplicationStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ApplicationStatusDescriptor table of the ApplicationStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicationStatusDescriptor : Entities.Common.TPDM.IApplicationStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ApplicationStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicationStatusDescriptorId"), NaturalKeyMember]
        public int ApplicationStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ApplicationStatusDescriptorId; }
            set { ApplicationStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IApplicationStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IApplicationStatusDescriptor).ApplicationStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.IApplicationStatusDescriptor).ApplicationStatusDescriptorId.Equals(compareTo.ApplicationStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IApplicationStatusDescriptor).ApplicationStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IApplicationStatusDescriptor).ApplicationStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ApplicationStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IApplicationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ApplicationStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IApplicationStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicationStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicationStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicationStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Assessment

namespace EdFi.Ods.Api.Common.Models.Resources.Assessment.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.AssessmentExtension table of the Assessment aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class AssessmentExtension : Entities.Common.TPDM.IAssessmentExtension, Entities.Common.TPDM.IAssessmentExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IAssessment _assessment;

        [IgnoreDataMember]
        Entities.Common.EdFi.IAssessment Entities.Common.TPDM.IAssessmentExtension.Assessment
        {
            get { return _assessment; }
            set { SetAssessment(value); }
        }

        internal Entities.Common.EdFi.IAssessment Assessment
        {
            set { SetAssessment(value); }
        }

        private void SetAssessment(Entities.Common.EdFi.IAssessment value)
        {
            _assessment = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IAssessmentExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_assessment == null || !_assessment.Equals(compareTo.Assessment))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_assessment != null)
                    hash = hash * 23 + _assessment.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Identifies the program gateway an assessment may be associated with for continuation in the program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programGatewayDescriptor")]
        public string ProgramGatewayDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.AssessmentExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IAssessmentExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.AssessmentExtensionMapper.MapTo(this, (Entities.Common.TPDM.IAssessmentExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IAssessmentExtensionSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class AssessmentExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<AssessmentExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<AssessmentExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: BackgroundCheckStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.BackgroundCheckStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.BackgroundCheckStatusDescriptor table of the BackgroundCheckStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class BackgroundCheckStatusDescriptor : Entities.Common.TPDM.IBackgroundCheckStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the BackgroundCheckStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckStatusDescriptorId"), NaturalKeyMember]
        public int BackgroundCheckStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return BackgroundCheckStatusDescriptorId; }
            set { BackgroundCheckStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IBackgroundCheckStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IBackgroundCheckStatusDescriptor).BackgroundCheckStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.IBackgroundCheckStatusDescriptor).BackgroundCheckStatusDescriptorId.Equals(compareTo.BackgroundCheckStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IBackgroundCheckStatusDescriptor).BackgroundCheckStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IBackgroundCheckStatusDescriptor).BackgroundCheckStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.BackgroundCheckStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IBackgroundCheckStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.BackgroundCheckStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IBackgroundCheckStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class BackgroundCheckStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<BackgroundCheckStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<BackgroundCheckStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: BackgroundCheckTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.BackgroundCheckTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.BackgroundCheckTypeDescriptor table of the BackgroundCheckTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class BackgroundCheckTypeDescriptor : Entities.Common.TPDM.IBackgroundCheckTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the BackgroundCheckTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckTypeDescriptorId"), NaturalKeyMember]
        public int BackgroundCheckTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return BackgroundCheckTypeDescriptorId; }
            set { BackgroundCheckTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IBackgroundCheckTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IBackgroundCheckTypeDescriptor).BackgroundCheckTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IBackgroundCheckTypeDescriptor).BackgroundCheckTypeDescriptorId.Equals(compareTo.BackgroundCheckTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IBackgroundCheckTypeDescriptor).BackgroundCheckTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IBackgroundCheckTypeDescriptor).BackgroundCheckTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.BackgroundCheckTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IBackgroundCheckTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.BackgroundCheckTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IBackgroundCheckTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class BackgroundCheckTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<BackgroundCheckTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<BackgroundCheckTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Candidate

namespace EdFi.Ods.Api.Common.Models.Resources.Candidate.TPDM
{
    /// <summary>
    /// Represents a reference to the Candidate resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateReference
    {
        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CandidateIdentifier != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Candidate",
                Href = $"/tpdm/candidates/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Candidate table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Candidate : Entities.Common.TPDM.ICandidate, IHasETag, Entities.Common.TPDM.ICandidateSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Candidate()
        {
            CandidateAddresses = new List<CandidateAddress>();
            CandidateAids = new List<CandidateAid>();
            CandidateCharacteristics = new List<CandidateCharacteristic>();
            CandidateCohortYears = new List<CandidateCohortYear>();
            CandidateDegreeSpecializations = new List<CandidateDegreeSpecialization>();
            CandidateDisabilities = new List<CandidateDisability>();
            CandidateElectronicMails = new List<CandidateElectronicMail>();
            CandidateEPPProgramDegrees = new List<CandidateEPPProgramDegree>();
            CandidateIdentificationCodes = new List<CandidateIdentificationCode>();
            CandidateIdentificationDocuments = new List<CandidateIdentificationDocument>();
            CandidateIndicators = new List<CandidateIndicator>();
            CandidateInternationalAddresses = new List<CandidateInternationalAddress>();
            CandidateLanguages = new List<CandidateLanguage>();
            CandidateOtherNames = new List<CandidateOtherName>();
            CandidatePersonalIdentificationDocuments = new List<CandidatePersonalIdentificationDocument>();
            CandidateRaces = new List<CandidateRace>();
            CandidateTelephones = new List<CandidateTelephone>();
            CandidateVisas = new List<CandidateVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Candidate resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _applicationReferenceExplicitlyAssigned;
        private Application.TPDM.ApplicationReference _applicationReference;
        private Application.TPDM.ApplicationReference ImplicitApplicationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_applicationReference == null && !_applicationReferenceExplicitlyAssigned)
                    _applicationReference = new Application.TPDM.ApplicationReference();

                return _applicationReference;
            }
        }

        [DataMember(Name="applicationReference")]
        public Application.TPDM.ApplicationReference ApplicationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitApplicationReference != null
                    && (_applicationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    return ImplicitApplicationReference;

                return null;
            }
            set
            {
                _applicationReferenceExplicitlyAssigned = true;
                _applicationReference = value;
            }
        }
        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a candidate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidate;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidate).CandidateIdentifier == null
                || !(this as Entities.Common.TPDM.ICandidate).CandidateIdentifier.Equals(compareTo.CandidateIdentifier))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidate).CandidateIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidate).CandidateIdentifier.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier assigned to a person making formal application for entrance into a program or an open staff position.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidate.ApplicantProfileIdentifier
        {
            get
            {
                if (ImplicitApplicationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitApplicationReference.ApplicantProfileIdentifier;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Application
                _applicationReferenceExplicitlyAssigned = false;
                ImplicitApplicationReference.ApplicantProfileIdentifier = value;
            }
        }

        /// <summary>
        /// Identifier assigned to the application for a candidate or open staff position.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidate.ApplicationIdentifier
        {
            get
            {
                if (ImplicitApplicationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitApplicationReference.ApplicationIdentifier;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Application
                _applicationReferenceExplicitlyAssigned = false;
                ImplicitApplicationReference.ApplicationIdentifier = value;
            }
        }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthCity")]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthCountryDescriptor")]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthInternationalProvince")]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person's gender at birth.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthSexDescriptor")]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthStateAbbreviationDescriptor")]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateEnteredUS")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="displacementStatus")]
        public string DisplacementStatus { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="economicDisadvantaged")]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.ICandidate.EducationOrganizationId
        {
            get
            {
                if (ImplicitApplicationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitApplicationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitApplicationReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Application
                _applicationReferenceExplicitlyAssigned = false;
                ImplicitApplicationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="englishLanguageExamDescriptor")]
        public string EnglishLanguageExamDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstGenerationStudent")]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="genderDescriptor")]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="limitedEnglishProficiencyDescriptor")]
        public string LimitedEnglishProficiencyDescriptor { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multipleBirthStatus")]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race: 1 - American Indian or Alaskan Native 2 - Asian or Pacific Islander 3 - Black, not of Hispanic origin 4 - Hispanic 5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidate.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// The career previous for an individual.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="previousCareerDescriptor")]
        public string PreviousCareerDescriptor { get; set; }

        /// <summary>
        /// Locator for the student photo.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="profileThumbnail")]
        public string ProfileThumbnail { get; set; }

        /// <summary>
        /// An indication of whether a candidate has completed the educator preparation program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programComplete")]
        public bool? ProgramComplete { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (Candidate.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICandidate.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The tuition for a person's participation in a program, service. or course.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tuitionCost")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal? TuitionCost { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// backgroundCheck
        /// </summary>
        [DataMember(Name = "backgroundCheck")]
        public CandidateBackgroundCheck CandidateBackgroundCheck { get; set; }

        Entities.Common.TPDM.ICandidateBackgroundCheck Entities.Common.TPDM.ICandidate.CandidateBackgroundCheck
        {
            get { return CandidateBackgroundCheck; }
            set { CandidateBackgroundCheck = (CandidateBackgroundCheck) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateAddress> _candidateAddresses;
        private ICollection<Entities.Common.TPDM.ICandidateAddress> _candidateAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<CandidateAddress> CandidateAddresses
        {
            get { return _candidateAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateAddress>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateAddress)e.Item).Candidate = this);
                _candidateAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateAddress, CandidateAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateAddress)e.Item).Candidate = this;
                _candidateAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAddress> Entities.Common.TPDM.ICandidate.CandidateAddresses
        {
            get { return _candidateAddressesCovariant; }
            set { CandidateAddresses = new List<CandidateAddress>(value.Cast<CandidateAddress>()); }
        }

        private ICollection<CandidateAid> _candidateAids;
        private ICollection<Entities.Common.TPDM.ICandidateAid> _candidateAidsCovariant;

        [DataMember(Name="aids"), NoDuplicateMembers]
        public ICollection<CandidateAid> CandidateAids
        {
            get { return _candidateAids; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateAid>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateAid)e.Item).Candidate = this);
                _candidateAids = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateAid, CandidateAid>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateAid)e.Item).Candidate = this;
                _candidateAidsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAid> Entities.Common.TPDM.ICandidate.CandidateAids
        {
            get { return _candidateAidsCovariant; }
            set { CandidateAids = new List<CandidateAid>(value.Cast<CandidateAid>()); }
        }

        private ICollection<CandidateCharacteristic> _candidateCharacteristics;
        private ICollection<Entities.Common.TPDM.ICandidateCharacteristic> _candidateCharacteristicsCovariant;

        [DataMember(Name="characteristics"), NoDuplicateMembers]
        public ICollection<CandidateCharacteristic> CandidateCharacteristics
        {
            get { return _candidateCharacteristics; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateCharacteristic>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateCharacteristic)e.Item).Candidate = this);
                _candidateCharacteristics = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateCharacteristic, CandidateCharacteristic>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateCharacteristic)e.Item).Candidate = this;
                _candidateCharacteristicsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateCharacteristic> Entities.Common.TPDM.ICandidate.CandidateCharacteristics
        {
            get { return _candidateCharacteristicsCovariant; }
            set { CandidateCharacteristics = new List<CandidateCharacteristic>(value.Cast<CandidateCharacteristic>()); }
        }

        private ICollection<CandidateCohortYear> _candidateCohortYears;
        private ICollection<Entities.Common.TPDM.ICandidateCohortYear> _candidateCohortYearsCovariant;

        [DataMember(Name="cohortYears"), NoDuplicateMembers]
        public ICollection<CandidateCohortYear> CandidateCohortYears
        {
            get { return _candidateCohortYears; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateCohortYear>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateCohortYear)e.Item).Candidate = this);
                _candidateCohortYears = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateCohortYear, CandidateCohortYear>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateCohortYear)e.Item).Candidate = this;
                _candidateCohortYearsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateCohortYear> Entities.Common.TPDM.ICandidate.CandidateCohortYears
        {
            get { return _candidateCohortYearsCovariant; }
            set { CandidateCohortYears = new List<CandidateCohortYear>(value.Cast<CandidateCohortYear>()); }
        }

        private ICollection<CandidateDegreeSpecialization> _candidateDegreeSpecializations;
        private ICollection<Entities.Common.TPDM.ICandidateDegreeSpecialization> _candidateDegreeSpecializationsCovariant;

        [DataMember(Name="degreeSpecializations"), NoDuplicateMembers]
        public ICollection<CandidateDegreeSpecialization> CandidateDegreeSpecializations
        {
            get { return _candidateDegreeSpecializations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateDegreeSpecialization>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateDegreeSpecialization)e.Item).Candidate = this);
                _candidateDegreeSpecializations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateDegreeSpecialization, CandidateDegreeSpecialization>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateDegreeSpecialization)e.Item).Candidate = this;
                _candidateDegreeSpecializationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDegreeSpecialization> Entities.Common.TPDM.ICandidate.CandidateDegreeSpecializations
        {
            get { return _candidateDegreeSpecializationsCovariant; }
            set { CandidateDegreeSpecializations = new List<CandidateDegreeSpecialization>(value.Cast<CandidateDegreeSpecialization>()); }
        }

        private ICollection<CandidateDisability> _candidateDisabilities;
        private ICollection<Entities.Common.TPDM.ICandidateDisability> _candidateDisabilitiesCovariant;

        [DataMember(Name="disabilities"), NoDuplicateMembers]
        public ICollection<CandidateDisability> CandidateDisabilities
        {
            get { return _candidateDisabilities; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateDisability>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateDisability)e.Item).Candidate = this);
                _candidateDisabilities = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateDisability, CandidateDisability>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateDisability)e.Item).Candidate = this;
                _candidateDisabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDisability> Entities.Common.TPDM.ICandidate.CandidateDisabilities
        {
            get { return _candidateDisabilitiesCovariant; }
            set { CandidateDisabilities = new List<CandidateDisability>(value.Cast<CandidateDisability>()); }
        }

        private ICollection<CandidateElectronicMail> _candidateElectronicMails;
        private ICollection<Entities.Common.TPDM.ICandidateElectronicMail> _candidateElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<CandidateElectronicMail> CandidateElectronicMails
        {
            get { return _candidateElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateElectronicMail>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateElectronicMail)e.Item).Candidate = this);
                _candidateElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateElectronicMail, CandidateElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateElectronicMail)e.Item).Candidate = this;
                _candidateElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateElectronicMail> Entities.Common.TPDM.ICandidate.CandidateElectronicMails
        {
            get { return _candidateElectronicMailsCovariant; }
            set { CandidateElectronicMails = new List<CandidateElectronicMail>(value.Cast<CandidateElectronicMail>()); }
        }

        private ICollection<CandidateEPPProgramDegree> _candidateEPPProgramDegrees;
        private ICollection<Entities.Common.TPDM.ICandidateEPPProgramDegree> _candidateEPPProgramDegreesCovariant;

        [DataMember(Name="eppProgramDegrees"), NoDuplicateMembers]
        public ICollection<CandidateEPPProgramDegree> CandidateEPPProgramDegrees
        {
            get { return _candidateEPPProgramDegrees; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateEPPProgramDegree>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateEPPProgramDegree)e.Item).Candidate = this);
                _candidateEPPProgramDegrees = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateEPPProgramDegree, CandidateEPPProgramDegree>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateEPPProgramDegree)e.Item).Candidate = this;
                _candidateEPPProgramDegreesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateEPPProgramDegree> Entities.Common.TPDM.ICandidate.CandidateEPPProgramDegrees
        {
            get { return _candidateEPPProgramDegreesCovariant; }
            set { CandidateEPPProgramDegrees = new List<CandidateEPPProgramDegree>(value.Cast<CandidateEPPProgramDegree>()); }
        }

        private ICollection<CandidateIdentificationCode> _candidateIdentificationCodes;
        private ICollection<Entities.Common.TPDM.ICandidateIdentificationCode> _candidateIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<CandidateIdentificationCode> CandidateIdentificationCodes
        {
            get { return _candidateIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateIdentificationCode>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateIdentificationCode)e.Item).Candidate = this);
                _candidateIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateIdentificationCode, CandidateIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateIdentificationCode)e.Item).Candidate = this;
                _candidateIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIdentificationCode> Entities.Common.TPDM.ICandidate.CandidateIdentificationCodes
        {
            get { return _candidateIdentificationCodesCovariant; }
            set { CandidateIdentificationCodes = new List<CandidateIdentificationCode>(value.Cast<CandidateIdentificationCode>()); }
        }

        private ICollection<CandidateIdentificationDocument> _candidateIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ICandidateIdentificationDocument> _candidateIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<CandidateIdentificationDocument> CandidateIdentificationDocuments
        {
            get { return _candidateIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateIdentificationDocument)e.Item).Candidate = this);
                _candidateIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateIdentificationDocument, CandidateIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateIdentificationDocument)e.Item).Candidate = this;
                _candidateIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIdentificationDocument> Entities.Common.TPDM.ICandidate.CandidateIdentificationDocuments
        {
            get { return _candidateIdentificationDocumentsCovariant; }
            set { CandidateIdentificationDocuments = new List<CandidateIdentificationDocument>(value.Cast<CandidateIdentificationDocument>()); }
        }

        private ICollection<CandidateIndicator> _candidateIndicators;
        private ICollection<Entities.Common.TPDM.ICandidateIndicator> _candidateIndicatorsCovariant;

        [DataMember(Name="indicators"), NoDuplicateMembers]
        public ICollection<CandidateIndicator> CandidateIndicators
        {
            get { return _candidateIndicators; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateIndicator>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateIndicator)e.Item).Candidate = this);
                _candidateIndicators = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateIndicator, CandidateIndicator>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateIndicator)e.Item).Candidate = this;
                _candidateIndicatorsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIndicator> Entities.Common.TPDM.ICandidate.CandidateIndicators
        {
            get { return _candidateIndicatorsCovariant; }
            set { CandidateIndicators = new List<CandidateIndicator>(value.Cast<CandidateIndicator>()); }
        }

        private ICollection<CandidateInternationalAddress> _candidateInternationalAddresses;
        private ICollection<Entities.Common.TPDM.ICandidateInternationalAddress> _candidateInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<CandidateInternationalAddress> CandidateInternationalAddresses
        {
            get { return _candidateInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateInternationalAddress>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateInternationalAddress)e.Item).Candidate = this);
                _candidateInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateInternationalAddress, CandidateInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateInternationalAddress)e.Item).Candidate = this;
                _candidateInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateInternationalAddress> Entities.Common.TPDM.ICandidate.CandidateInternationalAddresses
        {
            get { return _candidateInternationalAddressesCovariant; }
            set { CandidateInternationalAddresses = new List<CandidateInternationalAddress>(value.Cast<CandidateInternationalAddress>()); }
        }

        private ICollection<CandidateLanguage> _candidateLanguages;
        private ICollection<Entities.Common.TPDM.ICandidateLanguage> _candidateLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<CandidateLanguage> CandidateLanguages
        {
            get { return _candidateLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateLanguage>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateLanguage)e.Item).Candidate = this);
                _candidateLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateLanguage, CandidateLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateLanguage)e.Item).Candidate = this;
                _candidateLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateLanguage> Entities.Common.TPDM.ICandidate.CandidateLanguages
        {
            get { return _candidateLanguagesCovariant; }
            set { CandidateLanguages = new List<CandidateLanguage>(value.Cast<CandidateLanguage>()); }
        }

        private ICollection<CandidateOtherName> _candidateOtherNames;
        private ICollection<Entities.Common.TPDM.ICandidateOtherName> _candidateOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<CandidateOtherName> CandidateOtherNames
        {
            get { return _candidateOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateOtherName>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateOtherName)e.Item).Candidate = this);
                _candidateOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateOtherName, CandidateOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateOtherName)e.Item).Candidate = this;
                _candidateOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateOtherName> Entities.Common.TPDM.ICandidate.CandidateOtherNames
        {
            get { return _candidateOtherNamesCovariant; }
            set { CandidateOtherNames = new List<CandidateOtherName>(value.Cast<CandidateOtherName>()); }
        }

        private ICollection<CandidatePersonalIdentificationDocument> _candidatePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument> _candidatePersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<CandidatePersonalIdentificationDocument> CandidatePersonalIdentificationDocuments
        {
            get { return _candidatePersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidatePersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)e.Item).Candidate = this);
                _candidatePersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, CandidatePersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)e.Item).Candidate = this;
                _candidatePersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument> Entities.Common.TPDM.ICandidate.CandidatePersonalIdentificationDocuments
        {
            get { return _candidatePersonalIdentificationDocumentsCovariant; }
            set { CandidatePersonalIdentificationDocuments = new List<CandidatePersonalIdentificationDocument>(value.Cast<CandidatePersonalIdentificationDocument>()); }
        }

        private ICollection<CandidateRace> _candidateRaces;
        private ICollection<Entities.Common.TPDM.ICandidateRace> _candidateRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<CandidateRace> CandidateRaces
        {
            get { return _candidateRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateRace>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateRace)e.Item).Candidate = this);
                _candidateRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateRace, CandidateRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateRace)e.Item).Candidate = this;
                _candidateRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateRace> Entities.Common.TPDM.ICandidate.CandidateRaces
        {
            get { return _candidateRacesCovariant; }
            set { CandidateRaces = new List<CandidateRace>(value.Cast<CandidateRace>()); }
        }

        private ICollection<CandidateTelephone> _candidateTelephones;
        private ICollection<Entities.Common.TPDM.ICandidateTelephone> _candidateTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<CandidateTelephone> CandidateTelephones
        {
            get { return _candidateTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateTelephone>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateTelephone)e.Item).Candidate = this);
                _candidateTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateTelephone, CandidateTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateTelephone)e.Item).Candidate = this;
                _candidateTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateTelephone> Entities.Common.TPDM.ICandidate.CandidateTelephones
        {
            get { return _candidateTelephonesCovariant; }
            set { CandidateTelephones = new List<CandidateTelephone>(value.Cast<CandidateTelephone>()); }
        }

        private ICollection<CandidateVisa> _candidateVisas;
        private ICollection<Entities.Common.TPDM.ICandidateVisa> _candidateVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<CandidateVisa> CandidateVisas
        {
            get { return _candidateVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateVisa>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateVisa)e.Item).Candidate = this);
                _candidateVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateVisa, CandidateVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateVisa)e.Item).Candidate = this;
                _candidateVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateVisa> Entities.Common.TPDM.ICandidate.CandidateVisas
        {
            get { return _candidateVisasCovariant; }
            set { CandidateVisas = new List<CandidateVisa>(value.Cast<CandidateVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateAddresses != null) foreach (var item in _candidateAddresses)
            {
                item.Candidate = this;
            }

            if (_candidateAids != null) foreach (var item in _candidateAids)
            {
                item.Candidate = this;
            }

            if (_candidateCharacteristics != null) foreach (var item in _candidateCharacteristics)
            {
                item.Candidate = this;
            }

            if (_candidateCohortYears != null) foreach (var item in _candidateCohortYears)
            {
                item.Candidate = this;
            }

            if (_candidateDegreeSpecializations != null) foreach (var item in _candidateDegreeSpecializations)
            {
                item.Candidate = this;
            }

            if (_candidateDisabilities != null) foreach (var item in _candidateDisabilities)
            {
                item.Candidate = this;
            }

            if (_candidateElectronicMails != null) foreach (var item in _candidateElectronicMails)
            {
                item.Candidate = this;
            }

            if (_candidateEPPProgramDegrees != null) foreach (var item in _candidateEPPProgramDegrees)
            {
                item.Candidate = this;
            }

            if (_candidateIdentificationCodes != null) foreach (var item in _candidateIdentificationCodes)
            {
                item.Candidate = this;
            }

            if (_candidateIdentificationDocuments != null) foreach (var item in _candidateIdentificationDocuments)
            {
                item.Candidate = this;
            }

            if (_candidateIndicators != null) foreach (var item in _candidateIndicators)
            {
                item.Candidate = this;
            }

            if (_candidateInternationalAddresses != null) foreach (var item in _candidateInternationalAddresses)
            {
                item.Candidate = this;
            }

            if (_candidateLanguages != null) foreach (var item in _candidateLanguages)
            {
                item.Candidate = this;
            }

            if (_candidateOtherNames != null) foreach (var item in _candidateOtherNames)
            {
                item.Candidate = this;
            }

            if (_candidatePersonalIdentificationDocuments != null) foreach (var item in _candidatePersonalIdentificationDocuments)
            {
                item.Candidate = this;
            }

            if (_candidateRaces != null) foreach (var item in _candidateRaces)
            {
                item.Candidate = this;
            }

            if (_candidateTelephones != null) foreach (var item in _candidateTelephones)
            {
                item.Candidate = this;
            }

            if (_candidateVisas != null) foreach (var item in _candidateVisas)
            {
                item.Candidate = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidate)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateMapper.MapTo(this, (Entities.Common.TPDM.ICandidate)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsApplicantProfileIdentifierSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsApplicationIdentifierSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthCitySupported                                 { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthCountryDescriptorSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthDateSupported                                 { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthInternationalProvinceSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthSexDescriptorSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthStateAbbreviationDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAddressesSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAidsSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateBackgroundCheckSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCharacteristicsSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCohortYearsSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDegreeSpecializationsSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDisabilitiesSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateElectronicMailsSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateEPPProgramDegreesSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationCodesSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationDocumentsSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIndicatorsSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateInternationalAddressesSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateLanguagesSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateOtherNamesSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidatePersonalIdentificationDocumentsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateRacesSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateTelephonesSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateVisasSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsDateEnteredUSSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsDisplacementStatusSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsEconomicDisadvantagedSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsEducationOrganizationIdSupported                   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsEnglishLanguageExamDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsFirstGenerationStudentSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsFirstNameSupported                                 { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsGenderDescriptorSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsLastSurnameSupported                               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsLimitedEnglishProficiencyDescriptorSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsLoginIdSupported                                   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsMaidenNameSupported                                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsMiddleNameSupported                                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsMultipleBirthStatusSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsPersonIdSupported                                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsPreviousCareerDescriptorSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsProfileThumbnailSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsProgramCompleteSupported                           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsSexDescriptorSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsSourceSystemDescriptorSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsTuitionCostSupported                               { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICandidateAddress, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAddressIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateAid, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAidIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateCharacteristic, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCharacteristicIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateCohortYear, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCohortYearIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateDegreeSpecialization, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDegreeSpecializationIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateDisability, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDisabilityIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateElectronicMail, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateElectronicMailIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateEPPProgramDegree, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateEPPProgramDegreeIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateIdentificationCode, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationCodeIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateIdentificationDocument, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationDocumentIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateIndicator, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIndicatorIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateInternationalAddress, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateInternationalAddressIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateLanguage, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateLanguageIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateOtherName, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateOtherNameIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidatePersonalIdentificationDocumentIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateRace, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateRaceIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateTelephone, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateTelephoneIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICandidateVisa, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateVisaIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidate.ApplicationResourceId
        {
            get { return null; }
            set { ImplicitApplicationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidate.ApplicationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitApplicationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ICandidate.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidate.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidatePutPostRequestValidator : FluentValidation.AbstractValidator<Candidate>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Candidate> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateAddressesValidator = new CandidateAddressPutPostRequestValidator();

            foreach (var item in instance.CandidateAddresses)
            {
                var validationResult = candidateAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateAidsValidator = new CandidateAidPutPostRequestValidator();

            foreach (var item in instance.CandidateAids)
            {
                var validationResult = candidateAidsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateCharacteristicsValidator = new CandidateCharacteristicPutPostRequestValidator();

            foreach (var item in instance.CandidateCharacteristics)
            {
                var validationResult = candidateCharacteristicsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateCohortYearsValidator = new CandidateCohortYearPutPostRequestValidator();

            foreach (var item in instance.CandidateCohortYears)
            {
                var validationResult = candidateCohortYearsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateDegreeSpecializationsValidator = new CandidateDegreeSpecializationPutPostRequestValidator();

            foreach (var item in instance.CandidateDegreeSpecializations)
            {
                var validationResult = candidateDegreeSpecializationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateDisabilitiesValidator = new CandidateDisabilityPutPostRequestValidator();

            foreach (var item in instance.CandidateDisabilities)
            {
                var validationResult = candidateDisabilitiesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateElectronicMailsValidator = new CandidateElectronicMailPutPostRequestValidator();

            foreach (var item in instance.CandidateElectronicMails)
            {
                var validationResult = candidateElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateEPPProgramDegreesValidator = new CandidateEPPProgramDegreePutPostRequestValidator();

            foreach (var item in instance.CandidateEPPProgramDegrees)
            {
                var validationResult = candidateEPPProgramDegreesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateIdentificationCodesValidator = new CandidateIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.CandidateIdentificationCodes)
            {
                var validationResult = candidateIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateIdentificationDocumentsValidator = new CandidateIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.CandidateIdentificationDocuments)
            {
                var validationResult = candidateIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateIndicatorsValidator = new CandidateIndicatorPutPostRequestValidator();

            foreach (var item in instance.CandidateIndicators)
            {
                var validationResult = candidateIndicatorsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateInternationalAddressesValidator = new CandidateInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.CandidateInternationalAddresses)
            {
                var validationResult = candidateInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateLanguagesValidator = new CandidateLanguagePutPostRequestValidator();

            foreach (var item in instance.CandidateLanguages)
            {
                var validationResult = candidateLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateOtherNamesValidator = new CandidateOtherNamePutPostRequestValidator();

            foreach (var item in instance.CandidateOtherNames)
            {
                var validationResult = candidateOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidatePersonalIdentificationDocumentsValidator = new CandidatePersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.CandidatePersonalIdentificationDocuments)
            {
                var validationResult = candidatePersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateRacesValidator = new CandidateRacePutPostRequestValidator();

            foreach (var item in instance.CandidateRaces)
            {
                var validationResult = candidateRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateTelephonesValidator = new CandidateTelephonePutPostRequestValidator();

            foreach (var item in instance.CandidateTelephones)
            {
                var validationResult = candidateTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateVisasValidator = new CandidateVisaPutPostRequestValidator();

            foreach (var item in instance.CandidateVisas)
            {
                var validationResult = candidateVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateAddress table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateAddress : Entities.Common.TPDM.ICandidateAddress, Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateAddress()
        {
            CandidateAddressPeriods = new List<CandidateAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateAddress.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateAddress;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAddress).City == null
                || !(this as Entities.Common.TPDM.ICandidateAddress).City.Equals(compareTo.City))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAddress).PostalCode == null
                || !(this as Entities.Common.TPDM.ICandidateAddress).PostalCode.Equals(compareTo.PostalCode))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAddress).StreetNumberName == null
                || !(this as Entities.Common.TPDM.ICandidateAddress).StreetNumberName.Equals(compareTo.StreetNumberName))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAddress).AddressTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAddress).AddressTypeDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAddress).City != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAddress).City.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAddress).PostalCode != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAddress).PostalCode.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAddress).StateAbbreviationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAddress).StateAbbreviationDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAddress).StreetNumberName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                      'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateAddressPeriod> _candidateAddressPeriods;
        private ICollection<Entities.Common.TPDM.ICandidateAddressPeriod> _candidateAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<CandidateAddressPeriod> CandidateAddressPeriods
        {
            get { return _candidateAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateAddressPeriod>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateAddressPeriod)e.Item).CandidateAddress = this);
                _candidateAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateAddressPeriod, CandidateAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateAddressPeriod)e.Item).CandidateAddress = this;
                _candidateAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAddressPeriod> Entities.Common.TPDM.ICandidateAddress.CandidateAddressPeriods
        {
            get { return _candidateAddressPeriodsCovariant; }
            set { CandidateAddressPeriods = new List<CandidateAddressPeriod>(value.Cast<CandidateAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateAddressPeriods != null) foreach (var item in _candidateAddressPeriods)
            {
                item.CandidateAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateAddressMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateAddressMapper.MapTo(this, (Entities.Common.TPDM.ICandidateAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCandidateAddressPeriodsSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICandidateAddressPeriod, bool> Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCandidateAddressPeriodIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateAddressPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateAddressPeriodsValidator = new CandidateAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.CandidateAddressPeriods)
            {
                var validationResult = candidateAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateAddressPeriod table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateAddressPeriod : Entities.Common.TPDM.ICandidateAddressPeriod, Entities.Common.TPDM.ICandidateAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateAddress _candidateAddress;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateAddress Entities.Common.TPDM.ICandidateAddressPeriod.CandidateAddress
        {
            get { return _candidateAddress; }
            set { SetCandidateAddress(value); }
        }

        internal Entities.Common.TPDM.ICandidateAddress CandidateAddress
        {
            set { SetCandidateAddress(value); }
        }

        private void SetCandidateAddress(Entities.Common.TPDM.ICandidateAddress value)
        {
            _candidateAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateAddressPeriod;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateAddress == null || !_candidateAddress.Equals(compareTo.CandidateAddress))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAddressPeriod).BeginDate == null
                || !(this as Entities.Common.TPDM.ICandidateAddressPeriod).BeginDate.Equals(compareTo.BeginDate))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidateAddress != null)
                    hash = hash * 23 + _candidateAddress.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAddressPeriod).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateAddressPeriodMapper.MapTo(this, (Entities.Common.TPDM.ICandidateAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateAid table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateAid : Entities.Common.TPDM.ICandidateAid, Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateAid.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The classification of financial aid awarded to a person for the academic term/year.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="aidTypeDescriptor"), NaturalKeyMember]
        public string AidTypeDescriptor { get; set; }

        /// <summary>
        /// The date the award was designated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateAid;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAid).AidTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateAid).AidTypeDescriptor.Equals(compareTo.AidTypeDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateAid).BeginDate == null
                || !(this as Entities.Common.TPDM.ICandidateAid).BeginDate.Equals(compareTo.BeginDate))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAid).AidTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAid).AidTypeDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateAid).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateAid).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The amount of financial aid awarded to a person for the term/year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="aidAmount")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal? AidAmount { get; set; }

        /// <summary>
        /// The description of the condition (e.g., placement in a high need school) under which the aid was given.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="aidConditionDescription")]
        public string AidConditionDescription { get; set; }

        /// <summary>
        /// The date the award was removed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicates a person who receives Pell Grant aid.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="pellGrantRecipient")]
        public bool? PellGrantRecipient { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateAidMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateAid)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateAidMapper.MapTo(this, (Entities.Common.TPDM.ICandidateAid)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsAidAmountSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsAidConditionDescriptionSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsEndDateSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsPellGrantRecipientSupported       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateAidPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateAid>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateAid> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateBackgroundCheck table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateBackgroundCheck : Entities.Common.TPDM.ICandidateBackgroundCheck, Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateBackgroundCheck.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateBackgroundCheck;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the background check was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckCompletedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BackgroundCheckCompletedDate { get; set; }

        /// <summary>
        /// The date the background check was requested.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckRequestedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BackgroundCheckRequestedDate { get; set; }

        /// <summary>
        /// The status of the background check (e.g., pending, under investigation, offense(s) found, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="backgroundCheckStatusDescriptor")]
        public string BackgroundCheckStatusDescriptor { get; set; }

        /// <summary>
        /// The type of background check (e.g., online, criminal, employment).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="backgroundCheckTypeDescriptor")]
        public string BackgroundCheckTypeDescriptor { get; set; }

        /// <summary>
        /// Indicates that a person has or has not completed a fingerprint.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fingerprint")]
        public bool? Fingerprint { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateBackgroundCheckMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateBackgroundCheckMapper.MapTo(this, (Entities.Common.TPDM.ICandidateBackgroundCheck)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckTypeDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported                      { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateBackgroundCheckPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateBackgroundCheck>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateBackgroundCheck> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateCharacteristic table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateCharacteristic : Entities.Common.TPDM.ICandidateCharacteristic, Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateCharacteristic.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The characteristic designated for the candidate.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="candidateCharacteristicDescriptor"), NaturalKeyMember]
        public string CandidateCharacteristicDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateCharacteristic;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateCharacteristic).CandidateCharacteristicDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateCharacteristic).CandidateCharacteristicDescriptor.Equals(compareTo.CandidateCharacteristicDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateCharacteristic).CandidateCharacteristicDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateCharacteristic).CandidateCharacteristicDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the characteristic was designated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The person, organization, or department that designated the characteristic.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The date the characteristic was removed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateCharacteristicMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateCharacteristicMapper.MapTo(this, (Entities.Common.TPDM.ICandidateCharacteristic)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport.IsBeginDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport.IsEndDateSupported       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateCharacteristicPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateCharacteristic>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateCharacteristic> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateCohortYear table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateCohortYear : Entities.Common.TPDM.ICandidateCohortYear, Entities.Common.TPDM.ICandidateCohortYearSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.EdFi.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.EdFi.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.EdFi.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.EdFi.SchoolYearTypeReference SchoolYearTypeReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set
            {
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateCohortYear.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The type of cohort year (9th grade, graduation).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="cohortYearTypeDescriptor"), NaturalKeyMember]
        public string CohortYearTypeDescriptor { get; set; }

        /// <summary>
        /// The value of the  school year for the Cohort.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.ICandidateCohortYear.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateCohortYear;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateCohortYear).CohortYearTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateCohortYear).CohortYearTypeDescriptor.Equals(compareTo.CohortYearTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICandidateCohortYear).SchoolYear == null
                || !(this as Entities.Common.TPDM.ICandidateCohortYear).SchoolYear.Equals(compareTo.SchoolYear))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateCohortYear).CohortYearTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateCohortYear).CohortYearTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICandidateCohortYear).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateCohortYear).SchoolYear.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateCohortYearMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateCohortYear)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateCohortYearMapper.MapTo(this, (Entities.Common.TPDM.ICandidateCohortYear)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidateCohortYear.SchoolYearTypeResourceId
        {
            get { return null; }
            set { ImplicitSchoolYearTypeReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateCohortYearPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateCohortYear>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateCohortYear> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateDegreeSpecialization table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateDegreeSpecialization : Entities.Common.TPDM.ICandidateDegreeSpecialization, Entities.Common.TPDM.ICandidateDegreeSpecializationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateDegreeSpecialization.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The month, day, and year on which the Teacher Candidate first declared specialization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The major area for a degree or area of specialization for a certificate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="majorSpecialization"), NaturalKeyMember]
        public string MajorSpecialization { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateDegreeSpecialization;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateDegreeSpecialization).BeginDate == null
                || !(this as Entities.Common.TPDM.ICandidateDegreeSpecialization).BeginDate.Equals(compareTo.BeginDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateDegreeSpecialization).MajorSpecialization == null
                || !(this as Entities.Common.TPDM.ICandidateDegreeSpecialization).MajorSpecialization.Equals(compareTo.MajorSpecialization))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateDegreeSpecialization).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateDegreeSpecialization).BeginDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateDegreeSpecialization).MajorSpecialization != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateDegreeSpecialization).MajorSpecialization.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Teacher Candidate exited the declared specialization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The major area for a degree or area of specialization for a certificate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minorSpecialization")]
        public string MinorSpecialization { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateDegreeSpecializationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateDegreeSpecialization)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateDegreeSpecializationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateDegreeSpecialization)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateDegreeSpecializationSynchronizationSourceSupport.IsEndDateSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateDegreeSpecializationSynchronizationSourceSupport.IsMinorSpecializationSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateDegreeSpecializationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateDegreeSpecialization>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateDegreeSpecialization> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateDisability table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateDisability : Entities.Common.TPDM.ICandidateDisability, Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateDisability()
        {
            CandidateDisabilityDesignations = new List<CandidateDisabilityDesignation>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateDisability.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// A disability category that describes a child's impairment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDescriptor"), NaturalKeyMember]
        public string DisabilityDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateDisability;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateDisability).DisabilityDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateDisability).DisabilityDescriptor.Equals(compareTo.DisabilityDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateDisability).DisabilityDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateDisability).DisabilityDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDeterminationSourceTypeDescriptor")]
        public string DisabilityDeterminationSourceTypeDescriptor { get; set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDiagnosis")]
        public string DisabilityDiagnosis { get; set; }

        /// <summary>
        /// The order by severity of student's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfDisability")]
        public int? OrderOfDisability { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateDisabilityDesignation> _candidateDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.ICandidateDisabilityDesignation> _candidateDisabilityDesignationsCovariant;

        [DataMember(Name="designations"), NoDuplicateMembers]
        public ICollection<CandidateDisabilityDesignation> CandidateDisabilityDesignations
        {
            get { return _candidateDisabilityDesignations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateDisabilityDesignation>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateDisabilityDesignation)e.Item).CandidateDisability = this);
                _candidateDisabilityDesignations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateDisabilityDesignation, CandidateDisabilityDesignation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateDisabilityDesignation)e.Item).CandidateDisability = this;
                _candidateDisabilityDesignationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDisabilityDesignation> Entities.Common.TPDM.ICandidateDisability.CandidateDisabilityDesignations
        {
            get { return _candidateDisabilityDesignationsCovariant; }
            set { CandidateDisabilityDesignations = new List<CandidateDisabilityDesignation>(value.Cast<CandidateDisabilityDesignation>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateDisabilityDesignations != null) foreach (var item in _candidateDisabilityDesignations)
            {
                item.CandidateDisability = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateDisabilityMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateDisability)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateDisabilityMapper.MapTo(this, (Entities.Common.TPDM.ICandidateDisability)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsCandidateDisabilityDesignationsSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported                            { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICandidateDisabilityDesignation, bool> Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsCandidateDisabilityDesignationIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateDisability>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateDisability> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateDisabilityDesignationsValidator = new CandidateDisabilityDesignationPutPostRequestValidator();

            foreach (var item in instance.CandidateDisabilityDesignations)
            {
                var validationResult = candidateDisabilityDesignationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateDisabilityDesignation table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityDesignation : Entities.Common.TPDM.ICandidateDisabilityDesignation, Entities.Common.TPDM.ICandidateDisabilityDesignationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateDisability _candidateDisability;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateDisability Entities.Common.TPDM.ICandidateDisabilityDesignation.CandidateDisability
        {
            get { return _candidateDisability; }
            set { SetCandidateDisability(value); }
        }

        internal Entities.Common.TPDM.ICandidateDisability CandidateDisability
        {
            set { SetCandidateDisability(value); }
        }

        private void SetCandidateDisability(Entities.Common.TPDM.ICandidateDisability value)
        {
            _candidateDisability = value;
        }

        /// <summary>
        /// Whether the disability is IDEA, Section 504, or other disability designation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDesignationDescriptor"), NaturalKeyMember]
        public string DisabilityDesignationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateDisabilityDesignation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateDisability == null || !_candidateDisability.Equals(compareTo.CandidateDisability))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateDisabilityDesignation).DisabilityDesignationDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateDisabilityDesignation).DisabilityDesignationDescriptor.Equals(compareTo.DisabilityDesignationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidateDisability != null)
                    hash = hash * 23 + _candidateDisability.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateDisabilityDesignation).DisabilityDesignationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateDisabilityDesignation).DisabilityDesignationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateDisabilityDesignationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateDisabilityDesignationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateDisabilityDesignation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityDesignationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateDisabilityDesignation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateDisabilityDesignation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateElectronicMail table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateElectronicMail : Entities.Common.TPDM.ICandidateElectronicMail, Entities.Common.TPDM.ICandidateElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateElectronicMail.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateElectronicMail;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailAddress != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailAddress.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateElectronicMailMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateElectronicMailMapper.MapTo(this, (Entities.Common.TPDM.ICandidateElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateEPPProgramDegree table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEPPProgramDegree : Entities.Common.TPDM.ICandidateEPPProgramDegree, Entities.Common.TPDM.ICandidateEPPProgramDegreeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateEPPProgramDegree.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of a degree.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// A code for describing the degree type that a candidate accomplishes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="eppDegreeTypeDescriptor"), NaturalKeyMember]
        public string EPPDegreeTypeDescriptor { get; set; }

        /// <summary>
        /// The grade level associated with the degree plan for the candidate.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateEPPProgramDegree;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateEPPProgramDegree).AcademicSubjectDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateEPPProgramDegree).AcademicSubjectDescriptor.Equals(compareTo.AcademicSubjectDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateEPPProgramDegree).EPPDegreeTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateEPPProgramDegree).EPPDegreeTypeDescriptor.Equals(compareTo.EPPDegreeTypeDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateEPPProgramDegree).GradeLevelDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateEPPProgramDegree).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateEPPProgramDegree).AcademicSubjectDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEPPProgramDegree).AcademicSubjectDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateEPPProgramDegree).EPPDegreeTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEPPProgramDegree).EPPDegreeTypeDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateEPPProgramDegree).GradeLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEPPProgramDegree).GradeLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEPPProgramDegreeMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEPPProgramDegree)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEPPProgramDegreeMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEPPProgramDegree)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEPPProgramDegreePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEPPProgramDegree>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEPPProgramDegree> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateIdentificationCode table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateIdentificationCode : Entities.Common.TPDM.ICandidateIdentificationCode, Entities.Common.TPDM.ICandidateIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateIdentificationCode.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The organization code or name assigning the StudentIdentificationCode.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode"), NaturalKeyMember]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a person by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode"), NaturalKeyMember]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a candidate.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="studentIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StudentIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateIdentificationCode;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIdentificationCode).AssigningOrganizationIdentificationCode == null
                || !(this as Entities.Common.TPDM.ICandidateIdentificationCode).AssigningOrganizationIdentificationCode.Equals(compareTo.AssigningOrganizationIdentificationCode))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIdentificationCode).IdentificationCode == null
                || !(this as Entities.Common.TPDM.ICandidateIdentificationCode).IdentificationCode.Equals(compareTo.IdentificationCode))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIdentificationCode).StudentIdentificationSystemDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateIdentificationCode).StudentIdentificationSystemDescriptor.Equals(compareTo.StudentIdentificationSystemDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIdentificationCode).AssigningOrganizationIdentificationCode != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIdentificationCode).AssigningOrganizationIdentificationCode.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIdentificationCode).IdentificationCode != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIdentificationCode).IdentificationCode.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIdentificationCode).StudentIdentificationSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIdentificationCode).StudentIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateIdentificationCodeMapper.MapTo(this, (Entities.Common.TPDM.ICandidateIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateIdentificationDocument table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateIdentificationDocument : Entities.Common.TPDM.ICandidateIdentificationDocument, Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateIdentificationDocument.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateIdentificationDocument;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIdentificationDocument).IdentificationDocumentUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIdentificationDocument).PersonalInformationVerificationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateIdentificationDocumentMapper.MapTo(this, (Entities.Common.TPDM.ICandidateIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateIndicator table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateIndicator : Entities.Common.TPDM.ICandidateIndicator, Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateIndicator()
        {
            CandidateIndicatorPeriods = new List<CandidateIndicatorPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateIndicator.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The name of the indicator or metric.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicatorName"), NaturalKeyMember]
        public string IndicatorName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateIndicator;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIndicator).IndicatorName == null
                || !(this as Entities.Common.TPDM.ICandidateIndicator).IndicatorName.Equals(compareTo.IndicatorName))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIndicator).IndicatorName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIndicator).IndicatorName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The person, organization, or department that designated the program association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The value of the indicator or metric.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicator")]
        public string Indicator { get; set; }

        /// <summary>
        /// The name for a group of indicators.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicatorGroup")]
        public string IndicatorGroup { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateIndicatorPeriod> _candidateIndicatorPeriods;
        private ICollection<Entities.Common.TPDM.ICandidateIndicatorPeriod> _candidateIndicatorPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<CandidateIndicatorPeriod> CandidateIndicatorPeriods
        {
            get { return _candidateIndicatorPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateIndicatorPeriod>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateIndicatorPeriod)e.Item).CandidateIndicator = this);
                _candidateIndicatorPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateIndicatorPeriod, CandidateIndicatorPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateIndicatorPeriod)e.Item).CandidateIndicator = this;
                _candidateIndicatorPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIndicatorPeriod> Entities.Common.TPDM.ICandidateIndicator.CandidateIndicatorPeriods
        {
            get { return _candidateIndicatorPeriodsCovariant; }
            set { CandidateIndicatorPeriods = new List<CandidateIndicatorPeriod>(value.Cast<CandidateIndicatorPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateIndicatorPeriods != null) foreach (var item in _candidateIndicatorPeriods)
            {
                item.CandidateIndicator = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateIndicatorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateIndicator)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateIndicatorMapper.MapTo(this, (Entities.Common.TPDM.ICandidateIndicator)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsCandidateIndicatorPeriodsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsDesignatedBySupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsIndicatorSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsIndicatorGroupSupported             { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICandidateIndicatorPeriod, bool> Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsCandidateIndicatorPeriodIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateIndicatorPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateIndicator>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateIndicator> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateIndicatorPeriodsValidator = new CandidateIndicatorPeriodPutPostRequestValidator();

            foreach (var item in instance.CandidateIndicatorPeriods)
            {
                var validationResult = candidateIndicatorPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateIndicatorPeriod table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateIndicatorPeriod : Entities.Common.TPDM.ICandidateIndicatorPeriod, Entities.Common.TPDM.ICandidateIndicatorPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateIndicator _candidateIndicator;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateIndicator Entities.Common.TPDM.ICandidateIndicatorPeriod.CandidateIndicator
        {
            get { return _candidateIndicator; }
            set { SetCandidateIndicator(value); }
        }

        internal Entities.Common.TPDM.ICandidateIndicator CandidateIndicator
        {
            set { SetCandidateIndicator(value); }
        }

        private void SetCandidateIndicator(Entities.Common.TPDM.ICandidateIndicator value)
        {
            _candidateIndicator = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateIndicatorPeriod;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateIndicator == null || !_candidateIndicator.Equals(compareTo.CandidateIndicator))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateIndicatorPeriod).BeginDate == null
                || !(this as Entities.Common.TPDM.ICandidateIndicatorPeriod).BeginDate.Equals(compareTo.BeginDate))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidateIndicator != null)
                    hash = hash * 23 + _candidateIndicator.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateIndicatorPeriod).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateIndicatorPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateIndicatorPeriodMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateIndicatorPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateIndicatorPeriodMapper.MapTo(this, (Entities.Common.TPDM.ICandidateIndicatorPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateIndicatorPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateIndicatorPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateIndicatorPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateIndicatorPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateInternationalAddress table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateInternationalAddress : Entities.Common.TPDM.ICandidateInternationalAddress, Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateInternationalAddress.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateInternationalAddress;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateInternationalAddress).AddressTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateInternationalAddressMapper.MapTo(this, (Entities.Common.TPDM.ICandidateInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateLanguage table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateLanguage : Entities.Common.TPDM.ICandidateLanguage, Entities.Common.TPDM.ICandidateLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateLanguage()
        {
            CandidateLanguageUses = new List<CandidateLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateLanguage.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateLanguage;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateLanguage).LanguageDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateLanguageUse> _candidateLanguageUses;
        private ICollection<Entities.Common.TPDM.ICandidateLanguageUse> _candidateLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<CandidateLanguageUse> CandidateLanguageUses
        {
            get { return _candidateLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateLanguageUse>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateLanguageUse)e.Item).CandidateLanguage = this);
                _candidateLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateLanguageUse, CandidateLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateLanguageUse)e.Item).CandidateLanguage = this;
                _candidateLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateLanguageUse> Entities.Common.TPDM.ICandidateLanguage.CandidateLanguageUses
        {
            get { return _candidateLanguageUsesCovariant; }
            set { CandidateLanguageUses = new List<CandidateLanguageUse>(value.Cast<CandidateLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateLanguageUses != null) foreach (var item in _candidateLanguageUses)
            {
                item.CandidateLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateLanguageMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateLanguageMapper.MapTo(this, (Entities.Common.TPDM.ICandidateLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateLanguageSynchronizationSourceSupport.IsCandidateLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICandidateLanguageUse, bool> Entities.Common.TPDM.ICandidateLanguageSynchronizationSourceSupport.IsCandidateLanguageUseIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateLanguageUsesValidator = new CandidateLanguageUsePutPostRequestValidator();

            foreach (var item in instance.CandidateLanguageUses)
            {
                var validationResult = candidateLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateLanguageUse table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateLanguageUse : Entities.Common.TPDM.ICandidateLanguageUse, Entities.Common.TPDM.ICandidateLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateLanguage _candidateLanguage;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateLanguage Entities.Common.TPDM.ICandidateLanguageUse.CandidateLanguage
        {
            get { return _candidateLanguage; }
            set { SetCandidateLanguage(value); }
        }

        internal Entities.Common.TPDM.ICandidateLanguage CandidateLanguage
        {
            set { SetCandidateLanguage(value); }
        }

        private void SetCandidateLanguage(Entities.Common.TPDM.ICandidateLanguage value)
        {
            _candidateLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateLanguageUse;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateLanguage == null || !_candidateLanguage.Equals(compareTo.CandidateLanguage))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidateLanguage != null)
                    hash = hash * 23 + _candidateLanguage.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateLanguageUse).LanguageUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateLanguageUseMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateLanguageUseMapper.MapTo(this, (Entities.Common.TPDM.ICandidateLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateOtherName table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateOtherName : Entities.Common.TPDM.ICandidateOtherName, Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateOtherName.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateOtherName;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateOtherName).OtherNameTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateOtherNameMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateOtherNameMapper.MapTo(this, (Entities.Common.TPDM.ICandidateOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidatePersonalIdentificationDocument table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidatePersonalIdentificationDocument : Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidatePersonalIdentificationDocument.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidatePersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidatePersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidatePersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<CandidatePersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidatePersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateRace table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateRace : Entities.Common.TPDM.ICandidateRace, Entities.Common.TPDM.ICandidateRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateRace.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateRace;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateRace).RaceDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateRace).RaceDescriptor.Equals(compareTo.RaceDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateRace).RaceDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateRaceMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateRaceMapper.MapTo(this, (Entities.Common.TPDM.ICandidateRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateRacePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateTelephone table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateTelephone : Entities.Common.TPDM.ICandidateTelephone, Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateTelephone.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateTelephone;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumber == null
                || !(this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumber != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumber.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumberTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateTelephoneMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateTelephoneMapper.MapTo(this, (Entities.Common.TPDM.ICandidateTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateVisa table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateVisa : Entities.Common.TPDM.ICandidateVisa, Entities.Common.TPDM.ICandidateVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateVisa.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateVisa;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateVisa).VisaDescriptor == null
                || !(this as Entities.Common.TPDM.ICandidateVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidate != null)
                    hash = hash * 23 + _candidate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateVisa).VisaDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateVisaMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateVisaMapper.MapTo(this, (Entities.Common.TPDM.ICandidateVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateVisaPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CandidateCharacteristicDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CandidateCharacteristicDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CandidateCharacteristicDescriptor table of the CandidateCharacteristicDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateCharacteristicDescriptor : Entities.Common.TPDM.ICandidateCharacteristicDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CandidateCharacteristicDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="candidateCharacteristicDescriptorId"), NaturalKeyMember]
        public int CandidateCharacteristicDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CandidateCharacteristicDescriptorId; }
            set { CandidateCharacteristicDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateCharacteristicDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICandidateCharacteristicDescriptor).CandidateCharacteristicDescriptorId == null
                || !(this as Entities.Common.TPDM.ICandidateCharacteristicDescriptor).CandidateCharacteristicDescriptorId.Equals(compareTo.CandidateCharacteristicDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICandidateCharacteristicDescriptor).CandidateCharacteristicDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateCharacteristicDescriptor).CandidateCharacteristicDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateCharacteristicDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateCharacteristicDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateCharacteristicDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICandidateCharacteristicDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateCharacteristicDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateCharacteristicDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateCharacteristicDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CandidateEducatorPreparationProgramAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.CandidateEducatorPreparationProgramAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the CandidateEducatorPreparationProgramAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime) && CandidateIdentifier != default(string) && EducationOrganizationId != default(int) && ProgramName != default(string) && ProgramTypeDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "CandidateEducatorPreparationProgramAssociation",
                Href = $"/tpdm/candidateEducatorPreparationProgramAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociation table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociation : Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation, IHasETag, Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CandidateEducatorPreparationProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _candidateReferenceExplicitlyAssigned;
        private Candidate.TPDM.CandidateReference _candidateReference;
        private Candidate.TPDM.CandidateReference ImplicitCandidateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_candidateReference == null && !_candidateReferenceExplicitlyAssigned)
                    _candidateReference = new Candidate.TPDM.CandidateReference();

                return _candidateReference;
            }
        }

        [DataMember(Name="candidateReference")][NaturalKeyMember]
        public Candidate.TPDM.CandidateReference CandidateReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCandidateReference != null
                    && (_candidateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCandidateReference.IsReferenceFullyDefined()))
                    return ImplicitCandidateReference;

                return null;
            }
            set
            {
                _candidateReferenceExplicitlyAssigned = true;
                _candidateReference = value;
            }
        }
        private bool _educatorPreparationProgramReferenceExplicitlyAssigned;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference _educatorPreparationProgramReference;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference ImplicitEducatorPreparationProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educatorPreparationProgramReference == null && !_educatorPreparationProgramReferenceExplicitlyAssigned)
                    _educatorPreparationProgramReference = new EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference();

                return _educatorPreparationProgramReference;
            }
        }

        [DataMember(Name="educatorPreparationProgramReference")][NaturalKeyMember]
        public EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference EducatorPreparationProgramReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_educatorPreparationProgramReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference;

                return null;
            }
            set
            {
                _educatorPreparationProgramReferenceExplicitlyAssigned = true;
                _educatorPreparationProgramReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The begin date for the association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a candidate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateIdentifier
        {
            get
            {
                if (ImplicitCandidateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCandidateReference.IsReferenceFullyDefined()))
                    return ImplicitCandidateReference.CandidateIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Candidate
                _candidateReferenceExplicitlyAssigned = false;
                ImplicitCandidateReference.CandidateIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (CandidateEducatorPreparationProgramAssociation.ProgramTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.ProgramTypeDescriptor
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).BeginDate == null
                || !(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).BeginDate.Equals(compareTo.BeginDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).CandidateIdentifier == null
                || !(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).CandidateIdentifier.Equals(compareTo.CandidateIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramName == null
                || !(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramName.Equals(compareTo.ProgramName))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramTypeDescriptor.Equals(compareTo.ProgramTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).BeginDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).CandidateIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).CandidateIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramName.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The end date for the association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// A code for describing the program pathway, for example: Residency, Internship, Traditional
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="eppProgramPathwayDescriptor")]
        public string EPPProgramPathwayDescriptor { get; set; }

        /// <summary>
        /// The major area for a degree or area of specialization for a certificate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="majorSpecialization")]
        public string MajorSpecialization { get; set; }

        /// <summary>
        /// The major area for a degree or area of specialization for a certificate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minorSpecialization")]
        public string MinorSpecialization { get; set; }

        /// <summary>
        /// Reason exited for the association.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// candidateIndicator
        /// </summary>
        [DataMember(Name = "candidateIndicator")]
        public CandidateEducatorPreparationProgramAssociationCandidateIndicator CandidateEducatorPreparationProgramAssociationCandidateIndicator { get; set; }

        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateEducatorPreparationProgramAssociationCandidateIndicator
        {
            get { return CandidateEducatorPreparationProgramAssociationCandidateIndicator; }
            set { CandidateEducatorPreparationProgramAssociationCandidateIndicator = (CandidateEducatorPreparationProgramAssociationCandidateIndicator) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsEndDateSupported                                                           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsEPPProgramPathwayDescriptorSupported                                       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsMajorSpecializationSupported                                               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsMinorSpecializationSupported                                               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported                                            { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateResourceId
        {
            get { return null; }
            set { ImplicitCandidateReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCandidateReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducatorPreparationProgramResourceId
        {
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducatorPreparationProgramDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEducatorPreparationProgramAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEducatorPreparationProgramAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociationCandidateIndicator table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCandidateIndicator : Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator, Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation _candidateEducatorPreparationProgramAssociation;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator.CandidateEducatorPreparationProgramAssociation
        {
            get { return _candidateEducatorPreparationProgramAssociation; }
            set { SetCandidateEducatorPreparationProgramAssociation(value); }
        }

        internal Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation CandidateEducatorPreparationProgramAssociation
        {
            set { SetCandidateEducatorPreparationProgramAssociation(value); }
        }

        private void SetCandidateEducatorPreparationProgramAssociation(Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation value)
        {
            _candidateEducatorPreparationProgramAssociation = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateEducatorPreparationProgramAssociation == null || !_candidateEducatorPreparationProgramAssociation.Equals(compareTo.CandidateEducatorPreparationProgramAssociation))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidateEducatorPreparationProgramAssociation != null)
                    hash = hash * 23 + _candidateEducatorPreparationProgramAssociation.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The person, organization, or department that designated the program association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="designatedBy")]
        public string DesignatedBy { get; set; }

        /// <summary>
        /// The value of the indicator or metric.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicator")]
        public string Indicator { get; set; }

        /// <summary>
        /// The name for a group of indicators.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicatorGroup")]
        public string IndicatorGroup { get; set; }

        /// <summary>
        /// The name of the indicator or metric.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="indicatorName")]
        public string IndicatorName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// period
        /// </summary>
        [DataMember(Name = "period")]
        public CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod { get; set; }

        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod
        {
            get { return CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod; }
            set { CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = (CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsDesignatedBySupported                                                            { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsIndicatorSupported                                                               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsIndicatorGroupSupported                                                          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsIndicatorNameSupported                                                           { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCandidateIndicatorPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEducatorPreparationProgramAssociationCandidateIndicator>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEducatorPreparationProgramAssociationCandidateIndicator> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod : Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod, Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator _candidateEducatorPreparationProgramAssociationCandidateIndicator;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod.CandidateEducatorPreparationProgramAssociationCandidateIndicator
        {
            get { return _candidateEducatorPreparationProgramAssociationCandidateIndicator; }
            set { SetCandidateEducatorPreparationProgramAssociationCandidateIndicator(value); }
        }

        internal Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator CandidateEducatorPreparationProgramAssociationCandidateIndicator
        {
            set { SetCandidateEducatorPreparationProgramAssociationCandidateIndicator(value); }
        }

        private void SetCandidateEducatorPreparationProgramAssociationCandidateIndicator(Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator value)
        {
            _candidateEducatorPreparationProgramAssociationCandidateIndicator = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateEducatorPreparationProgramAssociationCandidateIndicator == null || !_candidateEducatorPreparationProgramAssociationCandidateIndicator.Equals(compareTo.CandidateEducatorPreparationProgramAssociationCandidateIndicator))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_candidateEducatorPreparationProgramAssociationCandidateIndicator != null)
                    hash = hash * 23 + _candidateEducatorPreparationProgramAssociationCandidateIndicator.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CandidateRelationshipToStaffAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.CandidateRelationshipToStaffAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the CandidateRelationshipToStaffAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateRelationshipToStaffAssociationReference
    {
        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CandidateIdentifier != default(string) && StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "CandidateRelationshipToStaffAssociation",
                Href = $"/tpdm/candidateRelationshipToStaffAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.CandidateRelationshipToStaffAssociation table of the CandidateRelationshipToStaffAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateRelationshipToStaffAssociation : Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation, IHasETag, Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CandidateRelationshipToStaffAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _candidateReferenceExplicitlyAssigned;
        private Candidate.TPDM.CandidateReference _candidateReference;
        private Candidate.TPDM.CandidateReference ImplicitCandidateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_candidateReference == null && !_candidateReferenceExplicitlyAssigned)
                    _candidateReference = new Candidate.TPDM.CandidateReference();

                return _candidateReference;
            }
        }

        [DataMember(Name="candidateReference")][NaturalKeyMember]
        public Candidate.TPDM.CandidateReference CandidateReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCandidateReference != null
                    && (_candidateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCandidateReference.IsReferenceFullyDefined()))
                    return ImplicitCandidateReference;

                return null;
            }
            set
            {
                _candidateReferenceExplicitlyAssigned = true;
                _candidateReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.EdFi.StaffReference _staffReference;
        private Staff.EdFi.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.EdFi.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.EdFi.StaffReference StaffReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set
            {
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a candidate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.CandidateIdentifier
        {
            get
            {
                if (ImplicitCandidateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCandidateReference.IsReferenceFullyDefined()))
                    return ImplicitCandidateReference.CandidateIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Candidate
                _candidateReferenceExplicitlyAssigned = false;
                ImplicitCandidateReference.CandidateIdentifier = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).CandidateIdentifier == null
                || !(this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).CandidateIdentifier.Equals(compareTo.CandidateIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).StaffUniqueId == null
                || !(this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).StaffUniqueId.Equals(compareTo.StaffUniqueId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).CandidateIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).CandidateIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).StaffUniqueId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the candidate is associated to the staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The month, day, and year on which the candidate stops association with the staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Defines the staff relationship to the candidate (e.g., supervising principal, mentor, coordinating teacher, etc. )
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffToCandidateRelationshipDescriptor")]
        public string StaffToCandidateRelationshipDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateRelationshipToStaffAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateRelationshipToStaffAssociationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport.IsBeginDateSupported                               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport.IsEndDateSupported                                 { get { return true; } set { } }
        bool Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport.IsStaffToCandidateRelationshipDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.CandidateResourceId
        {
            get { return null; }
            set { ImplicitCandidateReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.CandidateDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCandidateReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.StaffResourceId
        {
            get { return null; }
            set { ImplicitStaffReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.StaffDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitStaffReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateRelationshipToStaffAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateRelationshipToStaffAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateRelationshipToStaffAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Certification

namespace EdFi.Ods.Api.Common.Models.Resources.Certification.TPDM
{
    /// <summary>
    /// Represents a reference to the Certification resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationReference
    {
        [DataMember(Name="certificationIdentifier"), NaturalKeyMember]
        public string CertificationIdentifier { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CertificationIdentifier != default(string) && Namespace != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Certification",
                Href = $"/tpdm/certifications/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Certification table of the Certification aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Certification : Entities.Common.TPDM.ICertification, IHasETag, Entities.Common.TPDM.ICertificationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Certification()
        {
            CertificationCertificationExams = new List<CertificationCertificationExam>();
            CertificationGradeLevels = new List<CertificationGradeLevel>();
            CertificationRoutes = new List<CertificationRoute>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Certification resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier or serial number assigned to the Certification.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationIdentifier"), NaturalKeyMember]
        public string CertificationIdentifier { get; set; }

        /// <summary>
        /// Namespace for the Certification, typically associated with the issuing authority.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertification;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICertification).CertificationIdentifier == null
                || !(this as Entities.Common.TPDM.ICertification).CertificationIdentifier.Equals(compareTo.CertificationIdentifier))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICertification).Namespace == null
                || !(this as Entities.Common.TPDM.ICertification).Namespace.Equals(compareTo.Namespace))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertification).CertificationIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertification).CertificationIdentifier.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertification).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertification).Namespace.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The field of certification (e.g., Mathematics, Music).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationFieldDescriptor")]
        public string CertificationFieldDescriptor { get; set; }

        /// <summary>
        /// The level (e.g., Elementary, Secondary) or category (administrative, specialist) of the Certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationLevelDescriptor")]
        public string CertificationLevelDescriptor { get; set; }

        /// <summary>
        /// The standard, law or policy defining the certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationStandardDescriptor")]
        public string CertificationStandardDescriptor { get; set; }

        /// <summary>
        /// The title of the Certification.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationTitle")]
        public string CertificationTitle { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.ICertification.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEducationOrganizationReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The role authorized by the Certification (e.g., Principal, Reading Specialist), typically associated with service and administrative certifications.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educatorRoleDescriptor")]
        public string EducatorRoleDescriptor { get; set; }

        /// <summary>
        /// The year, month and day on which the Certification is offered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// The month, day, and year on which the Certification offering is expected to end.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The setting authorized by the Certification in which a child receives education and related services; for example: Classroom, Virtual, Vocational.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="instructionalSettingDescriptor")]
        public string InstructionalSettingDescriptor { get; set; }

        /// <summary>
        /// The minimum level of degree, if any, required for Certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="minimumDegreeDescriptor")]
        public string MinimumDegreeDescriptor { get; set; }

        /// <summary>
        /// The type of students the Section is offered and tailored to; for example: Bilingual students, Remedial education students, Gifted and talented students, Career and Technical Education students, Special education students.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="populationServedDescriptor")]
        public string PopulationServedDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CertificationCertificationExam> _certificationCertificationExams;
        private ICollection<Entities.Common.TPDM.ICertificationCertificationExam> _certificationCertificationExamsCovariant;

        [DataMember(Name="certificationExams"), NoDuplicateMembers]
        public ICollection<CertificationCertificationExam> CertificationCertificationExams
        {
            get { return _certificationCertificationExams; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CertificationCertificationExam>(value,
                    (s, e) => ((Entities.Common.TPDM.ICertificationCertificationExam)e.Item).Certification = this);
                _certificationCertificationExams = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICertificationCertificationExam, CertificationCertificationExam>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICertificationCertificationExam)e.Item).Certification = this;
                _certificationCertificationExamsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationCertificationExam> Entities.Common.TPDM.ICertification.CertificationCertificationExams
        {
            get { return _certificationCertificationExamsCovariant; }
            set { CertificationCertificationExams = new List<CertificationCertificationExam>(value.Cast<CertificationCertificationExam>()); }
        }

        private ICollection<CertificationGradeLevel> _certificationGradeLevels;
        private ICollection<Entities.Common.TPDM.ICertificationGradeLevel> _certificationGradeLevelsCovariant;

        [DataMember(Name="gradeLevels"), NoDuplicateMembers]
        public ICollection<CertificationGradeLevel> CertificationGradeLevels
        {
            get { return _certificationGradeLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CertificationGradeLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.ICertificationGradeLevel)e.Item).Certification = this);
                _certificationGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICertificationGradeLevel, CertificationGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICertificationGradeLevel)e.Item).Certification = this;
                _certificationGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationGradeLevel> Entities.Common.TPDM.ICertification.CertificationGradeLevels
        {
            get { return _certificationGradeLevelsCovariant; }
            set { CertificationGradeLevels = new List<CertificationGradeLevel>(value.Cast<CertificationGradeLevel>()); }
        }

        private ICollection<CertificationRoute> _certificationRoutes;
        private ICollection<Entities.Common.TPDM.ICertificationRoute> _certificationRoutesCovariant;

        [DataMember(Name="routes"), NoDuplicateMembers]
        public ICollection<CertificationRoute> CertificationRoutes
        {
            get { return _certificationRoutes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CertificationRoute>(value,
                    (s, e) => ((Entities.Common.TPDM.ICertificationRoute)e.Item).Certification = this);
                _certificationRoutes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICertificationRoute, CertificationRoute>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICertificationRoute)e.Item).Certification = this;
                _certificationRoutesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationRoute> Entities.Common.TPDM.ICertification.CertificationRoutes
        {
            get { return _certificationRoutesCovariant; }
            set { CertificationRoutes = new List<CertificationRoute>(value.Cast<CertificationRoute>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_certificationCertificationExams != null) foreach (var item in _certificationCertificationExams)
            {
                item.Certification = this;
            }

            if (_certificationGradeLevels != null) foreach (var item in _certificationGradeLevels)
            {
                item.Certification = this;
            }

            if (_certificationRoutes != null) foreach (var item in _certificationRoutes)
            {
                item.Certification = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertification)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationMapper.MapTo(this, (Entities.Common.TPDM.ICertification)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationCertificationExamsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationFieldDescriptorSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationGradeLevelsSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationLevelDescriptorSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationRoutesSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationStandardDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationTitleSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEducationOrganizationIdSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEducatorRoleDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEffectiveDateSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEndDateSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsInstructionalSettingDescriptorSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsMinimumDegreeDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsPopulationServedDescriptorSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICertificationCertificationExam, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationCertificationExamIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICertificationGradeLevel, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationGradeLevelIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.ICertificationRoute, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationRouteIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICertification.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICertification.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationPutPostRequestValidator : FluentValidation.AbstractValidator<Certification>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Certification> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var certificationCertificationExamsValidator = new CertificationCertificationExamPutPostRequestValidator();

            foreach (var item in instance.CertificationCertificationExams)
            {
                var validationResult = certificationCertificationExamsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var certificationGradeLevelsValidator = new CertificationGradeLevelPutPostRequestValidator();

            foreach (var item in instance.CertificationGradeLevels)
            {
                var validationResult = certificationGradeLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var certificationRoutesValidator = new CertificationRoutePutPostRequestValidator();

            foreach (var item in instance.CertificationRoutes)
            {
                var validationResult = certificationRoutesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CertificationCertificationExam table of the Certification aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationCertificationExam : Entities.Common.TPDM.ICertificationCertificationExam, Entities.Common.TPDM.ICertificationCertificationExamSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _certificationExamReferenceExplicitlyAssigned;
        private CertificationExam.TPDM.CertificationExamReference _certificationExamReference;
        private CertificationExam.TPDM.CertificationExamReference ImplicitCertificationExamReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_certificationExamReference == null && !_certificationExamReferenceExplicitlyAssigned)
                    _certificationExamReference = new CertificationExam.TPDM.CertificationExamReference();

                return _certificationExamReference;
            }
        }

        [DataMember(Name="certificationExamReference")][NaturalKeyMember]
        public CertificationExam.TPDM.CertificationExamReference CertificationExamReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCertificationExamReference != null
                    && (_certificationExamReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCertificationExamReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationExamReference;

                return null;
            }
            set
            {
                _certificationExamReferenceExplicitlyAssigned = true;
                _certificationExamReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICertification _certification;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICertification Entities.Common.TPDM.ICertificationCertificationExam.Certification
        {
            get { return _certification; }
            set { SetCertification(value); }
        }

        internal Entities.Common.TPDM.ICertification Certification
        {
            set { SetCertification(value); }
        }

        private void SetCertification(Entities.Common.TPDM.ICertification value)
        {
            _certification = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the CertificationExam.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamIdentifier
        {
            get
            {
                if (ImplicitCertificationExamReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationExamReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationExamReference.CertificationExamIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CertificationExam
                _certificationExamReferenceExplicitlyAssigned = false;
                ImplicitCertificationExamReference.CertificationExamIdentifier = value;
            }
        }

        /// <summary>
        /// Namespace for the CertificationExam.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamNamespace
        {
            get
            {
                if (ImplicitCertificationExamReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationExamReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationExamReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CertificationExam
                _certificationExamReferenceExplicitlyAssigned = false;
                ImplicitCertificationExamReference.Namespace = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationCertificationExam;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_certification == null || !_certification.Equals(compareTo.Certification))
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamIdentifier == null
                || !(this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamIdentifier.Equals(compareTo.CertificationExamIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamNamespace == null
                || !(this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamNamespace.Equals(compareTo.CertificationExamNamespace))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_certification != null)
                    hash = hash * 23 + _certification.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamNamespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationCertificationExam).CertificationExamNamespace.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationCertificationExamMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationCertificationExam)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationCertificationExamMapper.MapTo(this, (Entities.Common.TPDM.ICertificationCertificationExam)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamResourceId
        {
            get { return null; }
            set { ImplicitCertificationExamReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCertificationExamReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationCertificationExamPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationCertificationExam>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationCertificationExam> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CertificationGradeLevel table of the Certification aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationGradeLevel : Entities.Common.TPDM.ICertificationGradeLevel, Entities.Common.TPDM.ICertificationGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICertification _certification;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICertification Entities.Common.TPDM.ICertificationGradeLevel.Certification
        {
            get { return _certification; }
            set { SetCertification(value); }
        }

        internal Entities.Common.TPDM.ICertification Certification
        {
            set { SetCertification(value); }
        }

        private void SetCertification(Entities.Common.TPDM.ICertification value)
        {
            _certification = value;
        }

        /// <summary>
        /// The grade level(s) certified for teaching.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationGradeLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_certification == null || !_certification.Equals(compareTo.Certification))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICertificationGradeLevel).GradeLevelDescriptor == null
                || !(this as Entities.Common.TPDM.ICertificationGradeLevel).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_certification != null)
                    hash = hash * 23 + _certification.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertificationGradeLevel).GradeLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationGradeLevel).GradeLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationGradeLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationGradeLevelMapper.MapTo(this, (Entities.Common.TPDM.ICertificationGradeLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationGradeLevelPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationGradeLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationGradeLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CertificationRoute table of the Certification aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationRoute : Entities.Common.TPDM.ICertificationRoute, Entities.Common.TPDM.ICertificationRouteSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICertification _certification;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICertification Entities.Common.TPDM.ICertificationRoute.Certification
        {
            get { return _certification; }
            set { SetCertification(value); }
        }

        internal Entities.Common.TPDM.ICertification Certification
        {
            set { SetCertification(value); }
        }

        private void SetCertification(Entities.Common.TPDM.ICertification value)
        {
            _certification = value;
        }

        /// <summary>
        /// The process, program ,or pathway used to obtain certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationRouteDescriptor"), NaturalKeyMember]
        public string CertificationRouteDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationRoute;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_certification == null || !_certification.Equals(compareTo.Certification))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICertificationRoute).CertificationRouteDescriptor == null
                || !(this as Entities.Common.TPDM.ICertificationRoute).CertificationRouteDescriptor.Equals(compareTo.CertificationRouteDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_certification != null)
                    hash = hash * 23 + _certification.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertificationRoute).CertificationRouteDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationRoute).CertificationRouteDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationRouteMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationRoute)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationRouteMapper.MapTo(this, (Entities.Common.TPDM.ICertificationRoute)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationRoutePutPostRequestValidator : FluentValidation.AbstractValidator<CertificationRoute>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationRoute> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationExam

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationExam.TPDM
{
    /// <summary>
    /// Represents a reference to the CertificationExam resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationExamReference
    {
        [DataMember(Name="certificationExamIdentifier"), NaturalKeyMember]
        public string CertificationExamIdentifier { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CertificationExamIdentifier != default(string) && Namespace != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "CertificationExam",
                Href = $"/tpdm/certificationExams/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.CertificationExam table of the CertificationExam aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationExam : Entities.Common.TPDM.ICertificationExam, IHasETag, Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationExam resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier or serial number assigned to the CertificationExam.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamIdentifier"), NaturalKeyMember]
        public string CertificationExamIdentifier { get; set; }

        /// <summary>
        /// Namespace for the CertificationExam.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationExam;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICertificationExam).CertificationExamIdentifier == null
                || !(this as Entities.Common.TPDM.ICertificationExam).CertificationExamIdentifier.Equals(compareTo.CertificationExamIdentifier))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICertificationExam).Namespace == null
                || !(this as Entities.Common.TPDM.ICertificationExam).Namespace.Equals(compareTo.Namespace))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertificationExam).CertificationExamIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExam).CertificationExamIdentifier.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertificationExam).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExam).Namespace.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The title of the Certification Exam.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamTitle")]
        public string CertificationExamTitle { get; set; }

        /// <summary>
        /// The type or category of Certification Exam.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationExamTypeDescriptor")]
        public string CertificationExamTypeDescriptor { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.ICertificationExam.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEducationOrganizationReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The year, month and day on which the CertificationExam is offered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// The month, day, and year on which the CertificationExam offering is expected to end.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationExamMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationExam)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationExamMapper.MapTo(this, (Entities.Common.TPDM.ICertificationExam)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsCertificationExamTitleSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsCertificationExamTypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEducationOrganizationIdSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEffectiveDateSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEndDateSupported                          { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICertificationExam.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICertificationExam.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationExamPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationExam>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationExam> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationExamResult

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationExamResult.TPDM
{
    /// <summary>
    /// Represents a reference to the CertificationExamResult resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationExamResultReference
    {
        [DataMember(Name="certificationExamDate"), NaturalKeyMember]
        public DateTime CertificationExamDate { get; set; }

        [DataMember(Name="certificationExamIdentifier"), NaturalKeyMember]
        public string CertificationExamIdentifier { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CertificationExamDate != default(DateTime) && CertificationExamIdentifier != default(string) && Namespace != default(string) && PersonId != default(string) && SourceSystemDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "CertificationExamResult",
                Href = $"/tpdm/certificationExamResults/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.CertificationExamResult table of the CertificationExamResult aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationExamResult : Entities.Common.TPDM.ICertificationExamResult, IHasETag, Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationExamResult resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _certificationExamReferenceExplicitlyAssigned;
        private CertificationExam.TPDM.CertificationExamReference _certificationExamReference;
        private CertificationExam.TPDM.CertificationExamReference ImplicitCertificationExamReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_certificationExamReference == null && !_certificationExamReferenceExplicitlyAssigned)
                    _certificationExamReference = new CertificationExam.TPDM.CertificationExamReference();

                return _certificationExamReference;
            }
        }

        [DataMember(Name="certificationExamReference")][NaturalKeyMember]
        public CertificationExam.TPDM.CertificationExamReference CertificationExamReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCertificationExamReference != null
                    && (_certificationExamReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCertificationExamReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationExamReference;

                return null;
            }
            set
            {
                _certificationExamReferenceExplicitlyAssigned = true;
                _certificationExamReference = value;
            }
        }
        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The year, month and day on which the CertificationExam is taken.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime CertificationExamDate { get; set; }

        /// <summary>
        /// Identifier or serial number assigned to the CertificationExam.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICertificationExamResult.CertificationExamIdentifier
        {
            get
            {
                if (ImplicitCertificationExamReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationExamReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationExamReference.CertificationExamIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CertificationExam
                _certificationExamReferenceExplicitlyAssigned = false;
                ImplicitCertificationExamReference.CertificationExamIdentifier = value;
            }
        }

        /// <summary>
        /// Namespace for the CertificationExam.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICertificationExamResult.Namespace
        {
            get
            {
                if (ImplicitCertificationExamReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationExamReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationExamReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // CertificationExam
                _certificationExamReferenceExplicitlyAssigned = false;
                ImplicitCertificationExamReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICertificationExamResult.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (CertificationExamResult.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICertificationExamResult.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationExamResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamDate == null
                || !(this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamDate.Equals(compareTo.CertificationExamDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamIdentifier == null
                || !(this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamIdentifier.Equals(compareTo.CertificationExamIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICertificationExamResult).Namespace == null
                || !(this as Entities.Common.TPDM.ICertificationExamResult).Namespace.Equals(compareTo.Namespace))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICertificationExamResult).PersonId == null
                || !(this as Entities.Common.TPDM.ICertificationExamResult).PersonId.Equals(compareTo.PersonId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ICertificationExamResult).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.ICertificationExamResult).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamResult).CertificationExamIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICertificationExamResult).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamResult).Namespace.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICertificationExamResult).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamResult).PersonId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ICertificationExamResult).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamResult).SourceSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The number of the person's attempt for the Certification Exam.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attemptNumber")]
        public int? AttemptNumber { get; set; }

        /// <summary>
        /// Indicator that the person passed the Certification Exam.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamPassIndicator")]
        public bool? CertificationExamPassIndicator { get; set; }

        /// <summary>
        /// The score result for the Certification Exam attempt.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamScore")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? CertificationExamScore { get; set; }

        /// <summary>
        /// The status of the Certification Exam attempt.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationExamStatusDescriptor")]
        public string CertificationExamStatusDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationExamResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationExamResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationExamResultMapper.MapTo(this, (Entities.Common.TPDM.ICertificationExamResult)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsAttemptNumberSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamPassIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamScoreSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamStatusDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICertificationExamResult.CertificationExamResourceId
        {
            get { return null; }
            set { ImplicitCertificationExamReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICertificationExamResult.CertificationExamDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCertificationExamReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ICertificationExamResult.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICertificationExamResult.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationExamResultPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationExamResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationExamResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationExamStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationExamStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationExamStatusDescriptor table of the CertificationExamStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationExamStatusDescriptor : Entities.Common.TPDM.ICertificationExamStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationExamStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamStatusDescriptorId"), NaturalKeyMember]
        public int CertificationExamStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationExamStatusDescriptorId; }
            set { CertificationExamStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationExamStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICertificationExamStatusDescriptor).CertificationExamStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.ICertificationExamStatusDescriptor).CertificationExamStatusDescriptorId.Equals(compareTo.CertificationExamStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICertificationExamStatusDescriptor).CertificationExamStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamStatusDescriptor).CertificationExamStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationExamStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationExamStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationExamStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationExamStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationExamStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationExamStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationExamStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationExamTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationExamTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationExamTypeDescriptor table of the CertificationExamTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationExamTypeDescriptor : Entities.Common.TPDM.ICertificationExamTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationExamTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationExamTypeDescriptorId"), NaturalKeyMember]
        public int CertificationExamTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationExamTypeDescriptorId; }
            set { CertificationExamTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationExamTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICertificationExamTypeDescriptor).CertificationExamTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.ICertificationExamTypeDescriptor).CertificationExamTypeDescriptorId.Equals(compareTo.CertificationExamTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICertificationExamTypeDescriptor).CertificationExamTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationExamTypeDescriptor).CertificationExamTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationExamTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationExamTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationExamTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationExamTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationExamTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationExamTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationExamTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationFieldDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationFieldDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationFieldDescriptor table of the CertificationFieldDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationFieldDescriptor : Entities.Common.TPDM.ICertificationFieldDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationFieldDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationFieldDescriptorId"), NaturalKeyMember]
        public int CertificationFieldDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationFieldDescriptorId; }
            set { CertificationFieldDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationFieldDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICertificationFieldDescriptor).CertificationFieldDescriptorId == null
                || !(this as Entities.Common.TPDM.ICertificationFieldDescriptor).CertificationFieldDescriptorId.Equals(compareTo.CertificationFieldDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICertificationFieldDescriptor).CertificationFieldDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationFieldDescriptor).CertificationFieldDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationFieldDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationFieldDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationFieldDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationFieldDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationFieldDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationFieldDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationFieldDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationLevelDescriptor table of the CertificationLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationLevelDescriptor : Entities.Common.TPDM.ICertificationLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationLevelDescriptorId"), NaturalKeyMember]
        public int CertificationLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationLevelDescriptorId; }
            set { CertificationLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICertificationLevelDescriptor).CertificationLevelDescriptorId == null
                || !(this as Entities.Common.TPDM.ICertificationLevelDescriptor).CertificationLevelDescriptorId.Equals(compareTo.CertificationLevelDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICertificationLevelDescriptor).CertificationLevelDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationLevelDescriptor).CertificationLevelDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationRouteDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationRouteDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationRouteDescriptor table of the CertificationRouteDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationRouteDescriptor : Entities.Common.TPDM.ICertificationRouteDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationRouteDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationRouteDescriptorId"), NaturalKeyMember]
        public int CertificationRouteDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationRouteDescriptorId; }
            set { CertificationRouteDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationRouteDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICertificationRouteDescriptor).CertificationRouteDescriptorId == null
                || !(this as Entities.Common.TPDM.ICertificationRouteDescriptor).CertificationRouteDescriptorId.Equals(compareTo.CertificationRouteDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICertificationRouteDescriptor).CertificationRouteDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationRouteDescriptor).CertificationRouteDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationRouteDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationRouteDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationRouteDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationRouteDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationRouteDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationRouteDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationRouteDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationStandardDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationStandardDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationStandardDescriptor table of the CertificationStandardDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationStandardDescriptor : Entities.Common.TPDM.ICertificationStandardDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationStandardDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationStandardDescriptorId"), NaturalKeyMember]
        public int CertificationStandardDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationStandardDescriptorId; }
            set { CertificationStandardDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICertificationStandardDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICertificationStandardDescriptor).CertificationStandardDescriptorId == null
                || !(this as Entities.Common.TPDM.ICertificationStandardDescriptor).CertificationStandardDescriptorId.Equals(compareTo.CertificationStandardDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICertificationStandardDescriptor).CertificationStandardDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICertificationStandardDescriptor).CertificationStandardDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationStandardDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationStandardDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationStandardDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationStandardDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationStandardDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationStandardDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationStandardDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CoteachingStyleObservedDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CoteachingStyleObservedDescriptor table of the CoteachingStyleObservedDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CoteachingStyleObservedDescriptor : Entities.Common.TPDM.ICoteachingStyleObservedDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CoteachingStyleObservedDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="coteachingStyleObservedDescriptorId"), NaturalKeyMember]
        public int CoteachingStyleObservedDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CoteachingStyleObservedDescriptorId; }
            set { CoteachingStyleObservedDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor).CoteachingStyleObservedDescriptorId == null
                || !(this as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor).CoteachingStyleObservedDescriptorId.Equals(compareTo.CoteachingStyleObservedDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor).CoteachingStyleObservedDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor).CoteachingStyleObservedDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CoteachingStyleObservedDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICoteachingStyleObservedDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CoteachingStyleObservedDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICoteachingStyleObservedDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CoteachingStyleObservedDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CoteachingStyleObservedDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CoteachingStyleObservedDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Credential

namespace EdFi.Ods.Api.Common.Models.Resources.Credential.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CredentialExtension table of the Credential aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialExtension : Entities.Common.TPDM.ICredentialExtension, Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CredentialExtension()
        {
            CredentialStudentAcademicRecords = new List<CredentialStudentAcademicRecord>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _certificationReferenceExplicitlyAssigned;
        private Certification.TPDM.CertificationReference _certificationReference;
        private Certification.TPDM.CertificationReference ImplicitCertificationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_certificationReference == null && !_certificationReferenceExplicitlyAssigned)
                    _certificationReference = new Certification.TPDM.CertificationReference();

                return _certificationReference;
            }
        }

        [DataMember(Name="certificationReference")]
        public Certification.TPDM.CertificationReference CertificationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCertificationReference != null
                    && (_certificationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCertificationReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationReference;

                return null;
            }
            set
            {
                _certificationReferenceExplicitlyAssigned = true;
                _certificationReference = value;
            }
        }
        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ICredential _credential;

        [IgnoreDataMember]
        Entities.Common.EdFi.ICredential Entities.Common.TPDM.ICredentialExtension.Credential
        {
            get { return _credential; }
            set { SetCredential(value); }
        }

        internal Entities.Common.EdFi.ICredential Credential
        {
            set { SetCredential(value); }
        }

        private void SetCredential(Entities.Common.EdFi.ICredential value)
        {
            _credential = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICredentialExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_credential == null || !_credential.Equals(compareTo.Credential))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_credential != null)
                    hash = hash * 23 + _credential.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicator that the credential was granted under the authority of a national Board Certification.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="boardCertificationIndicator")]
        public bool? BoardCertificationIndicator { get; set; }

        /// <summary>
        /// Identifier or serial number assigned to the Certification.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialExtension.CertificationIdentifier
        {
            get
            {
                if (ImplicitCertificationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitCertificationReference.CertificationIdentifier;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Certification
                _certificationReferenceExplicitlyAssigned = false;
                ImplicitCertificationReference.CertificationIdentifier = value;
            }
        }

        /// <summary>
        /// The process, program, or pathway used to obtain certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationRouteDescriptor")]
        public string CertificationRouteDescriptor { get; set; }

        /// <summary>
        /// The title of the certification obtained by the educator.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationTitle")]
        public string CertificationTitle { get; set; }

        /// <summary>
        /// The month, day, and year on which the credential status was effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialStatusDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? CredentialStatusDate { get; set; }

        /// <summary>
        /// The most recent status of the credential (e.g., active, suspended, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="credentialStatusDescriptor")]
        public string CredentialStatusDescriptor { get; set; }

        /// <summary>
        /// Namespace for the Certification, typically associated with the issuing authority.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialExtension.Namespace
        {
            get
            {
                if (ImplicitCertificationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitCertificationReference.Namespace;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Certification
                _certificationReferenceExplicitlyAssigned = false;
                ImplicitCertificationReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialExtension.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (Credential.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICredentialExtension.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CredentialStudentAcademicRecord> _credentialStudentAcademicRecords;
        private ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> _credentialStudentAcademicRecordsCovariant;

        [DataMember(Name="studentAcademicRecords"), NoDuplicateMembers]
        public ICollection<CredentialStudentAcademicRecord> CredentialStudentAcademicRecords
        {
            get { return _credentialStudentAcademicRecords; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CredentialStudentAcademicRecord>(value,
                    (s, e) => ((Entities.Common.TPDM.ICredentialStudentAcademicRecord)e.Item).CredentialExtension = this);
                _credentialStudentAcademicRecords = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICredentialStudentAcademicRecord, CredentialStudentAcademicRecord>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICredentialStudentAcademicRecord)e.Item).CredentialExtension = this;
                _credentialStudentAcademicRecordsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> Entities.Common.TPDM.ICredentialExtension.CredentialStudentAcademicRecords
        {
            get { return _credentialStudentAcademicRecordsCovariant; }
            set { CredentialStudentAcademicRecords = new List<CredentialStudentAcademicRecord>(value.Cast<CredentialStudentAcademicRecord>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_credentialStudentAcademicRecords != null) foreach (var item in _credentialStudentAcademicRecords)
            {
                item.CredentialExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialExtensionMapper.MapTo(this, (Entities.Common.TPDM.ICredentialExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsBoardCertificationIndicatorSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationIdentifierSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationRouteDescriptorSupported      { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationTitleSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStatusDateSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStatusDescriptorSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStudentAcademicRecordsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsNamespaceSupported                         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsPersonIdSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsSourceSystemDescriptorSupported            { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.ICredentialStudentAcademicRecord, bool> Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStudentAcademicRecordIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICredentialExtension.CertificationResourceId
        {
            get { return null; }
            set { ImplicitCertificationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICredentialExtension.CertificationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCertificationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ICredentialExtension.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICredentialExtension.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var credentialStudentAcademicRecordsValidator = new CredentialStudentAcademicRecordPutPostRequestValidator();

            foreach (var item in instance.CredentialStudentAcademicRecords)
            {
                var validationResult = credentialStudentAcademicRecordsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CredentialStudentAcademicRecord table of the Credential aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialStudentAcademicRecord : Entities.Common.TPDM.ICredentialStudentAcademicRecord, Entities.Common.TPDM.ICredentialStudentAcademicRecordSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _studentAcademicRecordReferenceExplicitlyAssigned;
        private StudentAcademicRecord.EdFi.StudentAcademicRecordReference _studentAcademicRecordReference;
        private StudentAcademicRecord.EdFi.StudentAcademicRecordReference ImplicitStudentAcademicRecordReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentAcademicRecordReference == null && !_studentAcademicRecordReferenceExplicitlyAssigned)
                    _studentAcademicRecordReference = new StudentAcademicRecord.EdFi.StudentAcademicRecordReference();

                return _studentAcademicRecordReference;
            }
        }

        [DataMember(Name="studentAcademicRecordReference")][NaturalKeyMember]
        public StudentAcademicRecord.EdFi.StudentAcademicRecordReference StudentAcademicRecordReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitStudentAcademicRecordReference != null
                    && (_studentAcademicRecordReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference;

                return null;
            }
            set
            {
                _studentAcademicRecordReferenceExplicitlyAssigned = true;
                _studentAcademicRecordReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICredentialExtension _credentialExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICredentialExtension Entities.Common.TPDM.ICredentialStudentAcademicRecord.CredentialExtension
        {
            get { return _credentialExtension; }
            set { SetCredentialExtension(value); }
        }

        internal Entities.Common.TPDM.ICredentialExtension CredentialExtension
        {
            set { SetCredentialExtension(value); }
        }

        private void SetCredentialExtension(Entities.Common.TPDM.ICredentialExtension value)
        {
            _credentialExtension = value;
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.ICredentialStudentAcademicRecord.EducationOrganizationId
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.ICredentialStudentAcademicRecord.SchoolYear
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (CredentialStudentAcademicRecord.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.TermDescriptor
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentAcademicRecordReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICredentialStudentAcademicRecord;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_credentialExtension == null || !_credentialExtension.Equals(compareTo.CredentialExtension))
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).SchoolYear == null
                || !(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).StudentUniqueId == null
                || !(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).StudentUniqueId.Equals(compareTo.StudentUniqueId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_credentialExtension != null)
                    hash = hash * 23 + _credentialExtension.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).SchoolYear.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).StudentUniqueId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).StudentUniqueId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialStudentAcademicRecordMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialStudentAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialStudentAcademicRecordMapper.MapTo(this, (Entities.Common.TPDM.ICredentialStudentAcademicRecord)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordResourceId
        {
            get { return null; }
            set { ImplicitStudentAcademicRecordReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitStudentAcademicRecordReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialStudentAcademicRecordPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialStudentAcademicRecord>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialStudentAcademicRecord> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CredentialEvent

namespace EdFi.Ods.Api.Common.Models.Resources.CredentialEvent.TPDM
{
    /// <summary>
    /// Represents a reference to the CredentialEvent resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialEventReference
    {
        [DataMember(Name="credentialEventDate"), NaturalKeyMember]
        public DateTime CredentialEventDate { get; set; }

        [DataMember(Name="credentialEventTypeDescriptor"), NaturalKeyMember]
        public string CredentialEventTypeDescriptor { get; set; }

        [DataMember(Name="credentialIdentifier"), NaturalKeyMember]
        public string CredentialIdentifier { get; set; }

        [DataMember(Name="stateOfIssueStateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateOfIssueStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CredentialEventDate != default(DateTime) && CredentialEventTypeDescriptor != default(string) && CredentialIdentifier != default(string) && StateOfIssueStateAbbreviationDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "CredentialEvent",
                Href = $"/tpdm/credentialEvents/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.CredentialEvent table of the CredentialEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialEvent : Entities.Common.TPDM.ICredentialEvent, IHasETag, Entities.Common.TPDM.ICredentialEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CredentialEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The year, month and day of the Credential Event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialEventDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime CredentialEventDate { get; set; }

        /// <summary>
        /// The type of event associated with a person's Credential (e.g, suspension, revocation, or renewal).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="credentialEventTypeDescriptor"), NaturalKeyMember]
        public string CredentialEventTypeDescriptor { get; set; }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialEvent.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (CredentialEvent.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICredentialEvent.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICredentialEvent;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.ICredentialEvent).CredentialEventDate == null
                || !(this as Entities.Common.TPDM.ICredentialEvent).CredentialEventDate.Equals(compareTo.CredentialEventDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.ICredentialEvent).CredentialEventTypeDescriptor == null
                || !(this as Entities.Common.TPDM.ICredentialEvent).CredentialEventTypeDescriptor.Equals(compareTo.CredentialEventTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ICredentialEvent).CredentialIdentifier == null
                || !(this as Entities.Common.TPDM.ICredentialEvent).CredentialIdentifier.Equals(compareTo.CredentialIdentifier))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ICredentialEvent).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.TPDM.ICredentialEvent).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.ICredentialEvent).CredentialEventDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialEvent).CredentialEventDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.ICredentialEvent).CredentialEventTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialEvent).CredentialEventTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ICredentialEvent).CredentialIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialEvent).CredentialIdentifier.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ICredentialEvent).StateOfIssueStateAbbreviationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialEvent).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The reason for the credential event, or any other descriptive text.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialEventReason")]
        public string CredentialEventReason { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialEventMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialEvent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialEventMapper.MapTo(this, (Entities.Common.TPDM.ICredentialEvent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICredentialEventSynchronizationSourceSupport.IsCredentialEventReasonSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICredentialEvent.CredentialResourceId
        {
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICredentialEvent.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialEventPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialEvent>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialEvent> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CredentialEventTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CredentialEventTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CredentialEventTypeDescriptor table of the CredentialEventTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialEventTypeDescriptor : Entities.Common.TPDM.ICredentialEventTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CredentialEventTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialEventTypeDescriptorId"), NaturalKeyMember]
        public int CredentialEventTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CredentialEventTypeDescriptorId; }
            set { CredentialEventTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICredentialEventTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICredentialEventTypeDescriptor).CredentialEventTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.ICredentialEventTypeDescriptor).CredentialEventTypeDescriptorId.Equals(compareTo.CredentialEventTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICredentialEventTypeDescriptor).CredentialEventTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialEventTypeDescriptor).CredentialEventTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialEventTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialEventTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICredentialEventTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialEventTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialEventTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialEventTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CredentialStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CredentialStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CredentialStatusDescriptor table of the CredentialStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialStatusDescriptor : Entities.Common.TPDM.ICredentialStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CredentialStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialStatusDescriptorId"), NaturalKeyMember]
        public int CredentialStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CredentialStatusDescriptorId; }
            set { CredentialStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ICredentialStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ICredentialStatusDescriptor).CredentialStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.ICredentialStatusDescriptor).CredentialStatusDescriptorId.Equals(compareTo.CredentialStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ICredentialStatusDescriptor).CredentialStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ICredentialStatusDescriptor).CredentialStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICredentialStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: DegreeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.DegreeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.DegreeDescriptor table of the DegreeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class DegreeDescriptor : Entities.Common.TPDM.IDegreeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the DegreeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="degreeDescriptorId"), NaturalKeyMember]
        public int DegreeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return DegreeDescriptorId; }
            set { DegreeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IDegreeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IDegreeDescriptor).DegreeDescriptorId == null
                || !(this as Entities.Common.TPDM.IDegreeDescriptor).DegreeDescriptorId.Equals(compareTo.DegreeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IDegreeDescriptor).DegreeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IDegreeDescriptor).DegreeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.DegreeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IDegreeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.DegreeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IDegreeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class DegreeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<DegreeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<DegreeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EducatorPreparationProgram

namespace EdFi.Ods.Api.Common.Models.Resources.EducatorPreparationProgram.TPDM
{
    /// <summary>
    /// Represents a reference to the EducatorPreparationProgram resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && ProgramName != default(string) && ProgramTypeDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EducatorPreparationProgram",
                Href = $"/tpdm/educatorPreparationPrograms/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgram table of the EducatorPreparationProgram aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgram : Entities.Common.TPDM.IEducatorPreparationProgram, IHasETag, Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EducatorPreparationProgram()
        {
            EducatorPreparationProgramGradeLevels = new List<EducatorPreparationProgramGradeLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducatorPreparationProgram resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEducatorPreparationProgram;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEducatorPreparationProgram).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramName == null
                || !(this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramName.Equals(compareTo.ProgramName))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramTypeDescriptor.Equals(compareTo.ProgramTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEducatorPreparationProgram).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramName.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The current accreditation status of the Educator Preparation Program (e.g., active, pending, revoked,...).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="accreditationStatusDescriptor")]
        public string AccreditationStatusDescriptor { get; set; }

        /// <summary>
        /// The descriptor holds the type of educator prep program (e.g., college, alternative, TFA, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educatorPreparationProgramTypeDescriptor")]
        public string EducatorPreparationProgramTypeDescriptor { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programId")]
        public string ProgramId { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EducatorPreparationProgramGradeLevel> _educatorPreparationProgramGradeLevels;
        private ICollection<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel> _educatorPreparationProgramGradeLevelsCovariant;

        [DataMember(Name="gradeLevels"), NoDuplicateMembers]
        public ICollection<EducatorPreparationProgramGradeLevel> EducatorPreparationProgramGradeLevels
        {
            get { return _educatorPreparationProgramGradeLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EducatorPreparationProgramGradeLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)e.Item).EducatorPreparationProgram = this);
                _educatorPreparationProgramGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, EducatorPreparationProgramGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)e.Item).EducatorPreparationProgram = this;
                _educatorPreparationProgramGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel> Entities.Common.TPDM.IEducatorPreparationProgram.EducatorPreparationProgramGradeLevels
        {
            get { return _educatorPreparationProgramGradeLevelsCovariant; }
            set { EducatorPreparationProgramGradeLevels = new List<EducatorPreparationProgramGradeLevel>(value.Cast<EducatorPreparationProgramGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_educatorPreparationProgramGradeLevels != null) foreach (var item in _educatorPreparationProgramGradeLevels)
            {
                item.EducatorPreparationProgram = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorPreparationProgramMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorPreparationProgramMapper.MapTo(this, (Entities.Common.TPDM.IEducatorPreparationProgram)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsAccreditationStatusDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsEducatorPreparationProgramGradeLevelsSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsEducatorPreparationProgramTypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsProgramIdSupported                                 { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, bool> Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsEducatorPreparationProgramGradeLevelIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorPreparationProgram>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorPreparationProgram> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var educatorPreparationProgramGradeLevelsValidator = new EducatorPreparationProgramGradeLevelPutPostRequestValidator();

            foreach (var item in instance.EducatorPreparationProgramGradeLevels)
            {
                var validationResult = educatorPreparationProgramGradeLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgramGradeLevel table of the EducatorPreparationProgram aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramGradeLevel : Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, Entities.Common.TPDM.IEducatorPreparationProgramGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEducatorPreparationProgram _educatorPreparationProgram;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEducatorPreparationProgram Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel.EducatorPreparationProgram
        {
            get { return _educatorPreparationProgram; }
            set { SetEducatorPreparationProgram(value); }
        }

        internal Entities.Common.TPDM.IEducatorPreparationProgram EducatorPreparationProgram
        {
            set { SetEducatorPreparationProgram(value); }
        }

        private void SetEducatorPreparationProgram(Entities.Common.TPDM.IEducatorPreparationProgram value)
        {
            _educatorPreparationProgram = value;
        }

        /// <summary>
        /// The grade levels served at the EPP Program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_educatorPreparationProgram == null || !_educatorPreparationProgram.Equals(compareTo.EducatorPreparationProgram))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel).GradeLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_educatorPreparationProgram != null)
                    hash = hash * 23 + _educatorPreparationProgram.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel).GradeLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel).GradeLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorPreparationProgramGradeLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorPreparationProgramGradeLevelMapper.MapTo(this, (Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramGradeLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorPreparationProgramGradeLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorPreparationProgramGradeLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EducatorPreparationProgramTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EducatorPreparationProgramTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgramTypeDescriptor table of the EducatorPreparationProgramTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramTypeDescriptor : Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducatorPreparationProgramTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educatorPreparationProgramTypeDescriptorId"), NaturalKeyMember]
        public int EducatorPreparationProgramTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EducatorPreparationProgramTypeDescriptorId; }
            set { EducatorPreparationProgramTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor).EducatorPreparationProgramTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor).EducatorPreparationProgramTypeDescriptorId.Equals(compareTo.EducatorPreparationProgramTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor).EducatorPreparationProgramTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor).EducatorPreparationProgramTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorPreparationProgramTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorPreparationProgramTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorPreparationProgramTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorPreparationProgramTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EducatorRoleDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EducatorRoleDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EducatorRoleDescriptor table of the EducatorRoleDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorRoleDescriptor : Entities.Common.TPDM.IEducatorRoleDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducatorRoleDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educatorRoleDescriptorId"), NaturalKeyMember]
        public int EducatorRoleDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EducatorRoleDescriptorId; }
            set { EducatorRoleDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEducatorRoleDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEducatorRoleDescriptor).EducatorRoleDescriptorId == null
                || !(this as Entities.Common.TPDM.IEducatorRoleDescriptor).EducatorRoleDescriptorId.Equals(compareTo.EducatorRoleDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEducatorRoleDescriptor).EducatorRoleDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEducatorRoleDescriptor).EducatorRoleDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorRoleDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorRoleDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorRoleDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEducatorRoleDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorRoleDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorRoleDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorRoleDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EnglishLanguageExamDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EnglishLanguageExamDescriptor table of the EnglishLanguageExamDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EnglishLanguageExamDescriptor : Entities.Common.TPDM.IEnglishLanguageExamDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EnglishLanguageExamDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="englishLanguageExamDescriptorId"), NaturalKeyMember]
        public int EnglishLanguageExamDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EnglishLanguageExamDescriptorId; }
            set { EnglishLanguageExamDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEnglishLanguageExamDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEnglishLanguageExamDescriptor).EnglishLanguageExamDescriptorId == null
                || !(this as Entities.Common.TPDM.IEnglishLanguageExamDescriptor).EnglishLanguageExamDescriptorId.Equals(compareTo.EnglishLanguageExamDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEnglishLanguageExamDescriptor).EnglishLanguageExamDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEnglishLanguageExamDescriptor).EnglishLanguageExamDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EnglishLanguageExamDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEnglishLanguageExamDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EnglishLanguageExamDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEnglishLanguageExamDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EnglishLanguageExamDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EnglishLanguageExamDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EnglishLanguageExamDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EPPDegreeTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EPPDegreeTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EPPDegreeTypeDescriptor table of the EPPDegreeTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EPPDegreeTypeDescriptor : Entities.Common.TPDM.IEPPDegreeTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EPPDegreeTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eppDegreeTypeDescriptorId"), NaturalKeyMember]
        public int EPPDegreeTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EPPDegreeTypeDescriptorId; }
            set { EPPDegreeTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEPPDegreeTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEPPDegreeTypeDescriptor).EPPDegreeTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IEPPDegreeTypeDescriptor).EPPDegreeTypeDescriptorId.Equals(compareTo.EPPDegreeTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEPPDegreeTypeDescriptor).EPPDegreeTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEPPDegreeTypeDescriptor).EPPDegreeTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EPPDegreeTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEPPDegreeTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EPPDegreeTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEPPDegreeTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EPPDegreeTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EPPDegreeTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EPPDegreeTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EPPProgramPathwayDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EPPProgramPathwayDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EPPProgramPathwayDescriptor table of the EPPProgramPathwayDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EPPProgramPathwayDescriptor : Entities.Common.TPDM.IEPPProgramPathwayDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EPPProgramPathwayDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eppProgramPathwayDescriptorId"), NaturalKeyMember]
        public int EPPProgramPathwayDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EPPProgramPathwayDescriptorId; }
            set { EPPProgramPathwayDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEPPProgramPathwayDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEPPProgramPathwayDescriptor).EPPProgramPathwayDescriptorId == null
                || !(this as Entities.Common.TPDM.IEPPProgramPathwayDescriptor).EPPProgramPathwayDescriptorId.Equals(compareTo.EPPProgramPathwayDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEPPProgramPathwayDescriptor).EPPProgramPathwayDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEPPProgramPathwayDescriptor).EPPProgramPathwayDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EPPProgramPathwayDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEPPProgramPathwayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EPPProgramPathwayDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEPPProgramPathwayDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EPPProgramPathwayDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EPPProgramPathwayDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EPPProgramPathwayDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Evaluation

namespace EdFi.Ods.Api.Common.Models.Resources.Evaluation.TPDM
{
    /// <summary>
    /// Represents a reference to the Evaluation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Evaluation",
                Href = $"/tpdm/evaluations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Evaluation table of the Evaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Evaluation : Entities.Common.TPDM.IEvaluation, IHasETag, Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Evaluation()
        {
            EvaluationRatingLevels = new List<EvaluationRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Evaluation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _performanceEvaluationReferenceExplicitlyAssigned;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference _performanceEvaluationReference;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference ImplicitPerformanceEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_performanceEvaluationReference == null && !_performanceEvaluationReferenceExplicitlyAssigned)
                    _performanceEvaluationReference = new PerformanceEvaluation.TPDM.PerformanceEvaluationReference();

                return _performanceEvaluationReference;
            }
        }

        [DataMember(Name="performanceEvaluationReference")][NaturalKeyMember]
        public PerformanceEvaluation.TPDM.PerformanceEvaluationReference PerformanceEvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPerformanceEvaluationReference != null
                    && (_performanceEvaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference;

                return null;
            }
            set
            {
                _performanceEvaluationReferenceExplicitlyAssigned = true;
                _performanceEvaluationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEvaluation.EducationOrganizationId
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (Evaluation.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluation.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (Evaluation.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluation.SchoolYear
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (Evaluation.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluation.TermDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluation).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEvaluation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluation).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluation).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluation).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluation).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluation).SchoolYear == null
                || !(this as Entities.Common.TPDM.IEvaluation).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluation).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluation).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluation).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).EducationOrganizationId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluation).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).EvaluationPeriodDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluation).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluation).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluation).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluation).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The type of the evaluation (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationTypeDescriptor")]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interRaterReliabilityScore")]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation. If omitted, assumed to be 0.0.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationRatingLevel> _evaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> _evaluationRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<EvaluationRatingLevel> EvaluationRatingLevels
        {
            get { return _evaluationRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationRatingLevel)e.Item).Evaluation = this);
                _evaluationRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationRatingLevel, EvaluationRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationRatingLevel)e.Item).Evaluation = this;
                _evaluationRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> Entities.Common.TPDM.IEvaluation.EvaluationRatingLevels
        {
            get { return _evaluationRatingLevelsCovariant; }
            set { EvaluationRatingLevels = new List<EvaluationRatingLevel>(value.Cast<EvaluationRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationRatingLevels != null) foreach (var item in _evaluationRatingLevels)
            {
                item.Evaluation = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationMapper.MapTo(this, (Entities.Common.TPDM.IEvaluation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationRatingLevelsSupported      { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsMaxRatingSupported                   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsMinRatingSupported                   { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEvaluationRatingLevel, bool> Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationRatingLevelIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluation.PerformanceEvaluationResourceId
        {
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationPutPostRequestValidator : FluentValidation.AbstractValidator<Evaluation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Evaluation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var evaluationRatingLevelsValidator = new EvaluationRatingLevelPutPostRequestValidator();

            foreach (var item in instance.EvaluationRatingLevels)
            {
                var validationResult = evaluationRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevel table of the Evaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevel : Entities.Common.TPDM.IEvaluationRatingLevel, Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluation _evaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluation Entities.Common.TPDM.IEvaluationRatingLevel.Evaluation
        {
            get { return _evaluation; }
            set { SetEvaluation(value); }
        }

        internal Entities.Common.TPDM.IEvaluation Evaluation
        {
            set { SetEvaluation(value); }
        }

        private void SetEvaluation(Entities.Common.TPDM.IEvaluation value)
        {
            _evaluation = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluation == null || !_evaluation.Equals(compareTo.Evaluation))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationRatingLevel).EvaluationRatingLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IEvaluationRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluation != null)
                    hash = hash * 23 + _evaluation.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationRatingLevel).EvaluationRatingLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRatingLevel).EvaluationRatingLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport.IsMinRatingSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationElement

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationElement.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationElement resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationElement",
                Href = $"/tpdm/evaluationElements/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationElement table of the EvaluationElement aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElement : Entities.Common.TPDM.IEvaluationElement, IHasETag, Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationElement()
        {
            EvaluationElementRatingLevels = new List<EvaluationElementRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationElement resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationObjectiveReferenceExplicitlyAssigned;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference _evaluationObjectiveReference;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference ImplicitEvaluationObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationObjectiveReference == null && !_evaluationObjectiveReferenceExplicitlyAssigned)
                    _evaluationObjectiveReference = new EvaluationObjective.TPDM.EvaluationObjectiveReference();

                return _evaluationObjectiveReference;
            }
        }

        [DataMember(Name="evaluationObjectiveReference")][NaturalKeyMember]
        public EvaluationObjective.TPDM.EvaluationObjectiveReference EvaluationObjectiveReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationObjectiveReference != null
                    && (_evaluationObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference;

                return null;
            }
            set
            {
                _evaluationObjectiveReferenceExplicitlyAssigned = true;
                _evaluationObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEvaluationElement.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (EvaluationElement.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationElement.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationElement.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationElement.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElement;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEvaluationElement).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationElementTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElement).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElement).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElement).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElement).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).SchoolYear == null
                || !(this as Entities.Common.TPDM.IEvaluationElement).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElement).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElement).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationElementTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).EvaluationElementTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElement).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElement).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The type of the evaluation (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationTypeDescriptor")]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation element. If omitted, assumed to be 0.0.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }

        /// <summary>
        /// The sort order of this Evaluation Element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sortOrder")]
        public int? SortOrder { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationElementRatingLevel> _evaluationElementRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> _evaluationElementRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<EvaluationElementRatingLevel> EvaluationElementRatingLevels
        {
            get { return _evaluationElementRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationElementRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingLevel)e.Item).EvaluationElement = this);
                _evaluationElementRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationElementRatingLevel, EvaluationElementRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingLevel)e.Item).EvaluationElement = this;
                _evaluationElementRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> Entities.Common.TPDM.IEvaluationElement.EvaluationElementRatingLevels
        {
            get { return _evaluationElementRatingLevelsCovariant; }
            set { EvaluationElementRatingLevels = new List<EvaluationElementRatingLevel>(value.Cast<EvaluationElementRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationElementRatingLevels != null) foreach (var item in _evaluationElementRatingLevels)
            {
                item.EvaluationElement = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElement)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElement)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationElementRatingLevelsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsMaxRatingSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsMinRatingSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsSortOrderSupported                      { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEvaluationElementRatingLevel, bool> Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationElementRatingLevelIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveResourceId
        {
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElement>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElement> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var evaluationElementRatingLevelsValidator = new EvaluationElementRatingLevelPutPostRequestValidator();

            foreach (var item in instance.EvaluationElementRatingLevels)
            {
                var validationResult = evaluationElementRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevel table of the EvaluationElement aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevel : Entities.Common.TPDM.IEvaluationElementRatingLevel, Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationElement _evaluationElement;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationElement Entities.Common.TPDM.IEvaluationElementRatingLevel.EvaluationElement
        {
            get { return _evaluationElement; }
            set { SetEvaluationElement(value); }
        }

        internal Entities.Common.TPDM.IEvaluationElement EvaluationElement
        {
            set { SetEvaluationElement(value); }
        }

        private void SetEvaluationElement(Entities.Common.TPDM.IEvaluationElement value)
        {
            _evaluationElement = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationElement == null || !_evaluationElement.Equals(compareTo.EvaluationElement))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRatingLevel).EvaluationRatingLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationElement != null)
                    hash = hash * 23 + _evaluationElement.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRatingLevel).EvaluationRatingLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRatingLevel).EvaluationRatingLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport.IsMinRatingSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationElementRating

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationElementRating.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationElementRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationDate != default(DateTime) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationElementRating",
                Href = $"/tpdm/evaluationElementRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRating table of the EvaluationElementRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRating : Entities.Common.TPDM.IEvaluationElementRating, IHasETag, Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationElementRating()
        {
            EvaluationElementRatingResults = new List<EvaluationElementRatingResult>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationElementRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")][NaturalKeyMember]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        private bool _evaluationObjectiveRatingReferenceExplicitlyAssigned;
        private EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference _evaluationObjectiveRatingReference;
        private EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference ImplicitEvaluationObjectiveRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationObjectiveRatingReference == null && !_evaluationObjectiveRatingReferenceExplicitlyAssigned)
                    _evaluationObjectiveRatingReference = new EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference();

                return _evaluationObjectiveRatingReference;
            }
        }

        [DataMember(Name="evaluationObjectiveRatingReference")][NaturalKeyMember]
        public EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference EvaluationObjectiveRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_evaluationObjectiveRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference;

                return null;
            }
            set
            {
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = true;
                _evaluationObjectiveRatingReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEvaluationElementRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IEvaluationElementRating.EvaluationDate
        {
            get
            {
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference.EvaluationDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EvaluationDate = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (EvaluationElementRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
                ImplicitEvaluationObjectiveRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationElementRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitEvaluationObjectiveRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.PersonId
        {
            get
            {
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationElementRating.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationElementRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationElementRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
                ImplicitEvaluationObjectiveRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationDate == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationElementTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).PersonId == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).SchoolYear == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElementRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRating).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationElementRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationElementTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationElementTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).SourceSystemDescriptor.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRating).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRating).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Area(s) identified for person to refine or improve as part of the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="areaOfRefinement")]
        public string AreaOfRefinement { get; set; }

        /// <summary>
        /// Area(s) identified for reinforcement or positive feedback as part of the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="areaOfReinforcement")]
        public string AreaOfReinforcement { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationElementRatingLevelDescriptor")]
        public string EvaluationElementRatingLevelDescriptor { get; set; }

        /// <summary>
        /// Feedback provided to the evaluated person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="feedback")]
        public string Feedback { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationElementRatingResult> _evaluationElementRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> _evaluationElementRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<EvaluationElementRatingResult> EvaluationElementRatingResults
        {
            get { return _evaluationElementRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationElementRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingResult)e.Item).EvaluationElementRating = this);
                _evaluationElementRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationElementRatingResult, EvaluationElementRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingResult)e.Item).EvaluationElementRating = this;
                _evaluationElementRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementRatingResults
        {
            get { return _evaluationElementRatingResultsCovariant; }
            set { EvaluationElementRatingResults = new List<EvaluationElementRatingResult>(value.Cast<EvaluationElementRatingResult>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationElementRatingResults != null) foreach (var item in _evaluationElementRatingResults)
            {
                item.EvaluationElementRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRating)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsAreaOfRefinementSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsAreaOfReinforcementSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsCommentsSupported                                { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingLevelDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingResultsSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsFeedbackSupported                                { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEvaluationElementRatingResult, bool> Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingResultIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingResourceId
        {
            get { return null; }
            set { ImplicitEvaluationObjectiveRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationObjectiveRatingReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRating>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, int>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EducationOrganizationId;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.educationOrganizationId", instance.EvaluationElementReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EducationOrganizationId;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.educationOrganizationId", instance.EvaluationObjectiveRatingReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationObjectiveTitle = GetEvaluationObjectiveTitleSources();

            if (!sourcesForEvaluationObjectiveTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationObjectiveTitle",
                    $"Supplied values for unified key property 'evaluationObjectiveTitle' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEvaluationObjectiveTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationObjectiveTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EvaluationObjectiveTitle;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.evaluationObjectiveTitle", instance.EvaluationElementReference.EvaluationObjectiveTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EvaluationObjectiveTitle;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.evaluationObjectiveTitle", instance.EvaluationObjectiveRatingReference.EvaluationObjectiveTitle);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.evaluationPeriodDescriptor", instance.EvaluationElementReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.evaluationPeriodDescriptor", instance.EvaluationObjectiveRatingReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForEvaluationTitle = GetEvaluationTitleSources();

            if (!sourcesForEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationTitle",
                    $"Supplied values for unified key property 'evaluationTitle' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EvaluationTitle;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.evaluationTitle", instance.EvaluationElementReference.EvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EvaluationTitle;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.evaluationTitle", instance.EvaluationObjectiveRatingReference.EvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.performanceEvaluationTitle", instance.EvaluationElementReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.performanceEvaluationTitle", instance.EvaluationObjectiveRatingReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.performanceEvaluationTypeDescriptor", instance.EvaluationElementReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.performanceEvaluationTypeDescriptor", instance.EvaluationObjectiveRatingReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.SchoolYear;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.schoolYear", instance.EvaluationElementReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.SchoolYear;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.schoolYear", instance.EvaluationObjectiveRatingReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.TermDescriptor;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.termDescriptor", instance.EvaluationElementReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.TermDescriptor;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.termDescriptor", instance.EvaluationObjectiveRatingReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators
            var evaluationElementRatingResultsValidator = new EvaluationElementRatingResultPutPostRequestValidator();

            foreach (var item in instance.EvaluationElementRatingResults)
            {
                var validationResult = evaluationElementRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingResult table of the EvaluationElementRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingResult : Entities.Common.TPDM.IEvaluationElementRatingResult, Entities.Common.TPDM.IEvaluationElementRatingResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationElementRating _evaluationElementRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationElementRating Entities.Common.TPDM.IEvaluationElementRatingResult.EvaluationElementRating
        {
            get { return _evaluationElementRating; }
            set { SetEvaluationElementRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationElementRating EvaluationElementRating
        {
            set { SetEvaluationElementRating(value); }
        }

        private void SetEvaluationElementRating(Entities.Common.TPDM.IEvaluationElementRating value)
        {
            _evaluationElementRating = value;
        }

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating { get; set; }

        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationElementRating == null || !_evaluationElementRating.Equals(compareTo.EvaluationElementRating))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRatingResult).Rating == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRatingResult).Rating.Equals(compareTo.Rating))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRatingResult).RatingResultTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationElementRating != null)
                    hash = hash * 23 + _evaluationElementRating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRatingResult).Rating != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRatingResult).Rating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRatingResult).RatingResultTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRatingResult).RatingResultTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationElementRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationElementRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationElementRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevelDescriptor table of the EvaluationElementRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelDescriptor : Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationElementRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationElementRatingLevelDescriptorId"), NaturalKeyMember]
        public int EvaluationElementRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationElementRatingLevelDescriptorId; }
            set { EvaluationElementRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor).EvaluationElementRatingLevelDescriptorId == null
                || !(this as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor).EvaluationElementRatingLevelDescriptorId.Equals(compareTo.EvaluationElementRatingLevelDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor).EvaluationElementRatingLevelDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor).EvaluationElementRatingLevelDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationObjective

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationObjective.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationObjective resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationObjective",
                Href = $"/tpdm/evaluationObjectives/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjective table of the EvaluationObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjective : Entities.Common.TPDM.IEvaluationObjective, IHasETag, Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationObjective()
        {
            EvaluationObjectiveRatingLevels = new List<EvaluationObjectiveRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationObjective resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationReferenceExplicitlyAssigned;
        private Evaluation.TPDM.EvaluationReference _evaluationReference;
        private Evaluation.TPDM.EvaluationReference ImplicitEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationReference == null && !_evaluationReferenceExplicitlyAssigned)
                    _evaluationReference = new Evaluation.TPDM.EvaluationReference();

                return _evaluationReference;
            }
        }

        [DataMember(Name="evaluationReference")][NaturalKeyMember]
        public Evaluation.TPDM.EvaluationReference EvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationReference != null
                    && (_evaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference;

                return null;
            }
            set
            {
                _evaluationReferenceExplicitlyAssigned = true;
                _evaluationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEvaluationObjective.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (EvaluationObjective.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationObjective.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationObjective.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationObjective.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjective;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEvaluationObjective).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjective).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjective).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjective).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).SchoolYear == null
                || !(this as Entities.Common.TPDM.IEvaluationObjective).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjective).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjective).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjective).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjective).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationTypeDescriptor")]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }

        /// <summary>
        /// The sort order of this Evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sortOrder")]
        public int? SortOrder { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<EvaluationObjectiveRatingLevel> EvaluationObjectiveRatingLevels
        {
            get { return _evaluationObjectiveRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationObjectiveRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)e.Item).EvaluationObjective = this);
                _evaluationObjectiveRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, EvaluationObjectiveRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)e.Item).EvaluationObjective = this;
                _evaluationObjectiveRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> Entities.Common.TPDM.IEvaluationObjective.EvaluationObjectiveRatingLevels
        {
            get { return _evaluationObjectiveRatingLevelsCovariant; }
            set { EvaluationObjectiveRatingLevels = new List<EvaluationObjectiveRatingLevel>(value.Cast<EvaluationObjectiveRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationObjectiveRatingLevels != null) foreach (var item in _evaluationObjectiveRatingLevels)
            {
                item.EvaluationObjective = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjective)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjective)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationObjectiveRatingLevelsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsMaxRatingSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsMinRatingSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsSortOrderSupported                        { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, bool> Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationObjectiveRatingLevelIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationObjective.EvaluationResourceId
        {
            get { return null; }
            set { ImplicitEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationObjective.EvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectivePutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjective>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjective> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var evaluationObjectiveRatingLevelsValidator = new EvaluationObjectiveRatingLevelPutPostRequestValidator();

            foreach (var item in instance.EvaluationObjectiveRatingLevels)
            {
                var validationResult = evaluationObjectiveRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingLevel table of the EvaluationObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingLevel : Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationObjective _evaluationObjective;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationObjective Entities.Common.TPDM.IEvaluationObjectiveRatingLevel.EvaluationObjective
        {
            get { return _evaluationObjective; }
            set { SetEvaluationObjective(value); }
        }

        internal Entities.Common.TPDM.IEvaluationObjective EvaluationObjective
        {
            set { SetEvaluationObjective(value); }
        }

        private void SetEvaluationObjective(Entities.Common.TPDM.IEvaluationObjective value)
        {
            _evaluationObjective = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationObjective == null || !_evaluationObjective.Equals(compareTo.EvaluationObjective))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel).EvaluationRatingLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationObjective != null)
                    hash = hash * 23 + _evaluationObjective.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel).EvaluationRatingLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel).EvaluationRatingLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport.IsMinRatingSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjectiveRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjectiveRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationObjectiveRating

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationObjectiveRating.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationObjectiveRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationDate != default(DateTime) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationObjectiveRating",
                Href = $"/tpdm/evaluationObjectiveRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRating table of the EvaluationObjectiveRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRating : Entities.Common.TPDM.IEvaluationObjectiveRating, IHasETag, Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationObjectiveRating()
        {
            EvaluationObjectiveRatingResults = new List<EvaluationObjectiveRatingResult>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationObjectiveRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationObjectiveReferenceExplicitlyAssigned;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference _evaluationObjectiveReference;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference ImplicitEvaluationObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationObjectiveReference == null && !_evaluationObjectiveReferenceExplicitlyAssigned)
                    _evaluationObjectiveReference = new EvaluationObjective.TPDM.EvaluationObjectiveReference();

                return _evaluationObjectiveReference;
            }
        }

        [DataMember(Name="evaluationObjectiveReference")][NaturalKeyMember]
        public EvaluationObjective.TPDM.EvaluationObjectiveReference EvaluationObjectiveReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationObjectiveReference != null
                    && (_evaluationObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference;

                return null;
            }
            set
            {
                _evaluationObjectiveReferenceExplicitlyAssigned = true;
                _evaluationObjectiveReference = value;
            }
        }
        private bool _evaluationRatingReferenceExplicitlyAssigned;
        private EvaluationRating.TPDM.EvaluationRatingReference _evaluationRatingReference;
        private EvaluationRating.TPDM.EvaluationRatingReference ImplicitEvaluationRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationRatingReference == null && !_evaluationRatingReferenceExplicitlyAssigned)
                    _evaluationRatingReference = new EvaluationRating.TPDM.EvaluationRatingReference();

                return _evaluationRatingReference;
            }
        }

        [DataMember(Name="evaluationRatingReference")][NaturalKeyMember]
        public EvaluationRating.TPDM.EvaluationRatingReference EvaluationRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationRatingReference != null
                    && (_evaluationRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference;

                return null;
            }
            set
            {
                _evaluationRatingReferenceExplicitlyAssigned = true;
                _evaluationRatingReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEvaluationObjectiveRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EducationOrganizationId = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationDate
        {
            get
            {
                if (ImplicitEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference.EvaluationDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.EvaluationDate = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor = value;
                ImplicitEvaluationRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationTitle = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitEvaluationRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.PersonId
        {
            get
            {
                if (ImplicitEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationObjectiveRating.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.SchoolYear = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.TermDescriptor = value;
                ImplicitEvaluationRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjectiveRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationDate == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PersonId == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).SchoolYear == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).SourceSystemDescriptor.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRating).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRating).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="objectiveRatingLevelDescriptor")]
        public string ObjectiveRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationObjectiveRatingResult> _evaluationObjectiveRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> _evaluationObjectiveRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<EvaluationObjectiveRatingResult> EvaluationObjectiveRatingResults
        {
            get { return _evaluationObjectiveRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationObjectiveRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingResult)e.Item).EvaluationObjectiveRating = this);
                _evaluationObjectiveRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, EvaluationObjectiveRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingResult)e.Item).EvaluationObjectiveRating = this;
                _evaluationObjectiveRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveRatingResults
        {
            get { return _evaluationObjectiveRatingResultsCovariant; }
            set { EvaluationObjectiveRatingResults = new List<EvaluationObjectiveRatingResult>(value.Cast<EvaluationObjectiveRatingResult>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationObjectiveRatingResults != null) foreach (var item in _evaluationObjectiveRatingResults)
            {
                item.EvaluationObjectiveRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveRatingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRating)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsCommentsSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsEvaluationObjectiveRatingResultsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsObjectiveRatingLevelDescriptorSupported    { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, bool> Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsEvaluationObjectiveRatingResultIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveResourceId
        {
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingResourceId
        {
            get { return null; }
            set { ImplicitEvaluationRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationRatingReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjectiveRating>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjectiveRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, int>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.EducationOrganizationId;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.educationOrganizationId", instance.EvaluationObjectiveReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.EducationOrganizationId;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.educationOrganizationId", instance.EvaluationRatingReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.evaluationPeriodDescriptor", instance.EvaluationObjectiveReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.evaluationPeriodDescriptor", instance.EvaluationRatingReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForEvaluationTitle = GetEvaluationTitleSources();

            if (!sourcesForEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationTitle",
                    $"Supplied values for unified key property 'evaluationTitle' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.EvaluationTitle;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.evaluationTitle", instance.EvaluationObjectiveReference.EvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.EvaluationTitle;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.evaluationTitle", instance.EvaluationRatingReference.EvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.performanceEvaluationTitle", instance.EvaluationObjectiveReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.performanceEvaluationTitle", instance.EvaluationRatingReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.performanceEvaluationTypeDescriptor", instance.EvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.performanceEvaluationTypeDescriptor", instance.EvaluationRatingReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.SchoolYear;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.schoolYear", instance.EvaluationObjectiveReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.SchoolYear;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.schoolYear", instance.EvaluationRatingReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.TermDescriptor;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.termDescriptor", instance.EvaluationObjectiveReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.TermDescriptor;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.termDescriptor", instance.EvaluationRatingReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators
            var evaluationObjectiveRatingResultsValidator = new EvaluationObjectiveRatingResultPutPostRequestValidator();

            foreach (var item in instance.EvaluationObjectiveRatingResults)
            {
                var validationResult = evaluationObjectiveRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingResult table of the EvaluationObjectiveRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingResult : Entities.Common.TPDM.IEvaluationObjectiveRatingResult, Entities.Common.TPDM.IEvaluationObjectiveRatingResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationObjectiveRating _evaluationObjectiveRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationObjectiveRating Entities.Common.TPDM.IEvaluationObjectiveRatingResult.EvaluationObjectiveRating
        {
            get { return _evaluationObjectiveRating; }
            set { SetEvaluationObjectiveRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationObjectiveRating EvaluationObjectiveRating
        {
            set { SetEvaluationObjectiveRating(value); }
        }

        private void SetEvaluationObjectiveRating(Entities.Common.TPDM.IEvaluationObjectiveRating value)
        {
            _evaluationObjectiveRating = value;
        }

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating { get; set; }

        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjectiveRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationObjectiveRating == null || !_evaluationObjectiveRating.Equals(compareTo.EvaluationObjectiveRating))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).Rating == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).Rating.Equals(compareTo.Rating))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).RatingResultTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationObjectiveRating != null)
                    hash = hash * 23 + _evaluationObjectiveRating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).Rating != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).Rating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).RatingResultTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).RatingResultTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjectiveRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjectiveRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationPeriodDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationPeriodDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationPeriodDescriptor table of the EvaluationPeriodDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationPeriodDescriptor : Entities.Common.TPDM.IEvaluationPeriodDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationPeriodDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationPeriodDescriptorId"), NaturalKeyMember]
        public int EvaluationPeriodDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationPeriodDescriptorId; }
            set { EvaluationPeriodDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationPeriodDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEvaluationPeriodDescriptor).EvaluationPeriodDescriptorId == null
                || !(this as Entities.Common.TPDM.IEvaluationPeriodDescriptor).EvaluationPeriodDescriptorId.Equals(compareTo.EvaluationPeriodDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEvaluationPeriodDescriptor).EvaluationPeriodDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationPeriodDescriptor).EvaluationPeriodDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationPeriodDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationPeriodDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationPeriodDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationPeriodDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationPeriodDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationPeriodDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationPeriodDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationRating

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationRating.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationDate != default(DateTime) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationRating",
                Href = $"/tpdm/evaluationRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationRating table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRating : Entities.Common.TPDM.IEvaluationRating, IHasETag, Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationRating()
        {
            EvaluationRatingResults = new List<EvaluationRatingResult>();
            EvaluationRatingReviewers = new List<EvaluationRatingReviewer>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationReferenceExplicitlyAssigned;
        private Evaluation.TPDM.EvaluationReference _evaluationReference;
        private Evaluation.TPDM.EvaluationReference ImplicitEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationReference == null && !_evaluationReferenceExplicitlyAssigned)
                    _evaluationReference = new Evaluation.TPDM.EvaluationReference();

                return _evaluationReference;
            }
        }

        [DataMember(Name="evaluationReference")][NaturalKeyMember]
        public Evaluation.TPDM.EvaluationReference EvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationReference != null
                    && (_evaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference;

                return null;
            }
            set
            {
                _evaluationReferenceExplicitlyAssigned = true;
                _evaluationReference = value;
            }
        }
        private bool _performanceEvaluationRatingReferenceExplicitlyAssigned;
        private PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference _performanceEvaluationRatingReference;
        private PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference ImplicitPerformanceEvaluationRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_performanceEvaluationRatingReference == null && !_performanceEvaluationRatingReferenceExplicitlyAssigned)
                    _performanceEvaluationRatingReference = new PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference();

                return _performanceEvaluationRatingReference;
            }
        }

        [DataMember(Name="performanceEvaluationRatingReference")][NaturalKeyMember]
        public PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference PerformanceEvaluationRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPerformanceEvaluationRatingReference != null
                    && (_performanceEvaluationRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationRatingReference;

                return null;
            }
            set
            {
                _performanceEvaluationRatingReferenceExplicitlyAssigned = true;
                _performanceEvaluationRatingReference = value;
            }
        }
        private bool _sectionReferenceExplicitlyAssigned;
        private Section.EdFi.SectionReference _sectionReference;
        private Section.EdFi.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.EdFi.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")]
        public Section.EdFi.SectionReference SectionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set
            {
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IEvaluationRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EducationOrganizationId = value;

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime EvaluationDate { get; set; }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (EvaluationRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.EvaluationPeriodDescriptor = value;
                ImplicitPerformanceEvaluationRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.PerformanceEvaluationTitle = value;

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitPerformanceEvaluationRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.PersonId
        {
            get
            {
                if (ImplicitPerformanceEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationRating.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.SchoolYear = value;

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.SchoolYear = value;

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.TermDescriptor = value;
                ImplicitPerformanceEvaluationRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IEvaluationRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationDate == null
                || !(this as Entities.Common.TPDM.IEvaluationRating).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationRating).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).PersonId == null
                || !(this as Entities.Common.TPDM.IEvaluationRating).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).SchoolYear == null
                || !(this as Entities.Common.TPDM.IEvaluationRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IEvaluationRating).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IEvaluationRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).EvaluationDate.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).SourceSystemDescriptor.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IEvaluationRating).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRating).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor")]
        public string EvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.LocalCourseCode;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.IEvaluationRating.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.SchoolId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.SectionIdentifier
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.SectionIdentifier;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SectionIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.SessionName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.SessionName;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SessionName = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationRatingResult> _evaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingResult> _evaluationRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<EvaluationRatingResult> EvaluationRatingResults
        {
            get { return _evaluationRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationRatingResult)e.Item).EvaluationRating = this);
                _evaluationRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationRatingResult, EvaluationRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationRatingResult)e.Item).EvaluationRating = this;
                _evaluationRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingResult> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingResults
        {
            get { return _evaluationRatingResultsCovariant; }
            set { EvaluationRatingResults = new List<EvaluationRatingResult>(value.Cast<EvaluationRatingResult>()); }
        }

        private ICollection<EvaluationRatingReviewer> _evaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> _evaluationRatingReviewersCovariant;

        [DataMember(Name="reviewers"), NoDuplicateMembers]
        public ICollection<EvaluationRatingReviewer> EvaluationRatingReviewers
        {
            get { return _evaluationRatingReviewers; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationRatingReviewer>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationRatingReviewer)e.Item).EvaluationRating = this);
                _evaluationRatingReviewers = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationRatingReviewer, EvaluationRatingReviewer>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationRatingReviewer)e.Item).EvaluationRating = this;
                _evaluationRatingReviewersCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingReviewers
        {
            get { return _evaluationRatingReviewersCovariant; }
            set { EvaluationRatingReviewers = new List<EvaluationRatingReviewer>(value.Cast<EvaluationRatingReviewer>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationRatingResults != null) foreach (var item in _evaluationRatingResults)
            {
                item.EvaluationRating = this;
            }

            if (_evaluationRatingReviewers != null) foreach (var item in _evaluationRatingReviewers)
            {
                item.EvaluationRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRating)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingLevelDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingResultsSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingReviewersSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsLocalCourseCodeSupported                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSchoolIdSupported                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSectionIdentifierSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSessionNameSupported                      { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IEvaluationRatingResult, bool> Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingResultIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IEvaluationRatingReviewer, bool> Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingReviewerIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationRating.EvaluationResourceId
        {
            get { return null; }
            set { ImplicitEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRating.EvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingResourceId
        {
            get { return null; }
            set { ImplicitPerformanceEvaluationRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPerformanceEvaluationRatingReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationRating.SectionResourceId
        {
            get { return null; }
            set { ImplicitSectionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRating.SectionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSectionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRating>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, int>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.EducationOrganizationId;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.educationOrganizationId", instance.EvaluationReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.EducationOrganizationId;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.educationOrganizationId", instance.PerformanceEvaluationRatingReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.evaluationPeriodDescriptor", instance.EvaluationReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.evaluationPeriodDescriptor", instance.PerformanceEvaluationRatingReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.performanceEvaluationTitle", instance.EvaluationReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.PerformanceEvaluationTitle;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.performanceEvaluationTitle", instance.PerformanceEvaluationRatingReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.performanceEvaluationTypeDescriptor", instance.EvaluationReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.performanceEvaluationTypeDescriptor", instance.PerformanceEvaluationRatingReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.SchoolYear;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.schoolYear", instance.EvaluationReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.SchoolYear;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.schoolYear", instance.PerformanceEvaluationRatingReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromSectionReference = instance.SectionReference?.SchoolYear;

                if (valueFromSectionReference != null)
                {
                    yield return Tuple.Create("sectionReference.schoolYear", instance.SectionReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.TermDescriptor;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.termDescriptor", instance.EvaluationReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.TermDescriptor;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.termDescriptor", instance.PerformanceEvaluationRatingReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators
            var evaluationRatingResultsValidator = new EvaluationRatingResultPutPostRequestValidator();

            foreach (var item in instance.EvaluationRatingResults)
            {
                var validationResult = evaluationRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var evaluationRatingReviewersValidator = new EvaluationRatingReviewerPutPostRequestValidator();

            foreach (var item in instance.EvaluationRatingReviewers)
            {
                var validationResult = evaluationRatingReviewersValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingResult table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingResult : Entities.Common.TPDM.IEvaluationRatingResult, Entities.Common.TPDM.IEvaluationRatingResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationRating _evaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationRating Entities.Common.TPDM.IEvaluationRatingResult.EvaluationRating
        {
            get { return _evaluationRating; }
            set { SetEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationRating EvaluationRating
        {
            set { SetEvaluationRating(value); }
        }

        private void SetEvaluationRating(Entities.Common.TPDM.IEvaluationRating value)
        {
            _evaluationRating = value;
        }

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating { get; set; }

        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationRating == null || !_evaluationRating.Equals(compareTo.EvaluationRating))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationRatingResult).Rating == null
                || !(this as Entities.Common.TPDM.IEvaluationRatingResult).Rating.Equals(compareTo.Rating))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationRatingResult).RatingResultTitle == null
                || !(this as Entities.Common.TPDM.IEvaluationRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationRating != null)
                    hash = hash * 23 + _evaluationRating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationRatingResult).Rating != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRatingResult).Rating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationRatingResult).RatingResultTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRatingResult).RatingResultTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewer table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewer : Entities.Common.TPDM.IEvaluationRatingReviewer, Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _reviewerPersonReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _reviewerPersonReference;
        private Person.EdFi.PersonReference ImplicitReviewerPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_reviewerPersonReference == null && !_reviewerPersonReferenceExplicitlyAssigned)
                    _reviewerPersonReference = new Person.EdFi.PersonReference();

                return _reviewerPersonReference;
            }
        }

        [DataMember(Name="reviewerPersonReference")]
        public Person.EdFi.PersonReference ReviewerPersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitReviewerPersonReference != null
                    && (_reviewerPersonReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    return ImplicitReviewerPersonReference;

                return null;
            }
            set
            {
                _reviewerPersonReferenceExplicitlyAssigned = true;
                _reviewerPersonReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationRating _evaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationRating Entities.Common.TPDM.IEvaluationRatingReviewer.EvaluationRating
        {
            get { return _evaluationRating; }
            set { SetEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationRating EvaluationRating
        {
            set { SetEvaluationRating(value); }
        }

        private void SetEvaluationRating(Entities.Common.TPDM.IEvaluationRating value)
        {
            _evaluationRating = value;
        }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName"), NaturalKeyMember]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname"), NaturalKeyMember]
        public string LastSurname { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingReviewer;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationRating == null || !_evaluationRating.Equals(compareTo.EvaluationRating))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationRatingReviewer).FirstName == null
                || !(this as Entities.Common.TPDM.IEvaluationRatingReviewer).FirstName.Equals(compareTo.FirstName))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IEvaluationRatingReviewer).LastSurname == null
                || !(this as Entities.Common.TPDM.IEvaluationRatingReviewer).LastSurname.Equals(compareTo.LastSurname))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationRating != null)
                    hash = hash * 23 + _evaluationRating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationRatingReviewer).FirstName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRatingReviewer).FirstName.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IEvaluationRatingReviewer).LastSurname != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRatingReviewer).LastSurname.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonId
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ReviewerPerson
                _reviewerPersonReferenceExplicitlyAssigned = false;
                ImplicitReviewerPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationRatingReviewer.ReviewerSourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerSourceSystemDescriptor
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitReviewerPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// receivedTraining
        /// </summary>
        [DataMember(Name = "receivedTraining")]
        public EvaluationRatingReviewerReceivedTraining EvaluationRatingReviewerReceivedTraining { get; set; }

        Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IEvaluationRatingReviewer.EvaluationRatingReviewerReceivedTraining
        {
            get { return EvaluationRatingReviewerReceivedTraining; }
            set { EvaluationRatingReviewerReceivedTraining = (EvaluationRatingReviewerReceivedTraining) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingReviewerMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingReviewerMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewer)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsEvaluationRatingReviewerReceivedTrainingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerPersonIdSupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerSourceSystemDescriptorSupported            { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return null; }
            set { ImplicitReviewerPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitReviewerPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingReviewer>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingReviewer> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewerReceivedTraining table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerReceivedTraining : Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining, Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationRatingReviewer _evaluationRatingReviewer;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationRatingReviewer Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining.EvaluationRatingReviewer
        {
            get { return _evaluationRatingReviewer; }
            set { SetEvaluationRatingReviewer(value); }
        }

        internal Entities.Common.TPDM.IEvaluationRatingReviewer EvaluationRatingReviewer
        {
            set { SetEvaluationRatingReviewer(value); }
        }

        private void SetEvaluationRatingReviewer(Entities.Common.TPDM.IEvaluationRatingReviewer value)
        {
            _evaluationRatingReviewer = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationRatingReviewer == null || !_evaluationRatingReviewer.Equals(compareTo.EvaluationRatingReviewer))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_evaluationRatingReviewer != null)
                    hash = hash * 23 + _evaluationRatingReviewer.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interRaterReliabilityScore")]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The date on which the person administering the performance meausre received training on how to conduct performance measures.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="receivedTrainingDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ReceivedTrainingDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingReviewerReceivedTrainingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingReviewerReceivedTrainingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsReceivedTrainingDateSupported        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerReceivedTrainingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingReviewerReceivedTraining>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingReviewerReceivedTraining> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevelDescriptor table of the EvaluationRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelDescriptor : Entities.Common.TPDM.IEvaluationRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptorId"), NaturalKeyMember]
        public int EvaluationRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationRatingLevelDescriptorId; }
            set { EvaluationRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor).EvaluationRatingLevelDescriptorId == null
                || !(this as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor).EvaluationRatingLevelDescriptorId.Equals(compareTo.EvaluationRatingLevelDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor).EvaluationRatingLevelDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor).EvaluationRatingLevelDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationTypeDescriptor table of the EvaluationTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationTypeDescriptor : Entities.Common.TPDM.IEvaluationTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationTypeDescriptorId"), NaturalKeyMember]
        public int EvaluationTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationTypeDescriptorId; }
            set { EvaluationTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IEvaluationTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IEvaluationTypeDescriptor).EvaluationTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IEvaluationTypeDescriptor).EvaluationTypeDescriptorId.Equals(compareTo.EvaluationTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IEvaluationTypeDescriptor).EvaluationTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IEvaluationTypeDescriptor).EvaluationTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: FederalLocaleCodeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.FederalLocaleCodeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.FederalLocaleCodeDescriptor table of the FederalLocaleCodeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FederalLocaleCodeDescriptor : Entities.Common.TPDM.IFederalLocaleCodeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the FederalLocaleCodeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="federalLocaleCodeDescriptorId"), NaturalKeyMember]
        public int FederalLocaleCodeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return FederalLocaleCodeDescriptorId; }
            set { FederalLocaleCodeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IFederalLocaleCodeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IFederalLocaleCodeDescriptor).FederalLocaleCodeDescriptorId == null
                || !(this as Entities.Common.TPDM.IFederalLocaleCodeDescriptor).FederalLocaleCodeDescriptorId.Equals(compareTo.FederalLocaleCodeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IFederalLocaleCodeDescriptor).FederalLocaleCodeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFederalLocaleCodeDescriptor).FederalLocaleCodeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FederalLocaleCodeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFederalLocaleCodeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FederalLocaleCodeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IFederalLocaleCodeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FederalLocaleCodeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<FederalLocaleCodeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FederalLocaleCodeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: FieldworkExperience

namespace EdFi.Ods.Api.Common.Models.Resources.FieldworkExperience.TPDM
{
    /// <summary>
    /// Represents a reference to the FieldworkExperience resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="fieldworkIdentifier"), NaturalKeyMember]
        public string FieldworkIdentifier { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime) && FieldworkIdentifier != default(string) && StudentUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "FieldworkExperience",
                Href = $"/tpdm/fieldworkExperiences/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperience table of the FieldworkExperience aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperience : Entities.Common.TPDM.IFieldworkExperience, IHasETag, Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the FieldworkExperience resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educatorPreparationProgramReferenceExplicitlyAssigned;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference _educatorPreparationProgramReference;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference ImplicitEducatorPreparationProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educatorPreparationProgramReference == null && !_educatorPreparationProgramReferenceExplicitlyAssigned)
                    _educatorPreparationProgramReference = new EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference();

                return _educatorPreparationProgramReference;
            }
        }

        [DataMember(Name="educatorPreparationProgramReference")]
        public EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference EducatorPreparationProgramReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_educatorPreparationProgramReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference;

                return null;
            }
            set
            {
                _educatorPreparationProgramReferenceExplicitlyAssigned = true;
                _educatorPreparationProgramReference = value;
            }
        }
        private bool _schoolReferenceExplicitlyAssigned;
        private School.EdFi.SchoolReference _schoolReference;
        private School.EdFi.SchoolReference ImplicitSchoolReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolReference == null && !_schoolReferenceExplicitlyAssigned)
                    _schoolReference = new School.EdFi.SchoolReference();

                return _schoolReference;
            }
        }

        [DataMember(Name="schoolReference")]
        public School.EdFi.SchoolReference SchoolReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolReference != null
                    && (_schoolReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolReference;

                return null;
            }
            set
            {
                _schoolReferenceExplicitlyAssigned = true;
                _schoolReference = value;
            }
        }
        private bool _studentReferenceExplicitlyAssigned;
        private Student.EdFi.StudentReference _studentReference;
        private Student.EdFi.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.EdFi.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.EdFi.StudentReference StudentReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set
            {
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the staff first starts fieldwork.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The unique identifier for the fieldwork experience
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fieldworkIdentifier"), NaturalKeyMember]
        public string FieldworkIdentifier { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperience.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IFieldworkExperience;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IFieldworkExperience).BeginDate == null
                || !(this as Entities.Common.TPDM.IFieldworkExperience).BeginDate.Equals(compareTo.BeginDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IFieldworkExperience).FieldworkIdentifier == null
                || !(this as Entities.Common.TPDM.IFieldworkExperience).FieldworkIdentifier.Equals(compareTo.FieldworkIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperience).StudentUniqueId == null
                || !(this as Entities.Common.TPDM.IFieldworkExperience).StudentUniqueId.Equals(compareTo.StudentUniqueId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.IFieldworkExperience).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperience).BeginDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IFieldworkExperience).FieldworkIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperience).FieldworkIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperience).StudentUniqueId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperience).StudentUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.IFieldworkExperience.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEducatorPreparationProgramReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The month, day, and year on which the staff ends fieldwork.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The type of fieldwork being executed by a staff.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="fieldworkTypeDescriptor")]
        public string FieldworkTypeDescriptor { get; set; }

        /// <summary>
        /// The number of hours completed during the fieldwork experience.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hoursCompleted")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? HoursCompleted { get; set; }

        /// <summary>
        /// The descriptor holds the program gateway that is associated with continuation in a program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programGatewayDescriptor")]
        public string ProgramGatewayDescriptor { get; set; }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperience.ProgramName
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEducatorPreparationProgramReference.ProgramName;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (FieldworkExperience.ProgramTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IFieldworkExperience.ProgramTypeDescriptor
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.IFieldworkExperience.SchoolId
        {
            get
            {
                if (ImplicitSchoolReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSchoolReference.SchoolId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // School
                _schoolReferenceExplicitlyAssigned = false;
                ImplicitSchoolReference.SchoolId = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// coteaching
        /// </summary>
        [DataMember(Name = "coteaching")]
        public FieldworkExperienceCoteaching FieldworkExperienceCoteaching { get; set; }

        Entities.Common.TPDM.IFieldworkExperienceCoteaching Entities.Common.TPDM.IFieldworkExperience.FieldworkExperienceCoteaching
        {
            get { return FieldworkExperienceCoteaching; }
            set { FieldworkExperienceCoteaching = (FieldworkExperienceCoteaching) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FieldworkExperienceMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFieldworkExperience)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FieldworkExperienceMapper.MapTo(this, (Entities.Common.TPDM.IFieldworkExperience)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsEducationOrganizationIdSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsEndDateSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkExperienceCoteachingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkTypeDescriptorSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsHoursCompletedSupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramNameSupported                    { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramTypeDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsSchoolIdSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IFieldworkExperience.EducatorPreparationProgramResourceId
        {
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IFieldworkExperience.EducatorPreparationProgramDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IFieldworkExperience.SchoolResourceId
        {
            get { return null; }
            set { ImplicitSchoolReference.ResourceId = value ?? default(Guid); }
        }


        Guid? Entities.Common.TPDM.IFieldworkExperience.StudentResourceId
        {
            get { return null; }
            set { ImplicitStudentReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IFieldworkExperience.StudentDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitStudentReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FieldworkExperiencePutPostRequestValidator : FluentValidation.AbstractValidator<FieldworkExperience>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FieldworkExperience> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceCoteaching table of the FieldworkExperience aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceCoteaching : Entities.Common.TPDM.IFieldworkExperienceCoteaching, Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IFieldworkExperience _fieldworkExperience;

        [IgnoreDataMember]
        Entities.Common.TPDM.IFieldworkExperience Entities.Common.TPDM.IFieldworkExperienceCoteaching.FieldworkExperience
        {
            get { return _fieldworkExperience; }
            set { SetFieldworkExperience(value); }
        }

        internal Entities.Common.TPDM.IFieldworkExperience FieldworkExperience
        {
            set { SetFieldworkExperience(value); }
        }

        private void SetFieldworkExperience(Entities.Common.TPDM.IFieldworkExperience value)
        {
            _fieldworkExperience = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IFieldworkExperienceCoteaching;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_fieldworkExperience == null || !_fieldworkExperience.Equals(compareTo.FieldworkExperience))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_fieldworkExperience != null)
                    hash = hash * 23 + _fieldworkExperience.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the teacher candidate first starts co-teaching.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="coteachingBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime CoteachingBeginDate { get; set; }

        /// <summary>
        /// The month, day, and year on which the teacher candidate stopped co-teaching.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="coteachingEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? CoteachingEndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FieldworkExperienceCoteachingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFieldworkExperienceCoteaching)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FieldworkExperienceCoteachingMapper.MapTo(this, (Entities.Common.TPDM.IFieldworkExperienceCoteaching)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport.IsCoteachingBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport.IsCoteachingEndDateSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceCoteachingPutPostRequestValidator : FluentValidation.AbstractValidator<FieldworkExperienceCoteaching>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FieldworkExperienceCoteaching> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: FieldworkExperienceSectionAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.FieldworkExperienceSectionAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the FieldworkExperienceSectionAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceSectionAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="fieldworkIdentifier"), NaturalKeyMember]
        public string FieldworkIdentifier { get; set; }

        [DataMember(Name="localCourseCode"), NaturalKeyMember]
        public string LocalCourseCode { get; set; }

        [DataMember(Name="schoolId"), NaturalKeyMember]
        public int SchoolId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sectionIdentifier"), NaturalKeyMember]
        public string SectionIdentifier { get; set; }

        [DataMember(Name="sessionName"), NaturalKeyMember]
        public string SessionName { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime) && FieldworkIdentifier != default(string) && LocalCourseCode != default(string) && SchoolId != default(int) && SchoolYear != default(short) && SectionIdentifier != default(string) && SessionName != default(string) && StudentUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "FieldworkExperienceSectionAssociation",
                Href = $"/tpdm/fieldworkExperienceSectionAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceSectionAssociation table of the FieldworkExperienceSectionAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceSectionAssociation : Entities.Common.TPDM.IFieldworkExperienceSectionAssociation, IHasETag, Entities.Common.TPDM.IFieldworkExperienceSectionAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the FieldworkExperienceSectionAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _fieldworkExperienceReferenceExplicitlyAssigned;
        private FieldworkExperience.TPDM.FieldworkExperienceReference _fieldworkExperienceReference;
        private FieldworkExperience.TPDM.FieldworkExperienceReference ImplicitFieldworkExperienceReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_fieldworkExperienceReference == null && !_fieldworkExperienceReferenceExplicitlyAssigned)
                    _fieldworkExperienceReference = new FieldworkExperience.TPDM.FieldworkExperienceReference();

                return _fieldworkExperienceReference;
            }
        }

        [DataMember(Name="fieldworkExperienceReference")][NaturalKeyMember]
        public FieldworkExperience.TPDM.FieldworkExperienceReference FieldworkExperienceReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitFieldworkExperienceReference != null
                    && (_fieldworkExperienceReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitFieldworkExperienceReference.IsReferenceFullyDefined()))
                    return ImplicitFieldworkExperienceReference;

                return null;
            }
            set
            {
                _fieldworkExperienceReferenceExplicitlyAssigned = true;
                _fieldworkExperienceReference = value;
            }
        }
        private bool _sectionReferenceExplicitlyAssigned;
        private Section.EdFi.SectionReference _sectionReference;
        private Section.EdFi.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.EdFi.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")][NaturalKeyMember]
        public Section.EdFi.SectionReference SectionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set
            {
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the staff first starts fieldwork.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.BeginDate
        {
            get
            {
                if (ImplicitFieldworkExperienceReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitFieldworkExperienceReference.IsReferenceFullyDefined()))
                    return ImplicitFieldworkExperienceReference.BeginDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // FieldworkExperience
                _fieldworkExperienceReferenceExplicitlyAssigned = false;
                ImplicitFieldworkExperienceReference.BeginDate = value;
            }
        }

        /// <summary>
        /// The unique identifier for the fieldwork experience
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkIdentifier
        {
            get
            {
                if (ImplicitFieldworkExperienceReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitFieldworkExperienceReference.IsReferenceFullyDefined()))
                    return ImplicitFieldworkExperienceReference.FieldworkIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // FieldworkExperience
                _fieldworkExperienceReferenceExplicitlyAssigned = false;
                ImplicitFieldworkExperienceReference.FieldworkIdentifier = value;
            }
        }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.LocalCourseCode;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SchoolYear
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionIdentifier
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SectionIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SectionIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SessionName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference.SessionName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SessionName = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.StudentUniqueId
        {
            get
            {
                if (ImplicitFieldworkExperienceReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitFieldworkExperienceReference.IsReferenceFullyDefined()))
                    return ImplicitFieldworkExperienceReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // FieldworkExperience
                _fieldworkExperienceReferenceExplicitlyAssigned = false;
                ImplicitFieldworkExperienceReference.StudentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).BeginDate == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).BeginDate.Equals(compareTo.BeginDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).FieldworkIdentifier == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).FieldworkIdentifier.Equals(compareTo.FieldworkIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).LocalCourseCode == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).LocalCourseCode.Equals(compareTo.LocalCourseCode))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolId == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolId.Equals(compareTo.SchoolId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolYear == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SectionIdentifier == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SectionIdentifier.Equals(compareTo.SectionIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SessionName == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SessionName.Equals(compareTo.SessionName))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).StudentUniqueId == null
                || !(this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).StudentUniqueId.Equals(compareTo.StudentUniqueId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).BeginDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).BeginDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).FieldworkIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).FieldworkIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).LocalCourseCode != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).LocalCourseCode.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SchoolYear.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SectionIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SectionIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SessionName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).SessionName.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).StudentUniqueId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkExperienceSectionAssociation).StudentUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FieldworkExperienceSectionAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFieldworkExperienceSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FieldworkExperienceSectionAssociationMapper.MapTo(this, (Entities.Common.TPDM.IFieldworkExperienceSectionAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkExperienceResourceId
        {
            get { return null; }
            set { ImplicitFieldworkExperienceReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkExperienceDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitFieldworkExperienceReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionResourceId
        {
            get { return null; }
            set { ImplicitSectionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSectionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceSectionAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<FieldworkExperienceSectionAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FieldworkExperienceSectionAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: FieldworkTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.FieldworkTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.FieldworkTypeDescriptor table of the FieldworkTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FieldworkTypeDescriptor : Entities.Common.TPDM.IFieldworkTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the FieldworkTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fieldworkTypeDescriptorId"), NaturalKeyMember]
        public int FieldworkTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return FieldworkTypeDescriptorId; }
            set { FieldworkTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IFieldworkTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IFieldworkTypeDescriptor).FieldworkTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IFieldworkTypeDescriptor).FieldworkTypeDescriptorId.Equals(compareTo.FieldworkTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IFieldworkTypeDescriptor).FieldworkTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFieldworkTypeDescriptor).FieldworkTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FieldworkTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFieldworkTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FieldworkTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IFieldworkTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FieldworkTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<FieldworkTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FieldworkTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: FundingSourceDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.FundingSourceDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.FundingSourceDescriptor table of the FundingSourceDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FundingSourceDescriptor : Entities.Common.TPDM.IFundingSourceDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the FundingSourceDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fundingSourceDescriptorId"), NaturalKeyMember]
        public int FundingSourceDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return FundingSourceDescriptorId; }
            set { FundingSourceDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IFundingSourceDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IFundingSourceDescriptor).FundingSourceDescriptorId == null
                || !(this as Entities.Common.TPDM.IFundingSourceDescriptor).FundingSourceDescriptorId.Equals(compareTo.FundingSourceDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IFundingSourceDescriptor).FundingSourceDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IFundingSourceDescriptor).FundingSourceDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FundingSourceDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFundingSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FundingSourceDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IFundingSourceDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FundingSourceDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<FundingSourceDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FundingSourceDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.GenderDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.GenderDescriptor table of the GenderDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class GenderDescriptor : Entities.Common.TPDM.IGenderDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the GenderDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="genderDescriptorId"), NaturalKeyMember]
        public int GenderDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return GenderDescriptorId; }
            set { GenderDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IGenderDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IGenderDescriptor).GenderDescriptorId == null
                || !(this as Entities.Common.TPDM.IGenderDescriptor).GenderDescriptorId.Equals(compareTo.GenderDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IGenderDescriptor).GenderDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGenderDescriptor).GenderDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.GenderDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IGenderDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.GenderDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IGenderDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class GenderDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<GenderDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<GenderDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Goal

namespace EdFi.Ods.Api.Common.Models.Resources.Goal.TPDM
{
    /// <summary>
    /// Represents a reference to the Goal resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class GoalReference
    {
        [DataMember(Name="assignmentDate"), NaturalKeyMember]
        public DateTime AssignmentDate { get; set; }

        [DataMember(Name="goalTitle"), NaturalKeyMember]
        public string GoalTitle { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AssignmentDate != default(DateTime) && GoalTitle != default(string) && PersonId != default(string) && SourceSystemDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Goal",
                Href = $"/tpdm/goals/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Goal table of the Goal aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Goal : Entities.Common.TPDM.IGoal, IHasETag, Entities.Common.TPDM.IGoalSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Goal resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the goal was assigned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assignmentDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime AssignmentDate { get; set; }

        /// <summary>
        /// The name or title of the goal.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="goalTitle"), NaturalKeyMember]
        public string GoalTitle { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGoal.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (Goal.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IGoal.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IGoal;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IGoal).AssignmentDate == null
                || !(this as Entities.Common.TPDM.IGoal).AssignmentDate.Equals(compareTo.AssignmentDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IGoal).GoalTitle == null
                || !(this as Entities.Common.TPDM.IGoal).GoalTitle.Equals(compareTo.GoalTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IGoal).PersonId == null
                || !(this as Entities.Common.TPDM.IGoal).PersonId.Equals(compareTo.PersonId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IGoal).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IGoal).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.IGoal).AssignmentDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGoal).AssignmentDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IGoal).GoalTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGoal).GoalTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IGoal).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGoal).PersonId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IGoal).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGoal).SourceSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Any comments about the goal or its completion to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// The month, day, and year on which the goal was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="completedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// Indicator that the goal was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="completedIndicator")]
        public bool? CompletedIndicator { get; set; }

        /// <summary>
        /// The month, day, and year on which the goal is due or expected to be completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dueDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.IGoal.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGoal.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationElementTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGoal.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (Goal.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IGoal.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGoal.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// The description of the goal.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="goalDescription")]
        public string GoalDescription { get; set; }

        /// <summary>
        /// The type of the goal (e.g., management, instruction).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="goalTypeDescriptor")]
        public string GoalTypeDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGoal.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (Goal.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IGoal.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? Entities.Common.TPDM.IGoal.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.SchoolYear;
                    }

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (Goal.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IGoal.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.TermDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.GoalMapper.SynchronizeTo(this, (Entities.Common.TPDM.IGoal)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.GoalMapper.MapTo(this, (Entities.Common.TPDM.IGoal)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCommentsSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCompletedDateSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCompletedIndicatorSupported                   { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsDueDateSupported                              { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEducationOrganizationIdSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationElementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationObjectiveTitleSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationPeriodDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationTitleSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsGoalDescriptionSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsGoalTypeDescriptorSupported                   { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsPerformanceEvaluationTitleSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsPerformanceEvaluationTypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsSchoolYearSupported                           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsTermDescriptorSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IGoal.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IGoal.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IGoal.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IGoal.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class GoalPutPostRequestValidator : FluentValidation.AbstractValidator<Goal>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Goal> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: GoalTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.GoalTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.GoalTypeDescriptor table of the GoalTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class GoalTypeDescriptor : Entities.Common.TPDM.IGoalTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the GoalTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="goalTypeDescriptorId"), NaturalKeyMember]
        public int GoalTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return GoalTypeDescriptorId; }
            set { GoalTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IGoalTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IGoalTypeDescriptor).GoalTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IGoalTypeDescriptor).GoalTypeDescriptorId.Equals(compareTo.GoalTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IGoalTypeDescriptor).GoalTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGoalTypeDescriptor).GoalTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.GoalTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IGoalTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.GoalTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IGoalTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class GoalTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<GoalTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<GoalTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Api.Common.Models.Resources.GraduationPlan.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.GraduationPlanExtension table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class GraduationPlanExtension : Entities.Common.TPDM.IGraduationPlanExtension, Entities.Common.TPDM.IGraduationPlanExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public GraduationPlanExtension()
        {
            GraduationPlanRequiredCertifications = new List<GraduationPlanRequiredCertification>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IGraduationPlan _graduationPlan;

        [IgnoreDataMember]
        Entities.Common.EdFi.IGraduationPlan Entities.Common.TPDM.IGraduationPlanExtension.GraduationPlan
        {
            get { return _graduationPlan; }
            set { SetGraduationPlan(value); }
        }

        internal Entities.Common.EdFi.IGraduationPlan GraduationPlan
        {
            set { SetGraduationPlan(value); }
        }

        private void SetGraduationPlan(Entities.Common.EdFi.IGraduationPlan value)
        {
            _graduationPlan = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IGraduationPlanExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_graduationPlan == null || !_graduationPlan.Equals(compareTo.GraduationPlan))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlan != null)
                    hash = hash * 23 + _graduationPlan.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<GraduationPlanRequiredCertification> _graduationPlanRequiredCertifications;
        private ICollection<Entities.Common.TPDM.IGraduationPlanRequiredCertification> _graduationPlanRequiredCertificationsCovariant;

        [DataMember(Name="requiredCertifications"), NoDuplicateMembers]
        public ICollection<GraduationPlanRequiredCertification> GraduationPlanRequiredCertifications
        {
            get { return _graduationPlanRequiredCertifications; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<GraduationPlanRequiredCertification>(value,
                    (s, e) => ((Entities.Common.TPDM.IGraduationPlanRequiredCertification)e.Item).GraduationPlanExtension = this);
                _graduationPlanRequiredCertifications = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IGraduationPlanRequiredCertification, GraduationPlanRequiredCertification>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IGraduationPlanRequiredCertification)e.Item).GraduationPlanExtension = this;
                _graduationPlanRequiredCertificationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IGraduationPlanRequiredCertification> Entities.Common.TPDM.IGraduationPlanExtension.GraduationPlanRequiredCertifications
        {
            get { return _graduationPlanRequiredCertificationsCovariant; }
            set { GraduationPlanRequiredCertifications = new List<GraduationPlanRequiredCertification>(value.Cast<GraduationPlanRequiredCertification>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_graduationPlanRequiredCertifications != null) foreach (var item in _graduationPlanRequiredCertifications)
            {
                item.GraduationPlanExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.GraduationPlanExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IGraduationPlanExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.GraduationPlanExtensionMapper.MapTo(this, (Entities.Common.TPDM.IGraduationPlanExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IGraduationPlanExtensionSynchronizationSourceSupport.IsGraduationPlanRequiredCertificationsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IGraduationPlanRequiredCertification, bool> Entities.Common.TPDM.IGraduationPlanExtensionSynchronizationSourceSupport.IsGraduationPlanRequiredCertificationIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class GraduationPlanExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<GraduationPlanExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<GraduationPlanExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var graduationPlanRequiredCertificationsValidator = new GraduationPlanRequiredCertificationPutPostRequestValidator();

            foreach (var item in instance.GraduationPlanRequiredCertifications)
            {
                var validationResult = graduationPlanRequiredCertificationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.GraduationPlanRequiredCertification table of the GraduationPlan aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class GraduationPlanRequiredCertification : Entities.Common.TPDM.IGraduationPlanRequiredCertification, Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _certificationReferenceExplicitlyAssigned;
        private Certification.TPDM.CertificationReference _certificationReference;
        private Certification.TPDM.CertificationReference ImplicitCertificationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_certificationReference == null && !_certificationReferenceExplicitlyAssigned)
                    _certificationReference = new Certification.TPDM.CertificationReference();

                return _certificationReference;
            }
        }

        [DataMember(Name="certificationReference")]
        public Certification.TPDM.CertificationReference CertificationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCertificationReference != null
                    && (_certificationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCertificationReference.IsReferenceFullyDefined()))
                    return ImplicitCertificationReference;

                return null;
            }
            set
            {
                _certificationReferenceExplicitlyAssigned = true;
                _certificationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IGraduationPlanExtension _graduationPlanExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IGraduationPlanExtension Entities.Common.TPDM.IGraduationPlanRequiredCertification.GraduationPlanExtension
        {
            get { return _graduationPlanExtension; }
            set { SetGraduationPlanExtension(value); }
        }

        internal Entities.Common.TPDM.IGraduationPlanExtension GraduationPlanExtension
        {
            set { SetGraduationPlanExtension(value); }
        }

        private void SetGraduationPlanExtension(Entities.Common.TPDM.IGraduationPlanExtension value)
        {
            _graduationPlanExtension = value;
        }

        /// <summary>
        /// The title of the Certification required for Graduation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationTitle"), NaturalKeyMember]
        public string CertificationTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IGraduationPlanRequiredCertification;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_graduationPlanExtension == null || !_graduationPlanExtension.Equals(compareTo.GraduationPlanExtension))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IGraduationPlanRequiredCertification).CertificationTitle == null
                || !(this as Entities.Common.TPDM.IGraduationPlanRequiredCertification).CertificationTitle.Equals(compareTo.CertificationTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_graduationPlanExtension != null)
                    hash = hash * 23 + _graduationPlanExtension.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IGraduationPlanRequiredCertification).CertificationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IGraduationPlanRequiredCertification).CertificationTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Identifier or serial number assigned to the Certification.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationIdentifier
        {
            get
            {
                if (ImplicitCertificationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitCertificationReference.CertificationIdentifier;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Certification
                _certificationReferenceExplicitlyAssigned = false;
                ImplicitCertificationReference.CertificationIdentifier = value;
            }
        }

        /// <summary>
        /// The process, program ,or pathway used to obtain certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationRouteDescriptor")]
        public string CertificationRouteDescriptor { get; set; }

        /// <summary>
        /// Namespace for the Certification, typically associated with the issuing authority.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IGraduationPlanRequiredCertification.Namespace
        {
            get
            {
                if (ImplicitCertificationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCertificationReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitCertificationReference.Namespace;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Certification
                _certificationReferenceExplicitlyAssigned = false;
                ImplicitCertificationReference.Namespace = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.GraduationPlanRequiredCertificationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IGraduationPlanRequiredCertification)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.GraduationPlanRequiredCertificationMapper.MapTo(this, (Entities.Common.TPDM.IGraduationPlanRequiredCertification)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsCertificationIdentifierSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsCertificationRouteDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsNamespaceSupported                     { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationResourceId
        {
            get { return null; }
            set { ImplicitCertificationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCertificationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class GraduationPlanRequiredCertificationPutPostRequestValidator : FluentValidation.AbstractValidator<GraduationPlanRequiredCertification>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<GraduationPlanRequiredCertification> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: HireStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.HireStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.HireStatusDescriptor table of the HireStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class HireStatusDescriptor : Entities.Common.TPDM.IHireStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the HireStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hireStatusDescriptorId"), NaturalKeyMember]
        public int HireStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return HireStatusDescriptorId; }
            set { HireStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IHireStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IHireStatusDescriptor).HireStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.IHireStatusDescriptor).HireStatusDescriptorId.Equals(compareTo.HireStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IHireStatusDescriptor).HireStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IHireStatusDescriptor).HireStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.HireStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IHireStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.HireStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IHireStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class HireStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<HireStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<HireStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: HiringSourceDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.HiringSourceDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.HiringSourceDescriptor table of the HiringSourceDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class HiringSourceDescriptor : Entities.Common.TPDM.IHiringSourceDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the HiringSourceDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hiringSourceDescriptorId"), NaturalKeyMember]
        public int HiringSourceDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return HiringSourceDescriptorId; }
            set { HiringSourceDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IHiringSourceDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IHiringSourceDescriptor).HiringSourceDescriptorId == null
                || !(this as Entities.Common.TPDM.IHiringSourceDescriptor).HiringSourceDescriptorId.Equals(compareTo.HiringSourceDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IHiringSourceDescriptor).HiringSourceDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IHiringSourceDescriptor).HiringSourceDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.HiringSourceDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IHiringSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.HiringSourceDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IHiringSourceDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class HiringSourceDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<HiringSourceDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<HiringSourceDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: InstructionalSettingDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.InstructionalSettingDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.InstructionalSettingDescriptor table of the InstructionalSettingDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class InstructionalSettingDescriptor : Entities.Common.TPDM.IInstructionalSettingDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the InstructionalSettingDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="instructionalSettingDescriptorId"), NaturalKeyMember]
        public int InstructionalSettingDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return InstructionalSettingDescriptorId; }
            set { InstructionalSettingDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IInstructionalSettingDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IInstructionalSettingDescriptor).InstructionalSettingDescriptorId == null
                || !(this as Entities.Common.TPDM.IInstructionalSettingDescriptor).InstructionalSettingDescriptorId.Equals(compareTo.InstructionalSettingDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IInstructionalSettingDescriptor).InstructionalSettingDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IInstructionalSettingDescriptor).InstructionalSettingDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.InstructionalSettingDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IInstructionalSettingDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.InstructionalSettingDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IInstructionalSettingDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class InstructionalSettingDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<InstructionalSettingDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<InstructionalSettingDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: LengthOfContractDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.LengthOfContractDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.LengthOfContractDescriptor table of the LengthOfContractDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class LengthOfContractDescriptor : Entities.Common.TPDM.ILengthOfContractDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the LengthOfContractDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lengthOfContractDescriptorId"), NaturalKeyMember]
        public int LengthOfContractDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return LengthOfContractDescriptorId; }
            set { LengthOfContractDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ILengthOfContractDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ILengthOfContractDescriptor).LengthOfContractDescriptorId == null
                || !(this as Entities.Common.TPDM.ILengthOfContractDescriptor).LengthOfContractDescriptorId.Equals(compareTo.LengthOfContractDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ILengthOfContractDescriptor).LengthOfContractDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ILengthOfContractDescriptor).LengthOfContractDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.LengthOfContractDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ILengthOfContractDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.LengthOfContractDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ILengthOfContractDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class LengthOfContractDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<LengthOfContractDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<LengthOfContractDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Api.Common.Models.Resources.LocalEducationAgency.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.LocalEducationAgencyExtension table of the LocalEducationAgency aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class LocalEducationAgencyExtension : Entities.Common.TPDM.ILocalEducationAgencyExtension, Entities.Common.TPDM.ILocalEducationAgencyExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ILocalEducationAgency _localEducationAgency;

        [IgnoreDataMember]
        Entities.Common.EdFi.ILocalEducationAgency Entities.Common.TPDM.ILocalEducationAgencyExtension.LocalEducationAgency
        {
            get { return _localEducationAgency; }
            set { SetLocalEducationAgency(value); }
        }

        internal Entities.Common.EdFi.ILocalEducationAgency LocalEducationAgency
        {
            set { SetLocalEducationAgency(value); }
        }

        private void SetLocalEducationAgency(Entities.Common.EdFi.ILocalEducationAgency value)
        {
            _localEducationAgency = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ILocalEducationAgencyExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_localEducationAgency == null || !_localEducationAgency.Equals(compareTo.LocalEducationAgency))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_localEducationAgency != null)
                    hash = hash * 23 + _localEducationAgency.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The federal locale code associated with an education organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="federalLocaleCodeDescriptor")]
        public string FederalLocaleCodeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.LocalEducationAgencyExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ILocalEducationAgencyExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.LocalEducationAgencyExtensionMapper.MapTo(this, (Entities.Common.TPDM.ILocalEducationAgencyExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ILocalEducationAgencyExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class LocalEducationAgencyExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<LocalEducationAgencyExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<LocalEducationAgencyExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ObjectiveRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ObjectiveRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ObjectiveRatingLevelDescriptor table of the ObjectiveRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ObjectiveRatingLevelDescriptor : Entities.Common.TPDM.IObjectiveRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ObjectiveRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="objectiveRatingLevelDescriptorId"), NaturalKeyMember]
        public int ObjectiveRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ObjectiveRatingLevelDescriptorId; }
            set { ObjectiveRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor).ObjectiveRatingLevelDescriptorId == null
                || !(this as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor).ObjectiveRatingLevelDescriptorId.Equals(compareTo.ObjectiveRatingLevelDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor).ObjectiveRatingLevelDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor).ObjectiveRatingLevelDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ObjectiveRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IObjectiveRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ObjectiveRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IObjectiveRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ObjectiveRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ObjectiveRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ObjectiveRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Api.Common.Models.Resources.OpenStaffPosition.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionExtension table of the OpenStaffPosition aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionExtension : Entities.Common.TPDM.IOpenStaffPositionExtension, Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.EdFi.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.EdFi.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.EdFi.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")]
        public SchoolYearType.EdFi.SchoolYearTypeReference SchoolYearTypeReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set
            {
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IOpenStaffPosition _openStaffPosition;

        [IgnoreDataMember]
        Entities.Common.EdFi.IOpenStaffPosition Entities.Common.TPDM.IOpenStaffPositionExtension.OpenStaffPosition
        {
            get { return _openStaffPosition; }
            set { SetOpenStaffPosition(value); }
        }

        internal Entities.Common.EdFi.IOpenStaffPosition OpenStaffPosition
        {
            set { SetOpenStaffPosition(value); }
        }

        private void SetOpenStaffPosition(Entities.Common.EdFi.IOpenStaffPosition value)
        {
            _openStaffPosition = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IOpenStaffPositionExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_openStaffPosition == null || !_openStaffPosition.Equals(compareTo.OpenStaffPosition))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_openStaffPosition != null)
                    hash = hash * 23 + _openStaffPosition.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fullTimeEquivalency")][Range(typeof(decimal), "-9.99", "9.99")]
        public decimal? FullTimeEquivalency { get; set; }

        /// <summary>
        /// The funding source for open staff position.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="fundingSourceDescriptor")]
        public string FundingSourceDescriptor { get; set; }

        /// <summary>
        /// Indicator as to whether the OpenStaffPosition is filling a high-need subject area designated as a teacher shortage that may be eligible for special grants, aid or compensation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highNeedAcademicSubject")]
        public bool? HighNeedAcademicSubject { get; set; }

        /// <summary>
        /// Indicator of whether the OpenStaffPosition is currently Active.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// The maximum salary or wage a person is paid before deductions (excluding differentials) but including annuities.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxSalary")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? MaxSalary { get; set; }

        /// <summary>
        /// The minimum salary or wage a person is paid before deductions (excluding differentials) but including annuities.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minSalary")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? MinSalary { get; set; }

        /// <summary>
        /// The reason for the open staff position (e.g., new position, replacement, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="openStaffPositionReasonDescriptor")]
        public string OpenStaffPositionReasonDescriptor { get; set; }

        /// <summary>
        /// Identifier assigned to the position to be filled.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="positionControlNumber")]
        public string PositionControlNumber { get; set; }

        /// <summary>
        /// The identifier for the school year for which the OpenStaffPosition is seeking to fill.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? Entities.Common.TPDM.IOpenStaffPositionExtension.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSchoolYearTypeReference.SchoolYear;
                    }

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The first term for the Session during the school year for which the OpenStaffPosition is seeking to fill.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor")]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Including salary, the fully loaded cost budgeted for this teacher.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalBudgeted")][Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public decimal? TotalBudgeted { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.OpenStaffPositionExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IOpenStaffPositionExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.OpenStaffPositionExtensionMapper.MapTo(this, (Entities.Common.TPDM.IOpenStaffPositionExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsFullTimeEquivalencySupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsFundingSourceDescriptorSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsHighNeedAcademicSubjectSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsIsActiveSupported                           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsMaxSalarySupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsMinSalarySupported                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsOpenStaffPositionReasonDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsPositionControlNumberSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsSchoolYearSupported                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsTermDescriptorSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsTotalBudgetedSupported                      { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IOpenStaffPositionExtension.SchoolYearTypeResourceId
        {
            get { return null; }
            set { ImplicitSchoolYearTypeReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<OpenStaffPositionExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<OpenStaffPositionExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: OpenStaffPositionEvent

namespace EdFi.Ods.Api.Common.Models.Resources.OpenStaffPositionEvent.TPDM
{
    /// <summary>
    /// Represents a reference to the OpenStaffPositionEvent resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="openStaffPositionEventTypeDescriptor"), NaturalKeyMember]
        public string OpenStaffPositionEventTypeDescriptor { get; set; }

        [DataMember(Name="requisitionNumber"), NaturalKeyMember]
        public string RequisitionNumber { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EventDate != default(DateTime) && OpenStaffPositionEventTypeDescriptor != default(string) && RequisitionNumber != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "OpenStaffPositionEvent",
                Href = $"/tpdm/openStaffPositionEvents/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEvent table of the OpenStaffPositionEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEvent : Entities.Common.TPDM.IOpenStaffPositionEvent, IHasETag, Entities.Common.TPDM.IOpenStaffPositionEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the OpenStaffPositionEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _openStaffPositionReferenceExplicitlyAssigned;
        private OpenStaffPosition.EdFi.OpenStaffPositionReference _openStaffPositionReference;
        private OpenStaffPosition.EdFi.OpenStaffPositionReference ImplicitOpenStaffPositionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_openStaffPositionReference == null && !_openStaffPositionReferenceExplicitlyAssigned)
                    _openStaffPositionReference = new OpenStaffPosition.EdFi.OpenStaffPositionReference();

                return _openStaffPositionReference;
            }
        }

        [DataMember(Name="openStaffPositionReference")][NaturalKeyMember]
        public OpenStaffPosition.EdFi.OpenStaffPositionReference OpenStaffPositionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitOpenStaffPositionReference != null
                    && (_openStaffPositionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    return ImplicitOpenStaffPositionReference;

                return null;
            }
            set
            {
                _openStaffPositionReferenceExplicitlyAssigned = true;
                _openStaffPositionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IOpenStaffPositionEvent.EducationOrganizationId
        {
            get
            {
                if (ImplicitOpenStaffPositionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    return ImplicitOpenStaffPositionReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // OpenStaffPosition
                _openStaffPositionReferenceExplicitlyAssigned = false;
                ImplicitOpenStaffPositionReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// Date of the open staff position event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Reflects milestones like vacancy approved, vacancy posted, date onboarded, processing date, orientation date, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="openStaffPositionEventTypeDescriptor"), NaturalKeyMember]
        public string OpenStaffPositionEventTypeDescriptor { get; set; }

        /// <summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IOpenStaffPositionEvent.RequisitionNumber
        {
            get
            {
                if (ImplicitOpenStaffPositionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    return ImplicitOpenStaffPositionReference.RequisitionNumber;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // OpenStaffPosition
                _openStaffPositionReferenceExplicitlyAssigned = false;
                ImplicitOpenStaffPositionReference.RequisitionNumber = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IOpenStaffPositionEvent;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionEvent).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).EventDate == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionEvent).EventDate.Equals(compareTo.EventDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).OpenStaffPositionEventTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionEvent).OpenStaffPositionEventTypeDescriptor.Equals(compareTo.OpenStaffPositionEventTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).RequisitionNumber == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionEvent).RequisitionNumber.Equals(compareTo.RequisitionNumber))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionEvent).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).EventDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionEvent).EventDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).OpenStaffPositionEventTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionEvent).OpenStaffPositionEventTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionEvent).RequisitionNumber != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionEvent).RequisitionNumber.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Reflects the status of the milestone (e.g., pending, completed, cancelled).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="openStaffPositionEventStatusDescriptor")]
        public string OpenStaffPositionEventStatusDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.OpenStaffPositionEventMapper.SynchronizeTo(this, (Entities.Common.TPDM.IOpenStaffPositionEvent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.OpenStaffPositionEventMapper.MapTo(this, (Entities.Common.TPDM.IOpenStaffPositionEvent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IOpenStaffPositionEventSynchronizationSourceSupport.IsOpenStaffPositionEventStatusDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IOpenStaffPositionEvent.OpenStaffPositionResourceId
        {
            get { return null; }
            set { ImplicitOpenStaffPositionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IOpenStaffPositionEvent.OpenStaffPositionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitOpenStaffPositionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventPutPostRequestValidator : FluentValidation.AbstractValidator<OpenStaffPositionEvent>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<OpenStaffPositionEvent> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: OpenStaffPositionEventStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.OpenStaffPositionEventStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEventStatusDescriptor table of the OpenStaffPositionEventStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventStatusDescriptor : Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the OpenStaffPositionEventStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="openStaffPositionEventStatusDescriptorId"), NaturalKeyMember]
        public int OpenStaffPositionEventStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return OpenStaffPositionEventStatusDescriptorId; }
            set { OpenStaffPositionEventStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor).OpenStaffPositionEventStatusDescriptorId == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor).OpenStaffPositionEventStatusDescriptorId.Equals(compareTo.OpenStaffPositionEventStatusDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor).OpenStaffPositionEventStatusDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor).OpenStaffPositionEventStatusDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.OpenStaffPositionEventStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.OpenStaffPositionEventStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<OpenStaffPositionEventStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<OpenStaffPositionEventStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: OpenStaffPositionEventTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.OpenStaffPositionEventTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEventTypeDescriptor table of the OpenStaffPositionEventTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventTypeDescriptor : Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the OpenStaffPositionEventTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="openStaffPositionEventTypeDescriptorId"), NaturalKeyMember]
        public int OpenStaffPositionEventTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return OpenStaffPositionEventTypeDescriptorId; }
            set { OpenStaffPositionEventTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor).OpenStaffPositionEventTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor).OpenStaffPositionEventTypeDescriptorId.Equals(compareTo.OpenStaffPositionEventTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor).OpenStaffPositionEventTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor).OpenStaffPositionEventTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.OpenStaffPositionEventTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.OpenStaffPositionEventTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<OpenStaffPositionEventTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<OpenStaffPositionEventTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: OpenStaffPositionReasonDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.OpenStaffPositionReasonDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionReasonDescriptor table of the OpenStaffPositionReasonDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionReasonDescriptor : Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the OpenStaffPositionReasonDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="openStaffPositionReasonDescriptorId"), NaturalKeyMember]
        public int OpenStaffPositionReasonDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return OpenStaffPositionReasonDescriptorId; }
            set { OpenStaffPositionReasonDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor).OpenStaffPositionReasonDescriptorId == null
                || !(this as Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor).OpenStaffPositionReasonDescriptorId.Equals(compareTo.OpenStaffPositionReasonDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor).OpenStaffPositionReasonDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor).OpenStaffPositionReasonDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.OpenStaffPositionReasonDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.OpenStaffPositionReasonDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionReasonDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<OpenStaffPositionReasonDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<OpenStaffPositionReasonDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluation

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluation.TPDM
{
    /// <summary>
    /// Represents a reference to the PerformanceEvaluation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationPeriodDescriptor != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "PerformanceEvaluation",
                Href = $"/tpdm/performanceEvaluations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluation table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluation : Entities.Common.TPDM.IPerformanceEvaluation, IHasETag, Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public PerformanceEvaluation()
        {
            PerformanceEvaluationGradeLevels = new List<PerformanceEvaluationGradeLevel>();
            PerformanceEvaluationProgramGateways = new List<PerformanceEvaluationProgramGateway>();
            PerformanceEvaluationRatingLevels = new List<PerformanceEvaluationRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.EdFi.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.EdFi.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.EdFi.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.EdFi.SchoolYearTypeReference SchoolYearTypeReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set
            {
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IPerformanceEvaluation.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluation).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluation).EvaluationPeriodDescriptor == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluation).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluation).SchoolYear == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluation).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluation).TermDescriptor == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluation).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluation).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluation).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluation).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluation).EvaluationPeriodDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTitle.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluation).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluation).SchoolYear.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluation).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluation).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of a performance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<PerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevelsCovariant;

        [DataMember(Name="gradeLevels"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationGradeLevel> PerformanceEvaluationGradeLevels
        {
            get { return _performanceEvaluationGradeLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationGradeLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)e.Item).PerformanceEvaluation = this);
                _performanceEvaluationGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, PerformanceEvaluationGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)e.Item).PerformanceEvaluation = this;
                _performanceEvaluationGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationGradeLevels
        {
            get { return _performanceEvaluationGradeLevelsCovariant; }
            set { PerformanceEvaluationGradeLevels = new List<PerformanceEvaluationGradeLevel>(value.Cast<PerformanceEvaluationGradeLevel>()); }
        }

        private ICollection<PerformanceEvaluationProgramGateway> _performanceEvaluationProgramGateways;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway> _performanceEvaluationProgramGatewaysCovariant;

        [DataMember(Name="programGateways"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationProgramGateway> PerformanceEvaluationProgramGateways
        {
            get { return _performanceEvaluationProgramGateways; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationProgramGateway>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationProgramGateway)e.Item).PerformanceEvaluation = this);
                _performanceEvaluationProgramGateways = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, PerformanceEvaluationProgramGateway>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationProgramGateway)e.Item).PerformanceEvaluation = this;
                _performanceEvaluationProgramGatewaysCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationProgramGateways
        {
            get { return _performanceEvaluationProgramGatewaysCovariant; }
            set { PerformanceEvaluationProgramGateways = new List<PerformanceEvaluationProgramGateway>(value.Cast<PerformanceEvaluationProgramGateway>()); }
        }

        private ICollection<PerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationRatingLevel> PerformanceEvaluationRatingLevels
        {
            get { return _performanceEvaluationRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)e.Item).PerformanceEvaluation = this);
                _performanceEvaluationRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, PerformanceEvaluationRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)e.Item).PerformanceEvaluation = this;
                _performanceEvaluationRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationRatingLevels
        {
            get { return _performanceEvaluationRatingLevelsCovariant; }
            set { PerformanceEvaluationRatingLevels = new List<PerformanceEvaluationRatingLevel>(value.Cast<PerformanceEvaluationRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_performanceEvaluationGradeLevels != null) foreach (var item in _performanceEvaluationGradeLevels)
            {
                item.PerformanceEvaluation = this;
            }

            if (_performanceEvaluationProgramGateways != null) foreach (var item in _performanceEvaluationProgramGateways)
            {
                item.PerformanceEvaluation = this;
            }

            if (_performanceEvaluationRatingLevels != null) foreach (var item in _performanceEvaluationRatingLevels)
            {
                item.PerformanceEvaluation = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationGradeLevelsSupported      { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationProgramGatewaysSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelsSupported     { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationGradeLevelIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationProgramGatewayIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IPerformanceEvaluation.SchoolYearTypeResourceId
        {
            get { return null; }
            set { ImplicitSchoolYearTypeReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var performanceEvaluationGradeLevelsValidator = new PerformanceEvaluationGradeLevelPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationGradeLevels)
            {
                var validationResult = performanceEvaluationGradeLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var performanceEvaluationProgramGatewaysValidator = new PerformanceEvaluationProgramGatewayPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationProgramGateways)
            {
                var validationResult = performanceEvaluationProgramGatewaysValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var performanceEvaluationRatingLevelsValidator = new PerformanceEvaluationRatingLevelPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationRatingLevels)
            {
                var validationResult = performanceEvaluationRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationGradeLevel table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationGradeLevel : Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, Entities.Common.TPDM.IPerformanceEvaluationGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluation _performanceEvaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluation Entities.Common.TPDM.IPerformanceEvaluationGradeLevel.PerformanceEvaluation
        {
            get { return _performanceEvaluation; }
            set { SetPerformanceEvaluation(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluation PerformanceEvaluation
        {
            set { SetPerformanceEvaluation(value); }
        }

        private void SetPerformanceEvaluation(Entities.Common.TPDM.IPerformanceEvaluation value)
        {
            _performanceEvaluation = value;
        }

        /// <summary>
        /// The grade levels involved with the performance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluation == null || !_performanceEvaluation.Equals(compareTo.PerformanceEvaluation))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel).GradeLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_performanceEvaluation != null)
                    hash = hash * 23 + _performanceEvaluation.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel).GradeLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel).GradeLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationGradeLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationGradeLevelMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationGradeLevelPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationGradeLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationGradeLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationProgramGateway table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationProgramGateway : Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, Entities.Common.TPDM.IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluation _performanceEvaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluation Entities.Common.TPDM.IPerformanceEvaluationProgramGateway.PerformanceEvaluation
        {
            get { return _performanceEvaluation; }
            set { SetPerformanceEvaluation(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluation PerformanceEvaluation
        {
            set { SetPerformanceEvaluation(value); }
        }

        private void SetPerformanceEvaluation(Entities.Common.TPDM.IPerformanceEvaluation value)
        {
            _performanceEvaluation = value;
        }

        /// <summary>
        /// Identifies the program gateway that may be associated for continuation in the program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programGatewayDescriptor"), NaturalKeyMember]
        public string ProgramGatewayDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationProgramGateway;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluation == null || !_performanceEvaluation.Equals(compareTo.PerformanceEvaluation))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationProgramGateway).ProgramGatewayDescriptor == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationProgramGateway).ProgramGatewayDescriptor.Equals(compareTo.ProgramGatewayDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_performanceEvaluation != null)
                    hash = hash * 23 + _performanceEvaluation.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationProgramGateway).ProgramGatewayDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationProgramGateway).ProgramGatewayDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationProgramGatewayMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationProgramGateway)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationProgramGatewayMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationProgramGateway)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationProgramGatewayPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationProgramGateway>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationProgramGateway> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevel table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevel : Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluation _performanceEvaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluation Entities.Common.TPDM.IPerformanceEvaluationRatingLevel.PerformanceEvaluation
        {
            get { return _performanceEvaluation; }
            set { SetPerformanceEvaluation(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluation PerformanceEvaluation
        {
            set { SetPerformanceEvaluation(value); }
        }

        private void SetPerformanceEvaluation(Entities.Common.TPDM.IPerformanceEvaluation value)
        {
            _performanceEvaluation = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluation == null || !_performanceEvaluation.Equals(compareTo.PerformanceEvaluation))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel).EvaluationRatingLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_performanceEvaluation != null)
                    hash = hash * 23 + _performanceEvaluation.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel).EvaluationRatingLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel).EvaluationRatingLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport.IsMinRatingSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluationRating

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluationRating.TPDM
{
    /// <summary>
    /// Represents a reference to the PerformanceEvaluationRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationPeriodDescriptor != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "PerformanceEvaluationRating",
                Href = $"/tpdm/performanceEvaluationRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRating table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRating : Entities.Common.TPDM.IPerformanceEvaluationRating, IHasETag, Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public PerformanceEvaluationRating()
        {
            PerformanceEvaluationRatingResults = new List<PerformanceEvaluationRatingResult>();
            PerformanceEvaluationRatingReviewers = new List<PerformanceEvaluationRatingReviewer>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluationRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _performanceEvaluationReferenceExplicitlyAssigned;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference _performanceEvaluationReference;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference ImplicitPerformanceEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_performanceEvaluationReference == null && !_performanceEvaluationReferenceExplicitlyAssigned)
                    _performanceEvaluationReference = new PerformanceEvaluation.TPDM.PerformanceEvaluationReference();

                return _performanceEvaluationReference;
            }
        }

        [DataMember(Name="performanceEvaluationReference")][NaturalKeyMember]
        public PerformanceEvaluation.TPDM.PerformanceEvaluationReference PerformanceEvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPerformanceEvaluationReference != null
                    && (_performanceEvaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference;

                return null;
            }
            set
            {
                _performanceEvaluationReferenceExplicitlyAssigned = true;
                _performanceEvaluationReference = value;
            }
        }
        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IPerformanceEvaluationRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IPerformanceEvaluationRating.SchoolYear
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.TermDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PersonId == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRating).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).SchoolYear == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).EducationOrganizationId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).SourceSystemDescriptor.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRating).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRating).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the performance evaluation was conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime ActualDate { get; set; }

        /// <summary>
        /// The actual or estimated number of clock minutes during which the performance evaluation was conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualDuration")]
        public int? ActualDuration { get; set; }

        /// <summary>
        /// An indication of the the time at which the performance evaluation was conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualTime")][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan? ActualTime { get; set; }

        /// <summary>
        /// An indicator of whether the performance evaluation was announced or not.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="announced")]
        public bool? Announced { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// A type of co-teaching observed as part of the performance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="coteachingStyleObservedDescriptor")]
        public string CoteachingStyleObservedDescriptor { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceEvaluationRatingLevelDescriptor")]
        public string PerformanceEvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which the performance evaluation was to be conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="scheduleDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ScheduleDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<PerformanceEvaluationRatingResult> _performanceEvaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> _performanceEvaluationRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationRatingResult> PerformanceEvaluationRatingResults
        {
            get { return _performanceEvaluationRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingResult)e.Item).PerformanceEvaluationRating = this);
                _performanceEvaluationRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, PerformanceEvaluationRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingResult)e.Item).PerformanceEvaluationRating = this;
                _performanceEvaluationRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingResults
        {
            get { return _performanceEvaluationRatingResultsCovariant; }
            set { PerformanceEvaluationRatingResults = new List<PerformanceEvaluationRatingResult>(value.Cast<PerformanceEvaluationRatingResult>()); }
        }

        private ICollection<PerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewersCovariant;

        [DataMember(Name="reviewers"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationRatingReviewer> PerformanceEvaluationRatingReviewers
        {
            get { return _performanceEvaluationRatingReviewers; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationRatingReviewer>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)e.Item).PerformanceEvaluationRating = this);
                _performanceEvaluationRatingReviewers = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, PerformanceEvaluationRatingReviewer>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)e.Item).PerformanceEvaluationRating = this;
                _performanceEvaluationRatingReviewersCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingReviewers
        {
            get { return _performanceEvaluationRatingReviewersCovariant; }
            set { PerformanceEvaluationRatingReviewers = new List<PerformanceEvaluationRatingReviewer>(value.Cast<PerformanceEvaluationRatingReviewer>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_performanceEvaluationRatingResults != null) foreach (var item in _performanceEvaluationRatingResults)
            {
                item.PerformanceEvaluationRating = this;
            }

            if (_performanceEvaluationRatingReviewers != null) foreach (var item in _performanceEvaluationRatingReviewers)
            {
                item.PerformanceEvaluationRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRating)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualDateSupported                                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualDurationSupported                              { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualTimeSupported                                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsAnnouncedSupported                                   { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsCommentsSupported                                    { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsCoteachingStyleObservedDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingResultsSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewersSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsScheduleDateSupported                                { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, bool> Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingResultIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, bool> Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewerIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationResourceId
        {
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluationRating.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRating>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var performanceEvaluationRatingResultsValidator = new PerformanceEvaluationRatingResultPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationRatingResults)
            {
                var validationResult = performanceEvaluationRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var performanceEvaluationRatingReviewersValidator = new PerformanceEvaluationRatingReviewerPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationRatingReviewers)
            {
                var validationResult = performanceEvaluationRatingReviewersValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingResult table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingResult : Entities.Common.TPDM.IPerformanceEvaluationRatingResult, Entities.Common.TPDM.IPerformanceEvaluationRatingResultSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluationRating _performanceEvaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluationRating Entities.Common.TPDM.IPerformanceEvaluationRatingResult.PerformanceEvaluationRating
        {
            get { return _performanceEvaluationRating; }
            set { SetPerformanceEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluationRating PerformanceEvaluationRating
        {
            set { SetPerformanceEvaluationRating(value); }
        }

        private void SetPerformanceEvaluationRating(Entities.Common.TPDM.IPerformanceEvaluationRating value)
        {
            _performanceEvaluationRating = value;
        }

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating { get; set; }

        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluationRating == null || !_performanceEvaluationRating.Equals(compareTo.PerformanceEvaluationRating))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).Rating == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).Rating.Equals(compareTo.Rating))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).RatingResultTitle == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_performanceEvaluationRating != null)
                    hash = hash * 23 + _performanceEvaluationRating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).Rating != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).Rating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).RatingResultTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).RatingResultTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewer table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewer : Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _reviewerPersonReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _reviewerPersonReference;
        private Person.EdFi.PersonReference ImplicitReviewerPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_reviewerPersonReference == null && !_reviewerPersonReferenceExplicitlyAssigned)
                    _reviewerPersonReference = new Person.EdFi.PersonReference();

                return _reviewerPersonReference;
            }
        }

        [DataMember(Name="reviewerPersonReference")]
        public Person.EdFi.PersonReference ReviewerPersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitReviewerPersonReference != null
                    && (_reviewerPersonReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    return ImplicitReviewerPersonReference;

                return null;
            }
            set
            {
                _reviewerPersonReferenceExplicitlyAssigned = true;
                _reviewerPersonReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluationRating _performanceEvaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluationRating Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRating
        {
            get { return _performanceEvaluationRating; }
            set { SetPerformanceEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluationRating PerformanceEvaluationRating
        {
            set { SetPerformanceEvaluationRating(value); }
        }

        private void SetPerformanceEvaluationRating(Entities.Common.TPDM.IPerformanceEvaluationRating value)
        {
            _performanceEvaluationRating = value;
        }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName"), NaturalKeyMember]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname"), NaturalKeyMember]
        public string LastSurname { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluationRating == null || !_performanceEvaluationRating.Equals(compareTo.PerformanceEvaluationRating))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).FirstName == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).FirstName.Equals(compareTo.FirstName))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).LastSurname == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).LastSurname.Equals(compareTo.LastSurname))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_performanceEvaluationRating != null)
                    hash = hash * 23 + _performanceEvaluationRating.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).FirstName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).FirstName.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).LastSurname != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).LastSurname.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonId
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ReviewerPerson
                _reviewerPersonReferenceExplicitlyAssigned = false;
                ImplicitReviewerPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRatingReviewer.ReviewerSourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerSourceSystemDescriptor
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitReviewerPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// receivedTraining
        /// </summary>
        [DataMember(Name = "receivedTraining")]
        public PerformanceEvaluationRatingReviewerReceivedTraining PerformanceEvaluationRatingReviewerReceivedTraining { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRatingReviewerReceivedTraining
        {
            get { return PerformanceEvaluationRatingReviewerReceivedTraining; }
            set { PerformanceEvaluationRatingReviewerReceivedTraining = (PerformanceEvaluationRatingReviewerReceivedTraining) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingReviewerMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingReviewerMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerPersonIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerSourceSystemDescriptorSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return null; }
            set { ImplicitReviewerPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitReviewerPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingReviewer>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingReviewer> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewerReceivedTraining table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerReceivedTraining : Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining, Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer _performanceEvaluationRatingReviewer;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining.PerformanceEvaluationRatingReviewer
        {
            get { return _performanceEvaluationRatingReviewer; }
            set { SetPerformanceEvaluationRatingReviewer(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer PerformanceEvaluationRatingReviewer
        {
            set { SetPerformanceEvaluationRatingReviewer(value); }
        }

        private void SetPerformanceEvaluationRatingReviewer(Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer value)
        {
            _performanceEvaluationRatingReviewer = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluationRatingReviewer == null || !_performanceEvaluationRatingReviewer.Equals(compareTo.PerformanceEvaluationRatingReviewer))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_performanceEvaluationRatingReviewer != null)
                    hash = hash * 23 + _performanceEvaluationRatingReviewer.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interRaterReliabilityScore")]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The date on which the person administering the performance meausre received training on how to conduct performance measures.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="receivedTrainingDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ReceivedTrainingDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingReviewerReceivedTrainingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingReviewerReceivedTrainingMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsReceivedTrainingDateSupported        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerReceivedTrainingPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingReviewerReceivedTraining>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingReviewerReceivedTraining> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluationRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevelDescriptor table of the PerformanceEvaluationRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelDescriptor : Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluationRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationRatingLevelDescriptorId"), NaturalKeyMember]
        public int PerformanceEvaluationRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return PerformanceEvaluationRatingLevelDescriptorId; }
            set { PerformanceEvaluationRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor).PerformanceEvaluationRatingLevelDescriptorId == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor).PerformanceEvaluationRatingLevelDescriptorId.Equals(compareTo.PerformanceEvaluationRatingLevelDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor).PerformanceEvaluationRatingLevelDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor).PerformanceEvaluationRatingLevelDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluationTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluationTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationTypeDescriptor table of the PerformanceEvaluationTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationTypeDescriptor : Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluationTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationTypeDescriptorId"), NaturalKeyMember]
        public int PerformanceEvaluationTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return PerformanceEvaluationTypeDescriptorId; }
            set { PerformanceEvaluationTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor).PerformanceEvaluationTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor).PerformanceEvaluationTypeDescriptorId.Equals(compareTo.PerformanceEvaluationTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor).PerformanceEvaluationTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor).PerformanceEvaluationTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Api.Common.Models.Resources.PostSecondaryInstitution.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.PostSecondaryInstitutionExtension table of the PostSecondaryInstitution aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PostSecondaryInstitutionExtension : Entities.Common.TPDM.IPostSecondaryInstitutionExtension, Entities.Common.TPDM.IPostSecondaryInstitutionExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IPostSecondaryInstitution _postSecondaryInstitution;

        [IgnoreDataMember]
        Entities.Common.EdFi.IPostSecondaryInstitution Entities.Common.TPDM.IPostSecondaryInstitutionExtension.PostSecondaryInstitution
        {
            get { return _postSecondaryInstitution; }
            set { SetPostSecondaryInstitution(value); }
        }

        internal Entities.Common.EdFi.IPostSecondaryInstitution PostSecondaryInstitution
        {
            set { SetPostSecondaryInstitution(value); }
        }

        private void SetPostSecondaryInstitution(Entities.Common.EdFi.IPostSecondaryInstitution value)
        {
            _postSecondaryInstitution = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPostSecondaryInstitutionExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_postSecondaryInstitution == null || !_postSecondaryInstitution.Equals(compareTo.PostSecondaryInstitution))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_postSecondaryInstitution != null)
                    hash = hash * 23 + _postSecondaryInstitution.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The federal locale code associated with an education organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="federalLocaleCodeDescriptor")]
        public string FederalLocaleCodeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PostSecondaryInstitutionExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPostSecondaryInstitutionExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PostSecondaryInstitutionExtensionMapper.MapTo(this, (Entities.Common.TPDM.IPostSecondaryInstitutionExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPostSecondaryInstitutionExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PostSecondaryInstitutionExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<PostSecondaryInstitutionExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PostSecondaryInstitutionExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PreviousCareerDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.PreviousCareerDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.PreviousCareerDescriptor table of the PreviousCareerDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PreviousCareerDescriptor : Entities.Common.TPDM.IPreviousCareerDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PreviousCareerDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="previousCareerDescriptorId"), NaturalKeyMember]
        public int PreviousCareerDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return PreviousCareerDescriptorId; }
            set { PreviousCareerDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IPreviousCareerDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IPreviousCareerDescriptor).PreviousCareerDescriptorId == null
                || !(this as Entities.Common.TPDM.IPreviousCareerDescriptor).PreviousCareerDescriptorId.Equals(compareTo.PreviousCareerDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IPreviousCareerDescriptor).PreviousCareerDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IPreviousCareerDescriptor).PreviousCareerDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PreviousCareerDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPreviousCareerDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PreviousCareerDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IPreviousCareerDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PreviousCareerDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<PreviousCareerDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PreviousCareerDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ProfessionalDevelopmentEvent

namespace EdFi.Ods.Api.Common.Models.Resources.ProfessionalDevelopmentEvent.TPDM
{
    /// <summary>
    /// Represents a reference to the ProfessionalDevelopmentEvent resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventReference
    {
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="professionalDevelopmentTitle"), NaturalKeyMember]
        public string ProfessionalDevelopmentTitle { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return Namespace != default(string) && ProfessionalDevelopmentTitle != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "ProfessionalDevelopmentEvent",
                Href = $"/tpdm/professionalDevelopmentEvents/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentEvent table of the ProfessionalDevelopmentEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEvent : Entities.Common.TPDM.IProfessionalDevelopmentEvent, IHasETag, Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ProfessionalDevelopmentEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Namespace for the event, typically associated with the issuing authority.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        /// <summary>
        /// The title or name for a professional development.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="professionalDevelopmentTitle"), NaturalKeyMember]
        public string ProfessionalDevelopmentTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IProfessionalDevelopmentEvent;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).Namespace == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).Namespace.Equals(compareTo.Namespace))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).ProfessionalDevelopmentTitle == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).ProfessionalDevelopmentTitle.Equals(compareTo.ProfessionalDevelopmentTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).Namespace.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).ProfessionalDevelopmentTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEvent).ProfessionalDevelopmentTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of whether or not a professional development event is comprised of multiple sessions or not.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multipleSession")]
        public bool? MultipleSession { get; set; }

        /// <summary>
        /// A code describing an organization that is offering a specific professional development.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="professionalDevelopmentOfferedByDescriptor")]
        public string ProfessionalDevelopmentOfferedByDescriptor { get; set; }

        /// <summary>
        /// The reported reason for a teacher candidate's professional development.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="professionalDevelopmentReason")]
        public string ProfessionalDevelopmentReason { get; set; }

        /// <summary>
        /// An indication of whether a teacher candidate is active in a professional development.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="required")]
        public bool? Required { get; set; }

        /// <summary>
        /// The number of total hours the professional development contains.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="totalHours")]
        public int? TotalHours { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ProfessionalDevelopmentEventMapper.SynchronizeTo(this, (Entities.Common.TPDM.IProfessionalDevelopmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ProfessionalDevelopmentEventMapper.MapTo(this, (Entities.Common.TPDM.IProfessionalDevelopmentEvent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsMultipleSessionSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsProfessionalDevelopmentReasonSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsRequiredSupported                                    { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsTotalHoursSupported                                  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventPutPostRequestValidator : FluentValidation.AbstractValidator<ProfessionalDevelopmentEvent>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ProfessionalDevelopmentEvent> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Api.Common.Models.Resources.ProfessionalDevelopmentEventAttendance.TPDM
{
    /// <summary>
    /// Represents a reference to the ProfessionalDevelopmentEventAttendance resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventAttendanceReference
    {
        [DataMember(Name="attendanceDate"), NaturalKeyMember]
        public DateTime AttendanceDate { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="professionalDevelopmentTitle"), NaturalKeyMember]
        public string ProfessionalDevelopmentTitle { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AttendanceDate != default(DateTime) && Namespace != default(string) && PersonId != default(string) && ProfessionalDevelopmentTitle != default(string) && SourceSystemDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "ProfessionalDevelopmentEventAttendance",
                Href = $"/tpdm/professionalDevelopmentEventAttendances/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentEventAttendance table of the ProfessionalDevelopmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventAttendance : Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance, IHasETag, Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ProfessionalDevelopmentEventAttendance resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        private bool _professionalDevelopmentEventReferenceExplicitlyAssigned;
        private ProfessionalDevelopmentEvent.TPDM.ProfessionalDevelopmentEventReference _professionalDevelopmentEventReference;
        private ProfessionalDevelopmentEvent.TPDM.ProfessionalDevelopmentEventReference ImplicitProfessionalDevelopmentEventReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_professionalDevelopmentEventReference == null && !_professionalDevelopmentEventReferenceExplicitlyAssigned)
                    _professionalDevelopmentEventReference = new ProfessionalDevelopmentEvent.TPDM.ProfessionalDevelopmentEventReference();

                return _professionalDevelopmentEventReference;
            }
        }

        [DataMember(Name="professionalDevelopmentEventReference")][NaturalKeyMember]
        public ProfessionalDevelopmentEvent.TPDM.ProfessionalDevelopmentEventReference ProfessionalDevelopmentEventReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitProfessionalDevelopmentEventReference != null
                    && (_professionalDevelopmentEventReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitProfessionalDevelopmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitProfessionalDevelopmentEventReference;

                return null;
            }
            set
            {
                _professionalDevelopmentEventReferenceExplicitlyAssigned = true;
                _professionalDevelopmentEventReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime AttendanceDate { get; set; }

        /// <summary>
        /// Namespace for the event, typically associated with the issuing authority.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.Namespace
        {
            get
            {
                if (ImplicitProfessionalDevelopmentEventReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProfessionalDevelopmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitProfessionalDevelopmentEventReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ProfessionalDevelopmentEvent
                _professionalDevelopmentEventReferenceExplicitlyAssigned = false;
                ImplicitProfessionalDevelopmentEventReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// The title or name for a professional development.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentTitle
        {
            get
            {
                if (ImplicitProfessionalDevelopmentEventReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitProfessionalDevelopmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitProfessionalDevelopmentEventReference.ProfessionalDevelopmentTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ProfessionalDevelopmentEvent
                _professionalDevelopmentEventReferenceExplicitlyAssigned = false;
                ImplicitProfessionalDevelopmentEventReference.ProfessionalDevelopmentTitle = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (ProfessionalDevelopmentEventAttendance.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).AttendanceDate == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).AttendanceDate.Equals(compareTo.AttendanceDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).Namespace == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).Namespace.Equals(compareTo.Namespace))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).PersonId == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).ProfessionalDevelopmentTitle == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).ProfessionalDevelopmentTitle.Equals(compareTo.ProfessionalDevelopmentTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                // Standard Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).AttendanceDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).AttendanceDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).Namespace.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).ProfessionalDevelopmentTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).ProfessionalDevelopmentTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance).SourceSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code describing the attendance event, for example:       Present       Unexcused absence       Excused absence       Tardy.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="attendanceEventCategoryDescriptor")]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// The reported reason for a teacher candidate's absence.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="attendanceEventReason")]
        public string AttendanceEventReason { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ProfessionalDevelopmentEventAttendanceMapper.SynchronizeTo(this, (Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ProfessionalDevelopmentEventAttendanceMapper.MapTo(this, (Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport.IsAttendanceEventCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport.IsAttendanceEventReasonSupported              { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentEventResourceId
        {
            get { return null; }
            set { ImplicitProfessionalDevelopmentEventReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentEventDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitProfessionalDevelopmentEventReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventAttendancePutPostRequestValidator : FluentValidation.AbstractValidator<ProfessionalDevelopmentEventAttendance>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ProfessionalDevelopmentEventAttendance> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ProfessionalDevelopmentOfferedByDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ProfessionalDevelopmentOfferedByDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentOfferedByDescriptor table of the ProfessionalDevelopmentOfferedByDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentOfferedByDescriptor : Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ProfessionalDevelopmentOfferedByDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="professionalDevelopmentOfferedByDescriptorId"), NaturalKeyMember]
        public int ProfessionalDevelopmentOfferedByDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ProfessionalDevelopmentOfferedByDescriptorId; }
            set { ProfessionalDevelopmentOfferedByDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor).ProfessionalDevelopmentOfferedByDescriptorId == null
                || !(this as Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor).ProfessionalDevelopmentOfferedByDescriptorId.Equals(compareTo.ProfessionalDevelopmentOfferedByDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor).ProfessionalDevelopmentOfferedByDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor).ProfessionalDevelopmentOfferedByDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ProfessionalDevelopmentOfferedByDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ProfessionalDevelopmentOfferedByDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentOfferedByDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ProfessionalDevelopmentOfferedByDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ProfessionalDevelopmentOfferedByDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ProgramGatewayDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ProgramGatewayDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ProgramGatewayDescriptor table of the ProgramGatewayDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ProgramGatewayDescriptor : Entities.Common.TPDM.IProgramGatewayDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ProgramGatewayDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programGatewayDescriptorId"), NaturalKeyMember]
        public int ProgramGatewayDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ProgramGatewayDescriptorId; }
            set { ProgramGatewayDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IProgramGatewayDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IProgramGatewayDescriptor).ProgramGatewayDescriptorId == null
                || !(this as Entities.Common.TPDM.IProgramGatewayDescriptor).ProgramGatewayDescriptorId.Equals(compareTo.ProgramGatewayDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IProgramGatewayDescriptor).ProgramGatewayDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IProgramGatewayDescriptor).ProgramGatewayDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ProgramGatewayDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IProgramGatewayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ProgramGatewayDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IProgramGatewayDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ProgramGatewayDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ProgramGatewayDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ProgramGatewayDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: QuantitativeMeasure

namespace EdFi.Ods.Api.Common.Models.Resources.QuantitativeMeasure.TPDM
{
    /// <summary>
    /// Represents a reference to the QuantitativeMeasure resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="quantitativeMeasureIdentifier"), NaturalKeyMember]
        public string QuantitativeMeasureIdentifier { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && QuantitativeMeasureIdentifier != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "QuantitativeMeasure",
                Href = $"/tpdm/quantitativeMeasures/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasure table of the QuantitativeMeasure aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasure : Entities.Common.TPDM.IQuantitativeMeasure, IHasETag, Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the QuantitativeMeasure resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")][NaturalKeyMember]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IQuantitativeMeasure.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (QuantitativeMeasure.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (QuantitativeMeasure.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the quantitative measure.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="quantitativeMeasureIdentifier"), NaturalKeyMember]
        public string QuantitativeMeasureIdentifier { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IQuantitativeMeasure.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (QuantitativeMeasure.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasure.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IQuantitativeMeasure;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationElementTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).QuantitativeMeasureIdentifier == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).QuantitativeMeasureIdentifier.Equals(compareTo.QuantitativeMeasureIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).SchoolYear == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasure).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasure).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasure).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationElementTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationElementTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).PerformanceEvaluationTypeDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).QuantitativeMeasureIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).QuantitativeMeasureIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasure).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasure).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="quantitativeMeasureDatatypeDescriptor")]
        public string QuantitativeMeasureDatatypeDescriptor { get; set; }

        /// <summary>
        /// The type of the quantitative measure (e.g., achievement, growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="quantitativeMeasureTypeDescriptor")]
        public string QuantitativeMeasureTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.QuantitativeMeasureMapper.SynchronizeTo(this, (Entities.Common.TPDM.IQuantitativeMeasure)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.QuantitativeMeasureMapper.MapTo(this, (Entities.Common.TPDM.IQuantitativeMeasure)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport.IsQuantitativeMeasureDatatypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport.IsQuantitativeMeasureTypeDescriptorSupported      { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasurePutPostRequestValidator : FluentValidation.AbstractValidator<QuantitativeMeasure>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<QuantitativeMeasure> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: QuantitativeMeasureDatatypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.QuantitativeMeasureDatatypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureDatatypeDescriptor table of the QuantitativeMeasureDatatypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureDatatypeDescriptor : Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the QuantitativeMeasureDatatypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="quantitativeMeasureDatatypeDescriptorId"), NaturalKeyMember]
        public int QuantitativeMeasureDatatypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return QuantitativeMeasureDatatypeDescriptorId; }
            set { QuantitativeMeasureDatatypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor).QuantitativeMeasureDatatypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor).QuantitativeMeasureDatatypeDescriptorId.Equals(compareTo.QuantitativeMeasureDatatypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor).QuantitativeMeasureDatatypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor).QuantitativeMeasureDatatypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.QuantitativeMeasureDatatypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.QuantitativeMeasureDatatypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureDatatypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<QuantitativeMeasureDatatypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<QuantitativeMeasureDatatypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: QuantitativeMeasureScore

namespace EdFi.Ods.Api.Common.Models.Resources.QuantitativeMeasureScore.TPDM
{
    /// <summary>
    /// Represents a reference to the QuantitativeMeasureScore resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureScoreReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="quantitativeMeasureIdentifier"), NaturalKeyMember]
        public string QuantitativeMeasureIdentifier { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationDate != default(DateTime) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && QuantitativeMeasureIdentifier != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "QuantitativeMeasureScore",
                Href = $"/tpdm/quantitativeMeasureScores/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureScore table of the QuantitativeMeasureScore aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureScore : Entities.Common.TPDM.IQuantitativeMeasureScore, IHasETag, Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the QuantitativeMeasureScore resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementRatingReferenceExplicitlyAssigned;
        private EvaluationElementRating.TPDM.EvaluationElementRatingReference _evaluationElementRatingReference;
        private EvaluationElementRating.TPDM.EvaluationElementRatingReference ImplicitEvaluationElementRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementRatingReference == null && !_evaluationElementRatingReferenceExplicitlyAssigned)
                    _evaluationElementRatingReference = new EvaluationElementRating.TPDM.EvaluationElementRatingReference();

                return _evaluationElementRatingReference;
            }
        }

        [DataMember(Name="evaluationElementRatingReference")][NaturalKeyMember]
        public EvaluationElementRating.TPDM.EvaluationElementRatingReference EvaluationElementRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementRatingReference != null
                    && (_evaluationElementRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference;

                return null;
            }
            set
            {
                _evaluationElementRatingReferenceExplicitlyAssigned = true;
                _evaluationElementRatingReference = value;
            }
        }
        private bool _quantitativeMeasureReferenceExplicitlyAssigned;
        private QuantitativeMeasure.TPDM.QuantitativeMeasureReference _quantitativeMeasureReference;
        private QuantitativeMeasure.TPDM.QuantitativeMeasureReference ImplicitQuantitativeMeasureReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_quantitativeMeasureReference == null && !_quantitativeMeasureReferenceExplicitlyAssigned)
                    _quantitativeMeasureReference = new QuantitativeMeasure.TPDM.QuantitativeMeasureReference();

                return _quantitativeMeasureReference;
            }
        }

        [DataMember(Name="quantitativeMeasureReference")][NaturalKeyMember]
        public QuantitativeMeasure.TPDM.QuantitativeMeasureReference QuantitativeMeasureReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitQuantitativeMeasureReference != null
                    && (_quantitativeMeasureReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitQuantitativeMeasureReference.IsReferenceFullyDefined()))
                    return ImplicitQuantitativeMeasureReference;

                return null;
            }
            set
            {
                _quantitativeMeasureReferenceExplicitlyAssigned = true;
                _quantitativeMeasureReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IQuantitativeMeasureScore.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EducationOrganizationId = value;

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationDate
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationDate = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationElementTitle = value;

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationObjectiveTitle = value;

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (QuantitativeMeasureScore.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.EvaluationPeriodDescriptor = value;
                ImplicitQuantitativeMeasureReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationTitle = value;

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.PerformanceEvaluationTitle = value;

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (QuantitativeMeasureScore.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitQuantitativeMeasureReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.PersonId
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the quantitative measure.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureIdentifier
        {
            get
            {
                if (ImplicitQuantitativeMeasureReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitQuantitativeMeasureReference.IsReferenceFullyDefined()))
                    return ImplicitQuantitativeMeasureReference.QuantitativeMeasureIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.QuantitativeMeasureIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IQuantitativeMeasureScore.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.SchoolYear = value;

                // QuantitativeMeasure
                _quantitativeMeasureReferenceExplicitlyAssigned = false;
                ImplicitQuantitativeMeasureReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (QuantitativeMeasureScore.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (QuantitativeMeasureScore.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IQuantitativeMeasureScore.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.TermDescriptor = value;
                ImplicitQuantitativeMeasureReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IQuantitativeMeasureScore;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationDate == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationElementTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).PersonId == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).QuantitativeMeasureIdentifier == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).QuantitativeMeasureIdentifier.Equals(compareTo.QuantitativeMeasureIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).SchoolYear == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureScore).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasureScore).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IQuantitativeMeasureScore).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationElementTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationElementTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).QuantitativeMeasureIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).QuantitativeMeasureIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).SourceSystemDescriptor.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureScore).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureScore).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The score value for the quantitive measure.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="scoreValue")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal ScoreValue { get; set; }

        /// <summary>
        /// The standard error for the quantitative measure.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="standardError")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal? StandardError { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.QuantitativeMeasureScoreMapper.SynchronizeTo(this, (Entities.Common.TPDM.IQuantitativeMeasureScore)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.QuantitativeMeasureScoreMapper.MapTo(this, (Entities.Common.TPDM.IQuantitativeMeasureScore)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport.IsScoreValueSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport.IsStandardErrorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementRatingResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementRatingReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureResourceId
        {
            get { return null; }
            set { ImplicitQuantitativeMeasureReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitQuantitativeMeasureReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureScorePutPostRequestValidator : FluentValidation.AbstractValidator<QuantitativeMeasureScore>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<QuantitativeMeasureScore> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, int>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.EducationOrganizationId;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.educationOrganizationId", instance.EvaluationElementRatingReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.EducationOrganizationId;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.educationOrganizationId", instance.QuantitativeMeasureReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationElementTitle = GetEvaluationElementTitleSources();

            if (!sourcesForEvaluationElementTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationElementTitle",
                    $"Supplied values for unified key property 'evaluationElementTitle' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForEvaluationElementTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationElementTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.EvaluationElementTitle;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.evaluationElementTitle", instance.EvaluationElementRatingReference.EvaluationElementTitle);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.EvaluationElementTitle;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.evaluationElementTitle", instance.QuantitativeMeasureReference.EvaluationElementTitle);
                }

            }
            var sourcesForEvaluationObjectiveTitle = GetEvaluationObjectiveTitleSources();

            if (!sourcesForEvaluationObjectiveTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationObjectiveTitle",
                    $"Supplied values for unified key property 'evaluationObjectiveTitle' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForEvaluationObjectiveTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationObjectiveTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.EvaluationObjectiveTitle;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.evaluationObjectiveTitle", instance.EvaluationElementRatingReference.EvaluationObjectiveTitle);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.EvaluationObjectiveTitle;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.evaluationObjectiveTitle", instance.QuantitativeMeasureReference.EvaluationObjectiveTitle);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.evaluationPeriodDescriptor", instance.EvaluationElementRatingReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.EvaluationPeriodDescriptor;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.evaluationPeriodDescriptor", instance.QuantitativeMeasureReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForEvaluationTitle = GetEvaluationTitleSources();

            if (!sourcesForEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EvaluationTitle",
                    $"Supplied values for unified key property 'evaluationTitle' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.EvaluationTitle;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.evaluationTitle", instance.EvaluationElementRatingReference.EvaluationTitle);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.EvaluationTitle;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.evaluationTitle", instance.QuantitativeMeasureReference.EvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.performanceEvaluationTitle", instance.EvaluationElementRatingReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.PerformanceEvaluationTitle;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.performanceEvaluationTitle", instance.QuantitativeMeasureReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.performanceEvaluationTypeDescriptor", instance.EvaluationElementRatingReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.performanceEvaluationTypeDescriptor", instance.QuantitativeMeasureReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.SchoolYear;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.schoolYear", instance.EvaluationElementRatingReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.SchoolYear;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.schoolYear", instance.QuantitativeMeasureReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'QuantitativeMeasureScore' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementRatingReference = instance.EvaluationElementRatingReference?.TermDescriptor;

                if (valueFromEvaluationElementRatingReference != null)
                {
                    yield return Tuple.Create("evaluationElementRatingReference.termDescriptor", instance.EvaluationElementRatingReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromQuantitativeMeasureReference = instance.QuantitativeMeasureReference?.TermDescriptor;

                if (valueFromQuantitativeMeasureReference != null)
                {
                    yield return Tuple.Create("quantitativeMeasureReference.termDescriptor", instance.QuantitativeMeasureReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: QuantitativeMeasureTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.QuantitativeMeasureTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureTypeDescriptor table of the QuantitativeMeasureTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureTypeDescriptor : Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the QuantitativeMeasureTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="quantitativeMeasureTypeDescriptorId"), NaturalKeyMember]
        public int QuantitativeMeasureTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return QuantitativeMeasureTypeDescriptorId; }
            set { QuantitativeMeasureTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor).QuantitativeMeasureTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor).QuantitativeMeasureTypeDescriptorId.Equals(compareTo.QuantitativeMeasureTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor).QuantitativeMeasureTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor).QuantitativeMeasureTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.QuantitativeMeasureTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.QuantitativeMeasureTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<QuantitativeMeasureTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<QuantitativeMeasureTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RecruitmentEvent

namespace EdFi.Ods.Api.Common.Models.Resources.RecruitmentEvent.TPDM
{
    /// <summary>
    /// Represents a reference to the RecruitmentEvent resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="eventTitle"), NaturalKeyMember]
        public string EventTitle { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EventDate != default(DateTime) && EventTitle != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "RecruitmentEvent",
                Href = $"/tpdm/recruitmentEvents/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEvent table of the RecruitmentEvent aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEvent : Entities.Common.TPDM.IRecruitmentEvent, IHasETag, Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RecruitmentEvent resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IRecruitmentEvent.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date of the event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// The title of the event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventTitle"), NaturalKeyMember]
        public string EventTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEvent;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IRecruitmentEvent).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IRecruitmentEvent).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEvent).EventDate == null
                || !(this as Entities.Common.TPDM.IRecruitmentEvent).EventDate.Equals(compareTo.EventDate))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEvent).EventTitle == null
                || !(this as Entities.Common.TPDM.IRecruitmentEvent).EventTitle.Equals(compareTo.EventTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRecruitmentEvent).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEvent).EducationOrganizationId.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEvent).EventDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEvent).EventDate.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEvent).EventTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEvent).EventTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The long description of the event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventDescription")]
        public string EventDescription { get; set; }

        /// <summary>
        /// The location of the event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eventLocation")]
        public string EventLocation { get; set; }

        /// <summary>
        /// The type of event.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recruitmentEventTypeDescriptor")]
        public string RecruitmentEventTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEvent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsEventDescriptionSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsEventLocationSupported                   { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsRecruitmentEventTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IRecruitmentEvent.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IRecruitmentEvent.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEvent>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEvent> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RecruitmentEventAttendance

namespace EdFi.Ods.Api.Common.Models.Resources.RecruitmentEventAttendance.TPDM
{
    /// <summary>
    /// Represents a reference to the RecruitmentEventAttendance resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="eventDate"), NaturalKeyMember]
        public DateTime EventDate { get; set; }

        [DataMember(Name="eventTitle"), NaturalKeyMember]
        public string EventTitle { get; set; }

        [DataMember(Name="recruitmentEventAttendeeIdentifier"), NaturalKeyMember]
        public string RecruitmentEventAttendeeIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EventDate != default(DateTime) && EventTitle != default(string) && RecruitmentEventAttendeeIdentifier != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "RecruitmentEventAttendance",
                Href = $"/tpdm/recruitmentEventAttendances/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendance table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendance : Entities.Common.TPDM.IRecruitmentEventAttendance, IHasETag, Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public RecruitmentEventAttendance()
        {
            RecruitmentEventAttendanceDisabilities = new List<RecruitmentEventAttendanceDisability>();
            RecruitmentEventAttendancePersonalIdentificationDocuments = new List<RecruitmentEventAttendancePersonalIdentificationDocument>();
            RecruitmentEventAttendanceRaces = new List<RecruitmentEventAttendanceRace>();
            RecruitmentEventAttendanceTelephones = new List<RecruitmentEventAttendanceTelephone>();
            RecruitmentEventAttendanceTouchpoints = new List<RecruitmentEventAttendanceTouchpoint>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RecruitmentEventAttendance resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _recruitmentEventReferenceExplicitlyAssigned;
        private RecruitmentEvent.TPDM.RecruitmentEventReference _recruitmentEventReference;
        private RecruitmentEvent.TPDM.RecruitmentEventReference ImplicitRecruitmentEventReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_recruitmentEventReference == null && !_recruitmentEventReferenceExplicitlyAssigned)
                    _recruitmentEventReference = new RecruitmentEvent.TPDM.RecruitmentEventReference();

                return _recruitmentEventReference;
            }
        }

        [DataMember(Name="recruitmentEventReference")][NaturalKeyMember]
        public RecruitmentEvent.TPDM.RecruitmentEventReference RecruitmentEventReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitRecruitmentEventReference != null
                    && (_recruitmentEventReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventReference;

                return null;
            }
            set
            {
                _recruitmentEventReferenceExplicitlyAssigned = true;
                _recruitmentEventReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IRecruitmentEventAttendance.EducationOrganizationId
        {
            get
            {
                if (ImplicitRecruitmentEventReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // RecruitmentEvent
                _recruitmentEventReferenceExplicitlyAssigned = false;
                ImplicitRecruitmentEventReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date of the event.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IRecruitmentEventAttendance.EventDate
        {
            get
            {
                if (ImplicitRecruitmentEventReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventReference.EventDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // RecruitmentEvent
                _recruitmentEventReferenceExplicitlyAssigned = false;
                ImplicitRecruitmentEventReference.EventDate = value;
            }
        }

        /// <summary>
        /// The title of the event.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRecruitmentEventAttendance.EventTitle
        {
            get
            {
                if (ImplicitRecruitmentEventReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitRecruitmentEventReference.IsReferenceFullyDefined()))
                    return ImplicitRecruitmentEventReference.EventTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // RecruitmentEvent
                _recruitmentEventReferenceExplicitlyAssigned = false;
                ImplicitRecruitmentEventReference.EventTitle = value;
            }
        }

        /// <summary>
        /// The identifier for the attendee to a recuitment event.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recruitmentEventAttendeeIdentifier"), NaturalKeyMember]
        public string RecruitmentEventAttendeeIdentifier { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendance;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendance).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventDate == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventDate.Equals(compareTo.EventDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventTitle == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventTitle.Equals(compareTo.EventTitle))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier.Equals(compareTo.RecruitmentEventAttendeeIdentifier))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendance).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendance).EventTitle.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendance).RecruitmentEventAttendeeIdentifier.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicator of whether the prospect applied for a position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applied")]
        public bool? Applied { get; set; }

        /// <summary>
        /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="genderDescriptor")]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino\".
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// Indicator whether the person was met by a representative of the education organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="met")]
        public bool? Met { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Additional notes about the prospect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="notes")]
        public string Notes { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// The rating initially assigned to the prospect prior to an official screening.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="preScreeningRating")]
        public int? PreScreeningRating { get; set; }

        /// <summary>
        /// Reflects the type of prospect, such as EPP Applicant, Hire, or Mentor Teacher.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recruitmentEventAttendeeTypeDescriptor")]
        public string RecruitmentEventAttendeeTypeDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether the prospect was a referral.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="referral")]
        public bool? Referral { get; set; }

        /// <summary>
        /// The person making the referral.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="referredBy")]
        public string ReferredBy { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="socialMediaNetworkName")]
        public string SocialMediaNetworkName { get; set; }

        /// <summary>
        /// The user name of the person on social media.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="socialMediaUserName")]
        public string SocialMediaUserName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// currentPosition
        /// </summary>
        [DataMember(Name = "currentPosition")]
        public RecruitmentEventAttendanceCurrentPosition RecruitmentEventAttendanceCurrentPosition { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceCurrentPosition
        {
            get { return RecruitmentEventAttendanceCurrentPosition; }
            set { RecruitmentEventAttendanceCurrentPosition = (RecruitmentEventAttendanceCurrentPosition) value; }
        }

        /// <summary>
        /// recruitmentEventAttendeeQualifications
        /// </summary>
        [DataMember(Name = "recruitmentEventAttendeeQualifications")]
        public RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications
        {
            get { return RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications; }
            set { RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = (RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<RecruitmentEventAttendanceDisability> _recruitmentEventAttendanceDisabilities;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability> _recruitmentEventAttendanceDisabilitiesCovariant;

        [DataMember(Name="disabilities"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendanceDisability> RecruitmentEventAttendanceDisabilities
        {
            get { return _recruitmentEventAttendanceDisabilities; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendanceDisability>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceDisability)e.Item).RecruitmentEventAttendance = this);
                _recruitmentEventAttendanceDisabilities = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, RecruitmentEventAttendanceDisability>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceDisability)e.Item).RecruitmentEventAttendance = this;
                _recruitmentEventAttendanceDisabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceDisabilities
        {
            get { return _recruitmentEventAttendanceDisabilitiesCovariant; }
            set { RecruitmentEventAttendanceDisabilities = new List<RecruitmentEventAttendanceDisability>(value.Cast<RecruitmentEventAttendanceDisability>()); }
        }

        private ICollection<RecruitmentEventAttendancePersonalIdentificationDocument> _recruitmentEventAttendancePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument> _recruitmentEventAttendancePersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendancePersonalIdentificationDocument> RecruitmentEventAttendancePersonalIdentificationDocuments
        {
            get { return _recruitmentEventAttendancePersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendancePersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument)e.Item).RecruitmentEventAttendance = this);
                _recruitmentEventAttendancePersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, RecruitmentEventAttendancePersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument)e.Item).RecruitmentEventAttendance = this;
                _recruitmentEventAttendancePersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendancePersonalIdentificationDocuments
        {
            get { return _recruitmentEventAttendancePersonalIdentificationDocumentsCovariant; }
            set { RecruitmentEventAttendancePersonalIdentificationDocuments = new List<RecruitmentEventAttendancePersonalIdentificationDocument>(value.Cast<RecruitmentEventAttendancePersonalIdentificationDocument>()); }
        }

        private ICollection<RecruitmentEventAttendanceRace> _recruitmentEventAttendanceRaces;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceRace> _recruitmentEventAttendanceRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendanceRace> RecruitmentEventAttendanceRaces
        {
            get { return _recruitmentEventAttendanceRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendanceRace>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceRace)e.Item).RecruitmentEventAttendance = this);
                _recruitmentEventAttendanceRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendanceRace, RecruitmentEventAttendanceRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceRace)e.Item).RecruitmentEventAttendance = this;
                _recruitmentEventAttendanceRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceRace> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceRaces
        {
            get { return _recruitmentEventAttendanceRacesCovariant; }
            set { RecruitmentEventAttendanceRaces = new List<RecruitmentEventAttendanceRace>(value.Cast<RecruitmentEventAttendanceRace>()); }
        }

        private ICollection<RecruitmentEventAttendanceTelephone> _recruitmentEventAttendanceTelephones;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone> _recruitmentEventAttendanceTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendanceTelephone> RecruitmentEventAttendanceTelephones
        {
            get { return _recruitmentEventAttendanceTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendanceTelephone>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone)e.Item).RecruitmentEventAttendance = this);
                _recruitmentEventAttendanceTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, RecruitmentEventAttendanceTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone)e.Item).RecruitmentEventAttendance = this;
                _recruitmentEventAttendanceTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceTelephones
        {
            get { return _recruitmentEventAttendanceTelephonesCovariant; }
            set { RecruitmentEventAttendanceTelephones = new List<RecruitmentEventAttendanceTelephone>(value.Cast<RecruitmentEventAttendanceTelephone>()); }
        }

        private ICollection<RecruitmentEventAttendanceTouchpoint> _recruitmentEventAttendanceTouchpoints;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint> _recruitmentEventAttendanceTouchpointsCovariant;

        [DataMember(Name="touchpoints"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendanceTouchpoint> RecruitmentEventAttendanceTouchpoints
        {
            get { return _recruitmentEventAttendanceTouchpoints; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendanceTouchpoint>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint)e.Item).RecruitmentEventAttendance = this);
                _recruitmentEventAttendanceTouchpoints = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, RecruitmentEventAttendanceTouchpoint>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint)e.Item).RecruitmentEventAttendance = this;
                _recruitmentEventAttendanceTouchpointsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceTouchpoints
        {
            get { return _recruitmentEventAttendanceTouchpointsCovariant; }
            set { RecruitmentEventAttendanceTouchpoints = new List<RecruitmentEventAttendanceTouchpoint>(value.Cast<RecruitmentEventAttendanceTouchpoint>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_recruitmentEventAttendanceDisabilities != null) foreach (var item in _recruitmentEventAttendanceDisabilities)
            {
                item.RecruitmentEventAttendance = this;
            }

            if (_recruitmentEventAttendancePersonalIdentificationDocuments != null) foreach (var item in _recruitmentEventAttendancePersonalIdentificationDocuments)
            {
                item.RecruitmentEventAttendance = this;
            }

            if (_recruitmentEventAttendanceRaces != null) foreach (var item in _recruitmentEventAttendanceRaces)
            {
                item.RecruitmentEventAttendance = this;
            }

            if (_recruitmentEventAttendanceTelephones != null) foreach (var item in _recruitmentEventAttendanceTelephones)
            {
                item.RecruitmentEventAttendance = this;
            }

            if (_recruitmentEventAttendanceTouchpoints != null) foreach (var item in _recruitmentEventAttendanceTouchpoints)
            {
                item.RecruitmentEventAttendance = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendance)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsAppliedSupported                                                           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsElectronicMailAddressSupported                                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsFirstNameSupported                                                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsGenderDescriptorSupported                                                  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                                              { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                                           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsLastSurnameSupported                                                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsMaidenNameSupported                                                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsMetSupported                                                               { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsMiddleNameSupported                                                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsNotesSupported                                                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                                               { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsPreScreeningRatingSupported                                                { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceCurrentPositionSupported                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilitiesSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentsSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceRacesSupported                                   { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTelephonesSupported                              { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTouchpointsSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendeeTypeDescriptorSupported                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsReferralSupported                                                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsReferredBySupported                                                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsSexDescriptorSupported                                                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsSocialMediaNetworkNameSupported                                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsSocialMediaUserNameSupported                                               { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilityIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceRace, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceRaceIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTelephoneIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTouchpointIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventResourceId
        {
            get { return null; }
            set { ImplicitRecruitmentEventReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitRecruitmentEventReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendancePutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendance>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendance> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var recruitmentEventAttendanceDisabilitiesValidator = new RecruitmentEventAttendanceDisabilityPutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendanceDisabilities)
            {
                var validationResult = recruitmentEventAttendanceDisabilitiesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var recruitmentEventAttendancePersonalIdentificationDocumentsValidator = new RecruitmentEventAttendancePersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendancePersonalIdentificationDocuments)
            {
                var validationResult = recruitmentEventAttendancePersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var recruitmentEventAttendanceRacesValidator = new RecruitmentEventAttendanceRacePutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendanceRaces)
            {
                var validationResult = recruitmentEventAttendanceRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var recruitmentEventAttendanceTelephonesValidator = new RecruitmentEventAttendanceTelephonePutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendanceTelephones)
            {
                var validationResult = recruitmentEventAttendanceTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var recruitmentEventAttendanceTouchpointsValidator = new RecruitmentEventAttendanceTouchpointPutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendanceTouchpoints)
            {
                var validationResult = recruitmentEventAttendanceTouchpointsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceCurrentPosition table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceCurrentPosition : Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition, Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public RecruitmentEventAttendanceCurrentPosition()
        {
            RecruitmentEventAttendanceCurrentPositionGradeLevels = new List<RecruitmentEventAttendanceCurrentPositionGradeLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The academic subject the staff person's assignment to a school.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The location, typically City and State, for the institution.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <summary>
        /// The formal name of the education organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The descriptive name of an individual's position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="positionTitle")]
        public string PositionTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<RecruitmentEventAttendanceCurrentPositionGradeLevel> _recruitmentEventAttendanceCurrentPositionGradeLevels;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel> _recruitmentEventAttendanceCurrentPositionGradeLevelsCovariant;

        [DataMember(Name="gradeLevels"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendanceCurrentPositionGradeLevel> RecruitmentEventAttendanceCurrentPositionGradeLevels
        {
            get { return _recruitmentEventAttendanceCurrentPositionGradeLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendanceCurrentPositionGradeLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel)e.Item).RecruitmentEventAttendanceCurrentPosition = this);
                _recruitmentEventAttendanceCurrentPositionGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, RecruitmentEventAttendanceCurrentPositionGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel)e.Item).RecruitmentEventAttendanceCurrentPosition = this;
                _recruitmentEventAttendanceCurrentPositionGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel> Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition.RecruitmentEventAttendanceCurrentPositionGradeLevels
        {
            get { return _recruitmentEventAttendanceCurrentPositionGradeLevelsCovariant; }
            set { RecruitmentEventAttendanceCurrentPositionGradeLevels = new List<RecruitmentEventAttendanceCurrentPositionGradeLevel>(value.Cast<RecruitmentEventAttendanceCurrentPositionGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_recruitmentEventAttendanceCurrentPositionGradeLevels != null) foreach (var item in _recruitmentEventAttendanceCurrentPositionGradeLevels)
            {
                item.RecruitmentEventAttendanceCurrentPosition = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceCurrentPositionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceCurrentPositionMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported                             { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsLocationSupported                                              { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsNameOfInstitutionSupported                                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsPositionTitleSupported                                         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceCurrentPositionPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceCurrentPosition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceCurrentPosition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var recruitmentEventAttendanceCurrentPositionGradeLevelsValidator = new RecruitmentEventAttendanceCurrentPositionGradeLevelPutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendanceCurrentPositionGradeLevels)
            {
                var validationResult = recruitmentEventAttendanceCurrentPositionGradeLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceCurrentPositionGradeLevel table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceCurrentPositionGradeLevel : Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevelSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition _recruitmentEventAttendanceCurrentPosition;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel.RecruitmentEventAttendanceCurrentPosition
        {
            get { return _recruitmentEventAttendanceCurrentPosition; }
            set { SetRecruitmentEventAttendanceCurrentPosition(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition RecruitmentEventAttendanceCurrentPosition
        {
            set { SetRecruitmentEventAttendanceCurrentPosition(value); }
        }

        private void SetRecruitmentEventAttendanceCurrentPosition(Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition value)
        {
            _recruitmentEventAttendanceCurrentPosition = value;
        }

        /// <summary>
        /// The set of grade levels for which the individual's assignment is responsible.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendanceCurrentPosition == null || !_recruitmentEventAttendanceCurrentPosition.Equals(compareTo.RecruitmentEventAttendanceCurrentPosition))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel).GradeLevelDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendanceCurrentPosition != null)
                    hash = hash * 23 + _recruitmentEventAttendanceCurrentPosition.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel).GradeLevelDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel).GradeLevelDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevelMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceCurrentPositionGradeLevelPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceCurrentPositionGradeLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceCurrentPositionGradeLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceDisability table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceDisability : Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public RecruitmentEventAttendanceDisability()
        {
            RecruitmentEventAttendanceDisabilityDesignations = new List<RecruitmentEventAttendanceDisabilityDesignation>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendanceDisability.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }

        /// <summary>
        /// A disability category that describes a child's impairment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDescriptor"), NaturalKeyMember]
        public string DisabilityDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceDisability;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisability).DisabilityDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisability).DisabilityDescriptor.Equals(compareTo.DisabilityDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisability).DisabilityDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisability).DisabilityDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDeterminationSourceTypeDescriptor")]
        public string DisabilityDeterminationSourceTypeDescriptor { get; set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDiagnosis")]
        public string DisabilityDiagnosis { get; set; }

        /// <summary>
        /// The order by severity of student's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfDisability")]
        public int? OrderOfDisability { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<RecruitmentEventAttendanceDisabilityDesignation> _recruitmentEventAttendanceDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation> _recruitmentEventAttendanceDisabilityDesignationsCovariant;

        [DataMember(Name="designations"), NoDuplicateMembers]
        public ICollection<RecruitmentEventAttendanceDisabilityDesignation> RecruitmentEventAttendanceDisabilityDesignations
        {
            get { return _recruitmentEventAttendanceDisabilityDesignations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<RecruitmentEventAttendanceDisabilityDesignation>(value,
                    (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation)e.Item).RecruitmentEventAttendanceDisability = this);
                _recruitmentEventAttendanceDisabilityDesignations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, RecruitmentEventAttendanceDisabilityDesignation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation)e.Item).RecruitmentEventAttendanceDisability = this;
                _recruitmentEventAttendanceDisabilityDesignationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation> Entities.Common.TPDM.IRecruitmentEventAttendanceDisability.RecruitmentEventAttendanceDisabilityDesignations
        {
            get { return _recruitmentEventAttendanceDisabilityDesignationsCovariant; }
            set { RecruitmentEventAttendanceDisabilityDesignations = new List<RecruitmentEventAttendanceDisabilityDesignation>(value.Cast<RecruitmentEventAttendanceDisabilityDesignation>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_recruitmentEventAttendanceDisabilityDesignations != null) foreach (var item in _recruitmentEventAttendanceDisabilityDesignations)
            {
                item.RecruitmentEventAttendanceDisability = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceDisabilityMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceDisability)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceDisabilityMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceDisability)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported                               { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported                                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilityDesignationsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilityDesignationIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceDisabilityPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceDisability>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceDisability> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var recruitmentEventAttendanceDisabilityDesignationsValidator = new RecruitmentEventAttendanceDisabilityDesignationPutPostRequestValidator();

            foreach (var item in instance.RecruitmentEventAttendanceDisabilityDesignations)
            {
                var validationResult = recruitmentEventAttendanceDisabilityDesignationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceDisabilityDesignation table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceDisabilityDesignation : Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendanceDisability _recruitmentEventAttendanceDisability;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendanceDisability Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation.RecruitmentEventAttendanceDisability
        {
            get { return _recruitmentEventAttendanceDisability; }
            set { SetRecruitmentEventAttendanceDisability(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendanceDisability RecruitmentEventAttendanceDisability
        {
            set { SetRecruitmentEventAttendanceDisability(value); }
        }

        private void SetRecruitmentEventAttendanceDisability(Entities.Common.TPDM.IRecruitmentEventAttendanceDisability value)
        {
            _recruitmentEventAttendanceDisability = value;
        }

        /// <summary>
        /// Whether the disability is IDEA, Section 504, or other disability designation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDesignationDescriptor"), NaturalKeyMember]
        public string DisabilityDesignationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendanceDisability == null || !_recruitmentEventAttendanceDisability.Equals(compareTo.RecruitmentEventAttendanceDisability))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation).DisabilityDesignationDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation).DisabilityDesignationDescriptor.Equals(compareTo.DisabilityDesignationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendanceDisability != null)
                    hash = hash * 23 + _recruitmentEventAttendanceDisability.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation).DisabilityDesignationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation).DisabilityDesignationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceDisabilityDesignationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceDisabilityDesignationMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceDisabilityDesignationPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceDisabilityDesignation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceDisabilityDesignation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendancePersonalIdentificationDocument table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendancePersonalIdentificationDocument : Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendancePersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendancePersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendancePersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendancePersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendancePersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceRace table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceRace : Entities.Common.TPDM.IRecruitmentEventAttendanceRace, Entities.Common.TPDM.IRecruitmentEventAttendanceRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendanceRace.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceRace;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceRace).RaceDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceRace).RaceDescriptor.Equals(compareTo.RaceDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceRace).RaceDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceRaceMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceRaceMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceRacePutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications : Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications, Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication of whether or not a prospect mentor teacher has capacity to serve.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="capacityToServe")]
        public bool? CapacityToServe { get; set; }

        /// <summary>
        /// An indication of whether the prospect is eligible for the position.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eligible")]
        public bool Eligible { get; set; }

        /// <summary>
        /// The total number of years of service at the current school.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfServiceCurrentPlacement")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfServiceCurrentPlacement { get; set; }

        /// <summary>
        /// The total number of years of service as a teacher.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfServiceTotal")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal YearsOfServiceTotal { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsCapacityToServeSupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsEligibleSupported                        { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsYearsOfServiceCurrentPlacementSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsYearsOfServiceTotalSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceTelephone table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceTelephone : Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumber == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumber != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumber.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumberTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceTelephoneMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceTelephoneMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceTouchpoint table of the RecruitmentEventAttendance aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceTouchpoint : Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpointSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IRecruitmentEventAttendance _recruitmentEventAttendance;

        [IgnoreDataMember]
        Entities.Common.TPDM.IRecruitmentEventAttendance Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint.RecruitmentEventAttendance
        {
            get { return _recruitmentEventAttendance; }
            set { SetRecruitmentEventAttendance(value); }
        }

        internal Entities.Common.TPDM.IRecruitmentEventAttendance RecruitmentEventAttendance
        {
            set { SetRecruitmentEventAttendance(value); }
        }

        private void SetRecruitmentEventAttendance(Entities.Common.TPDM.IRecruitmentEventAttendance value)
        {
            _recruitmentEventAttendance = value;
        }

        /// <summary>
        /// The content associated with or an artifact from the touchpoint.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="touchpointContent"), NaturalKeyMember]
        public string TouchpointContent { get; set; }

        /// <summary>
        /// The date of the touchpoint.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="touchpointDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime TouchpointDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_recruitmentEventAttendance == null || !_recruitmentEventAttendance.Equals(compareTo.RecruitmentEventAttendance))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointContent == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointContent.Equals(compareTo.TouchpointContent))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointDate == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointDate.Equals(compareTo.TouchpointDate))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_recruitmentEventAttendance != null)
                    hash = hash * 23 + _recruitmentEventAttendance.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointContent != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointContent.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint).TouchpointDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendanceTouchpointMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendanceTouchpointMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceTouchpointPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendanceTouchpoint>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendanceTouchpoint> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RecruitmentEventAttendeeTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.RecruitmentEventAttendeeTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendeeTypeDescriptor table of the RecruitmentEventAttendeeTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendeeTypeDescriptor : Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RecruitmentEventAttendeeTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recruitmentEventAttendeeTypeDescriptorId"), NaturalKeyMember]
        public int RecruitmentEventAttendeeTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return RecruitmentEventAttendeeTypeDescriptorId; }
            set { RecruitmentEventAttendeeTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor).RecruitmentEventAttendeeTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor).RecruitmentEventAttendeeTypeDescriptorId.Equals(compareTo.RecruitmentEventAttendeeTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor).RecruitmentEventAttendeeTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor).RecruitmentEventAttendeeTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventAttendeeTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventAttendeeTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendeeTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventAttendeeTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventAttendeeTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RecruitmentEventTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.RecruitmentEventTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventTypeDescriptor table of the RecruitmentEventTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventTypeDescriptor : Entities.Common.TPDM.IRecruitmentEventTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RecruitmentEventTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recruitmentEventTypeDescriptorId"), NaturalKeyMember]
        public int RecruitmentEventTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return RecruitmentEventTypeDescriptorId; }
            set { RecruitmentEventTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRecruitmentEventTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IRecruitmentEventTypeDescriptor).RecruitmentEventTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.IRecruitmentEventTypeDescriptor).RecruitmentEventTypeDescriptorId.Equals(compareTo.RecruitmentEventTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IRecruitmentEventTypeDescriptor).RecruitmentEventTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRecruitmentEventTypeDescriptor).RecruitmentEventTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RecruitmentEventTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRecruitmentEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RecruitmentEventTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IRecruitmentEventTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RecruitmentEventTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<RecruitmentEventTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RecruitmentEventTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RubricDimension

namespace EdFi.Ods.Api.Common.Models.Resources.RubricDimension.TPDM
{
    /// <summary>
    /// Represents a reference to the RubricDimension resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class RubricDimensionReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="rubricRating"), NaturalKeyMember]
        public int RubricRating { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && RubricRating != default(int) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "RubricDimension",
                Href = $"/tpdm/rubricDimensions/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.RubricDimension table of the RubricDimension aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RubricDimension : Entities.Common.TPDM.IRubricDimension, IHasETag, Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RubricDimension resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")][NaturalKeyMember]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IRubricDimension.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (RubricDimension.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (RubricDimension.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IRubricDimension.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The rating achieved for the rubric dimension.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rubricRating"), NaturalKeyMember]
        public int RubricRating { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IRubricDimension.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (RubricDimension.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IRubricDimension.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRubricDimension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IRubricDimension).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IRubricDimension).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationElementTitle == null
                || !(this as Entities.Common.TPDM.IRubricDimension).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.IRubricDimension).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.IRubricDimension).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.IRubricDimension).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IRubricDimension).RubricRating == null
                || !(this as Entities.Common.TPDM.IRubricDimension).RubricRating.Equals(compareTo.RubricRating))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IRubricDimension).SchoolYear == null
                || !(this as Entities.Common.TPDM.IRubricDimension).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IRubricDimension).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.IRubricDimension).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRubricDimension).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationElementTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).EvaluationElementTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRubricDimension).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTypeDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IRubricDimension).RubricRating != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).RubricRating.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IRubricDimension).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IRubricDimension).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricDimension).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The criterion description for the rubric dimension.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criterionDescription")]
        public string CriterionDescription { get; set; }

        /// <summary>
        /// The order for the rubric dimension.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dimensionOrder")]
        public int? DimensionOrder { get; set; }

        /// <summary>
        /// The rating level achieved for the rubric dimension.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="rubricRatingLevelDescriptor")]
        public string RubricRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RubricDimensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRubricDimension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RubricDimensionMapper.MapTo(this, (Entities.Common.TPDM.IRubricDimension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsCriterionDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsDimensionOrderSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsRubricRatingLevelDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IRubricDimension.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IRubricDimension.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RubricDimensionPutPostRequestValidator : FluentValidation.AbstractValidator<RubricDimension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RubricDimension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RubricRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.RubricRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.RubricRatingLevelDescriptor table of the RubricRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RubricRatingLevelDescriptor : Entities.Common.TPDM.IRubricRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RubricRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rubricRatingLevelDescriptorId"), NaturalKeyMember]
        public int RubricRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return RubricRatingLevelDescriptorId; }
            set { RubricRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IRubricRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IRubricRatingLevelDescriptor).RubricRatingLevelDescriptorId == null
                || !(this as Entities.Common.TPDM.IRubricRatingLevelDescriptor).RubricRatingLevelDescriptorId.Equals(compareTo.RubricRatingLevelDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IRubricRatingLevelDescriptor).RubricRatingLevelDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IRubricRatingLevelDescriptor).RubricRatingLevelDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RubricRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRubricRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RubricRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IRubricRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RubricRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<RubricRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RubricRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SalaryTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.SalaryTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.SalaryTypeDescriptor table of the SalaryTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SalaryTypeDescriptor : Entities.Common.TPDM.ISalaryTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the SalaryTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="salaryTypeDescriptorId"), NaturalKeyMember]
        public int SalaryTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return SalaryTypeDescriptorId; }
            set { SalaryTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISalaryTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.ISalaryTypeDescriptor).SalaryTypeDescriptorId == null
                || !(this as Entities.Common.TPDM.ISalaryTypeDescriptor).SalaryTypeDescriptorId.Equals(compareTo.SalaryTypeDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.ISalaryTypeDescriptor).SalaryTypeDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISalaryTypeDescriptor).SalaryTypeDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SalaryTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISalaryTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SalaryTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ISalaryTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SalaryTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<SalaryTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SalaryTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: School

namespace EdFi.Ods.Api.Common.Models.Resources.School.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.SchoolExtension table of the School aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SchoolExtension : Entities.Common.TPDM.ISchoolExtension, Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _postSecondaryInstitutionReferenceExplicitlyAssigned;
        private PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference _postSecondaryInstitutionReference;
        private PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference ImplicitPostSecondaryInstitutionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_postSecondaryInstitutionReference == null && !_postSecondaryInstitutionReferenceExplicitlyAssigned)
                    _postSecondaryInstitutionReference = new PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference();

                return _postSecondaryInstitutionReference;
            }
        }

        [DataMember(Name="postSecondaryInstitutionReference")]
        public PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference PostSecondaryInstitutionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPostSecondaryInstitutionReference != null
                    && (_postSecondaryInstitutionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPostSecondaryInstitutionReference.IsReferenceFullyDefined()))
                    return ImplicitPostSecondaryInstitutionReference;

                return null;
            }
            set
            {
                _postSecondaryInstitutionReferenceExplicitlyAssigned = true;
                _postSecondaryInstitutionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ISchool _school;

        [IgnoreDataMember]
        Entities.Common.EdFi.ISchool Entities.Common.TPDM.ISchoolExtension.School
        {
            get { return _school; }
            set { SetSchool(value); }
        }

        internal Entities.Common.EdFi.ISchool School
        {
            set { SetSchool(value); }
        }

        private void SetSchool(Entities.Common.EdFi.ISchool value)
        {
            _school = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISchoolExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_school == null || !_school.Equals(compareTo.School))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_school != null)
                    hash = hash * 23 + _school.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Accreditation Status for a Education Preparation Provider.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="accreditationStatusDescriptor")]
        public string AccreditationStatusDescriptor { get; set; }

        /// <summary>
        /// The federal locale code associated with an education organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="federalLocaleCodeDescriptor")]
        public string FederalLocaleCodeDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a school is identified as an improving school.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="improvingSchool")]
        public bool? ImprovingSchool { get; set; }

        /// <summary>
        /// The ID of the post secondary institution.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.ISchoolExtension.PostSecondaryInstitutionId
        {
            get
            {
                if (ImplicitPostSecondaryInstitutionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPostSecondaryInstitutionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPostSecondaryInstitutionReference.PostSecondaryInstitutionId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PostSecondaryInstitution
                _postSecondaryInstitutionReferenceExplicitlyAssigned = false;
                ImplicitPostSecondaryInstitutionReference.PostSecondaryInstitutionId = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SchoolExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISchoolExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SchoolExtensionMapper.MapTo(this, (Entities.Common.TPDM.ISchoolExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsAccreditationStatusDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsImprovingSchoolSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsPostSecondaryInstitutionIdSupported     { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISchoolExtension.PostSecondaryInstitutionResourceId
        {
            get { return null; }
            set { ImplicitPostSecondaryInstitutionReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SchoolExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<SchoolExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SchoolExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Common.Models.Resources.Staff.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.StaffEducatorPreparationProgram table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgram : Entities.Common.TPDM.IStaffEducatorPreparationProgram, Entities.Common.TPDM.IStaffEducatorPreparationProgramSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educatorPreparationProgramReferenceExplicitlyAssigned;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference _educatorPreparationProgramReference;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference ImplicitEducatorPreparationProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educatorPreparationProgramReference == null && !_educatorPreparationProgramReferenceExplicitlyAssigned)
                    _educatorPreparationProgramReference = new EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference();

                return _educatorPreparationProgramReference;
            }
        }

        [DataMember(Name="educatorPreparationProgramReference")][NaturalKeyMember]
        public EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference EducatorPreparationProgramReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_educatorPreparationProgramReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference;

                return null;
            }
            set
            {
                _educatorPreparationProgramReferenceExplicitlyAssigned = true;
                _educatorPreparationProgramReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IStaffExtension Entities.Common.TPDM.IStaffEducatorPreparationProgram.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.TPDM.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.TPDM.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IStaffEducatorPreparationProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IStaffEducatorPreparationProgram.ProgramName
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StaffEducatorPreparationProgram.ProgramTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IStaffEducatorPreparationProgram.ProgramTypeDescriptor
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducatorPreparationProgram;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramName == null
                || !(this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramName.Equals(compareTo.ProgramName))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramTypeDescriptor.Equals(compareTo.ProgramTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramName.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgram).ProgramTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducatorPreparationProgramMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducatorPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducatorPreparationProgramMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducatorPreparationProgram)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IStaffEducatorPreparationProgram.EducatorPreparationProgramResourceId
        {
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IStaffEducatorPreparationProgram.EducatorPreparationProgramDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgramPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducatorPreparationProgram>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducatorPreparationProgram> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.StaffEducatorResearch table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorResearch : Entities.Common.TPDM.IStaffEducatorResearch, Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IStaffExtension Entities.Common.TPDM.IStaffEducatorResearch.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.TPDM.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.TPDM.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducatorResearch;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Month, day, and year of the start or effective date of a staff member's teacher educator position for an Education Organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="researchExperienceDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime ResearchExperienceDate { get; set; }

        /// <summary>
        /// The description of the research experience.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="researchExperienceDescription")]
        public string ResearchExperienceDescription { get; set; }

        /// <summary>
        /// The title of the research experience.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="researchExperienceTitle")]
        public string ResearchExperienceTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducatorResearchMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducatorResearch)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducatorResearchMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducatorResearch)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport.IsResearchExperienceDateSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport.IsResearchExperienceDescriptionSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport.IsResearchExperienceTitleSupported        { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducatorResearchPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducatorResearch>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducatorResearch> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.TPDM.IStaffExtension, Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffEducatorPreparationPrograms = new List<StaffEducatorPreparationProgram>();
            StaffHighlyQualifiedAcademicSubjects = new List<StaffHighlyQualifiedAcademicSubject>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _openStaffPositionReferenceExplicitlyAssigned;
        private OpenStaffPosition.EdFi.OpenStaffPositionReference _openStaffPositionReference;
        private OpenStaffPosition.EdFi.OpenStaffPositionReference ImplicitOpenStaffPositionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_openStaffPositionReference == null && !_openStaffPositionReferenceExplicitlyAssigned)
                    _openStaffPositionReference = new OpenStaffPosition.EdFi.OpenStaffPositionReference();

                return _openStaffPositionReference;
            }
        }

        [DataMember(Name="openStaffPositionReference")]
        public OpenStaffPosition.EdFi.OpenStaffPositionReference OpenStaffPositionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitOpenStaffPositionReference != null
                    && (_openStaffPositionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    return ImplicitOpenStaffPositionReference;

                return null;
            }
            set
            {
                _openStaffPositionReferenceExplicitlyAssigned = true;
                _openStaffPositionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.TPDM.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.IStaffExtension.EducationOrganizationId
        {
            get
            {
                if (ImplicitOpenStaffPositionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitOpenStaffPositionReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // OpenStaffPosition
                _openStaffPositionReferenceExplicitlyAssigned = false;
                ImplicitOpenStaffPositionReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="genderDescriptor")]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IStaffExtension.RequisitionNumber
        {
            get
            {
                if (ImplicitOpenStaffPositionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitOpenStaffPositionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitOpenStaffPositionReference.RequisitionNumber;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // OpenStaffPosition
                _openStaffPositionReferenceExplicitlyAssigned = false;
                ImplicitOpenStaffPositionReference.RequisitionNumber = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// educatorResearch
        /// </summary>
        [DataMember(Name = "educatorResearch")]
        public StaffEducatorResearch StaffEducatorResearch { get; set; }

        Entities.Common.TPDM.IStaffEducatorResearch Entities.Common.TPDM.IStaffExtension.StaffEducatorResearch
        {
            get { return StaffEducatorResearch; }
            set { StaffEducatorResearch = (StaffEducatorResearch) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffEducatorPreparationProgram> _staffEducatorPreparationPrograms;
        private ICollection<Entities.Common.TPDM.IStaffEducatorPreparationProgram> _staffEducatorPreparationProgramsCovariant;

        [DataMember(Name="educatorPreparationPrograms"), NoDuplicateMembers]
        public ICollection<StaffEducatorPreparationProgram> StaffEducatorPreparationPrograms
        {
            get { return _staffEducatorPreparationPrograms; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffEducatorPreparationProgram>(value,
                    (s, e) => ((Entities.Common.TPDM.IStaffEducatorPreparationProgram)e.Item).StaffExtension = this);
                _staffEducatorPreparationPrograms = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IStaffEducatorPreparationProgram, StaffEducatorPreparationProgram>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IStaffEducatorPreparationProgram)e.Item).StaffExtension = this;
                _staffEducatorPreparationProgramsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffEducatorPreparationProgram> Entities.Common.TPDM.IStaffExtension.StaffEducatorPreparationPrograms
        {
            get { return _staffEducatorPreparationProgramsCovariant; }
            set { StaffEducatorPreparationPrograms = new List<StaffEducatorPreparationProgram>(value.Cast<StaffEducatorPreparationProgram>()); }
        }

        private ICollection<StaffHighlyQualifiedAcademicSubject> _staffHighlyQualifiedAcademicSubjects;
        private ICollection<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject> _staffHighlyQualifiedAcademicSubjectsCovariant;

        [DataMember(Name="highlyQualifiedAcademicSubjects"), NoDuplicateMembers]
        public ICollection<StaffHighlyQualifiedAcademicSubject> StaffHighlyQualifiedAcademicSubjects
        {
            get { return _staffHighlyQualifiedAcademicSubjects; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffHighlyQualifiedAcademicSubject>(value,
                    (s, e) => ((Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject)e.Item).StaffExtension = this);
                _staffHighlyQualifiedAcademicSubjects = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, StaffHighlyQualifiedAcademicSubject>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject)e.Item).StaffExtension = this;
                _staffHighlyQualifiedAcademicSubjectsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject> Entities.Common.TPDM.IStaffExtension.StaffHighlyQualifiedAcademicSubjects
        {
            get { return _staffHighlyQualifiedAcademicSubjectsCovariant; }
            set { StaffHighlyQualifiedAcademicSubjects = new List<StaffHighlyQualifiedAcademicSubject>(value.Cast<StaffHighlyQualifiedAcademicSubject>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffEducatorPreparationPrograms != null) foreach (var item in _staffEducatorPreparationPrograms)
            {
                item.StaffExtension = this;
            }

            if (_staffHighlyQualifiedAcademicSubjects != null) foreach (var item in _staffHighlyQualifiedAcademicSubjects)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffExtensionMapper.MapTo(this, (Entities.Common.TPDM.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsEducationOrganizationIdSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsGenderDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsRequisitionNumberSupported                     { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffEducatorPreparationProgramsSupported      { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffEducatorResearchSupported                 { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IStaffEducatorPreparationProgram, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffEducatorPreparationProgramIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IStaffExtension.OpenStaffPositionResourceId
        {
            get { return null; }
            set { ImplicitOpenStaffPositionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IStaffExtension.OpenStaffPositionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitOpenStaffPositionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var staffEducatorPreparationProgramsValidator = new StaffEducatorPreparationProgramPutPostRequestValidator();

            foreach (var item in instance.StaffEducatorPreparationPrograms)
            {
                var validationResult = staffEducatorPreparationProgramsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffHighlyQualifiedAcademicSubjectsValidator = new StaffHighlyQualifiedAcademicSubjectPutPostRequestValidator();

            foreach (var item in instance.StaffHighlyQualifiedAcademicSubjects)
            {
                var validationResult = staffHighlyQualifiedAcademicSubjectsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.StaffHighlyQualifiedAcademicSubject table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffHighlyQualifiedAcademicSubject : Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IStaffExtension Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.TPDM.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.TPDM.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The academic subject(s) in which the staff is deemed to be \"highly qualified\".
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor"), NaturalKeyMember]
        public string AcademicSubjectDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor == null
                || !(this as Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor.Equals(compareTo.AcademicSubjectDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject).AcademicSubjectDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffHighlyQualifiedAcademicSubjectMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffHighlyQualifiedAcademicSubjectMapper.MapTo(this, (Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffHighlyQualifiedAcademicSubjectPutPostRequestValidator : FluentValidation.AbstractValidator<StaffHighlyQualifiedAcademicSubject>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffHighlyQualifiedAcademicSubject> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.StaffEducationOrganizationAssignmentAssociation.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationAssignmentAssociationExtension table of the StaffEducationOrganizationAssignmentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationAssignmentAssociationExtension : Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension, Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffEducationOrganizationAssignmentAssociation _staffEducationOrganizationAssignmentAssociation;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffEducationOrganizationAssignmentAssociation Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension.StaffEducationOrganizationAssignmentAssociation
        {
            get { return _staffEducationOrganizationAssignmentAssociation; }
            set { SetStaffEducationOrganizationAssignmentAssociation(value); }
        }

        internal Entities.Common.EdFi.IStaffEducationOrganizationAssignmentAssociation StaffEducationOrganizationAssignmentAssociation
        {
            set { SetStaffEducationOrganizationAssignmentAssociation(value); }
        }

        private void SetStaffEducationOrganizationAssignmentAssociation(Entities.Common.EdFi.IStaffEducationOrganizationAssignmentAssociation value)
        {
            _staffEducationOrganizationAssignmentAssociation = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffEducationOrganizationAssignmentAssociation == null || !_staffEducationOrganizationAssignmentAssociation.Equals(compareTo.StaffEducationOrganizationAssignmentAssociation))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffEducationOrganizationAssignmentAssociation != null)
                    hash = hash * 23 + _staffEducationOrganizationAssignmentAssociation.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfExperienceAtCurrentEducationOrganization")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfExperienceAtCurrentEducationOrganization { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducationOrganizationAssignmentAssociationExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducationOrganizationAssignmentAssociationExtensionMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationAssignmentAssociationExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducationOrganizationAssignmentAssociationExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducationOrganizationAssignmentAssociationExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: StaffEducationOrganizationEmploymentAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.StaffEducationOrganizationEmploymentAssociation.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationBackgroundCheck table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationBackgroundCheck : Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension _staffEducationOrganizationEmploymentAssociationExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck.StaffEducationOrganizationEmploymentAssociationExtension
        {
            get { return _staffEducationOrganizationEmploymentAssociationExtension; }
            set { SetStaffEducationOrganizationEmploymentAssociationExtension(value); }
        }

        internal Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension StaffEducationOrganizationEmploymentAssociationExtension
        {
            set { SetStaffEducationOrganizationEmploymentAssociationExtension(value); }
        }

        private void SetStaffEducationOrganizationEmploymentAssociationExtension(Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension value)
        {
            _staffEducationOrganizationEmploymentAssociationExtension = value;
        }

        /// <summary>
        /// The type of background check (e.g., online, criminal, employment).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="backgroundCheckTypeDescriptor"), NaturalKeyMember]
        public string BackgroundCheckTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffEducationOrganizationEmploymentAssociationExtension == null || !_staffEducationOrganizationEmploymentAssociationExtension.Equals(compareTo.StaffEducationOrganizationEmploymentAssociationExtension))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck).BackgroundCheckTypeDescriptor == null
                || !(this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck).BackgroundCheckTypeDescriptor.Equals(compareTo.BackgroundCheckTypeDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffEducationOrganizationEmploymentAssociationExtension != null)
                    hash = hash * 23 + _staffEducationOrganizationEmploymentAssociationExtension.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck).BackgroundCheckTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck).BackgroundCheckTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the background check was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckCompletedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BackgroundCheckCompletedDate { get; set; }

        /// <summary>
        /// The date the background check was requested.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="backgroundCheckRequestedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BackgroundCheckRequestedDate { get; set; }

        /// <summary>
        /// The status of the background check (e.g., pending, under investigation, offense(s) found, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="backgroundCheckStatusDescriptor")]
        public string BackgroundCheckStatusDescriptor { get; set; }

        /// <summary>
        /// Indicates that a person has or has not completed a fingerprint.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="fingerprint")]
        public bool? Fingerprint { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationBackgroundCheckMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationBackgroundCheckMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported     { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported                      { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationBackgroundCheckPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducationOrganizationEmploymentAssociationBackgroundCheck>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducationOrganizationEmploymentAssociationBackgroundCheck> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationExtension table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationExtension : Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffEducationOrganizationEmploymentAssociationExtension()
        {
            StaffEducationOrganizationEmploymentAssociationBackgroundChecks = new List<StaffEducationOrganizationEmploymentAssociationBackgroundCheck>();
            StaffEducationOrganizationEmploymentAssociationSeniorities = new List<StaffEducationOrganizationEmploymentAssociationSeniority>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffEducationOrganizationEmploymentAssociation _staffEducationOrganizationEmploymentAssociation;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffEducationOrganizationEmploymentAssociation Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociation
        {
            get { return _staffEducationOrganizationEmploymentAssociation; }
            set { SetStaffEducationOrganizationEmploymentAssociation(value); }
        }

        internal Entities.Common.EdFi.IStaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation
        {
            set { SetStaffEducationOrganizationEmploymentAssociation(value); }
        }

        private void SetStaffEducationOrganizationEmploymentAssociation(Entities.Common.EdFi.IStaffEducationOrganizationEmploymentAssociation value)
        {
            _staffEducationOrganizationEmploymentAssociation = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffEducationOrganizationEmploymentAssociation == null || !_staffEducationOrganizationEmploymentAssociation.Equals(compareTo.StaffEducationOrganizationEmploymentAssociation))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffEducationOrganizationEmploymentAssociation != null)
                    hash = hash * 23 + _staffEducationOrganizationEmploymentAssociation.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The length of contract (e.g., 12 month, 9 month, summer).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="lengthOfContractDescriptor")]
        public string LengthOfContractDescriptor { get; set; }

        /// <summary>
        /// The date the probation period ended or is scheduled to end.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }

        /// <summary>
        /// An indication that the staff is on track for tenure.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenureTrack")]
        public bool? TenureTrack { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// salary
        /// </summary>
        [DataMember(Name = "salary")]
        public StaffEducationOrganizationEmploymentAssociationSalary StaffEducationOrganizationEmploymentAssociationSalary { get; set; }

        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociationSalary
        {
            get { return StaffEducationOrganizationEmploymentAssociationSalary; }
            set { StaffEducationOrganizationEmploymentAssociationSalary = (StaffEducationOrganizationEmploymentAssociationSalary) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffEducationOrganizationEmploymentAssociationBackgroundCheck> _staffEducationOrganizationEmploymentAssociationBackgroundChecks;
        private ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck> _staffEducationOrganizationEmploymentAssociationBackgroundChecksCovariant;

        [DataMember(Name="backgroundChecks"), NoDuplicateMembers]
        public ICollection<StaffEducationOrganizationEmploymentAssociationBackgroundCheck> StaffEducationOrganizationEmploymentAssociationBackgroundChecks
        {
            get { return _staffEducationOrganizationEmploymentAssociationBackgroundChecks; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffEducationOrganizationEmploymentAssociationBackgroundCheck>(value,
                    (s, e) => ((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck)e.Item).StaffEducationOrganizationEmploymentAssociationExtension = this);
                _staffEducationOrganizationEmploymentAssociationBackgroundChecks = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, StaffEducationOrganizationEmploymentAssociationBackgroundCheck>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck)e.Item).StaffEducationOrganizationEmploymentAssociationExtension = this;
                _staffEducationOrganizationEmploymentAssociationBackgroundChecksCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck> Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociationBackgroundChecks
        {
            get { return _staffEducationOrganizationEmploymentAssociationBackgroundChecksCovariant; }
            set { StaffEducationOrganizationEmploymentAssociationBackgroundChecks = new List<StaffEducationOrganizationEmploymentAssociationBackgroundCheck>(value.Cast<StaffEducationOrganizationEmploymentAssociationBackgroundCheck>()); }
        }

        private ICollection<StaffEducationOrganizationEmploymentAssociationSeniority> _staffEducationOrganizationEmploymentAssociationSeniorities;
        private ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority> _staffEducationOrganizationEmploymentAssociationSenioritiesCovariant;

        [DataMember(Name="seniorities"), NoDuplicateMembers]
        public ICollection<StaffEducationOrganizationEmploymentAssociationSeniority> StaffEducationOrganizationEmploymentAssociationSeniorities
        {
            get { return _staffEducationOrganizationEmploymentAssociationSeniorities; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffEducationOrganizationEmploymentAssociationSeniority>(value,
                    (s, e) => ((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority)e.Item).StaffEducationOrganizationEmploymentAssociationExtension = this);
                _staffEducationOrganizationEmploymentAssociationSeniorities = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, StaffEducationOrganizationEmploymentAssociationSeniority>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority)e.Item).StaffEducationOrganizationEmploymentAssociationExtension = this;
                _staffEducationOrganizationEmploymentAssociationSenioritiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority> Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociationSeniorities
        {
            get { return _staffEducationOrganizationEmploymentAssociationSenioritiesCovariant; }
            set { StaffEducationOrganizationEmploymentAssociationSeniorities = new List<StaffEducationOrganizationEmploymentAssociationSeniority>(value.Cast<StaffEducationOrganizationEmploymentAssociationSeniority>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffEducationOrganizationEmploymentAssociationBackgroundChecks != null) foreach (var item in _staffEducationOrganizationEmploymentAssociationBackgroundChecks)
            {
                item.StaffEducationOrganizationEmploymentAssociationExtension = this;
            }

            if (_staffEducationOrganizationEmploymentAssociationSeniorities != null) foreach (var item in _staffEducationOrganizationEmploymentAssociationSeniorities)
            {
                item.StaffEducationOrganizationEmploymentAssociationExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationExtensionMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsLengthOfContractDescriptorSupported                                       { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported                                            { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationSalarySupported            { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationSenioritiesSupported       { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsTenuredSupported                                                          { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsTenureTrackSupported                                                      { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, bool> Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded
        {
            get { return null; }
            set { }
        }
        Func<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, bool> Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationSeniorityIncluded
        {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducationOrganizationEmploymentAssociationExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducationOrganizationEmploymentAssociationExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var staffEducationOrganizationEmploymentAssociationBackgroundChecksValidator = new StaffEducationOrganizationEmploymentAssociationBackgroundCheckPutPostRequestValidator();

            foreach (var item in instance.StaffEducationOrganizationEmploymentAssociationBackgroundChecks)
            {
                var validationResult = staffEducationOrganizationEmploymentAssociationBackgroundChecksValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffEducationOrganizationEmploymentAssociationSenioritiesValidator = new StaffEducationOrganizationEmploymentAssociationSeniorityPutPostRequestValidator();

            foreach (var item in instance.StaffEducationOrganizationEmploymentAssociationSeniorities)
            {
                var validationResult = staffEducationOrganizationEmploymentAssociationSenioritiesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationSalary table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationSalary : Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension _staffEducationOrganizationEmploymentAssociationExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary.StaffEducationOrganizationEmploymentAssociationExtension
        {
            get { return _staffEducationOrganizationEmploymentAssociationExtension; }
            set { SetStaffEducationOrganizationEmploymentAssociationExtension(value); }
        }

        internal Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension StaffEducationOrganizationEmploymentAssociationExtension
        {
            set { SetStaffEducationOrganizationEmploymentAssociationExtension(value); }
        }

        private void SetStaffEducationOrganizationEmploymentAssociationExtension(Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension value)
        {
            _staffEducationOrganizationEmploymentAssociationExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffEducationOrganizationEmploymentAssociationExtension == null || !_staffEducationOrganizationEmploymentAssociationExtension.Equals(compareTo.StaffEducationOrganizationEmploymentAssociationExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffEducationOrganizationEmploymentAssociationExtension != null)
                    hash = hash * 23 + _staffEducationOrganizationEmploymentAssociationExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The salary of a staff member.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="salaryAmount")][Range(typeof(decimal), "-922337203685477.5808", "922337203685477.5807")]
        public decimal? SalaryAmount { get; set; }

        /// <summary>
        /// The maximum salary range for a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="salaryMaxRange")]
        public int? SalaryMaxRange { get; set; }

        /// <summary>
        /// The minimum salary range for a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="salaryMinRange")]
        public int? SalaryMinRange { get; set; }

        /// <summary>
        /// The type of salary that a staff member is receiving.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="salaryTypeDescriptor")]
        public string SalaryTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationSalaryMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationSalaryMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryAmountSupported          { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryMaxRangeSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryMinRangeSupported        { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryTypeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationSalaryPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducationOrganizationEmploymentAssociationSalary>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducationOrganizationEmploymentAssociationSalary> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationSeniority table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationSeniority : Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension _staffEducationOrganizationEmploymentAssociationExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority.StaffEducationOrganizationEmploymentAssociationExtension
        {
            get { return _staffEducationOrganizationEmploymentAssociationExtension; }
            set { SetStaffEducationOrganizationEmploymentAssociationExtension(value); }
        }

        internal Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension StaffEducationOrganizationEmploymentAssociationExtension
        {
            set { SetStaffEducationOrganizationEmploymentAssociationExtension(value); }
        }

        private void SetStaffEducationOrganizationEmploymentAssociationExtension(Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension value)
        {
            _staffEducationOrganizationEmploymentAssociationExtension = value;
        }

        /// <summary>
        /// The field of the credential being applied.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="credentialFieldDescriptor"), NaturalKeyMember]
        public string CredentialFieldDescriptor { get; set; }

        /// <summary>
        /// The name of the education organization worked.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfInstitution"), NaturalKeyMember]
        public string NameOfInstitution { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_staffEducationOrganizationEmploymentAssociationExtension == null || !_staffEducationOrganizationEmploymentAssociationExtension.Equals(compareTo.StaffEducationOrganizationEmploymentAssociationExtension))
                return false;


            // Standard Property
            if ((this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).CredentialFieldDescriptor == null
                || !(this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).CredentialFieldDescriptor.Equals(compareTo.CredentialFieldDescriptor))
                return false;

            // Standard Property
            if ((this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).NameOfInstitution == null
                || !(this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).NameOfInstitution.Equals(compareTo.NameOfInstitution))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffEducationOrganizationEmploymentAssociationExtension != null)
                    hash = hash * 23 + _staffEducationOrganizationEmploymentAssociationExtension.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).CredentialFieldDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).CredentialFieldDescriptor.GetHashCode();

                // Standard Property
                if ((this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).NameOfInstitution != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority).NameOfInstitution.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The number of years of experience.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal YearsExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationSeniorityMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducationOrganizationEmploymentAssociationSeniorityMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport.IsYearsExperienceSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationSeniorityPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducationOrganizationEmploymentAssociationSeniority>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducationOrganizationEmploymentAssociationSeniority> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: StaffEducatorPreparationProgramAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.StaffEducatorPreparationProgramAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the StaffEducatorPreparationProgramAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgramAssociationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }

        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && ProgramName != default(string) && ProgramTypeDescriptor != default(string) && StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "StaffEducatorPreparationProgramAssociation",
                Href = $"/tpdm/staffEducatorPreparationProgramAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.StaffEducatorPreparationProgramAssociation table of the StaffEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgramAssociation : Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation, IHasETag, Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StaffEducatorPreparationProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educatorPreparationProgramReferenceExplicitlyAssigned;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference _educatorPreparationProgramReference;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference ImplicitEducatorPreparationProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educatorPreparationProgramReference == null && !_educatorPreparationProgramReferenceExplicitlyAssigned)
                    _educatorPreparationProgramReference = new EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference();

                return _educatorPreparationProgramReference;
            }
        }

        [DataMember(Name="educatorPreparationProgramReference")][NaturalKeyMember]
        public EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference EducatorPreparationProgramReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_educatorPreparationProgramReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference;

                return null;
            }
            set
            {
                _educatorPreparationProgramReferenceExplicitlyAssigned = true;
                _educatorPreparationProgramReference = value;
            }
        }
        private bool _staffReferenceExplicitlyAssigned;
        private Staff.EdFi.StaffReference _staffReference;
        private Staff.EdFi.StaffReference ImplicitStaffReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_staffReference == null && !_staffReferenceExplicitlyAssigned)
                    _staffReference = new Staff.EdFi.StaffReference();

                return _staffReference;
            }
        }

        [DataMember(Name="staffReference")][NaturalKeyMember]
        public Staff.EdFi.StaffReference StaffReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitStaffReference != null
                    && (_staffReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference;

                return null;
            }
            set
            {
                _staffReferenceExplicitlyAssigned = true;
                _staffReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (StaffEducatorPreparationProgramAssociation.ProgramTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.ProgramTypeDescriptor
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.StaffUniqueId
        {
            get
            {
                if (ImplicitStaffReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStaffReference.IsReferenceFullyDefined()))
                    return ImplicitStaffReference.StaffUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Staff
                _staffReferenceExplicitlyAssigned = false;
                ImplicitStaffReference.StaffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramName == null
                || !(this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramName.Equals(compareTo.ProgramName))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramTypeDescriptor.Equals(compareTo.ProgramTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).StaffUniqueId == null
                || !(this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).StaffUniqueId.Equals(compareTo.StaffUniqueId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramName != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramName.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).ProgramTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).StaffUniqueId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Start date for the association of staff to this program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff completed the EducatorPreparationProgram.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="completer")]
        public bool? Completer { get; set; }

        /// <summary>
        /// End date for the association of staff to this program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffEducatorPreparationProgramAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffEducatorPreparationProgramAssociationMapper.MapTo(this, (Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsCompleterSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsEndDateSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.EducatorPreparationProgramResourceId
        {
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.EducatorPreparationProgramDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.StaffResourceId
        {
            get { return null; }
            set { ImplicitStaffReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.StaffDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitStaffReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgramAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffEducatorPreparationProgramAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffEducatorPreparationProgramAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: StaffToCandidateRelationshipDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.StaffToCandidateRelationshipDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.StaffToCandidateRelationshipDescriptor table of the StaffToCandidateRelationshipDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffToCandidateRelationshipDescriptor : Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the StaffToCandidateRelationshipDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffToCandidateRelationshipDescriptorId"), NaturalKeyMember]
        public int StaffToCandidateRelationshipDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return StaffToCandidateRelationshipDescriptorId; }
            set { StaffToCandidateRelationshipDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor).StaffToCandidateRelationshipDescriptorId == null
                || !(this as Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor).StaffToCandidateRelationshipDescriptorId.Equals(compareTo.StaffToCandidateRelationshipDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor).StaffToCandidateRelationshipDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor).StaffToCandidateRelationshipDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StaffToCandidateRelationshipDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StaffToCandidateRelationshipDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffToCandidateRelationshipDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<StaffToCandidateRelationshipDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffToCandidateRelationshipDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Api.Common.Models.Resources.StateEducationAgency.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.StateEducationAgencyExtension table of the StateEducationAgency aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StateEducationAgencyExtension : Entities.Common.TPDM.IStateEducationAgencyExtension, Entities.Common.TPDM.IStateEducationAgencyExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStateEducationAgency _stateEducationAgency;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStateEducationAgency Entities.Common.TPDM.IStateEducationAgencyExtension.StateEducationAgency
        {
            get { return _stateEducationAgency; }
            set { SetStateEducationAgency(value); }
        }

        internal Entities.Common.EdFi.IStateEducationAgency StateEducationAgency
        {
            set { SetStateEducationAgency(value); }
        }

        private void SetStateEducationAgency(Entities.Common.EdFi.IStateEducationAgency value)
        {
            _stateEducationAgency = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStateEducationAgencyExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_stateEducationAgency == null || !_stateEducationAgency.Equals(compareTo.StateEducationAgency))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_stateEducationAgency != null)
                    hash = hash * 23 + _stateEducationAgency.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The federal locale code associated with an education organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="federalLocaleCodeDescriptor")]
        public string FederalLocaleCodeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StateEducationAgencyExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStateEducationAgencyExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StateEducationAgencyExtensionMapper.MapTo(this, (Entities.Common.TPDM.IStateEducationAgencyExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStateEducationAgencyExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StateEducationAgencyExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StateEducationAgencyExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StateEducationAgencyExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Api.Common.Models.Resources.StudentGradebookEntry.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.StudentGradebookEntryExtension table of the StudentGradebookEntry aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentGradebookEntryExtension : Entities.Common.TPDM.IStudentGradebookEntryExtension, Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudentGradebookEntry _studentGradebookEntry;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudentGradebookEntry Entities.Common.TPDM.IStudentGradebookEntryExtension.StudentGradebookEntry
        {
            get { return _studentGradebookEntry; }
            set { SetStudentGradebookEntry(value); }
        }

        internal Entities.Common.EdFi.IStudentGradebookEntry StudentGradebookEntry
        {
            set { SetStudentGradebookEntry(value); }
        }

        private void SetStudentGradebookEntry(Entities.Common.EdFi.IStudentGradebookEntry value)
        {
            _studentGradebookEntry = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IStudentGradebookEntryExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_studentGradebookEntry == null || !_studentGradebookEntry.Equals(compareTo.StudentGradebookEntry))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentGradebookEntry != null)
                    hash = hash * 23 + _studentGradebookEntry.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indication of whether the assignment was passed or not.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assignmentPassed")]
        public bool? AssignmentPassed { get; set; }

        /// <summary>
        /// The date that the assignment was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateCompleted")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DateCompleted { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.StudentGradebookEntryExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IStudentGradebookEntryExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.StudentGradebookEntryExtensionMapper.MapTo(this, (Entities.Common.TPDM.IStudentGradebookEntryExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport.IsAssignmentPassedSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport.IsDateCompletedSupported     { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentGradebookEntryExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StudentGradebookEntryExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentGradebookEntryExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Api.Common.Models.Resources.SurveyResponse.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.SurveyResponseExtension table of the SurveyResponse aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveyResponseExtension : Entities.Common.TPDM.ISurveyResponseExtension, Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ISurveyResponse _surveyResponse;

        [IgnoreDataMember]
        Entities.Common.EdFi.ISurveyResponse Entities.Common.TPDM.ISurveyResponseExtension.SurveyResponse
        {
            get { return _surveyResponse; }
            set { SetSurveyResponse(value); }
        }

        internal Entities.Common.EdFi.ISurveyResponse SurveyResponse
        {
            set { SetSurveyResponse(value); }
        }

        private void SetSurveyResponse(Entities.Common.EdFi.ISurveyResponse value)
        {
            _surveyResponse = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISurveyResponseExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_surveyResponse == null || !_surveyResponse.Equals(compareTo.SurveyResponse))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_surveyResponse != null)
                    hash = hash * 23 + _surveyResponse.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponseExtension.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveyResponse.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveyResponseExtension.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveyResponseExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveyResponseExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveyResponseExtensionMapper.MapTo(this, (Entities.Common.TPDM.ISurveyResponseExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport.IsPersonIdSupported                { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport.IsSourceSystemDescriptorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveyResponseExtension.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveyResponseExtension.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveyResponseExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<SurveyResponseExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveyResponseExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveyResponsePersonTargetAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.SurveyResponsePersonTargetAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the SurveyResponsePersonTargetAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociationReference
    {
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="surveyIdentifier"), NaturalKeyMember]
        public string SurveyIdentifier { get; set; }

        [DataMember(Name="surveyResponseIdentifier"), NaturalKeyMember]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return Namespace != default(string) && PersonId != default(string) && SourceSystemDescriptor != default(string) && SurveyIdentifier != default(string) && SurveyResponseIdentifier != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "SurveyResponsePersonTargetAssociation",
                Href = $"/tpdm/surveyResponsePersonTargetAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.SurveyResponsePersonTargetAssociation table of the SurveyResponsePersonTargetAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociation : Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation, IHasETag, Entities.Common.TPDM.ISurveyResponsePersonTargetAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the SurveyResponsePersonTargetAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        private bool _surveyResponseReferenceExplicitlyAssigned;
        private SurveyResponse.EdFi.SurveyResponseReference _surveyResponseReference;
        private SurveyResponse.EdFi.SurveyResponseReference ImplicitSurveyResponseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_surveyResponseReference == null && !_surveyResponseReferenceExplicitlyAssigned)
                    _surveyResponseReference = new SurveyResponse.EdFi.SurveyResponseReference();

                return _surveyResponseReference;
            }
        }

        [DataMember(Name="surveyResponseReference")][NaturalKeyMember]
        public SurveyResponse.EdFi.SurveyResponseReference SurveyResponseReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSurveyResponseReference != null
                    && (_surveyResponseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference;

                return null;
            }
            set
            {
                _surveyResponseReferenceExplicitlyAssigned = true;
                _surveyResponseReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Namespace for the Survey.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.Namespace
        {
            get
            {
                if (ImplicitSurveyResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveyResponse
                _surveyResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveyResponseReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveyResponsePersonTargetAssociation.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyIdentifier
        {
            get
            {
                if (ImplicitSurveyResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference.SurveyIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveyResponse
                _surveyResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveyResponseReference.SurveyIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseIdentifier
        {
            get
            {
                if (ImplicitSurveyResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference.SurveyResponseIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveyResponse
                _surveyResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveyResponseReference.SurveyResponseIdentifier = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).Namespace == null
                || !(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).Namespace.Equals(compareTo.Namespace))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).PersonId == null
                || !(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).PersonId.Equals(compareTo.PersonId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyIdentifier == null
                || !(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyIdentifier.Equals(compareTo.SurveyIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyResponseIdentifier == null
                || !(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyResponseIdentifier.Equals(compareTo.SurveyResponseIdentifier))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).Namespace.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).PersonId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SourceSystemDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyResponseIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyResponseIdentifier.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveyResponsePersonTargetAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveyResponsePersonTargetAssociationMapper.MapTo(this, (Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseResourceId
        {
            get { return null; }
            set { ImplicitSurveyResponseReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSurveyResponseReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<SurveyResponsePersonTargetAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveyResponsePersonTargetAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveySection

namespace EdFi.Ods.Api.Common.Models.Resources.SurveySection.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.SurveySectionExtension table of the SurveySection aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionExtension : Entities.Common.TPDM.ISurveySectionExtension, Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ISurveySection _surveySection;

        [IgnoreDataMember]
        Entities.Common.EdFi.ISurveySection Entities.Common.TPDM.ISurveySectionExtension.SurveySection
        {
            get { return _surveySection; }
            set { SetSurveySection(value); }
        }

        internal Entities.Common.EdFi.ISurveySection SurveySection
        {
            set { SetSurveySection(value); }
        }

        private void SetSurveySection(Entities.Common.EdFi.ISurveySection value)
        {
            _surveySection = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISurveySectionExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_surveySection == null || !_surveySection.Equals(compareTo.SurveySection))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_surveySection != null)
                    hash = hash * 23 + _surveySection.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int? Entities.Common.TPDM.ISurveySectionExtension.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EducationOrganizationId;
                    }

                return default(int?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationElementTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (SurveySection.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.EvaluationTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (SurveySection.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short? Entities.Common.TPDM.ISurveySectionExtension.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.SchoolYear;
                    }

                return default(short?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (SurveySection.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionExtension.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitEvaluationElementReference.TermDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveySectionExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveySectionExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveySectionExtensionMapper.MapTo(this, (Entities.Common.TPDM.ISurveySectionExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEducationOrganizationIdSupported              { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationElementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationObjectiveTitleSupported             { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationPeriodDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationTitleSupported                      { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsPerformanceEvaluationTitleSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsPerformanceEvaluationTypeDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsSchoolYearSupported                           { get { return true; } set { } }
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsTermDescriptorSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveySectionExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<SurveySectionExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveySectionExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveySectionAggregateResponse

namespace EdFi.Ods.Api.Common.Models.Resources.SurveySectionAggregateResponse.TPDM
{
    /// <summary>
    /// Represents a reference to the SurveySectionAggregateResponse resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionAggregateResponseReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="surveyIdentifier"), NaturalKeyMember]
        public string SurveyIdentifier { get; set; }

        [DataMember(Name="surveySectionTitle"), NaturalKeyMember]
        public string SurveySectionTitle { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(int) && EvaluationDate != default(DateTime) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && Namespace != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && SurveyIdentifier != default(string) && SurveySectionTitle != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "SurveySectionAggregateResponse",
                Href = $"/tpdm/surveySectionAggregateResponses/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.SurveySectionAggregateResponse table of the SurveySectionAggregateResponse aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionAggregateResponse : Entities.Common.TPDM.ISurveySectionAggregateResponse, IHasETag, Entities.Common.TPDM.ISurveySectionAggregateResponseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the SurveySectionAggregateResponse resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementRatingReferenceExplicitlyAssigned;
        private EvaluationElementRating.TPDM.EvaluationElementRatingReference _evaluationElementRatingReference;
        private EvaluationElementRating.TPDM.EvaluationElementRatingReference ImplicitEvaluationElementRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementRatingReference == null && !_evaluationElementRatingReferenceExplicitlyAssigned)
                    _evaluationElementRatingReference = new EvaluationElementRating.TPDM.EvaluationElementRatingReference();

                return _evaluationElementRatingReference;
            }
        }

        [DataMember(Name="evaluationElementRatingReference")][NaturalKeyMember]
        public EvaluationElementRating.TPDM.EvaluationElementRatingReference EvaluationElementRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementRatingReference != null
                    && (_evaluationElementRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference;

                return null;
            }
            set
            {
                _evaluationElementRatingReferenceExplicitlyAssigned = true;
                _evaluationElementRatingReference = value;
            }
        }
        private bool _surveySectionReferenceExplicitlyAssigned;
        private SurveySection.EdFi.SurveySectionReference _surveySectionReference;
        private SurveySection.EdFi.SurveySectionReference ImplicitSurveySectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_surveySectionReference == null && !_surveySectionReferenceExplicitlyAssigned)
                    _surveySectionReference = new SurveySection.EdFi.SurveySectionReference();

                return _surveySectionReference;
            }
        }

        [DataMember(Name="surveySectionReference")][NaturalKeyMember]
        public SurveySection.EdFi.SurveySectionReference SurveySectionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSurveySectionReference != null
                    && (_surveySectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSurveySectionReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionReference;

                return null;
            }
            set
            {
                _surveySectionReferenceExplicitlyAssigned = true;
                _surveySectionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.TPDM.ISurveySectionAggregateResponse.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationDate
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationDate = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>

        // IS in a reference (SurveySectionAggregateResponse.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// Namespace for the Survey.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.Namespace
        {
            get
            {
                if (ImplicitSurveySectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySection
                _surveySectionReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionReference.Namespace = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>

        // IS in a reference (SurveySectionAggregateResponse.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.PersonId
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.ISurveySectionAggregateResponse.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElementRating
                _evaluationElementRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementRatingReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveySectionAggregateResponse.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveyIdentifier
        {
            get
            {
                if (ImplicitSurveySectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionReference.SurveyIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySection
                _surveySectionReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionReference.SurveyIdentifier = value;
            }
        }

        /// <summary>
        /// The title or label for the survey section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionTitle
        {
            get
            {
                if (ImplicitSurveySectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionReference.SurveySectionTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySection
                _surveySectionReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionReference.SurveySectionTitle = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (SurveySectionAggregateResponse.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementRatingReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISurveySectionAggregateResponse;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EducationOrganizationId == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationDate == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationElementTitle == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationObjectiveTitle == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationPeriodDescriptor == null
                ||!(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationTitle == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).Namespace == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).Namespace.Equals(compareTo.Namespace))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTitle == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTypeDescriptor == null
                ||!(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PersonId == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PersonId.Equals(compareTo.PersonId))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SchoolYear == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SchoolYear.Equals(compareTo.SchoolYear))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveyIdentifier == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveyIdentifier.Equals(compareTo.SurveyIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveySectionTitle == null
                || !(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveySectionTitle.Equals(compareTo.SurveySectionTitle))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).TermDescriptor == null
                ||!(this as Entities.Common.TPDM.ISurveySectionAggregateResponse).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EducationOrganizationId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EducationOrganizationId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationDate != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationDate.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationElementTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationElementTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationObjectiveTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationObjectiveTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationPeriodDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationPeriodDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).EvaluationTitle.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).Namespace.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTypeDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PerformanceEvaluationTypeDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).PersonId.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SchoolYear != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SchoolYear.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SourceSystemDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveyIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveyIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveySectionTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).SurveySectionTitle.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ISurveySectionAggregateResponse).TermDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionAggregateResponse).TermDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The score value for the aggregate survey section response.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="scoreValue")][Range(typeof(decimal), "-999.999", "999.999")]
        public decimal ScoreValue { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveySectionAggregateResponseMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveySectionAggregateResponse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveySectionAggregateResponseMapper.MapTo(this, (Entities.Common.TPDM.ISurveySectionAggregateResponse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.ISurveySectionAggregateResponseSynchronizationSourceSupport.IsScoreValueSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementRatingResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementRatingReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionResourceId
        {
            get { return null; }
            set { ImplicitSurveySectionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSurveySectionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveySectionAggregateResponsePutPostRequestValidator : FluentValidation.AbstractValidator<SurveySectionAggregateResponse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveySectionAggregateResponse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveySectionResponsePersonTargetAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.SurveySectionResponsePersonTargetAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the SurveySectionResponsePersonTargetAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociationReference
    {
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="surveyIdentifier"), NaturalKeyMember]
        public string SurveyIdentifier { get; set; }

        [DataMember(Name="surveyResponseIdentifier"), NaturalKeyMember]
        public string SurveyResponseIdentifier { get; set; }

        [DataMember(Name="surveySectionTitle"), NaturalKeyMember]
        public string SurveySectionTitle { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return Namespace != default(string) && PersonId != default(string) && SourceSystemDescriptor != default(string) && SurveyIdentifier != default(string) && SurveyResponseIdentifier != default(string) && SurveySectionTitle != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "SurveySectionResponsePersonTargetAssociation",
                Href = $"/tpdm/surveySectionResponsePersonTargetAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.SurveySectionResponsePersonTargetAssociation table of the SurveySectionResponsePersonTargetAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociation : Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation, IHasETag, Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the SurveySectionResponsePersonTargetAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        private bool _surveySectionResponseReferenceExplicitlyAssigned;
        private SurveySectionResponse.EdFi.SurveySectionResponseReference _surveySectionResponseReference;
        private SurveySectionResponse.EdFi.SurveySectionResponseReference ImplicitSurveySectionResponseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_surveySectionResponseReference == null && !_surveySectionResponseReferenceExplicitlyAssigned)
                    _surveySectionResponseReference = new SurveySectionResponse.EdFi.SurveySectionResponseReference();

                return _surveySectionResponseReference;
            }
        }

        [DataMember(Name="surveySectionResponseReference")][NaturalKeyMember]
        public SurveySectionResponse.EdFi.SurveySectionResponseReference SurveySectionResponseReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSurveySectionResponseReference != null
                    && (_surveySectionResponseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference;

                return null;
            }
            set
            {
                _surveySectionResponseReferenceExplicitlyAssigned = true;
                _surveySectionResponseReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Namespace for the Survey.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.Namespace
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveySectionResponsePersonTargetAssociation.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveyIdentifier
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.SurveyIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.SurveyIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveyResponseIdentifier
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.SurveyResponseIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.SurveyResponseIdentifier = value;
            }
        }

        /// <summary>
        /// The title or label for the survey section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionTitle
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.SurveySectionTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.SurveySectionTitle = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).Namespace == null
                || !(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).Namespace.Equals(compareTo.Namespace))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).PersonId == null
                || !(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).PersonId.Equals(compareTo.PersonId))
                return false;

            // Unified Type Property
            if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SourceSystemDescriptor == null
                ||!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyIdentifier == null
                || !(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyIdentifier.Equals(compareTo.SurveyIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyResponseIdentifier == null
                || !(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyResponseIdentifier.Equals(compareTo.SurveyResponseIdentifier))
                return false;

            // Referenced Property
            if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveySectionTitle == null
                || !(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveySectionTitle.Equals(compareTo.SurveySectionTitle))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).Namespace != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).Namespace.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).PersonId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).PersonId.GetHashCode();

                //Unified Type Property
                if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SourceSystemDescriptor != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SourceSystemDescriptor.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyResponseIdentifier != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyResponseIdentifier.GetHashCode();

                //Referenced Property
                if ((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveySectionTitle != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveySectionTitle.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveySectionResponsePersonTargetAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveySectionResponsePersonTargetAssociationMapper.MapTo(this, (Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionResponseResourceId
        {
            get { return null; }
            set { ImplicitSurveySectionResponseReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionResponseDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSurveySectionResponseReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<SurveySectionResponsePersonTargetAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveySectionResponsePersonTargetAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: WithdrawReasonDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.WithdrawReasonDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.WithdrawReasonDescriptor table of the WithdrawReasonDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class WithdrawReasonDescriptor : Entities.Common.TPDM.IWithdrawReasonDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the WithdrawReasonDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="withdrawReasonDescriptorId"), NaturalKeyMember]
        public int WithdrawReasonDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return WithdrawReasonDescriptorId; }
            set { WithdrawReasonDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.TPDM.IWithdrawReasonDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if ((this as Entities.Common.TPDM.IWithdrawReasonDescriptor).WithdrawReasonDescriptorId == null
                || !(this as Entities.Common.TPDM.IWithdrawReasonDescriptor).WithdrawReasonDescriptorId.Equals(compareTo.WithdrawReasonDescriptorId))
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Derived Property
                if ((this as Entities.Common.TPDM.IWithdrawReasonDescriptor).WithdrawReasonDescriptorId != null)
                    hash = hash * 23 + (this as Entities.Common.TPDM.IWithdrawReasonDescriptor).WithdrawReasonDescriptorId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.WithdrawReasonDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IWithdrawReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.WithdrawReasonDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IWithdrawReasonDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported         { get { return true; } set { } }
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported  { get { return true; } set { } }
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported    { get { return true; } set { } }
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported           { get { return true; } set { } }
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported   { get { return true; } set { } }
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported    { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class WithdrawReasonDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<WithdrawReasonDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<WithdrawReasonDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
