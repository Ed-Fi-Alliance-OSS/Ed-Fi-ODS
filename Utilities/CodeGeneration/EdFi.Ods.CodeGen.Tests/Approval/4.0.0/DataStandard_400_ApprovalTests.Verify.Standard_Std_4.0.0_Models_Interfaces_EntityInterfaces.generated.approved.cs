using System;
using System.Linq;
using System.Collections.Generic;
using EdFi.Ods.Api.Attributes;
using EdFi.Ods.Common.Attributes;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common.Models;

#pragma warning disable 108,114

namespace EdFi.Ods.Entities.Common.EdFi
{

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AbsenceEventCategoryDescriptor model.
    /// </summary>
    public interface IAbsenceEventCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AbsenceEventCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AbsenceEventCategoryDescriptorMappingContract : IMappingContract
    {
        public AbsenceEventCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AbsenceEventCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AcademicHonorCategoryDescriptor model.
    /// </summary>
    public interface IAcademicHonorCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AcademicHonorCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AcademicHonorCategoryDescriptorMappingContract : IMappingContract
    {
        public AcademicHonorCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicHonorCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AcademicSubjectDescriptor model.
    /// </summary>
    public interface IAcademicSubjectDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AcademicSubjectDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AcademicSubjectDescriptorMappingContract : IMappingContract
    {
        public AcademicSubjectDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AcademicWeek model.
    /// </summary>
    public interface IAcademicWeek : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int SchoolId { get; set; }
        
        string WeekIdentifier { get; set; }

        // Non-PK properties
        DateTime BeginDate { get; set; }
        DateTime EndDate { get; set; }
        int TotalInstructionalDays { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AcademicWeekMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AcademicWeekMappingContract(
            bool isBeginDateSupported,
            bool isEndDateSupported,
            bool isSchoolReferenceSupported,
            bool isTotalInstructionalDaysSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsTotalInstructionalDaysSupported = isTotalInstructionalDaysSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsTotalInstructionalDaysSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "TotalInstructionalDays":
                    return IsTotalInstructionalDaysSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolId":
                    return true;
                case "WeekIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AccommodationDescriptor model.
    /// </summary>
    public interface IAccommodationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AccommodationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AccommodationDescriptorMappingContract : IMappingContract
    {
        public AccommodationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccommodationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AccountabilityRating model.
    /// </summary>
    public interface IAccountabilityRating : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string RatingTitle { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        string Rating { get; set; }
        DateTime? RatingDate { get; set; }
        string RatingOrganization { get; set; }
        string RatingProgram { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AccountabilityRatingMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AccountabilityRatingMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isRatingSupported,
            bool isRatingDateSupported,
            bool isRatingOrganizationSupported,
            bool isRatingProgramSupported,
            bool isSchoolYearTypeReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsRatingSupported = isRatingSupported;
            IsRatingDateSupported = isRatingDateSupported;
            IsRatingOrganizationSupported = isRatingOrganizationSupported;
            IsRatingProgramSupported = isRatingProgramSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsRatingSupported { get; }
        public bool IsRatingDateSupported { get; }
        public bool IsRatingOrganizationSupported { get; }
        public bool IsRatingProgramSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "Rating":
                    return IsRatingSupported;
                case "RatingDate":
                    return IsRatingDateSupported;
                case "RatingOrganization":
                    return IsRatingOrganizationSupported;
                case "RatingProgram":
                    return IsRatingProgramSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "RatingTitle":
                    return true;
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AccountTypeDescriptor model.
    /// </summary>
    public interface IAccountTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AccountTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AccountTypeDescriptorMappingContract : IMappingContract
    {
        public AccountTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AchievementCategoryDescriptor model.
    /// </summary>
    public interface IAchievementCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AchievementCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AchievementCategoryDescriptorMappingContract : IMappingContract
    {
        public AchievementCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AchievementCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AdditionalCreditTypeDescriptor model.
    /// </summary>
    public interface IAdditionalCreditTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AdditionalCreditTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AdditionalCreditTypeDescriptorMappingContract : IMappingContract
    {
        public AdditionalCreditTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AdditionalCreditTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AddressTypeDescriptor model.
    /// </summary>
    public interface IAddressTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AddressTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AddressTypeDescriptorMappingContract : IMappingContract
    {
        public AddressTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AdministrationEnvironmentDescriptor model.
    /// </summary>
    public interface IAdministrationEnvironmentDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AdministrationEnvironmentDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AdministrationEnvironmentDescriptorMappingContract : IMappingContract
    {
        public AdministrationEnvironmentDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AdministrationEnvironmentDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AdministrativeFundingControlDescriptor model.
    /// </summary>
    public interface IAdministrativeFundingControlDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AdministrativeFundingControlDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AdministrativeFundingControlDescriptorMappingContract : IMappingContract
    {
        public AdministrativeFundingControlDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AdministrativeFundingControlDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AncestryEthnicOriginDescriptor model.
    /// </summary>
    public interface IAncestryEthnicOriginDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AncestryEthnicOriginDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AncestryEthnicOriginDescriptorMappingContract : IMappingContract
    {
        public AncestryEthnicOriginDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AncestryEthnicOriginDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Assessment model.
    /// </summary>
    public interface IAssessment : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AssessmentIdentifier { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties
        bool? AdaptiveAssessment { get; set; }
        string AssessmentCategoryDescriptor { get; set; }
        string AssessmentFamily { get; set; }
        string AssessmentForm { get; set; }
        string AssessmentTitle { get; set; }
        int? AssessmentVersion { get; set; }
        int? EducationOrganizationId { get; set; }
        decimal? MaxRawScore { get; set; }
        string Nomenclature { get; set; }
        DateTime? RevisionDate { get; set; }

        // One-to-one relationships

        IAssessmentContentStandard AssessmentContentStandard { get; set; }

        // Lists
        ICollection<IAssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; }
        ICollection<IAssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; }
        ICollection<IAssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; }
        ICollection<IAssessmentLanguage> AssessmentLanguages { get; set; }
        ICollection<IAssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; }
        ICollection<IAssessmentPeriod> AssessmentPeriods { get; set; }
        ICollection<IAssessmentPlatformType> AssessmentPlatformTypes { get; set; }
        ICollection<IAssessmentProgram> AssessmentPrograms { get; set; }
        ICollection<IAssessmentScore> AssessmentScores { get; set; }
        ICollection<IAssessmentSection> AssessmentSections { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentMappingContract(
            bool isAdaptiveAssessmentSupported,
            bool isAssessmentAcademicSubjectsSupported,
            bool isAssessmentAssessedGradeLevelsSupported,
            bool isAssessmentCategoryDescriptorSupported,
            bool isAssessmentContentStandardSupported,
            bool isAssessmentFamilySupported,
            bool isAssessmentFormSupported,
            bool isAssessmentIdentificationCodesSupported,
            bool isAssessmentLanguagesSupported,
            bool isAssessmentPerformanceLevelsSupported,
            bool isAssessmentPeriodsSupported,
            bool isAssessmentPlatformTypesSupported,
            bool isAssessmentProgramsSupported,
            bool isAssessmentScoresSupported,
            bool isAssessmentSectionsSupported,
            bool isAssessmentTitleSupported,
            bool isAssessmentVersionSupported,
            bool isEducationOrganizationIdSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isMaxRawScoreSupported,
            bool isNomenclatureSupported,
            bool isRevisionDateSupported,
            bool isAssessmentContentStandardCreatable,
            bool isAssessmentAcademicSubjectsItemCreatable,
            Func<IAssessmentAcademicSubject, bool> isAssessmentAcademicSubjectIncluded,
            bool isAssessmentAssessedGradeLevelsItemCreatable,
            Func<IAssessmentAssessedGradeLevel, bool> isAssessmentAssessedGradeLevelIncluded,
            bool isAssessmentIdentificationCodesItemCreatable,
            Func<IAssessmentIdentificationCode, bool> isAssessmentIdentificationCodeIncluded,
            bool isAssessmentLanguagesItemCreatable,
            Func<IAssessmentLanguage, bool> isAssessmentLanguageIncluded,
            bool isAssessmentPerformanceLevelsItemCreatable,
            Func<IAssessmentPerformanceLevel, bool> isAssessmentPerformanceLevelIncluded,
            bool isAssessmentPeriodsItemCreatable,
            Func<IAssessmentPeriod, bool> isAssessmentPeriodIncluded,
            bool isAssessmentPlatformTypesItemCreatable,
            Func<IAssessmentPlatformType, bool> isAssessmentPlatformTypeIncluded,
            bool isAssessmentProgramsItemCreatable,
            Func<IAssessmentProgram, bool> isAssessmentProgramIncluded,
            bool isAssessmentScoresItemCreatable,
            Func<IAssessmentScore, bool> isAssessmentScoreIncluded,
            bool isAssessmentSectionsItemCreatable,
            Func<IAssessmentSection, bool> isAssessmentSectionIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAdaptiveAssessmentSupported = isAdaptiveAssessmentSupported;
            IsAssessmentAcademicSubjectsSupported = isAssessmentAcademicSubjectsSupported;
            IsAssessmentAssessedGradeLevelsSupported = isAssessmentAssessedGradeLevelsSupported;
            IsAssessmentCategoryDescriptorSupported = isAssessmentCategoryDescriptorSupported;
            IsAssessmentContentStandardSupported = isAssessmentContentStandardSupported;
            IsAssessmentFamilySupported = isAssessmentFamilySupported;
            IsAssessmentFormSupported = isAssessmentFormSupported;
            IsAssessmentIdentificationCodesSupported = isAssessmentIdentificationCodesSupported;
            IsAssessmentLanguagesSupported = isAssessmentLanguagesSupported;
            IsAssessmentPerformanceLevelsSupported = isAssessmentPerformanceLevelsSupported;
            IsAssessmentPeriodsSupported = isAssessmentPeriodsSupported;
            IsAssessmentPlatformTypesSupported = isAssessmentPlatformTypesSupported;
            IsAssessmentProgramsSupported = isAssessmentProgramsSupported;
            IsAssessmentScoresSupported = isAssessmentScoresSupported;
            IsAssessmentSectionsSupported = isAssessmentSectionsSupported;
            IsAssessmentTitleSupported = isAssessmentTitleSupported;
            IsAssessmentVersionSupported = isAssessmentVersionSupported;
            IsEducationOrganizationIdSupported = isEducationOrganizationIdSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsMaxRawScoreSupported = isMaxRawScoreSupported;
            IsNomenclatureSupported = isNomenclatureSupported;
            IsRevisionDateSupported = isRevisionDateSupported;
            IsAssessmentContentStandardCreatable = isAssessmentContentStandardCreatable;
            IsAssessmentAcademicSubjectsItemCreatable = isAssessmentAcademicSubjectsItemCreatable;
            IsAssessmentAcademicSubjectIncluded = isAssessmentAcademicSubjectIncluded;
            IsAssessmentAssessedGradeLevelsItemCreatable = isAssessmentAssessedGradeLevelsItemCreatable;
            IsAssessmentAssessedGradeLevelIncluded = isAssessmentAssessedGradeLevelIncluded;
            IsAssessmentIdentificationCodesItemCreatable = isAssessmentIdentificationCodesItemCreatable;
            IsAssessmentIdentificationCodeIncluded = isAssessmentIdentificationCodeIncluded;
            IsAssessmentLanguagesItemCreatable = isAssessmentLanguagesItemCreatable;
            IsAssessmentLanguageIncluded = isAssessmentLanguageIncluded;
            IsAssessmentPerformanceLevelsItemCreatable = isAssessmentPerformanceLevelsItemCreatable;
            IsAssessmentPerformanceLevelIncluded = isAssessmentPerformanceLevelIncluded;
            IsAssessmentPeriodsItemCreatable = isAssessmentPeriodsItemCreatable;
            IsAssessmentPeriodIncluded = isAssessmentPeriodIncluded;
            IsAssessmentPlatformTypesItemCreatable = isAssessmentPlatformTypesItemCreatable;
            IsAssessmentPlatformTypeIncluded = isAssessmentPlatformTypeIncluded;
            IsAssessmentProgramsItemCreatable = isAssessmentProgramsItemCreatable;
            IsAssessmentProgramIncluded = isAssessmentProgramIncluded;
            IsAssessmentScoresItemCreatable = isAssessmentScoresItemCreatable;
            IsAssessmentScoreIncluded = isAssessmentScoreIncluded;
            IsAssessmentSectionsItemCreatable = isAssessmentSectionsItemCreatable;
            IsAssessmentSectionIncluded = isAssessmentSectionIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAdaptiveAssessmentSupported { get; }
        public bool IsAssessmentAcademicSubjectsSupported { get; }
        public bool IsAssessmentAssessedGradeLevelsSupported { get; }
        public bool IsAssessmentCategoryDescriptorSupported { get; }
        public bool IsAssessmentContentStandardSupported { get; }
        public bool IsAssessmentFamilySupported { get; }
        public bool IsAssessmentFormSupported { get; }
        public bool IsAssessmentIdentificationCodesSupported { get; }
        public bool IsAssessmentLanguagesSupported { get; }
        public bool IsAssessmentPerformanceLevelsSupported { get; }
        public bool IsAssessmentPeriodsSupported { get; }
        public bool IsAssessmentPlatformTypesSupported { get; }
        public bool IsAssessmentProgramsSupported { get; }
        public bool IsAssessmentScoresSupported { get; }
        public bool IsAssessmentSectionsSupported { get; }
        public bool IsAssessmentTitleSupported { get; }
        public bool IsAssessmentVersionSupported { get; }
        public bool IsEducationOrganizationIdSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsMaxRawScoreSupported { get; }
        public bool IsNomenclatureSupported { get; }
        public bool IsRevisionDateSupported { get; }
        public bool IsAssessmentContentStandardCreatable { get; }
        public bool IsAssessmentAcademicSubjectsItemCreatable { get; }
        public Func<IAssessmentAcademicSubject, bool> IsAssessmentAcademicSubjectIncluded { get; }
        public bool IsAssessmentAssessedGradeLevelsItemCreatable { get; }
        public Func<IAssessmentAssessedGradeLevel, bool> IsAssessmentAssessedGradeLevelIncluded { get; }
        public bool IsAssessmentIdentificationCodesItemCreatable { get; }
        public Func<IAssessmentIdentificationCode, bool> IsAssessmentIdentificationCodeIncluded { get; }
        public bool IsAssessmentLanguagesItemCreatable { get; }
        public Func<IAssessmentLanguage, bool> IsAssessmentLanguageIncluded { get; }
        public bool IsAssessmentPerformanceLevelsItemCreatable { get; }
        public Func<IAssessmentPerformanceLevel, bool> IsAssessmentPerformanceLevelIncluded { get; }
        public bool IsAssessmentPeriodsItemCreatable { get; }
        public Func<IAssessmentPeriod, bool> IsAssessmentPeriodIncluded { get; }
        public bool IsAssessmentPlatformTypesItemCreatable { get; }
        public Func<IAssessmentPlatformType, bool> IsAssessmentPlatformTypeIncluded { get; }
        public bool IsAssessmentProgramsItemCreatable { get; }
        public Func<IAssessmentProgram, bool> IsAssessmentProgramIncluded { get; }
        public bool IsAssessmentScoresItemCreatable { get; }
        public Func<IAssessmentScore, bool> IsAssessmentScoreIncluded { get; }
        public bool IsAssessmentSectionsItemCreatable { get; }
        public Func<IAssessmentSection, bool> IsAssessmentSectionIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AdaptiveAssessment":
                    return IsAdaptiveAssessmentSupported;
                case "AssessmentAcademicSubjects":
                    return IsAssessmentAcademicSubjectsSupported;
                case "AssessmentAssessedGradeLevels":
                    return IsAssessmentAssessedGradeLevelsSupported;
                case "AssessmentCategoryDescriptor":
                    return IsAssessmentCategoryDescriptorSupported;
                case "AssessmentContentStandard":
                    return IsAssessmentContentStandardSupported;
                case "AssessmentFamily":
                    return IsAssessmentFamilySupported;
                case "AssessmentForm":
                    return IsAssessmentFormSupported;
                case "AssessmentIdentificationCodes":
                    return IsAssessmentIdentificationCodesSupported;
                case "AssessmentLanguages":
                    return IsAssessmentLanguagesSupported;
                case "AssessmentPerformanceLevels":
                    return IsAssessmentPerformanceLevelsSupported;
                case "AssessmentPeriods":
                    return IsAssessmentPeriodsSupported;
                case "AssessmentPlatformTypes":
                    return IsAssessmentPlatformTypesSupported;
                case "AssessmentPrograms":
                    return IsAssessmentProgramsSupported;
                case "AssessmentScores":
                    return IsAssessmentScoresSupported;
                case "AssessmentSections":
                    return IsAssessmentSectionsSupported;
                case "AssessmentTitle":
                    return IsAssessmentTitleSupported;
                case "AssessmentVersion":
                    return IsAssessmentVersionSupported;
                case "EducationOrganizationId":
                    return IsEducationOrganizationIdSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "MaxRawScore":
                    return IsMaxRawScoreSupported;
                case "Nomenclature":
                    return IsNomenclatureSupported;
                case "RevisionDate":
                    return IsRevisionDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentContentStandard":
                    return IsAssessmentContentStandardCreatable;
                case "AssessmentAcademicSubjects":
                    return IsAssessmentAcademicSubjectsItemCreatable;
                case "AssessmentAssessedGradeLevels":
                    return IsAssessmentAssessedGradeLevelsItemCreatable;
                case "AssessmentIdentificationCodes":
                    return IsAssessmentIdentificationCodesItemCreatable;
                case "AssessmentLanguages":
                    return IsAssessmentLanguagesItemCreatable;
                case "AssessmentPerformanceLevels":
                    return IsAssessmentPerformanceLevelsItemCreatable;
                case "AssessmentPeriods":
                    return IsAssessmentPeriodsItemCreatable;
                case "AssessmentPlatformTypes":
                    return IsAssessmentPlatformTypesItemCreatable;
                case "AssessmentPrograms":
                    return IsAssessmentProgramsItemCreatable;
                case "AssessmentScores":
                    return IsAssessmentScoresItemCreatable;
                case "AssessmentSections":
                    return IsAssessmentSectionsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentAcademicSubject model.
    /// </summary>
    public interface IAssessmentAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentAssessedGradeLevel model.
    /// </summary>
    public interface IAssessmentAssessedGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentAssessedGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentAssessedGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentCategoryDescriptor model.
    /// </summary>
    public interface IAssessmentCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssessmentCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentCategoryDescriptorMappingContract : IMappingContract
    {
        public AssessmentCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentContentStandard model.
    /// </summary>
    public interface IAssessmentContentStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }
        int? MandatingEducationOrganizationId { get; set; }
        DateTime? PublicationDate { get; set; }
        string PublicationStatusDescriptor { get; set; }
        short? PublicationYear { get; set; }
        string Title { get; set; }
        string URI { get; set; }
        string Version { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IAssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; }

        // Resource reference data
        Guid? MandatingEducationOrganizationResourceId { get; set; }
        string MandatingEducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentContentStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentContentStandardMappingContract(
            bool isAssessmentContentStandardAuthorsSupported,
            bool isBeginDateSupported,
            bool isEndDateSupported,
            bool isMandatingEducationOrganizationIdSupported,
            bool isMandatingEducationOrganizationReferenceSupported,
            bool isPublicationDateSupported,
            bool isPublicationStatusDescriptorSupported,
            bool isPublicationYearSupported,
            bool isTitleSupported,
            bool isURISupported,
            bool isVersionSupported,
            bool isAssessmentContentStandardAuthorsItemCreatable,
            Func<IAssessmentContentStandardAuthor, bool> isAssessmentContentStandardAuthorIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentContentStandardAuthorsSupported = isAssessmentContentStandardAuthorsSupported;
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsMandatingEducationOrganizationIdSupported = isMandatingEducationOrganizationIdSupported;
            IsMandatingEducationOrganizationReferenceSupported = isMandatingEducationOrganizationReferenceSupported;
            IsPublicationDateSupported = isPublicationDateSupported;
            IsPublicationStatusDescriptorSupported = isPublicationStatusDescriptorSupported;
            IsPublicationYearSupported = isPublicationYearSupported;
            IsTitleSupported = isTitleSupported;
            IsURISupported = isURISupported;
            IsVersionSupported = isVersionSupported;
            IsAssessmentContentStandardAuthorsItemCreatable = isAssessmentContentStandardAuthorsItemCreatable;
            IsAssessmentContentStandardAuthorIncluded = isAssessmentContentStandardAuthorIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentContentStandardAuthorsSupported { get; }
        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsMandatingEducationOrganizationIdSupported { get; }
        public bool IsMandatingEducationOrganizationReferenceSupported { get; }
        public bool IsPublicationDateSupported { get; }
        public bool IsPublicationStatusDescriptorSupported { get; }
        public bool IsPublicationYearSupported { get; }
        public bool IsTitleSupported { get; }
        public bool IsURISupported { get; }
        public bool IsVersionSupported { get; }
        public bool IsAssessmentContentStandardAuthorsItemCreatable { get; }
        public Func<IAssessmentContentStandardAuthor, bool> IsAssessmentContentStandardAuthorIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentContentStandardAuthors":
                    return IsAssessmentContentStandardAuthorsSupported;
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "MandatingEducationOrganizationId":
                    return IsMandatingEducationOrganizationIdSupported;
                case "MandatingEducationOrganizationReference":
                    return IsMandatingEducationOrganizationReferenceSupported;
                case "PublicationDate":
                    return IsPublicationDateSupported;
                case "PublicationStatusDescriptor":
                    return IsPublicationStatusDescriptorSupported;
                case "PublicationYear":
                    return IsPublicationYearSupported;
                case "Title":
                    return IsTitleSupported;
                case "URI":
                    return IsURISupported;
                case "Version":
                    return IsVersionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentContentStandardAuthors":
                    return IsAssessmentContentStandardAuthorsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentContentStandardAuthor model.
    /// </summary>
    public interface IAssessmentContentStandardAuthor : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessmentContentStandard AssessmentContentStandard { get; set; }
        
        string Author { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentContentStandardAuthorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentContentStandardAuthorMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Author":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentIdentificationCode model.
    /// </summary>
    public interface IAssessmentIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string AssessmentIdentificationSystemDescriptor { get; set; }

        // Non-PK properties
        string AssigningOrganizationIdentificationCode { get; set; }
        string IdentificationCode { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentIdentificationCodeMappingContract(
            bool isAssigningOrganizationIdentificationCodeSupported,
            bool isIdentificationCodeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssigningOrganizationIdentificationCodeSupported = isAssigningOrganizationIdentificationCodeSupported;
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssigningOrganizationIdentificationCodeSupported { get; }
        public bool IsIdentificationCodeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssigningOrganizationIdentificationCode":
                    return IsAssigningOrganizationIdentificationCodeSupported;
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentificationSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentIdentificationSystemDescriptor model.
    /// </summary>
    public interface IAssessmentIdentificationSystemDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssessmentIdentificationSystemDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentIdentificationSystemDescriptorMappingContract : IMappingContract
    {
        public AssessmentIdentificationSystemDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentificationSystemDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentItem model.
    /// </summary>
    public interface IAssessmentItem : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AssessmentIdentifier { get; set; }
        
        string IdentificationCode { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties
        string AssessmentItemCategoryDescriptor { get; set; }
        string AssessmentItemURI { get; set; }
        string ExpectedTimeAssessed { get; set; }
        string ItemText { get; set; }
        decimal? MaxRawScore { get; set; }
        string Nomenclature { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IAssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; }
        ICollection<IAssessmentItemPossibleResponse> AssessmentItemPossibleResponses { get; set; }

        // Resource reference data
        Guid? AssessmentResourceId { get; set; }
        string AssessmentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentItemMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentItemMappingContract(
            bool isAssessmentItemCategoryDescriptorSupported,
            bool isAssessmentItemLearningStandardsSupported,
            bool isAssessmentItemPossibleResponsesSupported,
            bool isAssessmentItemURISupported,
            bool isAssessmentReferenceSupported,
            bool isExpectedTimeAssessedSupported,
            bool isItemTextSupported,
            bool isMaxRawScoreSupported,
            bool isNomenclatureSupported,
            bool isAssessmentItemLearningStandardsItemCreatable,
            Func<IAssessmentItemLearningStandard, bool> isAssessmentItemLearningStandardIncluded,
            bool isAssessmentItemPossibleResponsesItemCreatable,
            Func<IAssessmentItemPossibleResponse, bool> isAssessmentItemPossibleResponseIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentItemCategoryDescriptorSupported = isAssessmentItemCategoryDescriptorSupported;
            IsAssessmentItemLearningStandardsSupported = isAssessmentItemLearningStandardsSupported;
            IsAssessmentItemPossibleResponsesSupported = isAssessmentItemPossibleResponsesSupported;
            IsAssessmentItemURISupported = isAssessmentItemURISupported;
            IsAssessmentReferenceSupported = isAssessmentReferenceSupported;
            IsExpectedTimeAssessedSupported = isExpectedTimeAssessedSupported;
            IsItemTextSupported = isItemTextSupported;
            IsMaxRawScoreSupported = isMaxRawScoreSupported;
            IsNomenclatureSupported = isNomenclatureSupported;
            IsAssessmentItemLearningStandardsItemCreatable = isAssessmentItemLearningStandardsItemCreatable;
            IsAssessmentItemLearningStandardIncluded = isAssessmentItemLearningStandardIncluded;
            IsAssessmentItemPossibleResponsesItemCreatable = isAssessmentItemPossibleResponsesItemCreatable;
            IsAssessmentItemPossibleResponseIncluded = isAssessmentItemPossibleResponseIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentItemCategoryDescriptorSupported { get; }
        public bool IsAssessmentItemLearningStandardsSupported { get; }
        public bool IsAssessmentItemPossibleResponsesSupported { get; }
        public bool IsAssessmentItemURISupported { get; }
        public bool IsAssessmentReferenceSupported { get; }
        public bool IsExpectedTimeAssessedSupported { get; }
        public bool IsItemTextSupported { get; }
        public bool IsMaxRawScoreSupported { get; }
        public bool IsNomenclatureSupported { get; }
        public bool IsAssessmentItemLearningStandardsItemCreatable { get; }
        public Func<IAssessmentItemLearningStandard, bool> IsAssessmentItemLearningStandardIncluded { get; }
        public bool IsAssessmentItemPossibleResponsesItemCreatable { get; }
        public Func<IAssessmentItemPossibleResponse, bool> IsAssessmentItemPossibleResponseIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentItemCategoryDescriptor":
                    return IsAssessmentItemCategoryDescriptorSupported;
                case "AssessmentItemLearningStandards":
                    return IsAssessmentItemLearningStandardsSupported;
                case "AssessmentItemPossibleResponses":
                    return IsAssessmentItemPossibleResponsesSupported;
                case "AssessmentItemURI":
                    return IsAssessmentItemURISupported;
                case "AssessmentReference":
                    return IsAssessmentReferenceSupported;
                case "ExpectedTimeAssessed":
                    return IsExpectedTimeAssessedSupported;
                case "ItemText":
                    return IsItemTextSupported;
                case "MaxRawScore":
                    return IsMaxRawScoreSupported;
                case "Nomenclature":
                    return IsNomenclatureSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "IdentificationCode":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentItemLearningStandards":
                    return IsAssessmentItemLearningStandardsItemCreatable;
                case "AssessmentItemPossibleResponses":
                    return IsAssessmentItemPossibleResponsesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentItemCategoryDescriptor model.
    /// </summary>
    public interface IAssessmentItemCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssessmentItemCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentItemCategoryDescriptorMappingContract : IMappingContract
    {
        public AssessmentItemCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentItemCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentItemLearningStandard model.
    /// </summary>
    public interface IAssessmentItemLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessmentItem AssessmentItem { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentItemLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentItemLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentItemPossibleResponse model.
    /// </summary>
    public interface IAssessmentItemPossibleResponse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessmentItem AssessmentItem { get; set; }
        
        string ResponseValue { get; set; }

        // Non-PK properties
        bool? CorrectResponse { get; set; }
        string ResponseDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentItemPossibleResponseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentItemPossibleResponseMappingContract(
            bool isCorrectResponseSupported,
            bool isResponseDescriptionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCorrectResponseSupported = isCorrectResponseSupported;
            IsResponseDescriptionSupported = isResponseDescriptionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCorrectResponseSupported { get; }
        public bool IsResponseDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CorrectResponse":
                    return IsCorrectResponseSupported;
                case "ResponseDescription":
                    return IsResponseDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ResponseValue":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentItemResultDescriptor model.
    /// </summary>
    public interface IAssessmentItemResultDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssessmentItemResultDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentItemResultDescriptorMappingContract : IMappingContract
    {
        public AssessmentItemResultDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentItemResultDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentLanguage model.
    /// </summary>
    public interface IAssessmentLanguage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string LanguageDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentLanguageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentLanguageMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentPerformanceLevel model.
    /// </summary>
    public interface IAssessmentPerformanceLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }
        
        string PerformanceLevelDescriptor { get; set; }

        // Non-PK properties
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }
        string PerformanceLevelIndicatorName { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentPerformanceLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentPerformanceLevelMappingContract(
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isPerformanceLevelIndicatorNameSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsPerformanceLevelIndicatorNameSupported = isPerformanceLevelIndicatorNameSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsPerformanceLevelIndicatorNameSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "PerformanceLevelIndicatorName":
                    return IsPerformanceLevelIndicatorNameSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                case "PerformanceLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentPeriod model.
    /// </summary>
    public interface IAssessmentPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string AssessmentPeriodDescriptor { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentPeriodMappingContract(
            bool isBeginDateSupported,
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentPeriodDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentPeriodDescriptor model.
    /// </summary>
    public interface IAssessmentPeriodDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssessmentPeriodDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentPeriodDescriptorMappingContract : IMappingContract
    {
        public AssessmentPeriodDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentPeriodDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentPlatformType model.
    /// </summary>
    public interface IAssessmentPlatformType : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string PlatformTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentPlatformTypeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentPlatformTypeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PlatformTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentProgram model.
    /// </summary>
    public interface IAssessmentProgram : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentProgramMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentProgramMappingContract(
            bool isProgramReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsProgramReferenceSupported = isProgramReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsProgramReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentReportingMethodDescriptor model.
    /// </summary>
    public interface IAssessmentReportingMethodDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssessmentReportingMethodDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentReportingMethodDescriptorMappingContract : IMappingContract
    {
        public AssessmentReportingMethodDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentScore model.
    /// </summary>
    public interface IAssessmentScore : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }

        // Non-PK properties
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentScoreMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentScoreMappingContract(
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentScoreRangeLearningStandard model.
    /// </summary>
    public interface IAssessmentScoreRangeLearningStandard : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AssessmentIdentifier { get; set; }
        
        string Namespace { get; set; }
        
        string ScoreRangeId { get; set; }

        // Non-PK properties
        string AssessmentReportingMethodDescriptor { get; set; }
        string IdentificationCode { get; set; }
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IAssessmentScoreRangeLearningStandardLearningStandard> AssessmentScoreRangeLearningStandardLearningStandards { get; set; }

        // Resource reference data
        Guid? AssessmentResourceId { get; set; }
        string AssessmentDiscriminator { get; set; }
        Guid? ObjectiveAssessmentResourceId { get; set; }
        string ObjectiveAssessmentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentScoreRangeLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentScoreRangeLearningStandardMappingContract(
            bool isAssessmentReferenceSupported,
            bool isAssessmentReportingMethodDescriptorSupported,
            bool isAssessmentScoreRangeLearningStandardLearningStandardsSupported,
            bool isIdentificationCodeSupported,
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isObjectiveAssessmentReferenceSupported,
            bool isAssessmentScoreRangeLearningStandardLearningStandardsItemCreatable,
            Func<IAssessmentScoreRangeLearningStandardLearningStandard, bool> isAssessmentScoreRangeLearningStandardLearningStandardIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentReferenceSupported = isAssessmentReferenceSupported;
            IsAssessmentReportingMethodDescriptorSupported = isAssessmentReportingMethodDescriptorSupported;
            IsAssessmentScoreRangeLearningStandardLearningStandardsSupported = isAssessmentScoreRangeLearningStandardLearningStandardsSupported;
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsObjectiveAssessmentReferenceSupported = isObjectiveAssessmentReferenceSupported;
            IsAssessmentScoreRangeLearningStandardLearningStandardsItemCreatable = isAssessmentScoreRangeLearningStandardLearningStandardsItemCreatable;
            IsAssessmentScoreRangeLearningStandardLearningStandardIncluded = isAssessmentScoreRangeLearningStandardLearningStandardIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentReferenceSupported { get; }
        public bool IsAssessmentReportingMethodDescriptorSupported { get; }
        public bool IsAssessmentScoreRangeLearningStandardLearningStandardsSupported { get; }
        public bool IsIdentificationCodeSupported { get; }
        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsObjectiveAssessmentReferenceSupported { get; }
        public bool IsAssessmentScoreRangeLearningStandardLearningStandardsItemCreatable { get; }
        public Func<IAssessmentScoreRangeLearningStandardLearningStandard, bool> IsAssessmentScoreRangeLearningStandardLearningStandardIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentReference":
                    return IsAssessmentReferenceSupported;
                case "AssessmentReportingMethodDescriptor":
                    return IsAssessmentReportingMethodDescriptorSupported;
                case "AssessmentScoreRangeLearningStandardLearningStandards":
                    return IsAssessmentScoreRangeLearningStandardLearningStandardsSupported;
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "ObjectiveAssessmentReference":
                    return IsObjectiveAssessmentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "Namespace":
                    return true;
                case "ScoreRangeId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentScoreRangeLearningStandardLearningStandards":
                    return IsAssessmentScoreRangeLearningStandardLearningStandardsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentScoreRangeLearningStandardLearningStandard model.
    /// </summary>
    public interface IAssessmentScoreRangeLearningStandardLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessmentScoreRangeLearningStandard AssessmentScoreRangeLearningStandard { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentScoreRangeLearningStandardLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentScoreRangeLearningStandardLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssessmentSection model.
    /// </summary>
    public interface IAssessmentSection : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IAssessment Assessment { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssessmentSectionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public AssessmentSectionMappingContract(
            bool isSectionReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsSectionReferenceSupported = isSectionReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsSectionReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "SectionReference":
                    return IsSectionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AssignmentLateStatusDescriptor model.
    /// </summary>
    public interface IAssignmentLateStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AssignmentLateStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AssignmentLateStatusDescriptorMappingContract : IMappingContract
    {
        public AssignmentLateStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssignmentLateStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AttemptStatusDescriptor model.
    /// </summary>
    public interface IAttemptStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AttemptStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AttemptStatusDescriptorMappingContract : IMappingContract
    {
        public AttemptStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AttemptStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the AttendanceEventCategoryDescriptor model.
    /// </summary>
    public interface IAttendanceEventCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int AttendanceEventCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class AttendanceEventCategoryDescriptorMappingContract : IMappingContract
    {
        public AttendanceEventCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AttendanceEventCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BalanceSheetDimension model.
    /// </summary>
    public interface IBalanceSheetDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IBalanceSheetDimensionReportingTag> BalanceSheetDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BalanceSheetDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public BalanceSheetDimensionMappingContract(
            bool isBalanceSheetDimensionReportingTagsSupported,
            bool isCodeNameSupported,
            bool isBalanceSheetDimensionReportingTagsItemCreatable,
            Func<IBalanceSheetDimensionReportingTag, bool> isBalanceSheetDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBalanceSheetDimensionReportingTagsSupported = isBalanceSheetDimensionReportingTagsSupported;
            IsCodeNameSupported = isCodeNameSupported;
            IsBalanceSheetDimensionReportingTagsItemCreatable = isBalanceSheetDimensionReportingTagsItemCreatable;
            IsBalanceSheetDimensionReportingTagIncluded = isBalanceSheetDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBalanceSheetDimensionReportingTagsSupported { get; }
        public bool IsCodeNameSupported { get; }
        public bool IsBalanceSheetDimensionReportingTagsItemCreatable { get; }
        public Func<IBalanceSheetDimensionReportingTag, bool> IsBalanceSheetDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BalanceSheetDimensionReportingTags":
                    return IsBalanceSheetDimensionReportingTagsSupported;
                case "CodeName":
                    return IsCodeNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "BalanceSheetDimensionReportingTags":
                    return IsBalanceSheetDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BalanceSheetDimensionReportingTag model.
    /// </summary>
    public interface IBalanceSheetDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IBalanceSheetDimension BalanceSheetDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BalanceSheetDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public BalanceSheetDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BarrierToInternetAccessInResidenceDescriptor model.
    /// </summary>
    public interface IBarrierToInternetAccessInResidenceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int BarrierToInternetAccessInResidenceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BarrierToInternetAccessInResidenceDescriptorMappingContract : IMappingContract
    {
        public BarrierToInternetAccessInResidenceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BarrierToInternetAccessInResidenceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BehaviorDescriptor model.
    /// </summary>
    public interface IBehaviorDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int BehaviorDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BehaviorDescriptorMappingContract : IMappingContract
    {
        public BehaviorDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BehaviorDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BellSchedule model.
    /// </summary>
    public interface IBellSchedule : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string BellScheduleName { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties
        string AlternateDayName { get; set; }
        TimeSpan? EndTime { get; set; }
        TimeSpan? StartTime { get; set; }
        int? TotalInstructionalTime { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IBellScheduleClassPeriod> BellScheduleClassPeriods { get; set; }
        ICollection<IBellScheduleDate> BellScheduleDates { get; set; }
        ICollection<IBellScheduleGradeLevel> BellScheduleGradeLevels { get; set; }

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BellScheduleMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public BellScheduleMappingContract(
            bool isAlternateDayNameSupported,
            bool isBellScheduleClassPeriodsSupported,
            bool isBellScheduleDatesSupported,
            bool isBellScheduleGradeLevelsSupported,
            bool isEndTimeSupported,
            bool isSchoolReferenceSupported,
            bool isStartTimeSupported,
            bool isTotalInstructionalTimeSupported,
            bool isBellScheduleClassPeriodsItemCreatable,
            Func<IBellScheduleClassPeriod, bool> isBellScheduleClassPeriodIncluded,
            bool isBellScheduleDatesItemCreatable,
            Func<IBellScheduleDate, bool> isBellScheduleDateIncluded,
            bool isBellScheduleGradeLevelsItemCreatable,
            Func<IBellScheduleGradeLevel, bool> isBellScheduleGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAlternateDayNameSupported = isAlternateDayNameSupported;
            IsBellScheduleClassPeriodsSupported = isBellScheduleClassPeriodsSupported;
            IsBellScheduleDatesSupported = isBellScheduleDatesSupported;
            IsBellScheduleGradeLevelsSupported = isBellScheduleGradeLevelsSupported;
            IsEndTimeSupported = isEndTimeSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsStartTimeSupported = isStartTimeSupported;
            IsTotalInstructionalTimeSupported = isTotalInstructionalTimeSupported;
            IsBellScheduleClassPeriodsItemCreatable = isBellScheduleClassPeriodsItemCreatable;
            IsBellScheduleClassPeriodIncluded = isBellScheduleClassPeriodIncluded;
            IsBellScheduleDatesItemCreatable = isBellScheduleDatesItemCreatable;
            IsBellScheduleDateIncluded = isBellScheduleDateIncluded;
            IsBellScheduleGradeLevelsItemCreatable = isBellScheduleGradeLevelsItemCreatable;
            IsBellScheduleGradeLevelIncluded = isBellScheduleGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAlternateDayNameSupported { get; }
        public bool IsBellScheduleClassPeriodsSupported { get; }
        public bool IsBellScheduleDatesSupported { get; }
        public bool IsBellScheduleGradeLevelsSupported { get; }
        public bool IsEndTimeSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsStartTimeSupported { get; }
        public bool IsTotalInstructionalTimeSupported { get; }
        public bool IsBellScheduleClassPeriodsItemCreatable { get; }
        public Func<IBellScheduleClassPeriod, bool> IsBellScheduleClassPeriodIncluded { get; }
        public bool IsBellScheduleDatesItemCreatable { get; }
        public Func<IBellScheduleDate, bool> IsBellScheduleDateIncluded { get; }
        public bool IsBellScheduleGradeLevelsItemCreatable { get; }
        public Func<IBellScheduleGradeLevel, bool> IsBellScheduleGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AlternateDayName":
                    return IsAlternateDayNameSupported;
                case "BellScheduleClassPeriods":
                    return IsBellScheduleClassPeriodsSupported;
                case "BellScheduleDates":
                    return IsBellScheduleDatesSupported;
                case "BellScheduleGradeLevels":
                    return IsBellScheduleGradeLevelsSupported;
                case "EndTime":
                    return IsEndTimeSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "StartTime":
                    return IsStartTimeSupported;
                case "TotalInstructionalTime":
                    return IsTotalInstructionalTimeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BellScheduleName":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "BellScheduleClassPeriods":
                    return IsBellScheduleClassPeriodsItemCreatable;
                case "BellScheduleDates":
                    return IsBellScheduleDatesItemCreatable;
                case "BellScheduleGradeLevels":
                    return IsBellScheduleGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BellScheduleClassPeriod model.
    /// </summary>
    public interface IBellScheduleClassPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IBellSchedule BellSchedule { get; set; }
        
        string ClassPeriodName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ClassPeriodResourceId { get; set; }
        string ClassPeriodDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BellScheduleClassPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public BellScheduleClassPeriodMappingContract(
            bool isClassPeriodReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsClassPeriodReferenceSupported = isClassPeriodReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsClassPeriodReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ClassPeriodReference":
                    return IsClassPeriodReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ClassPeriodName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BellScheduleDate model.
    /// </summary>
    public interface IBellScheduleDate : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IBellSchedule BellSchedule { get; set; }
        
        DateTime Date { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BellScheduleDateMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public BellScheduleDateMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Date":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the BellScheduleGradeLevel model.
    /// </summary>
    public interface IBellScheduleGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IBellSchedule BellSchedule { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class BellScheduleGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public BellScheduleGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Calendar model.
    /// </summary>
    public interface ICalendar : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CalendarCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        string CalendarTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ICalendarGradeLevel> CalendarGradeLevels { get; set; }

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CalendarMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CalendarMappingContract(
            bool isCalendarGradeLevelsSupported,
            bool isCalendarTypeDescriptorSupported,
            bool isSchoolReferenceSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isCalendarGradeLevelsItemCreatable,
            Func<ICalendarGradeLevel, bool> isCalendarGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCalendarGradeLevelsSupported = isCalendarGradeLevelsSupported;
            IsCalendarTypeDescriptorSupported = isCalendarTypeDescriptorSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsCalendarGradeLevelsItemCreatable = isCalendarGradeLevelsItemCreatable;
            IsCalendarGradeLevelIncluded = isCalendarGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCalendarGradeLevelsSupported { get; }
        public bool IsCalendarTypeDescriptorSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsCalendarGradeLevelsItemCreatable { get; }
        public Func<ICalendarGradeLevel, bool> IsCalendarGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CalendarGradeLevels":
                    return IsCalendarGradeLevelsSupported;
                case "CalendarTypeDescriptor":
                    return IsCalendarTypeDescriptorSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CalendarCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CalendarGradeLevels":
                    return IsCalendarGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CalendarDate model.
    /// </summary>
    public interface ICalendarDate : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CalendarCode { get; set; }
        
        DateTime Date { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<ICalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; }

        // Resource reference data
        Guid? CalendarResourceId { get; set; }
        string CalendarDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CalendarDateMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CalendarDateMappingContract(
            bool isCalendarDateCalendarEventsSupported,
            bool isCalendarReferenceSupported,
            bool isCalendarDateCalendarEventsItemCreatable,
            Func<ICalendarDateCalendarEvent, bool> isCalendarDateCalendarEventIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCalendarDateCalendarEventsSupported = isCalendarDateCalendarEventsSupported;
            IsCalendarReferenceSupported = isCalendarReferenceSupported;
            IsCalendarDateCalendarEventsItemCreatable = isCalendarDateCalendarEventsItemCreatable;
            IsCalendarDateCalendarEventIncluded = isCalendarDateCalendarEventIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCalendarDateCalendarEventsSupported { get; }
        public bool IsCalendarReferenceSupported { get; }
        public bool IsCalendarDateCalendarEventsItemCreatable { get; }
        public Func<ICalendarDateCalendarEvent, bool> IsCalendarDateCalendarEventIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CalendarDateCalendarEvents":
                    return IsCalendarDateCalendarEventsSupported;
                case "CalendarReference":
                    return IsCalendarReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CalendarCode":
                    return true;
                case "Date":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CalendarDateCalendarEvents":
                    return IsCalendarDateCalendarEventsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CalendarDateCalendarEvent model.
    /// </summary>
    public interface ICalendarDateCalendarEvent : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICalendarDate CalendarDate { get; set; }
        
        string CalendarEventDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CalendarDateCalendarEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CalendarDateCalendarEventMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CalendarEventDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CalendarEventDescriptor model.
    /// </summary>
    public interface ICalendarEventDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CalendarEventDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CalendarEventDescriptorMappingContract : IMappingContract
    {
        public CalendarEventDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CalendarEventDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CalendarGradeLevel model.
    /// </summary>
    public interface ICalendarGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICalendar Calendar { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CalendarGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CalendarGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CalendarTypeDescriptor model.
    /// </summary>
    public interface ICalendarTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CalendarTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CalendarTypeDescriptorMappingContract : IMappingContract
    {
        public CalendarTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CalendarTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CareerPathwayDescriptor model.
    /// </summary>
    public interface ICareerPathwayDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CareerPathwayDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CareerPathwayDescriptorMappingContract : IMappingContract
    {
        public CareerPathwayDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CareerPathwayDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CharterApprovalAgencyTypeDescriptor model.
    /// </summary>
    public interface ICharterApprovalAgencyTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CharterApprovalAgencyTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CharterApprovalAgencyTypeDescriptorMappingContract : IMappingContract
    {
        public CharterApprovalAgencyTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CharterApprovalAgencyTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CharterStatusDescriptor model.
    /// </summary>
    public interface ICharterStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CharterStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CharterStatusDescriptorMappingContract : IMappingContract
    {
        public CharterStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CharterStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ChartOfAccount model.
    /// </summary>
    public interface IChartOfAccount : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string AccountName { get; set; }
        string AccountTypeDescriptor { get; set; }
        string BalanceSheetCode { get; set; }
        string FunctionCode { get; set; }
        string FundCode { get; set; }
        string ObjectCode { get; set; }
        string OperationalUnitCode { get; set; }
        string ProgramCode { get; set; }
        string ProjectCode { get; set; }
        string SourceCode { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IChartOfAccountReportingTag> ChartOfAccountReportingTags { get; set; }

        // Resource reference data
        Guid? BalanceSheetDimensionResourceId { get; set; }
        string BalanceSheetDimensionDiscriminator { get; set; }
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? FunctionDimensionResourceId { get; set; }
        string FunctionDimensionDiscriminator { get; set; }
        Guid? FundDimensionResourceId { get; set; }
        string FundDimensionDiscriminator { get; set; }
        Guid? ObjectDimensionResourceId { get; set; }
        string ObjectDimensionDiscriminator { get; set; }
        Guid? OperationalUnitDimensionResourceId { get; set; }
        string OperationalUnitDimensionDiscriminator { get; set; }
        Guid? ProgramDimensionResourceId { get; set; }
        string ProgramDimensionDiscriminator { get; set; }
        Guid? ProjectDimensionResourceId { get; set; }
        string ProjectDimensionDiscriminator { get; set; }
        Guid? SourceDimensionResourceId { get; set; }
        string SourceDimensionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ChartOfAccountMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ChartOfAccountMappingContract(
            bool isAccountNameSupported,
            bool isAccountTypeDescriptorSupported,
            bool isBalanceSheetCodeSupported,
            bool isBalanceSheetDimensionReferenceSupported,
            bool isChartOfAccountReportingTagsSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isFunctionCodeSupported,
            bool isFunctionDimensionReferenceSupported,
            bool isFundCodeSupported,
            bool isFundDimensionReferenceSupported,
            bool isObjectCodeSupported,
            bool isObjectDimensionReferenceSupported,
            bool isOperationalUnitCodeSupported,
            bool isOperationalUnitDimensionReferenceSupported,
            bool isProgramCodeSupported,
            bool isProgramDimensionReferenceSupported,
            bool isProjectCodeSupported,
            bool isProjectDimensionReferenceSupported,
            bool isSourceCodeSupported,
            bool isSourceDimensionReferenceSupported,
            bool isChartOfAccountReportingTagsItemCreatable,
            Func<IChartOfAccountReportingTag, bool> isChartOfAccountReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAccountNameSupported = isAccountNameSupported;
            IsAccountTypeDescriptorSupported = isAccountTypeDescriptorSupported;
            IsBalanceSheetCodeSupported = isBalanceSheetCodeSupported;
            IsBalanceSheetDimensionReferenceSupported = isBalanceSheetDimensionReferenceSupported;
            IsChartOfAccountReportingTagsSupported = isChartOfAccountReportingTagsSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsFunctionCodeSupported = isFunctionCodeSupported;
            IsFunctionDimensionReferenceSupported = isFunctionDimensionReferenceSupported;
            IsFundCodeSupported = isFundCodeSupported;
            IsFundDimensionReferenceSupported = isFundDimensionReferenceSupported;
            IsObjectCodeSupported = isObjectCodeSupported;
            IsObjectDimensionReferenceSupported = isObjectDimensionReferenceSupported;
            IsOperationalUnitCodeSupported = isOperationalUnitCodeSupported;
            IsOperationalUnitDimensionReferenceSupported = isOperationalUnitDimensionReferenceSupported;
            IsProgramCodeSupported = isProgramCodeSupported;
            IsProgramDimensionReferenceSupported = isProgramDimensionReferenceSupported;
            IsProjectCodeSupported = isProjectCodeSupported;
            IsProjectDimensionReferenceSupported = isProjectDimensionReferenceSupported;
            IsSourceCodeSupported = isSourceCodeSupported;
            IsSourceDimensionReferenceSupported = isSourceDimensionReferenceSupported;
            IsChartOfAccountReportingTagsItemCreatable = isChartOfAccountReportingTagsItemCreatable;
            IsChartOfAccountReportingTagIncluded = isChartOfAccountReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAccountNameSupported { get; }
        public bool IsAccountTypeDescriptorSupported { get; }
        public bool IsBalanceSheetCodeSupported { get; }
        public bool IsBalanceSheetDimensionReferenceSupported { get; }
        public bool IsChartOfAccountReportingTagsSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsFunctionCodeSupported { get; }
        public bool IsFunctionDimensionReferenceSupported { get; }
        public bool IsFundCodeSupported { get; }
        public bool IsFundDimensionReferenceSupported { get; }
        public bool IsObjectCodeSupported { get; }
        public bool IsObjectDimensionReferenceSupported { get; }
        public bool IsOperationalUnitCodeSupported { get; }
        public bool IsOperationalUnitDimensionReferenceSupported { get; }
        public bool IsProgramCodeSupported { get; }
        public bool IsProgramDimensionReferenceSupported { get; }
        public bool IsProjectCodeSupported { get; }
        public bool IsProjectDimensionReferenceSupported { get; }
        public bool IsSourceCodeSupported { get; }
        public bool IsSourceDimensionReferenceSupported { get; }
        public bool IsChartOfAccountReportingTagsItemCreatable { get; }
        public Func<IChartOfAccountReportingTag, bool> IsChartOfAccountReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AccountName":
                    return IsAccountNameSupported;
                case "AccountTypeDescriptor":
                    return IsAccountTypeDescriptorSupported;
                case "BalanceSheetCode":
                    return IsBalanceSheetCodeSupported;
                case "BalanceSheetDimensionReference":
                    return IsBalanceSheetDimensionReferenceSupported;
                case "ChartOfAccountReportingTags":
                    return IsChartOfAccountReportingTagsSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "FunctionCode":
                    return IsFunctionCodeSupported;
                case "FunctionDimensionReference":
                    return IsFunctionDimensionReferenceSupported;
                case "FundCode":
                    return IsFundCodeSupported;
                case "FundDimensionReference":
                    return IsFundDimensionReferenceSupported;
                case "ObjectCode":
                    return IsObjectCodeSupported;
                case "ObjectDimensionReference":
                    return IsObjectDimensionReferenceSupported;
                case "OperationalUnitCode":
                    return IsOperationalUnitCodeSupported;
                case "OperationalUnitDimensionReference":
                    return IsOperationalUnitDimensionReferenceSupported;
                case "ProgramCode":
                    return IsProgramCodeSupported;
                case "ProgramDimensionReference":
                    return IsProgramDimensionReferenceSupported;
                case "ProjectCode":
                    return IsProjectCodeSupported;
                case "ProjectDimensionReference":
                    return IsProjectDimensionReferenceSupported;
                case "SourceCode":
                    return IsSourceCodeSupported;
                case "SourceDimensionReference":
                    return IsSourceDimensionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ChartOfAccountReportingTags":
                    return IsChartOfAccountReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ChartOfAccountReportingTag model.
    /// </summary>
    public interface IChartOfAccountReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IChartOfAccount ChartOfAccount { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties
        string TagValue { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ChartOfAccountReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ChartOfAccountReportingTagMappingContract(
            bool isTagValueSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsTagValueSupported = isTagValueSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsTagValueSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "TagValue":
                    return IsTagValueSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CitizenshipStatusDescriptor model.
    /// </summary>
    public interface ICitizenshipStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CitizenshipStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CitizenshipStatusDescriptorMappingContract : IMappingContract
    {
        public CitizenshipStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CitizenshipStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ClassPeriod model.
    /// </summary>
    public interface IClassPeriod : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string ClassPeriodName { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties
        bool? OfficialAttendancePeriod { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IClassPeriodMeetingTime> ClassPeriodMeetingTimes { get; set; }

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ClassPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ClassPeriodMappingContract(
            bool isClassPeriodMeetingTimesSupported,
            bool isOfficialAttendancePeriodSupported,
            bool isSchoolReferenceSupported,
            bool isClassPeriodMeetingTimesItemCreatable,
            Func<IClassPeriodMeetingTime, bool> isClassPeriodMeetingTimeIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsClassPeriodMeetingTimesSupported = isClassPeriodMeetingTimesSupported;
            IsOfficialAttendancePeriodSupported = isOfficialAttendancePeriodSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsClassPeriodMeetingTimesItemCreatable = isClassPeriodMeetingTimesItemCreatable;
            IsClassPeriodMeetingTimeIncluded = isClassPeriodMeetingTimeIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsClassPeriodMeetingTimesSupported { get; }
        public bool IsOfficialAttendancePeriodSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsClassPeriodMeetingTimesItemCreatable { get; }
        public Func<IClassPeriodMeetingTime, bool> IsClassPeriodMeetingTimeIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ClassPeriodMeetingTimes":
                    return IsClassPeriodMeetingTimesSupported;
                case "OfficialAttendancePeriod":
                    return IsOfficialAttendancePeriodSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ClassPeriodName":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ClassPeriodMeetingTimes":
                    return IsClassPeriodMeetingTimesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ClassPeriodMeetingTime model.
    /// </summary>
    public interface IClassPeriodMeetingTime : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IClassPeriod ClassPeriod { get; set; }
        
        TimeSpan EndTime { get; set; }
        
        TimeSpan StartTime { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ClassPeriodMeetingTimeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ClassPeriodMeetingTimeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EndTime":
                    return true;
                case "StartTime":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ClassroomPositionDescriptor model.
    /// </summary>
    public interface IClassroomPositionDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ClassroomPositionDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ClassroomPositionDescriptorMappingContract : IMappingContract
    {
        public ClassroomPositionDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ClassroomPositionDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Cohort model.
    /// </summary>
    public interface ICohort : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CohortIdentifier { get; set; }
        
        int EducationOrganizationId { get; set; }

        // Non-PK properties
        string AcademicSubjectDescriptor { get; set; }
        string CohortDescription { get; set; }
        string CohortScopeDescriptor { get; set; }
        string CohortTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ICohortProgram> CohortPrograms { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CohortMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CohortMappingContract(
            bool isAcademicSubjectDescriptorSupported,
            bool isCohortDescriptionSupported,
            bool isCohortProgramsSupported,
            bool isCohortScopeDescriptorSupported,
            bool isCohortTypeDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isCohortProgramsItemCreatable,
            Func<ICohortProgram, bool> isCohortProgramIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAcademicSubjectDescriptorSupported = isAcademicSubjectDescriptorSupported;
            IsCohortDescriptionSupported = isCohortDescriptionSupported;
            IsCohortProgramsSupported = isCohortProgramsSupported;
            IsCohortScopeDescriptorSupported = isCohortScopeDescriptorSupported;
            IsCohortTypeDescriptorSupported = isCohortTypeDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsCohortProgramsItemCreatable = isCohortProgramsItemCreatable;
            IsCohortProgramIncluded = isCohortProgramIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAcademicSubjectDescriptorSupported { get; }
        public bool IsCohortDescriptionSupported { get; }
        public bool IsCohortProgramsSupported { get; }
        public bool IsCohortScopeDescriptorSupported { get; }
        public bool IsCohortTypeDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsCohortProgramsItemCreatable { get; }
        public Func<ICohortProgram, bool> IsCohortProgramIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AcademicSubjectDescriptor":
                    return IsAcademicSubjectDescriptorSupported;
                case "CohortDescription":
                    return IsCohortDescriptionSupported;
                case "CohortPrograms":
                    return IsCohortProgramsSupported;
                case "CohortScopeDescriptor":
                    return IsCohortScopeDescriptorSupported;
                case "CohortTypeDescriptor":
                    return IsCohortTypeDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CohortIdentifier":
                    return true;
                case "EducationOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CohortPrograms":
                    return IsCohortProgramsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CohortProgram model.
    /// </summary>
    public interface ICohortProgram : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICohort Cohort { get; set; }
        
        int ProgramEducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CohortProgramMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CohortProgramMappingContract(
            bool isProgramReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsProgramReferenceSupported = isProgramReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsProgramReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CohortScopeDescriptor model.
    /// </summary>
    public interface ICohortScopeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CohortScopeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CohortScopeDescriptorMappingContract : IMappingContract
    {
        public CohortScopeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CohortScopeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CohortTypeDescriptor model.
    /// </summary>
    public interface ICohortTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CohortTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CohortTypeDescriptorMappingContract : IMappingContract
    {
        public CohortTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CohortTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CohortYearTypeDescriptor model.
    /// </summary>
    public interface ICohortYearTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CohortYearTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CohortYearTypeDescriptorMappingContract : IMappingContract
    {
        public CohortYearTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CohortYearTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CommunityOrganization model.
    /// </summary>
    public interface ICommunityOrganization : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int CommunityOrganizationId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CommunityOrganizationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CommunityOrganizationMappingContract(
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CommunityOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CommunityProvider model.
    /// </summary>
    public interface ICommunityProvider : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int CommunityProviderId { get; set; }

        // Non-PK properties
        int? CommunityOrganizationId { get; set; }
        bool? LicenseExemptIndicator { get; set; }
        string ProviderCategoryDescriptor { get; set; }
        string ProviderProfitabilityDescriptor { get; set; }
        string ProviderStatusDescriptor { get; set; }
        bool? SchoolIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CommunityOrganizationResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CommunityProviderMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CommunityProviderMappingContract(
            bool isCommunityOrganizationIdSupported,
            bool isCommunityOrganizationReferenceSupported,
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isLicenseExemptIndicatorSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isProviderCategoryDescriptorSupported,
            bool isProviderProfitabilityDescriptorSupported,
            bool isProviderStatusDescriptorSupported,
            bool isSchoolIndicatorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCommunityOrganizationIdSupported = isCommunityOrganizationIdSupported;
            IsCommunityOrganizationReferenceSupported = isCommunityOrganizationReferenceSupported;
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsLicenseExemptIndicatorSupported = isLicenseExemptIndicatorSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsProviderCategoryDescriptorSupported = isProviderCategoryDescriptorSupported;
            IsProviderProfitabilityDescriptorSupported = isProviderProfitabilityDescriptorSupported;
            IsProviderStatusDescriptorSupported = isProviderStatusDescriptorSupported;
            IsSchoolIndicatorSupported = isSchoolIndicatorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCommunityOrganizationIdSupported { get; }
        public bool IsCommunityOrganizationReferenceSupported { get; }
        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsLicenseExemptIndicatorSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsProviderCategoryDescriptorSupported { get; }
        public bool IsProviderProfitabilityDescriptorSupported { get; }
        public bool IsProviderStatusDescriptorSupported { get; }
        public bool IsSchoolIndicatorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CommunityOrganizationId":
                    return IsCommunityOrganizationIdSupported;
                case "CommunityOrganizationReference":
                    return IsCommunityOrganizationReferenceSupported;
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "LicenseExemptIndicator":
                    return IsLicenseExemptIndicatorSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ProviderCategoryDescriptor":
                    return IsProviderCategoryDescriptorSupported;
                case "ProviderProfitabilityDescriptor":
                    return IsProviderProfitabilityDescriptorSupported;
                case "ProviderStatusDescriptor":
                    return IsProviderStatusDescriptorSupported;
                case "SchoolIndicator":
                    return IsSchoolIndicatorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CommunityProviderId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CommunityProviderLicense model.
    /// </summary>
    public interface ICommunityProviderLicense : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int CommunityProviderId { get; set; }
        
        string LicenseIdentifier { get; set; }
        
        string LicensingOrganization { get; set; }

        // Non-PK properties
        int? AuthorizedFacilityCapacity { get; set; }
        DateTime LicenseEffectiveDate { get; set; }
        DateTime? LicenseExpirationDate { get; set; }
        DateTime? LicenseIssueDate { get; set; }
        string LicenseStatusDescriptor { get; set; }
        string LicenseTypeDescriptor { get; set; }
        int? OldestAgeAuthorizedToServe { get; set; }
        int? YoungestAgeAuthorizedToServe { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CommunityProviderResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CommunityProviderLicenseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CommunityProviderLicenseMappingContract(
            bool isAuthorizedFacilityCapacitySupported,
            bool isCommunityProviderReferenceSupported,
            bool isLicenseEffectiveDateSupported,
            bool isLicenseExpirationDateSupported,
            bool isLicenseIssueDateSupported,
            bool isLicenseStatusDescriptorSupported,
            bool isLicenseTypeDescriptorSupported,
            bool isOldestAgeAuthorizedToServeSupported,
            bool isYoungestAgeAuthorizedToServeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAuthorizedFacilityCapacitySupported = isAuthorizedFacilityCapacitySupported;
            IsCommunityProviderReferenceSupported = isCommunityProviderReferenceSupported;
            IsLicenseEffectiveDateSupported = isLicenseEffectiveDateSupported;
            IsLicenseExpirationDateSupported = isLicenseExpirationDateSupported;
            IsLicenseIssueDateSupported = isLicenseIssueDateSupported;
            IsLicenseStatusDescriptorSupported = isLicenseStatusDescriptorSupported;
            IsLicenseTypeDescriptorSupported = isLicenseTypeDescriptorSupported;
            IsOldestAgeAuthorizedToServeSupported = isOldestAgeAuthorizedToServeSupported;
            IsYoungestAgeAuthorizedToServeSupported = isYoungestAgeAuthorizedToServeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAuthorizedFacilityCapacitySupported { get; }
        public bool IsCommunityProviderReferenceSupported { get; }
        public bool IsLicenseEffectiveDateSupported { get; }
        public bool IsLicenseExpirationDateSupported { get; }
        public bool IsLicenseIssueDateSupported { get; }
        public bool IsLicenseStatusDescriptorSupported { get; }
        public bool IsLicenseTypeDescriptorSupported { get; }
        public bool IsOldestAgeAuthorizedToServeSupported { get; }
        public bool IsYoungestAgeAuthorizedToServeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AuthorizedFacilityCapacity":
                    return IsAuthorizedFacilityCapacitySupported;
                case "CommunityProviderReference":
                    return IsCommunityProviderReferenceSupported;
                case "LicenseEffectiveDate":
                    return IsLicenseEffectiveDateSupported;
                case "LicenseExpirationDate":
                    return IsLicenseExpirationDateSupported;
                case "LicenseIssueDate":
                    return IsLicenseIssueDateSupported;
                case "LicenseStatusDescriptor":
                    return IsLicenseStatusDescriptorSupported;
                case "LicenseTypeDescriptor":
                    return IsLicenseTypeDescriptorSupported;
                case "OldestAgeAuthorizedToServe":
                    return IsOldestAgeAuthorizedToServeSupported;
                case "YoungestAgeAuthorizedToServe":
                    return IsYoungestAgeAuthorizedToServeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CommunityProviderId":
                    return true;
                case "LicenseIdentifier":
                    return true;
                case "LicensingOrganization":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CompetencyLevelDescriptor model.
    /// </summary>
    public interface ICompetencyLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CompetencyLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CompetencyLevelDescriptorMappingContract : IMappingContract
    {
        public CompetencyLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CompetencyLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CompetencyObjective model.
    /// </summary>
    public interface ICompetencyObjective : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string Objective { get; set; }
        
        string ObjectiveGradeLevelDescriptor { get; set; }

        // Non-PK properties
        string CompetencyObjectiveId { get; set; }
        string Description { get; set; }
        string SuccessCriteria { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CompetencyObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CompetencyObjectiveMappingContract(
            bool isCompetencyObjectiveIdSupported,
            bool isDescriptionSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isSuccessCriteriaSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCompetencyObjectiveIdSupported = isCompetencyObjectiveIdSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsSuccessCriteriaSupported = isSuccessCriteriaSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCompetencyObjectiveIdSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsSuccessCriteriaSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CompetencyObjectiveId":
                    return IsCompetencyObjectiveIdSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "SuccessCriteria":
                    return IsSuccessCriteriaSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "Objective":
                    return true;
                case "ObjectiveGradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ContactTypeDescriptor model.
    /// </summary>
    public interface IContactTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ContactTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ContactTypeDescriptorMappingContract : IMappingContract
    {
        public ContactTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContactTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ContentClassDescriptor model.
    /// </summary>
    public interface IContentClassDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ContentClassDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ContentClassDescriptorMappingContract : IMappingContract
    {
        public ContentClassDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContentClassDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ContinuationOfServicesReasonDescriptor model.
    /// </summary>
    public interface IContinuationOfServicesReasonDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ContinuationOfServicesReasonDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ContinuationOfServicesReasonDescriptorMappingContract : IMappingContract
    {
        public ContinuationOfServicesReasonDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContinuationOfServicesReasonDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CostRateDescriptor model.
    /// </summary>
    public interface ICostRateDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CostRateDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CostRateDescriptorMappingContract : IMappingContract
    {
        public CostRateDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CostRateDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CountryDescriptor model.
    /// </summary>
    public interface ICountryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CountryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CountryDescriptorMappingContract : IMappingContract
    {
        public CountryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CountryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Course model.
    /// </summary>
    public interface ICourse : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CourseCode { get; set; }
        
        int EducationOrganizationId { get; set; }

        // Non-PK properties
        string AcademicSubjectDescriptor { get; set; }
        string CareerPathwayDescriptor { get; set; }
        string CourseDefinedByDescriptor { get; set; }
        string CourseDescription { get; set; }
        string CourseGPAApplicabilityDescriptor { get; set; }
        string CourseTitle { get; set; }
        DateTime? DateCourseAdopted { get; set; }
        bool? HighSchoolCourseRequirement { get; set; }
        int? MaxCompletionsForCredit { get; set; }
        decimal? MaximumAvailableCreditConversion { get; set; }
        decimal? MaximumAvailableCredits { get; set; }
        string MaximumAvailableCreditTypeDescriptor { get; set; }
        decimal? MinimumAvailableCreditConversion { get; set; }
        decimal? MinimumAvailableCredits { get; set; }
        string MinimumAvailableCreditTypeDescriptor { get; set; }
        int NumberOfParts { get; set; }
        int? TimeRequiredForCompletion { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ICourseCompetencyLevel> CourseCompetencyLevels { get; set; }
        ICollection<ICourseIdentificationCode> CourseIdentificationCodes { get; set; }
        ICollection<ICourseLearningObjective> CourseLearningObjectives { get; set; }
        ICollection<ICourseLearningStandard> CourseLearningStandards { get; set; }
        ICollection<ICourseLevelCharacteristic> CourseLevelCharacteristics { get; set; }
        ICollection<ICourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseMappingContract(
            bool isAcademicSubjectDescriptorSupported,
            bool isCareerPathwayDescriptorSupported,
            bool isCourseCompetencyLevelsSupported,
            bool isCourseDefinedByDescriptorSupported,
            bool isCourseDescriptionSupported,
            bool isCourseGPAApplicabilityDescriptorSupported,
            bool isCourseIdentificationCodesSupported,
            bool isCourseLearningObjectivesSupported,
            bool isCourseLearningStandardsSupported,
            bool isCourseLevelCharacteristicsSupported,
            bool isCourseOfferedGradeLevelsSupported,
            bool isCourseTitleSupported,
            bool isDateCourseAdoptedSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isHighSchoolCourseRequirementSupported,
            bool isMaxCompletionsForCreditSupported,
            bool isMaximumAvailableCreditConversionSupported,
            bool isMaximumAvailableCreditsSupported,
            bool isMaximumAvailableCreditTypeDescriptorSupported,
            bool isMinimumAvailableCreditConversionSupported,
            bool isMinimumAvailableCreditsSupported,
            bool isMinimumAvailableCreditTypeDescriptorSupported,
            bool isNumberOfPartsSupported,
            bool isTimeRequiredForCompletionSupported,
            bool isCourseCompetencyLevelsItemCreatable,
            Func<ICourseCompetencyLevel, bool> isCourseCompetencyLevelIncluded,
            bool isCourseIdentificationCodesItemCreatable,
            Func<ICourseIdentificationCode, bool> isCourseIdentificationCodeIncluded,
            bool isCourseLearningObjectivesItemCreatable,
            Func<ICourseLearningObjective, bool> isCourseLearningObjectiveIncluded,
            bool isCourseLearningStandardsItemCreatable,
            Func<ICourseLearningStandard, bool> isCourseLearningStandardIncluded,
            bool isCourseLevelCharacteristicsItemCreatable,
            Func<ICourseLevelCharacteristic, bool> isCourseLevelCharacteristicIncluded,
            bool isCourseOfferedGradeLevelsItemCreatable,
            Func<ICourseOfferedGradeLevel, bool> isCourseOfferedGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAcademicSubjectDescriptorSupported = isAcademicSubjectDescriptorSupported;
            IsCareerPathwayDescriptorSupported = isCareerPathwayDescriptorSupported;
            IsCourseCompetencyLevelsSupported = isCourseCompetencyLevelsSupported;
            IsCourseDefinedByDescriptorSupported = isCourseDefinedByDescriptorSupported;
            IsCourseDescriptionSupported = isCourseDescriptionSupported;
            IsCourseGPAApplicabilityDescriptorSupported = isCourseGPAApplicabilityDescriptorSupported;
            IsCourseIdentificationCodesSupported = isCourseIdentificationCodesSupported;
            IsCourseLearningObjectivesSupported = isCourseLearningObjectivesSupported;
            IsCourseLearningStandardsSupported = isCourseLearningStandardsSupported;
            IsCourseLevelCharacteristicsSupported = isCourseLevelCharacteristicsSupported;
            IsCourseOfferedGradeLevelsSupported = isCourseOfferedGradeLevelsSupported;
            IsCourseTitleSupported = isCourseTitleSupported;
            IsDateCourseAdoptedSupported = isDateCourseAdoptedSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsHighSchoolCourseRequirementSupported = isHighSchoolCourseRequirementSupported;
            IsMaxCompletionsForCreditSupported = isMaxCompletionsForCreditSupported;
            IsMaximumAvailableCreditConversionSupported = isMaximumAvailableCreditConversionSupported;
            IsMaximumAvailableCreditsSupported = isMaximumAvailableCreditsSupported;
            IsMaximumAvailableCreditTypeDescriptorSupported = isMaximumAvailableCreditTypeDescriptorSupported;
            IsMinimumAvailableCreditConversionSupported = isMinimumAvailableCreditConversionSupported;
            IsMinimumAvailableCreditsSupported = isMinimumAvailableCreditsSupported;
            IsMinimumAvailableCreditTypeDescriptorSupported = isMinimumAvailableCreditTypeDescriptorSupported;
            IsNumberOfPartsSupported = isNumberOfPartsSupported;
            IsTimeRequiredForCompletionSupported = isTimeRequiredForCompletionSupported;
            IsCourseCompetencyLevelsItemCreatable = isCourseCompetencyLevelsItemCreatable;
            IsCourseCompetencyLevelIncluded = isCourseCompetencyLevelIncluded;
            IsCourseIdentificationCodesItemCreatable = isCourseIdentificationCodesItemCreatable;
            IsCourseIdentificationCodeIncluded = isCourseIdentificationCodeIncluded;
            IsCourseLearningObjectivesItemCreatable = isCourseLearningObjectivesItemCreatable;
            IsCourseLearningObjectiveIncluded = isCourseLearningObjectiveIncluded;
            IsCourseLearningStandardsItemCreatable = isCourseLearningStandardsItemCreatable;
            IsCourseLearningStandardIncluded = isCourseLearningStandardIncluded;
            IsCourseLevelCharacteristicsItemCreatable = isCourseLevelCharacteristicsItemCreatable;
            IsCourseLevelCharacteristicIncluded = isCourseLevelCharacteristicIncluded;
            IsCourseOfferedGradeLevelsItemCreatable = isCourseOfferedGradeLevelsItemCreatable;
            IsCourseOfferedGradeLevelIncluded = isCourseOfferedGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAcademicSubjectDescriptorSupported { get; }
        public bool IsCareerPathwayDescriptorSupported { get; }
        public bool IsCourseCompetencyLevelsSupported { get; }
        public bool IsCourseDefinedByDescriptorSupported { get; }
        public bool IsCourseDescriptionSupported { get; }
        public bool IsCourseGPAApplicabilityDescriptorSupported { get; }
        public bool IsCourseIdentificationCodesSupported { get; }
        public bool IsCourseLearningObjectivesSupported { get; }
        public bool IsCourseLearningStandardsSupported { get; }
        public bool IsCourseLevelCharacteristicsSupported { get; }
        public bool IsCourseOfferedGradeLevelsSupported { get; }
        public bool IsCourseTitleSupported { get; }
        public bool IsDateCourseAdoptedSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsHighSchoolCourseRequirementSupported { get; }
        public bool IsMaxCompletionsForCreditSupported { get; }
        public bool IsMaximumAvailableCreditConversionSupported { get; }
        public bool IsMaximumAvailableCreditsSupported { get; }
        public bool IsMaximumAvailableCreditTypeDescriptorSupported { get; }
        public bool IsMinimumAvailableCreditConversionSupported { get; }
        public bool IsMinimumAvailableCreditsSupported { get; }
        public bool IsMinimumAvailableCreditTypeDescriptorSupported { get; }
        public bool IsNumberOfPartsSupported { get; }
        public bool IsTimeRequiredForCompletionSupported { get; }
        public bool IsCourseCompetencyLevelsItemCreatable { get; }
        public Func<ICourseCompetencyLevel, bool> IsCourseCompetencyLevelIncluded { get; }
        public bool IsCourseIdentificationCodesItemCreatable { get; }
        public Func<ICourseIdentificationCode, bool> IsCourseIdentificationCodeIncluded { get; }
        public bool IsCourseLearningObjectivesItemCreatable { get; }
        public Func<ICourseLearningObjective, bool> IsCourseLearningObjectiveIncluded { get; }
        public bool IsCourseLearningStandardsItemCreatable { get; }
        public Func<ICourseLearningStandard, bool> IsCourseLearningStandardIncluded { get; }
        public bool IsCourseLevelCharacteristicsItemCreatable { get; }
        public Func<ICourseLevelCharacteristic, bool> IsCourseLevelCharacteristicIncluded { get; }
        public bool IsCourseOfferedGradeLevelsItemCreatable { get; }
        public Func<ICourseOfferedGradeLevel, bool> IsCourseOfferedGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AcademicSubjectDescriptor":
                    return IsAcademicSubjectDescriptorSupported;
                case "CareerPathwayDescriptor":
                    return IsCareerPathwayDescriptorSupported;
                case "CourseCompetencyLevels":
                    return IsCourseCompetencyLevelsSupported;
                case "CourseDefinedByDescriptor":
                    return IsCourseDefinedByDescriptorSupported;
                case "CourseDescription":
                    return IsCourseDescriptionSupported;
                case "CourseGPAApplicabilityDescriptor":
                    return IsCourseGPAApplicabilityDescriptorSupported;
                case "CourseIdentificationCodes":
                    return IsCourseIdentificationCodesSupported;
                case "CourseLearningObjectives":
                    return IsCourseLearningObjectivesSupported;
                case "CourseLearningStandards":
                    return IsCourseLearningStandardsSupported;
                case "CourseLevelCharacteristics":
                    return IsCourseLevelCharacteristicsSupported;
                case "CourseOfferedGradeLevels":
                    return IsCourseOfferedGradeLevelsSupported;
                case "CourseTitle":
                    return IsCourseTitleSupported;
                case "DateCourseAdopted":
                    return IsDateCourseAdoptedSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "HighSchoolCourseRequirement":
                    return IsHighSchoolCourseRequirementSupported;
                case "MaxCompletionsForCredit":
                    return IsMaxCompletionsForCreditSupported;
                case "MaximumAvailableCreditConversion":
                    return IsMaximumAvailableCreditConversionSupported;
                case "MaximumAvailableCredits":
                    return IsMaximumAvailableCreditsSupported;
                case "MaximumAvailableCreditTypeDescriptor":
                    return IsMaximumAvailableCreditTypeDescriptorSupported;
                case "MinimumAvailableCreditConversion":
                    return IsMinimumAvailableCreditConversionSupported;
                case "MinimumAvailableCredits":
                    return IsMinimumAvailableCreditsSupported;
                case "MinimumAvailableCreditTypeDescriptor":
                    return IsMinimumAvailableCreditTypeDescriptorSupported;
                case "NumberOfParts":
                    return IsNumberOfPartsSupported;
                case "TimeRequiredForCompletion":
                    return IsTimeRequiredForCompletionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseCode":
                    return true;
                case "EducationOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CourseCompetencyLevels":
                    return IsCourseCompetencyLevelsItemCreatable;
                case "CourseIdentificationCodes":
                    return IsCourseIdentificationCodesItemCreatable;
                case "CourseLearningObjectives":
                    return IsCourseLearningObjectivesItemCreatable;
                case "CourseLearningStandards":
                    return IsCourseLearningStandardsItemCreatable;
                case "CourseLevelCharacteristics":
                    return IsCourseLevelCharacteristicsItemCreatable;
                case "CourseOfferedGradeLevels":
                    return IsCourseOfferedGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseAttemptResultDescriptor model.
    /// </summary>
    public interface ICourseAttemptResultDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CourseAttemptResultDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseAttemptResultDescriptorMappingContract : IMappingContract
    {
        public CourseAttemptResultDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseAttemptResultDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseCompetencyLevel model.
    /// </summary>
    public interface ICourseCompetencyLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourse Course { get; set; }
        
        string CompetencyLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseCompetencyLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseCompetencyLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CompetencyLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseDefinedByDescriptor model.
    /// </summary>
    public interface ICourseDefinedByDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CourseDefinedByDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseDefinedByDescriptorMappingContract : IMappingContract
    {
        public CourseDefinedByDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseDefinedByDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseGPAApplicabilityDescriptor model.
    /// </summary>
    public interface ICourseGPAApplicabilityDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CourseGPAApplicabilityDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseGPAApplicabilityDescriptorMappingContract : IMappingContract
    {
        public CourseGPAApplicabilityDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseGPAApplicabilityDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseIdentificationCode model.
    /// </summary>
    public interface ICourseIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourse Course { get; set; }
        
        string CourseIdentificationSystemDescriptor { get; set; }

        // Non-PK properties
        string AssigningOrganizationIdentificationCode { get; set; }
        string CourseCatalogURL { get; set; }
        string IdentificationCode { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseIdentificationCodeMappingContract(
            bool isAssigningOrganizationIdentificationCodeSupported,
            bool isCourseCatalogURLSupported,
            bool isIdentificationCodeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssigningOrganizationIdentificationCodeSupported = isAssigningOrganizationIdentificationCodeSupported;
            IsCourseCatalogURLSupported = isCourseCatalogURLSupported;
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssigningOrganizationIdentificationCodeSupported { get; }
        public bool IsCourseCatalogURLSupported { get; }
        public bool IsIdentificationCodeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssigningOrganizationIdentificationCode":
                    return IsAssigningOrganizationIdentificationCodeSupported;
                case "CourseCatalogURL":
                    return IsCourseCatalogURLSupported;
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseIdentificationSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseIdentificationSystemDescriptor model.
    /// </summary>
    public interface ICourseIdentificationSystemDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CourseIdentificationSystemDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseIdentificationSystemDescriptorMappingContract : IMappingContract
    {
        public CourseIdentificationSystemDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseIdentificationSystemDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseLearningObjective model.
    /// </summary>
    public interface ICourseLearningObjective : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourse Course { get; set; }
        
        string LearningObjectiveId { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningObjectiveResourceId { get; set; }
        string LearningObjectiveDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseLearningObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseLearningObjectiveMappingContract(
            bool isLearningObjectiveReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningObjectiveReferenceSupported = isLearningObjectiveReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningObjectiveReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningObjectiveReference":
                    return IsLearningObjectiveReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningObjectiveId":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseLearningStandard model.
    /// </summary>
    public interface ICourseLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourse Course { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseLevelCharacteristic model.
    /// </summary>
    public interface ICourseLevelCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourse Course { get; set; }
        
        string CourseLevelCharacteristicDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseLevelCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseLevelCharacteristicMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseLevelCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseLevelCharacteristicDescriptor model.
    /// </summary>
    public interface ICourseLevelCharacteristicDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CourseLevelCharacteristicDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseLevelCharacteristicDescriptorMappingContract : IMappingContract
    {
        public CourseLevelCharacteristicDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseLevelCharacteristicDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseOfferedGradeLevel model.
    /// </summary>
    public interface ICourseOfferedGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourse Course { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseOfferedGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseOfferedGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseOffering model.
    /// </summary>
    public interface ICourseOffering : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties
        string CourseCode { get; set; }
        int EducationOrganizationId { get; set; }
        int? InstructionalTimePlanned { get; set; }
        string LocalCourseTitle { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ICourseOfferingCourseLevelCharacteristic> CourseOfferingCourseLevelCharacteristics { get; set; }
        ICollection<ICourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; }
        ICollection<ICourseOfferingOfferedGradeLevel> CourseOfferingOfferedGradeLevels { get; set; }

        // Resource reference data
        Guid? CourseResourceId { get; set; }
        string CourseDiscriminator { get; set; }
        Guid? SchoolResourceId { get; set; }
        Guid? SessionResourceId { get; set; }
        string SessionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseOfferingMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseOfferingMappingContract(
            bool isCourseCodeSupported,
            bool isCourseOfferingCourseLevelCharacteristicsSupported,
            bool isCourseOfferingCurriculumUsedsSupported,
            bool isCourseOfferingOfferedGradeLevelsSupported,
            bool isCourseReferenceSupported,
            bool isEducationOrganizationIdSupported,
            bool isInstructionalTimePlannedSupported,
            bool isLocalCourseTitleSupported,
            bool isSchoolReferenceSupported,
            bool isSessionReferenceSupported,
            bool isCourseOfferingCourseLevelCharacteristicsItemCreatable,
            Func<ICourseOfferingCourseLevelCharacteristic, bool> isCourseOfferingCourseLevelCharacteristicIncluded,
            bool isCourseOfferingCurriculumUsedsItemCreatable,
            Func<ICourseOfferingCurriculumUsed, bool> isCourseOfferingCurriculumUsedIncluded,
            bool isCourseOfferingOfferedGradeLevelsItemCreatable,
            Func<ICourseOfferingOfferedGradeLevel, bool> isCourseOfferingOfferedGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCourseCodeSupported = isCourseCodeSupported;
            IsCourseOfferingCourseLevelCharacteristicsSupported = isCourseOfferingCourseLevelCharacteristicsSupported;
            IsCourseOfferingCurriculumUsedsSupported = isCourseOfferingCurriculumUsedsSupported;
            IsCourseOfferingOfferedGradeLevelsSupported = isCourseOfferingOfferedGradeLevelsSupported;
            IsCourseReferenceSupported = isCourseReferenceSupported;
            IsEducationOrganizationIdSupported = isEducationOrganizationIdSupported;
            IsInstructionalTimePlannedSupported = isInstructionalTimePlannedSupported;
            IsLocalCourseTitleSupported = isLocalCourseTitleSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSessionReferenceSupported = isSessionReferenceSupported;
            IsCourseOfferingCourseLevelCharacteristicsItemCreatable = isCourseOfferingCourseLevelCharacteristicsItemCreatable;
            IsCourseOfferingCourseLevelCharacteristicIncluded = isCourseOfferingCourseLevelCharacteristicIncluded;
            IsCourseOfferingCurriculumUsedsItemCreatable = isCourseOfferingCurriculumUsedsItemCreatable;
            IsCourseOfferingCurriculumUsedIncluded = isCourseOfferingCurriculumUsedIncluded;
            IsCourseOfferingOfferedGradeLevelsItemCreatable = isCourseOfferingOfferedGradeLevelsItemCreatable;
            IsCourseOfferingOfferedGradeLevelIncluded = isCourseOfferingOfferedGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCourseCodeSupported { get; }
        public bool IsCourseOfferingCourseLevelCharacteristicsSupported { get; }
        public bool IsCourseOfferingCurriculumUsedsSupported { get; }
        public bool IsCourseOfferingOfferedGradeLevelsSupported { get; }
        public bool IsCourseReferenceSupported { get; }
        public bool IsEducationOrganizationIdSupported { get; }
        public bool IsInstructionalTimePlannedSupported { get; }
        public bool IsLocalCourseTitleSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSessionReferenceSupported { get; }
        public bool IsCourseOfferingCourseLevelCharacteristicsItemCreatable { get; }
        public Func<ICourseOfferingCourseLevelCharacteristic, bool> IsCourseOfferingCourseLevelCharacteristicIncluded { get; }
        public bool IsCourseOfferingCurriculumUsedsItemCreatable { get; }
        public Func<ICourseOfferingCurriculumUsed, bool> IsCourseOfferingCurriculumUsedIncluded { get; }
        public bool IsCourseOfferingOfferedGradeLevelsItemCreatable { get; }
        public Func<ICourseOfferingOfferedGradeLevel, bool> IsCourseOfferingOfferedGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CourseCode":
                    return IsCourseCodeSupported;
                case "CourseOfferingCourseLevelCharacteristics":
                    return IsCourseOfferingCourseLevelCharacteristicsSupported;
                case "CourseOfferingCurriculumUseds":
                    return IsCourseOfferingCurriculumUsedsSupported;
                case "CourseOfferingOfferedGradeLevels":
                    return IsCourseOfferingOfferedGradeLevelsSupported;
                case "CourseReference":
                    return IsCourseReferenceSupported;
                case "EducationOrganizationId":
                    return IsEducationOrganizationIdSupported;
                case "InstructionalTimePlanned":
                    return IsInstructionalTimePlannedSupported;
                case "LocalCourseTitle":
                    return IsLocalCourseTitleSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SessionReference":
                    return IsSessionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CourseOfferingCourseLevelCharacteristics":
                    return IsCourseOfferingCourseLevelCharacteristicsItemCreatable;
                case "CourseOfferingCurriculumUseds":
                    return IsCourseOfferingCurriculumUsedsItemCreatable;
                case "CourseOfferingOfferedGradeLevels":
                    return IsCourseOfferingOfferedGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseOfferingCourseLevelCharacteristic model.
    /// </summary>
    public interface ICourseOfferingCourseLevelCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseOffering CourseOffering { get; set; }
        
        string CourseLevelCharacteristicDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseOfferingCourseLevelCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseOfferingCourseLevelCharacteristicMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseLevelCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseOfferingCurriculumUsed model.
    /// </summary>
    public interface ICourseOfferingCurriculumUsed : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseOffering CourseOffering { get; set; }
        
        string CurriculumUsedDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseOfferingCurriculumUsedMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseOfferingCurriculumUsedMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CurriculumUsedDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseOfferingOfferedGradeLevel model.
    /// </summary>
    public interface ICourseOfferingOfferedGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseOffering CourseOffering { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseOfferingOfferedGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseOfferingOfferedGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseRepeatCodeDescriptor model.
    /// </summary>
    public interface ICourseRepeatCodeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CourseRepeatCodeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseRepeatCodeDescriptorMappingContract : IMappingContract
    {
        public CourseRepeatCodeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseRepeatCodeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseTranscript model.
    /// </summary>
    public interface ICourseTranscript : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CourseAttemptResultDescriptor { get; set; }
        
        string CourseCode { get; set; }
        
        int CourseEducationOrganizationId { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        short SchoolYear { get; set; }
        
        string StudentUniqueId { get; set; }
        
        string TermDescriptor { get; set; }

        // Non-PK properties
        string AlternativeCourseCode { get; set; }
        string AlternativeCourseTitle { get; set; }
        string AssigningOrganizationIdentificationCode { get; set; }
        decimal? AttemptedCreditConversion { get; set; }
        decimal? AttemptedCredits { get; set; }
        string AttemptedCreditTypeDescriptor { get; set; }
        string CourseCatalogURL { get; set; }
        string CourseRepeatCodeDescriptor { get; set; }
        string CourseTitle { get; set; }
        decimal? EarnedCreditConversion { get; set; }
        decimal EarnedCredits { get; set; }
        string EarnedCreditTypeDescriptor { get; set; }
        int? ExternalEducationOrganizationId { get; set; }
        string ExternalEducationOrganizationNameOfInstitution { get; set; }
        string FinalLetterGradeEarned { get; set; }
        decimal? FinalNumericGradeEarned { get; set; }
        string MethodCreditEarnedDescriptor { get; set; }
        string WhenTakenGradeLevelDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ICourseTranscriptAcademicSubject> CourseTranscriptAcademicSubjects { get; set; }
        ICollection<ICourseTranscriptAlternativeCourseIdentificationCode> CourseTranscriptAlternativeCourseIdentificationCodes { get; set; }
        ICollection<ICourseTranscriptCreditCategory> CourseTranscriptCreditCategories { get; set; }
        ICollection<ICourseTranscriptEarnedAdditionalCredits> CourseTranscriptEarnedAdditionalCredits { get; set; }
        ICollection<ICourseTranscriptPartialCourseTranscriptAwards> CourseTranscriptPartialCourseTranscriptAwards { get; set; }

        // Resource reference data
        Guid? CourseResourceId { get; set; }
        string CourseDiscriminator { get; set; }
        Guid? ExternalEducationOrganizationResourceId { get; set; }
        string ExternalEducationOrganizationDiscriminator { get; set; }
        Guid? StudentAcademicRecordResourceId { get; set; }
        string StudentAcademicRecordDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseTranscriptMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseTranscriptMappingContract(
            bool isAlternativeCourseCodeSupported,
            bool isAlternativeCourseTitleSupported,
            bool isAssigningOrganizationIdentificationCodeSupported,
            bool isAttemptedCreditConversionSupported,
            bool isAttemptedCreditsSupported,
            bool isAttemptedCreditTypeDescriptorSupported,
            bool isCourseCatalogURLSupported,
            bool isCourseReferenceSupported,
            bool isCourseRepeatCodeDescriptorSupported,
            bool isCourseTitleSupported,
            bool isCourseTranscriptAcademicSubjectsSupported,
            bool isCourseTranscriptAlternativeCourseIdentificationCodesSupported,
            bool isCourseTranscriptCreditCategoriesSupported,
            bool isCourseTranscriptEarnedAdditionalCreditsSupported,
            bool isCourseTranscriptPartialCourseTranscriptAwardsSupported,
            bool isEarnedCreditConversionSupported,
            bool isEarnedCreditsSupported,
            bool isEarnedCreditTypeDescriptorSupported,
            bool isExternalEducationOrganizationIdSupported,
            bool isExternalEducationOrganizationNameOfInstitutionSupported,
            bool isExternalEducationOrganizationReferenceSupported,
            bool isFinalLetterGradeEarnedSupported,
            bool isFinalNumericGradeEarnedSupported,
            bool isMethodCreditEarnedDescriptorSupported,
            bool isStudentAcademicRecordReferenceSupported,
            bool isWhenTakenGradeLevelDescriptorSupported,
            bool isCourseTranscriptAcademicSubjectsItemCreatable,
            Func<ICourseTranscriptAcademicSubject, bool> isCourseTranscriptAcademicSubjectIncluded,
            bool isCourseTranscriptAlternativeCourseIdentificationCodesItemCreatable,
            Func<ICourseTranscriptAlternativeCourseIdentificationCode, bool> isCourseTranscriptAlternativeCourseIdentificationCodeIncluded,
            bool isCourseTranscriptCreditCategoriesItemCreatable,
            Func<ICourseTranscriptCreditCategory, bool> isCourseTranscriptCreditCategoryIncluded,
            bool isCourseTranscriptEarnedAdditionalCreditsItemCreatable,
            Func<ICourseTranscriptEarnedAdditionalCredits, bool> isCourseTranscriptEarnedAdditionalCreditsIncluded,
            bool isCourseTranscriptPartialCourseTranscriptAwardsItemCreatable,
            Func<ICourseTranscriptPartialCourseTranscriptAwards, bool> isCourseTranscriptPartialCourseTranscriptAwardsIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAlternativeCourseCodeSupported = isAlternativeCourseCodeSupported;
            IsAlternativeCourseTitleSupported = isAlternativeCourseTitleSupported;
            IsAssigningOrganizationIdentificationCodeSupported = isAssigningOrganizationIdentificationCodeSupported;
            IsAttemptedCreditConversionSupported = isAttemptedCreditConversionSupported;
            IsAttemptedCreditsSupported = isAttemptedCreditsSupported;
            IsAttemptedCreditTypeDescriptorSupported = isAttemptedCreditTypeDescriptorSupported;
            IsCourseCatalogURLSupported = isCourseCatalogURLSupported;
            IsCourseReferenceSupported = isCourseReferenceSupported;
            IsCourseRepeatCodeDescriptorSupported = isCourseRepeatCodeDescriptorSupported;
            IsCourseTitleSupported = isCourseTitleSupported;
            IsCourseTranscriptAcademicSubjectsSupported = isCourseTranscriptAcademicSubjectsSupported;
            IsCourseTranscriptAlternativeCourseIdentificationCodesSupported = isCourseTranscriptAlternativeCourseIdentificationCodesSupported;
            IsCourseTranscriptCreditCategoriesSupported = isCourseTranscriptCreditCategoriesSupported;
            IsCourseTranscriptEarnedAdditionalCreditsSupported = isCourseTranscriptEarnedAdditionalCreditsSupported;
            IsCourseTranscriptPartialCourseTranscriptAwardsSupported = isCourseTranscriptPartialCourseTranscriptAwardsSupported;
            IsEarnedCreditConversionSupported = isEarnedCreditConversionSupported;
            IsEarnedCreditsSupported = isEarnedCreditsSupported;
            IsEarnedCreditTypeDescriptorSupported = isEarnedCreditTypeDescriptorSupported;
            IsExternalEducationOrganizationIdSupported = isExternalEducationOrganizationIdSupported;
            IsExternalEducationOrganizationNameOfInstitutionSupported = isExternalEducationOrganizationNameOfInstitutionSupported;
            IsExternalEducationOrganizationReferenceSupported = isExternalEducationOrganizationReferenceSupported;
            IsFinalLetterGradeEarnedSupported = isFinalLetterGradeEarnedSupported;
            IsFinalNumericGradeEarnedSupported = isFinalNumericGradeEarnedSupported;
            IsMethodCreditEarnedDescriptorSupported = isMethodCreditEarnedDescriptorSupported;
            IsStudentAcademicRecordReferenceSupported = isStudentAcademicRecordReferenceSupported;
            IsWhenTakenGradeLevelDescriptorSupported = isWhenTakenGradeLevelDescriptorSupported;
            IsCourseTranscriptAcademicSubjectsItemCreatable = isCourseTranscriptAcademicSubjectsItemCreatable;
            IsCourseTranscriptAcademicSubjectIncluded = isCourseTranscriptAcademicSubjectIncluded;
            IsCourseTranscriptAlternativeCourseIdentificationCodesItemCreatable = isCourseTranscriptAlternativeCourseIdentificationCodesItemCreatable;
            IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded = isCourseTranscriptAlternativeCourseIdentificationCodeIncluded;
            IsCourseTranscriptCreditCategoriesItemCreatable = isCourseTranscriptCreditCategoriesItemCreatable;
            IsCourseTranscriptCreditCategoryIncluded = isCourseTranscriptCreditCategoryIncluded;
            IsCourseTranscriptEarnedAdditionalCreditsItemCreatable = isCourseTranscriptEarnedAdditionalCreditsItemCreatable;
            IsCourseTranscriptEarnedAdditionalCreditsIncluded = isCourseTranscriptEarnedAdditionalCreditsIncluded;
            IsCourseTranscriptPartialCourseTranscriptAwardsItemCreatable = isCourseTranscriptPartialCourseTranscriptAwardsItemCreatable;
            IsCourseTranscriptPartialCourseTranscriptAwardsIncluded = isCourseTranscriptPartialCourseTranscriptAwardsIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAlternativeCourseCodeSupported { get; }
        public bool IsAlternativeCourseTitleSupported { get; }
        public bool IsAssigningOrganizationIdentificationCodeSupported { get; }
        public bool IsAttemptedCreditConversionSupported { get; }
        public bool IsAttemptedCreditsSupported { get; }
        public bool IsAttemptedCreditTypeDescriptorSupported { get; }
        public bool IsCourseCatalogURLSupported { get; }
        public bool IsCourseReferenceSupported { get; }
        public bool IsCourseRepeatCodeDescriptorSupported { get; }
        public bool IsCourseTitleSupported { get; }
        public bool IsCourseTranscriptAcademicSubjectsSupported { get; }
        public bool IsCourseTranscriptAlternativeCourseIdentificationCodesSupported { get; }
        public bool IsCourseTranscriptCreditCategoriesSupported { get; }
        public bool IsCourseTranscriptEarnedAdditionalCreditsSupported { get; }
        public bool IsCourseTranscriptPartialCourseTranscriptAwardsSupported { get; }
        public bool IsEarnedCreditConversionSupported { get; }
        public bool IsEarnedCreditsSupported { get; }
        public bool IsEarnedCreditTypeDescriptorSupported { get; }
        public bool IsExternalEducationOrganizationIdSupported { get; }
        public bool IsExternalEducationOrganizationNameOfInstitutionSupported { get; }
        public bool IsExternalEducationOrganizationReferenceSupported { get; }
        public bool IsFinalLetterGradeEarnedSupported { get; }
        public bool IsFinalNumericGradeEarnedSupported { get; }
        public bool IsMethodCreditEarnedDescriptorSupported { get; }
        public bool IsStudentAcademicRecordReferenceSupported { get; }
        public bool IsWhenTakenGradeLevelDescriptorSupported { get; }
        public bool IsCourseTranscriptAcademicSubjectsItemCreatable { get; }
        public Func<ICourseTranscriptAcademicSubject, bool> IsCourseTranscriptAcademicSubjectIncluded { get; }
        public bool IsCourseTranscriptAlternativeCourseIdentificationCodesItemCreatable { get; }
        public Func<ICourseTranscriptAlternativeCourseIdentificationCode, bool> IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded { get; }
        public bool IsCourseTranscriptCreditCategoriesItemCreatable { get; }
        public Func<ICourseTranscriptCreditCategory, bool> IsCourseTranscriptCreditCategoryIncluded { get; }
        public bool IsCourseTranscriptEarnedAdditionalCreditsItemCreatable { get; }
        public Func<ICourseTranscriptEarnedAdditionalCredits, bool> IsCourseTranscriptEarnedAdditionalCreditsIncluded { get; }
        public bool IsCourseTranscriptPartialCourseTranscriptAwardsItemCreatable { get; }
        public Func<ICourseTranscriptPartialCourseTranscriptAwards, bool> IsCourseTranscriptPartialCourseTranscriptAwardsIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AlternativeCourseCode":
                    return IsAlternativeCourseCodeSupported;
                case "AlternativeCourseTitle":
                    return IsAlternativeCourseTitleSupported;
                case "AssigningOrganizationIdentificationCode":
                    return IsAssigningOrganizationIdentificationCodeSupported;
                case "AttemptedCreditConversion":
                    return IsAttemptedCreditConversionSupported;
                case "AttemptedCredits":
                    return IsAttemptedCreditsSupported;
                case "AttemptedCreditTypeDescriptor":
                    return IsAttemptedCreditTypeDescriptorSupported;
                case "CourseCatalogURL":
                    return IsCourseCatalogURLSupported;
                case "CourseReference":
                    return IsCourseReferenceSupported;
                case "CourseRepeatCodeDescriptor":
                    return IsCourseRepeatCodeDescriptorSupported;
                case "CourseTitle":
                    return IsCourseTitleSupported;
                case "CourseTranscriptAcademicSubjects":
                    return IsCourseTranscriptAcademicSubjectsSupported;
                case "CourseTranscriptAlternativeCourseIdentificationCodes":
                    return IsCourseTranscriptAlternativeCourseIdentificationCodesSupported;
                case "CourseTranscriptCreditCategories":
                    return IsCourseTranscriptCreditCategoriesSupported;
                case "CourseTranscriptEarnedAdditionalCredits":
                    return IsCourseTranscriptEarnedAdditionalCreditsSupported;
                case "CourseTranscriptPartialCourseTranscriptAwards":
                    return IsCourseTranscriptPartialCourseTranscriptAwardsSupported;
                case "EarnedCreditConversion":
                    return IsEarnedCreditConversionSupported;
                case "EarnedCredits":
                    return IsEarnedCreditsSupported;
                case "EarnedCreditTypeDescriptor":
                    return IsEarnedCreditTypeDescriptorSupported;
                case "ExternalEducationOrganizationId":
                    return IsExternalEducationOrganizationIdSupported;
                case "ExternalEducationOrganizationNameOfInstitution":
                    return IsExternalEducationOrganizationNameOfInstitutionSupported;
                case "ExternalEducationOrganizationReference":
                    return IsExternalEducationOrganizationReferenceSupported;
                case "FinalLetterGradeEarned":
                    return IsFinalLetterGradeEarnedSupported;
                case "FinalNumericGradeEarned":
                    return IsFinalNumericGradeEarnedSupported;
                case "MethodCreditEarnedDescriptor":
                    return IsMethodCreditEarnedDescriptorSupported;
                case "StudentAcademicRecordReference":
                    return IsStudentAcademicRecordReferenceSupported;
                case "WhenTakenGradeLevelDescriptor":
                    return IsWhenTakenGradeLevelDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseAttemptResultDescriptor":
                    return true;
                case "CourseCode":
                    return true;
                case "CourseEducationOrganizationId":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "SchoolYear":
                    return true;
                case "StudentUniqueId":
                    return true;
                case "TermDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CourseTranscriptAcademicSubjects":
                    return IsCourseTranscriptAcademicSubjectsItemCreatable;
                case "CourseTranscriptAlternativeCourseIdentificationCodes":
                    return IsCourseTranscriptAlternativeCourseIdentificationCodesItemCreatable;
                case "CourseTranscriptCreditCategories":
                    return IsCourseTranscriptCreditCategoriesItemCreatable;
                case "CourseTranscriptEarnedAdditionalCredits":
                    return IsCourseTranscriptEarnedAdditionalCreditsItemCreatable;
                case "CourseTranscriptPartialCourseTranscriptAwards":
                    return IsCourseTranscriptPartialCourseTranscriptAwardsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseTranscriptAcademicSubject model.
    /// </summary>
    public interface ICourseTranscriptAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseTranscript CourseTranscript { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseTranscriptAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseTranscriptAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseTranscriptAlternativeCourseIdentificationCode model.
    /// </summary>
    public interface ICourseTranscriptAlternativeCourseIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseTranscript CourseTranscript { get; set; }
        
        string CourseIdentificationSystemDescriptor { get; set; }

        // Non-PK properties
        string AssigningOrganizationIdentificationCode { get; set; }
        string CourseCatalogURL { get; set; }
        string IdentificationCode { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseTranscriptAlternativeCourseIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseTranscriptAlternativeCourseIdentificationCodeMappingContract(
            bool isAssigningOrganizationIdentificationCodeSupported,
            bool isCourseCatalogURLSupported,
            bool isIdentificationCodeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssigningOrganizationIdentificationCodeSupported = isAssigningOrganizationIdentificationCodeSupported;
            IsCourseCatalogURLSupported = isCourseCatalogURLSupported;
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssigningOrganizationIdentificationCodeSupported { get; }
        public bool IsCourseCatalogURLSupported { get; }
        public bool IsIdentificationCodeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssigningOrganizationIdentificationCode":
                    return IsAssigningOrganizationIdentificationCodeSupported;
                case "CourseCatalogURL":
                    return IsCourseCatalogURLSupported;
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseIdentificationSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseTranscriptCreditCategory model.
    /// </summary>
    public interface ICourseTranscriptCreditCategory : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseTranscript CourseTranscript { get; set; }
        
        string CreditCategoryDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseTranscriptCreditCategoryMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseTranscriptCreditCategoryMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CreditCategoryDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseTranscriptEarnedAdditionalCredits model.
    /// </summary>
    public interface ICourseTranscriptEarnedAdditionalCredits : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseTranscript CourseTranscript { get; set; }
        
        string AdditionalCreditTypeDescriptor { get; set; }

        // Non-PK properties
        decimal Credits { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseTranscriptEarnedAdditionalCreditsMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseTranscriptEarnedAdditionalCreditsMappingContract(
            bool isCreditsSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCreditsSupported = isCreditsSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCreditsSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Credits":
                    return IsCreditsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AdditionalCreditTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CourseTranscriptPartialCourseTranscriptAwards model.
    /// </summary>
    public interface ICourseTranscriptPartialCourseTranscriptAwards : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICourseTranscript CourseTranscript { get; set; }
        
        DateTime AwardDate { get; set; }

        // Non-PK properties
        decimal EarnedCredits { get; set; }
        string LetterGradeEarned { get; set; }
        string MethodCreditEarnedDescriptor { get; set; }
        string NumericGradeEarned { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CourseTranscriptPartialCourseTranscriptAwardsMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CourseTranscriptPartialCourseTranscriptAwardsMappingContract(
            bool isEarnedCreditsSupported,
            bool isLetterGradeEarnedSupported,
            bool isMethodCreditEarnedDescriptorSupported,
            bool isNumericGradeEarnedSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEarnedCreditsSupported = isEarnedCreditsSupported;
            IsLetterGradeEarnedSupported = isLetterGradeEarnedSupported;
            IsMethodCreditEarnedDescriptorSupported = isMethodCreditEarnedDescriptorSupported;
            IsNumericGradeEarnedSupported = isNumericGradeEarnedSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEarnedCreditsSupported { get; }
        public bool IsLetterGradeEarnedSupported { get; }
        public bool IsMethodCreditEarnedDescriptorSupported { get; }
        public bool IsNumericGradeEarnedSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EarnedCredits":
                    return IsEarnedCreditsSupported;
                case "LetterGradeEarned":
                    return IsLetterGradeEarnedSupported;
                case "MethodCreditEarnedDescriptor":
                    return IsMethodCreditEarnedDescriptorSupported;
                case "NumericGradeEarned":
                    return IsNumericGradeEarnedSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AwardDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Credential model.
    /// </summary>
    public interface ICredential : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CredentialIdentifier { get; set; }
        
        string StateOfIssueStateAbbreviationDescriptor { get; set; }

        // Non-PK properties
        string CredentialFieldDescriptor { get; set; }
        string CredentialTypeDescriptor { get; set; }
        DateTime? EffectiveDate { get; set; }
        DateTime? ExpirationDate { get; set; }
        DateTime IssuanceDate { get; set; }
        string Namespace { get; set; }
        string TeachingCredentialBasisDescriptor { get; set; }
        string TeachingCredentialDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ICredentialAcademicSubject> CredentialAcademicSubjects { get; set; }
        ICollection<ICredentialEndorsement> CredentialEndorsements { get; set; }
        ICollection<ICredentialGradeLevel> CredentialGradeLevels { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CredentialMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CredentialMappingContract(
            bool isCredentialAcademicSubjectsSupported,
            bool isCredentialEndorsementsSupported,
            bool isCredentialFieldDescriptorSupported,
            bool isCredentialGradeLevelsSupported,
            bool isCredentialTypeDescriptorSupported,
            bool isEffectiveDateSupported,
            bool isExpirationDateSupported,
            bool isIssuanceDateSupported,
            bool isNamespaceSupported,
            bool isTeachingCredentialBasisDescriptorSupported,
            bool isTeachingCredentialDescriptorSupported,
            bool isCredentialAcademicSubjectsItemCreatable,
            Func<ICredentialAcademicSubject, bool> isCredentialAcademicSubjectIncluded,
            bool isCredentialEndorsementsItemCreatable,
            Func<ICredentialEndorsement, bool> isCredentialEndorsementIncluded,
            bool isCredentialGradeLevelsItemCreatable,
            Func<ICredentialGradeLevel, bool> isCredentialGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCredentialAcademicSubjectsSupported = isCredentialAcademicSubjectsSupported;
            IsCredentialEndorsementsSupported = isCredentialEndorsementsSupported;
            IsCredentialFieldDescriptorSupported = isCredentialFieldDescriptorSupported;
            IsCredentialGradeLevelsSupported = isCredentialGradeLevelsSupported;
            IsCredentialTypeDescriptorSupported = isCredentialTypeDescriptorSupported;
            IsEffectiveDateSupported = isEffectiveDateSupported;
            IsExpirationDateSupported = isExpirationDateSupported;
            IsIssuanceDateSupported = isIssuanceDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsTeachingCredentialBasisDescriptorSupported = isTeachingCredentialBasisDescriptorSupported;
            IsTeachingCredentialDescriptorSupported = isTeachingCredentialDescriptorSupported;
            IsCredentialAcademicSubjectsItemCreatable = isCredentialAcademicSubjectsItemCreatable;
            IsCredentialAcademicSubjectIncluded = isCredentialAcademicSubjectIncluded;
            IsCredentialEndorsementsItemCreatable = isCredentialEndorsementsItemCreatable;
            IsCredentialEndorsementIncluded = isCredentialEndorsementIncluded;
            IsCredentialGradeLevelsItemCreatable = isCredentialGradeLevelsItemCreatable;
            IsCredentialGradeLevelIncluded = isCredentialGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCredentialAcademicSubjectsSupported { get; }
        public bool IsCredentialEndorsementsSupported { get; }
        public bool IsCredentialFieldDescriptorSupported { get; }
        public bool IsCredentialGradeLevelsSupported { get; }
        public bool IsCredentialTypeDescriptorSupported { get; }
        public bool IsEffectiveDateSupported { get; }
        public bool IsExpirationDateSupported { get; }
        public bool IsIssuanceDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsTeachingCredentialBasisDescriptorSupported { get; }
        public bool IsTeachingCredentialDescriptorSupported { get; }
        public bool IsCredentialAcademicSubjectsItemCreatable { get; }
        public Func<ICredentialAcademicSubject, bool> IsCredentialAcademicSubjectIncluded { get; }
        public bool IsCredentialEndorsementsItemCreatable { get; }
        public Func<ICredentialEndorsement, bool> IsCredentialEndorsementIncluded { get; }
        public bool IsCredentialGradeLevelsItemCreatable { get; }
        public Func<ICredentialGradeLevel, bool> IsCredentialGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CredentialAcademicSubjects":
                    return IsCredentialAcademicSubjectsSupported;
                case "CredentialEndorsements":
                    return IsCredentialEndorsementsSupported;
                case "CredentialFieldDescriptor":
                    return IsCredentialFieldDescriptorSupported;
                case "CredentialGradeLevels":
                    return IsCredentialGradeLevelsSupported;
                case "CredentialTypeDescriptor":
                    return IsCredentialTypeDescriptorSupported;
                case "EffectiveDate":
                    return IsEffectiveDateSupported;
                case "ExpirationDate":
                    return IsExpirationDateSupported;
                case "IssuanceDate":
                    return IsIssuanceDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "TeachingCredentialBasisDescriptor":
                    return IsTeachingCredentialBasisDescriptorSupported;
                case "TeachingCredentialDescriptor":
                    return IsTeachingCredentialDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CredentialIdentifier":
                    return true;
                case "StateOfIssueStateAbbreviationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "CredentialAcademicSubjects":
                    return IsCredentialAcademicSubjectsItemCreatable;
                case "CredentialEndorsements":
                    return IsCredentialEndorsementsItemCreatable;
                case "CredentialGradeLevels":
                    return IsCredentialGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CredentialAcademicSubject model.
    /// </summary>
    public interface ICredentialAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICredential Credential { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CredentialAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CredentialAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CredentialEndorsement model.
    /// </summary>
    public interface ICredentialEndorsement : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICredential Credential { get; set; }
        
        string CredentialEndorsementX { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CredentialEndorsementMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CredentialEndorsementMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CredentialEndorsement":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CredentialFieldDescriptor model.
    /// </summary>
    public interface ICredentialFieldDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CredentialFieldDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CredentialFieldDescriptorMappingContract : IMappingContract
    {
        public CredentialFieldDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CredentialFieldDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CredentialGradeLevel model.
    /// </summary>
    public interface ICredentialGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ICredential Credential { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CredentialGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public CredentialGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CredentialTypeDescriptor model.
    /// </summary>
    public interface ICredentialTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CredentialTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CredentialTypeDescriptorMappingContract : IMappingContract
    {
        public CredentialTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CredentialTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CreditCategoryDescriptor model.
    /// </summary>
    public interface ICreditCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CreditCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CreditCategoryDescriptorMappingContract : IMappingContract
    {
        public CreditCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CreditCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CreditTypeDescriptor model.
    /// </summary>
    public interface ICreditTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CreditTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CreditTypeDescriptorMappingContract : IMappingContract
    {
        public CreditTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CreditTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CTEProgramServiceDescriptor model.
    /// </summary>
    public interface ICTEProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CTEProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CTEProgramServiceDescriptorMappingContract : IMappingContract
    {
        public CTEProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CTEProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the CurriculumUsedDescriptor model.
    /// </summary>
    public interface ICurriculumUsedDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int CurriculumUsedDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class CurriculumUsedDescriptorMappingContract : IMappingContract
    {
        public CurriculumUsedDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CurriculumUsedDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DeliveryMethodDescriptor model.
    /// </summary>
    public interface IDeliveryMethodDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DeliveryMethodDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DeliveryMethodDescriptorMappingContract : IMappingContract
    {
        public DeliveryMethodDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DeliveryMethodDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Descriptor model.
    /// </summary>
    public interface IDescriptor : IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DescriptorId { get; set; }

        // Non-PK properties
        string CodeValue { get; set; }
        string Description { get; set; }
        DateTime? EffectiveBeginDate { get; set; }
        DateTime? EffectiveEndDate { get; set; }
        string Namespace { get; set; }
        string ShortDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DescriptorMappingContract : IMappingContract
    {
        public DescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DescriptorMapping model.
    /// </summary>
    public interface IDescriptorMapping : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string MappedNamespace { get; set; }
        
        string MappedValue { get; set; }
        
        string Namespace { get; set; }
        
        string Value { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IDescriptorMappingModelEntity> DescriptorMappingModelEntities { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DescriptorMappingMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DescriptorMappingMappingContract(
            bool isDescriptorMappingModelEntitiesSupported,
            bool isDescriptorMappingModelEntitiesItemCreatable,
            Func<IDescriptorMappingModelEntity, bool> isDescriptorMappingModelEntityIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDescriptorMappingModelEntitiesSupported = isDescriptorMappingModelEntitiesSupported;
            IsDescriptorMappingModelEntitiesItemCreatable = isDescriptorMappingModelEntitiesItemCreatable;
            IsDescriptorMappingModelEntityIncluded = isDescriptorMappingModelEntityIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDescriptorMappingModelEntitiesSupported { get; }
        public bool IsDescriptorMappingModelEntitiesItemCreatable { get; }
        public Func<IDescriptorMappingModelEntity, bool> IsDescriptorMappingModelEntityIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DescriptorMappingModelEntities":
                    return IsDescriptorMappingModelEntitiesSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MappedNamespace":
                    return true;
                case "MappedValue":
                    return true;
                case "Namespace":
                    return true;
                case "Value":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "DescriptorMappingModelEntities":
                    return IsDescriptorMappingModelEntitiesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DescriptorMappingModelEntity model.
    /// </summary>
    public interface IDescriptorMappingModelEntity : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDescriptorMapping DescriptorMapping { get; set; }
        
        string ModelEntityDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DescriptorMappingModelEntityMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DescriptorMappingModelEntityMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ModelEntityDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DiagnosisDescriptor model.
    /// </summary>
    public interface IDiagnosisDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DiagnosisDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DiagnosisDescriptorMappingContract : IMappingContract
    {
        public DiagnosisDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiagnosisDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DiplomaLevelDescriptor model.
    /// </summary>
    public interface IDiplomaLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DiplomaLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DiplomaLevelDescriptorMappingContract : IMappingContract
    {
        public DiplomaLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiplomaLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DiplomaTypeDescriptor model.
    /// </summary>
    public interface IDiplomaTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DiplomaTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DiplomaTypeDescriptorMappingContract : IMappingContract
    {
        public DiplomaTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiplomaTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisabilityDescriptor model.
    /// </summary>
    public interface IDisabilityDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DisabilityDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisabilityDescriptorMappingContract : IMappingContract
    {
        public DisabilityDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisabilityDesignationDescriptor model.
    /// </summary>
    public interface IDisabilityDesignationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DisabilityDesignationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisabilityDesignationDescriptorMappingContract : IMappingContract
    {
        public DisabilityDesignationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDesignationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisabilityDeterminationSourceTypeDescriptor model.
    /// </summary>
    public interface IDisabilityDeterminationSourceTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DisabilityDeterminationSourceTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisabilityDeterminationSourceTypeDescriptorMappingContract : IMappingContract
    {
        public DisabilityDeterminationSourceTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDeterminationSourceTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineAction model.
    /// </summary>
    public interface IDisciplineAction : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string DisciplineActionIdentifier { get; set; }
        
        DateTime DisciplineDate { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        decimal? ActualDisciplineActionLength { get; set; }
        int? AssignmentSchoolId { get; set; }
        decimal? DisciplineActionLength { get; set; }
        string DisciplineActionLengthDifferenceReasonDescriptor { get; set; }
        bool? IEPPlacementMeetingIndicator { get; set; }
        bool? ReceivedEducationServicesDuringExpulsion { get; set; }
        bool? RelatedToZeroTolerancePolicy { get; set; }
        int ResponsibilitySchoolId { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IDisciplineActionDiscipline> DisciplineActionDisciplines { get; set; }
        ICollection<IDisciplineActionStaff> DisciplineActionStaffs { get; set; }
        ICollection<IDisciplineActionStudentDisciplineIncidentAssociation> DisciplineActionStudentDisciplineIncidentAssociations { get; set; }
        ICollection<IDisciplineActionStudentDisciplineIncidentBehaviorAssociation> DisciplineActionStudentDisciplineIncidentBehaviorAssociations { get; set; }

        // Resource reference data
        Guid? AssignmentSchoolResourceId { get; set; }
        Guid? ResponsibilitySchoolResourceId { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineActionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineActionMappingContract(
            bool isActualDisciplineActionLengthSupported,
            bool isAssignmentSchoolIdSupported,
            bool isAssignmentSchoolReferenceSupported,
            bool isDisciplineActionDisciplinesSupported,
            bool isDisciplineActionLengthSupported,
            bool isDisciplineActionLengthDifferenceReasonDescriptorSupported,
            bool isDisciplineActionStaffsSupported,
            bool isDisciplineActionStudentDisciplineIncidentAssociationsSupported,
            bool isDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported,
            bool isIEPPlacementMeetingIndicatorSupported,
            bool isReceivedEducationServicesDuringExpulsionSupported,
            bool isRelatedToZeroTolerancePolicySupported,
            bool isResponsibilitySchoolIdSupported,
            bool isResponsibilitySchoolReferenceSupported,
            bool isStudentReferenceSupported,
            bool isDisciplineActionDisciplinesItemCreatable,
            Func<IDisciplineActionDiscipline, bool> isDisciplineActionDisciplineIncluded,
            bool isDisciplineActionStaffsItemCreatable,
            Func<IDisciplineActionStaff, bool> isDisciplineActionStaffIncluded,
            bool isDisciplineActionStudentDisciplineIncidentAssociationsItemCreatable,
            Func<IDisciplineActionStudentDisciplineIncidentAssociation, bool> isDisciplineActionStudentDisciplineIncidentAssociationIncluded,
            bool isDisciplineActionStudentDisciplineIncidentBehaviorAssociationsItemCreatable,
            Func<IDisciplineActionStudentDisciplineIncidentBehaviorAssociation, bool> isDisciplineActionStudentDisciplineIncidentBehaviorAssociationIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsActualDisciplineActionLengthSupported = isActualDisciplineActionLengthSupported;
            IsAssignmentSchoolIdSupported = isAssignmentSchoolIdSupported;
            IsAssignmentSchoolReferenceSupported = isAssignmentSchoolReferenceSupported;
            IsDisciplineActionDisciplinesSupported = isDisciplineActionDisciplinesSupported;
            IsDisciplineActionLengthSupported = isDisciplineActionLengthSupported;
            IsDisciplineActionLengthDifferenceReasonDescriptorSupported = isDisciplineActionLengthDifferenceReasonDescriptorSupported;
            IsDisciplineActionStaffsSupported = isDisciplineActionStaffsSupported;
            IsDisciplineActionStudentDisciplineIncidentAssociationsSupported = isDisciplineActionStudentDisciplineIncidentAssociationsSupported;
            IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported = isDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported;
            IsIEPPlacementMeetingIndicatorSupported = isIEPPlacementMeetingIndicatorSupported;
            IsReceivedEducationServicesDuringExpulsionSupported = isReceivedEducationServicesDuringExpulsionSupported;
            IsRelatedToZeroTolerancePolicySupported = isRelatedToZeroTolerancePolicySupported;
            IsResponsibilitySchoolIdSupported = isResponsibilitySchoolIdSupported;
            IsResponsibilitySchoolReferenceSupported = isResponsibilitySchoolReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsDisciplineActionDisciplinesItemCreatable = isDisciplineActionDisciplinesItemCreatable;
            IsDisciplineActionDisciplineIncluded = isDisciplineActionDisciplineIncluded;
            IsDisciplineActionStaffsItemCreatable = isDisciplineActionStaffsItemCreatable;
            IsDisciplineActionStaffIncluded = isDisciplineActionStaffIncluded;
            IsDisciplineActionStudentDisciplineIncidentAssociationsItemCreatable = isDisciplineActionStudentDisciplineIncidentAssociationsItemCreatable;
            IsDisciplineActionStudentDisciplineIncidentAssociationIncluded = isDisciplineActionStudentDisciplineIncidentAssociationIncluded;
            IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsItemCreatable = isDisciplineActionStudentDisciplineIncidentBehaviorAssociationsItemCreatable;
            IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationIncluded = isDisciplineActionStudentDisciplineIncidentBehaviorAssociationIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsActualDisciplineActionLengthSupported { get; }
        public bool IsAssignmentSchoolIdSupported { get; }
        public bool IsAssignmentSchoolReferenceSupported { get; }
        public bool IsDisciplineActionDisciplinesSupported { get; }
        public bool IsDisciplineActionLengthSupported { get; }
        public bool IsDisciplineActionLengthDifferenceReasonDescriptorSupported { get; }
        public bool IsDisciplineActionStaffsSupported { get; }
        public bool IsDisciplineActionStudentDisciplineIncidentAssociationsSupported { get; }
        public bool IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported { get; }
        public bool IsIEPPlacementMeetingIndicatorSupported { get; }
        public bool IsReceivedEducationServicesDuringExpulsionSupported { get; }
        public bool IsRelatedToZeroTolerancePolicySupported { get; }
        public bool IsResponsibilitySchoolIdSupported { get; }
        public bool IsResponsibilitySchoolReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsDisciplineActionDisciplinesItemCreatable { get; }
        public Func<IDisciplineActionDiscipline, bool> IsDisciplineActionDisciplineIncluded { get; }
        public bool IsDisciplineActionStaffsItemCreatable { get; }
        public Func<IDisciplineActionStaff, bool> IsDisciplineActionStaffIncluded { get; }
        public bool IsDisciplineActionStudentDisciplineIncidentAssociationsItemCreatable { get; }
        public Func<IDisciplineActionStudentDisciplineIncidentAssociation, bool> IsDisciplineActionStudentDisciplineIncidentAssociationIncluded { get; }
        public bool IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsItemCreatable { get; }
        public Func<IDisciplineActionStudentDisciplineIncidentBehaviorAssociation, bool> IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ActualDisciplineActionLength":
                    return IsActualDisciplineActionLengthSupported;
                case "AssignmentSchoolId":
                    return IsAssignmentSchoolIdSupported;
                case "AssignmentSchoolReference":
                    return IsAssignmentSchoolReferenceSupported;
                case "DisciplineActionDisciplines":
                    return IsDisciplineActionDisciplinesSupported;
                case "DisciplineActionLength":
                    return IsDisciplineActionLengthSupported;
                case "DisciplineActionLengthDifferenceReasonDescriptor":
                    return IsDisciplineActionLengthDifferenceReasonDescriptorSupported;
                case "DisciplineActionStaffs":
                    return IsDisciplineActionStaffsSupported;
                case "DisciplineActionStudentDisciplineIncidentAssociations":
                    return IsDisciplineActionStudentDisciplineIncidentAssociationsSupported;
                case "DisciplineActionStudentDisciplineIncidentBehaviorAssociations":
                    return IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported;
                case "IEPPlacementMeetingIndicator":
                    return IsIEPPlacementMeetingIndicatorSupported;
                case "ReceivedEducationServicesDuringExpulsion":
                    return IsReceivedEducationServicesDuringExpulsionSupported;
                case "RelatedToZeroTolerancePolicy":
                    return IsRelatedToZeroTolerancePolicySupported;
                case "ResponsibilitySchoolId":
                    return IsResponsibilitySchoolIdSupported;
                case "ResponsibilitySchoolReference":
                    return IsResponsibilitySchoolReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineActionIdentifier":
                    return true;
                case "DisciplineDate":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "DisciplineActionDisciplines":
                    return IsDisciplineActionDisciplinesItemCreatable;
                case "DisciplineActionStaffs":
                    return IsDisciplineActionStaffsItemCreatable;
                case "DisciplineActionStudentDisciplineIncidentAssociations":
                    return IsDisciplineActionStudentDisciplineIncidentAssociationsItemCreatable;
                case "DisciplineActionStudentDisciplineIncidentBehaviorAssociations":
                    return IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineActionDiscipline model.
    /// </summary>
    public interface IDisciplineActionDiscipline : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineAction DisciplineAction { get; set; }
        
        string DisciplineDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineActionDisciplineMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineActionDisciplineMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineActionLengthDifferenceReasonDescriptor model.
    /// </summary>
    public interface IDisciplineActionLengthDifferenceReasonDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DisciplineActionLengthDifferenceReasonDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineActionLengthDifferenceReasonDescriptorMappingContract : IMappingContract
    {
        public DisciplineActionLengthDifferenceReasonDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineActionLengthDifferenceReasonDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineActionStaff model.
    /// </summary>
    public interface IDisciplineActionStaff : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineAction DisciplineAction { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineActionStaffMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineActionStaffMappingContract(
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineActionStudentDisciplineIncidentAssociation model.
    /// </summary>
    public interface IDisciplineActionStudentDisciplineIncidentAssociation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineAction DisciplineAction { get; set; }
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StudentDisciplineIncidentAssociationResourceId { get; set; }
        string StudentDisciplineIncidentAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineActionStudentDisciplineIncidentAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineActionStudentDisciplineIncidentAssociationMappingContract(
            bool isStudentDisciplineIncidentAssociationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentDisciplineIncidentAssociationReferenceSupported = isStudentDisciplineIncidentAssociationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentDisciplineIncidentAssociationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentDisciplineIncidentAssociationReference":
                    return IsStudentDisciplineIncidentAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineActionStudentDisciplineIncidentBehaviorAssociation model.
    /// </summary>
    public interface IDisciplineActionStudentDisciplineIncidentBehaviorAssociation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineAction DisciplineAction { get; set; }
        
        string BehaviorDescriptor { get; set; }
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StudentDisciplineIncidentBehaviorAssociationResourceId { get; set; }
        string StudentDisciplineIncidentBehaviorAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineActionStudentDisciplineIncidentBehaviorAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineActionStudentDisciplineIncidentBehaviorAssociationMappingContract(
            bool isStudentDisciplineIncidentBehaviorAssociationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentDisciplineIncidentBehaviorAssociationReferenceSupported = isStudentDisciplineIncidentBehaviorAssociationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentDisciplineIncidentBehaviorAssociationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentDisciplineIncidentBehaviorAssociationReference":
                    return IsStudentDisciplineIncidentBehaviorAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BehaviorDescriptor":
                    return true;
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineDescriptor model.
    /// </summary>
    public interface IDisciplineDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DisciplineDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineDescriptorMappingContract : IMappingContract
    {
        public DisciplineDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineIncident model.
    /// </summary>
    public interface IDisciplineIncident : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties
        string CaseNumber { get; set; }
        decimal? IncidentCost { get; set; }
        DateTime IncidentDate { get; set; }
        string IncidentDescription { get; set; }
        string IncidentLocationDescriptor { get; set; }
        TimeSpan? IncidentTime { get; set; }
        bool? ReportedToLawEnforcement { get; set; }
        string ReporterDescriptionDescriptor { get; set; }
        string ReporterName { get; set; }
        string StaffUniqueId { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IDisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; }
        ICollection<IDisciplineIncidentExternalParticipant> DisciplineIncidentExternalParticipants { get; set; }
        ICollection<IDisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; }

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineIncidentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineIncidentMappingContract(
            bool isCaseNumberSupported,
            bool isDisciplineIncidentBehaviorsSupported,
            bool isDisciplineIncidentExternalParticipantsSupported,
            bool isDisciplineIncidentWeaponsSupported,
            bool isIncidentCostSupported,
            bool isIncidentDateSupported,
            bool isIncidentDescriptionSupported,
            bool isIncidentLocationDescriptorSupported,
            bool isIncidentTimeSupported,
            bool isReportedToLawEnforcementSupported,
            bool isReporterDescriptionDescriptorSupported,
            bool isReporterNameSupported,
            bool isSchoolReferenceSupported,
            bool isStaffReferenceSupported,
            bool isStaffUniqueIdSupported,
            bool isDisciplineIncidentBehaviorsItemCreatable,
            Func<IDisciplineIncidentBehavior, bool> isDisciplineIncidentBehaviorIncluded,
            bool isDisciplineIncidentExternalParticipantsItemCreatable,
            Func<IDisciplineIncidentExternalParticipant, bool> isDisciplineIncidentExternalParticipantIncluded,
            bool isDisciplineIncidentWeaponsItemCreatable,
            Func<IDisciplineIncidentWeapon, bool> isDisciplineIncidentWeaponIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCaseNumberSupported = isCaseNumberSupported;
            IsDisciplineIncidentBehaviorsSupported = isDisciplineIncidentBehaviorsSupported;
            IsDisciplineIncidentExternalParticipantsSupported = isDisciplineIncidentExternalParticipantsSupported;
            IsDisciplineIncidentWeaponsSupported = isDisciplineIncidentWeaponsSupported;
            IsIncidentCostSupported = isIncidentCostSupported;
            IsIncidentDateSupported = isIncidentDateSupported;
            IsIncidentDescriptionSupported = isIncidentDescriptionSupported;
            IsIncidentLocationDescriptorSupported = isIncidentLocationDescriptorSupported;
            IsIncidentTimeSupported = isIncidentTimeSupported;
            IsReportedToLawEnforcementSupported = isReportedToLawEnforcementSupported;
            IsReporterDescriptionDescriptorSupported = isReporterDescriptionDescriptorSupported;
            IsReporterNameSupported = isReporterNameSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStaffUniqueIdSupported = isStaffUniqueIdSupported;
            IsDisciplineIncidentBehaviorsItemCreatable = isDisciplineIncidentBehaviorsItemCreatable;
            IsDisciplineIncidentBehaviorIncluded = isDisciplineIncidentBehaviorIncluded;
            IsDisciplineIncidentExternalParticipantsItemCreatable = isDisciplineIncidentExternalParticipantsItemCreatable;
            IsDisciplineIncidentExternalParticipantIncluded = isDisciplineIncidentExternalParticipantIncluded;
            IsDisciplineIncidentWeaponsItemCreatable = isDisciplineIncidentWeaponsItemCreatable;
            IsDisciplineIncidentWeaponIncluded = isDisciplineIncidentWeaponIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCaseNumberSupported { get; }
        public bool IsDisciplineIncidentBehaviorsSupported { get; }
        public bool IsDisciplineIncidentExternalParticipantsSupported { get; }
        public bool IsDisciplineIncidentWeaponsSupported { get; }
        public bool IsIncidentCostSupported { get; }
        public bool IsIncidentDateSupported { get; }
        public bool IsIncidentDescriptionSupported { get; }
        public bool IsIncidentLocationDescriptorSupported { get; }
        public bool IsIncidentTimeSupported { get; }
        public bool IsReportedToLawEnforcementSupported { get; }
        public bool IsReporterDescriptionDescriptorSupported { get; }
        public bool IsReporterNameSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStaffUniqueIdSupported { get; }
        public bool IsDisciplineIncidentBehaviorsItemCreatable { get; }
        public Func<IDisciplineIncidentBehavior, bool> IsDisciplineIncidentBehaviorIncluded { get; }
        public bool IsDisciplineIncidentExternalParticipantsItemCreatable { get; }
        public Func<IDisciplineIncidentExternalParticipant, bool> IsDisciplineIncidentExternalParticipantIncluded { get; }
        public bool IsDisciplineIncidentWeaponsItemCreatable { get; }
        public Func<IDisciplineIncidentWeapon, bool> IsDisciplineIncidentWeaponIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CaseNumber":
                    return IsCaseNumberSupported;
                case "DisciplineIncidentBehaviors":
                    return IsDisciplineIncidentBehaviorsSupported;
                case "DisciplineIncidentExternalParticipants":
                    return IsDisciplineIncidentExternalParticipantsSupported;
                case "DisciplineIncidentWeapons":
                    return IsDisciplineIncidentWeaponsSupported;
                case "IncidentCost":
                    return IsIncidentCostSupported;
                case "IncidentDate":
                    return IsIncidentDateSupported;
                case "IncidentDescription":
                    return IsIncidentDescriptionSupported;
                case "IncidentLocationDescriptor":
                    return IsIncidentLocationDescriptorSupported;
                case "IncidentTime":
                    return IsIncidentTimeSupported;
                case "ReportedToLawEnforcement":
                    return IsReportedToLawEnforcementSupported;
                case "ReporterDescriptionDescriptor":
                    return IsReporterDescriptionDescriptorSupported;
                case "ReporterName":
                    return IsReporterNameSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StaffUniqueId":
                    return IsStaffUniqueIdSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "DisciplineIncidentBehaviors":
                    return IsDisciplineIncidentBehaviorsItemCreatable;
                case "DisciplineIncidentExternalParticipants":
                    return IsDisciplineIncidentExternalParticipantsItemCreatable;
                case "DisciplineIncidentWeapons":
                    return IsDisciplineIncidentWeaponsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineIncidentBehavior model.
    /// </summary>
    public interface IDisciplineIncidentBehavior : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineIncident DisciplineIncident { get; set; }
        
        string BehaviorDescriptor { get; set; }

        // Non-PK properties
        string BehaviorDetailedDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineIncidentBehaviorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineIncidentBehaviorMappingContract(
            bool isBehaviorDetailedDescriptionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBehaviorDetailedDescriptionSupported = isBehaviorDetailedDescriptionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBehaviorDetailedDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BehaviorDetailedDescription":
                    return IsBehaviorDetailedDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BehaviorDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineIncidentExternalParticipant model.
    /// </summary>
    public interface IDisciplineIncidentExternalParticipant : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineIncident DisciplineIncident { get; set; }
        
        string DisciplineIncidentParticipationCodeDescriptor { get; set; }
        
        string FirstName { get; set; }
        
        string LastSurname { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineIncidentExternalParticipantMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineIncidentExternalParticipantMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineIncidentParticipationCodeDescriptor":
                    return true;
                case "FirstName":
                    return true;
                case "LastSurname":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineIncidentParticipationCodeDescriptor model.
    /// </summary>
    public interface IDisciplineIncidentParticipationCodeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int DisciplineIncidentParticipationCodeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineIncidentParticipationCodeDescriptorMappingContract : IMappingContract
    {
        public DisciplineIncidentParticipationCodeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineIncidentParticipationCodeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the DisciplineIncidentWeapon model.
    /// </summary>
    public interface IDisciplineIncidentWeapon : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IDisciplineIncident DisciplineIncident { get; set; }
        
        string WeaponDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class DisciplineIncidentWeaponMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public DisciplineIncidentWeaponMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "WeaponDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationalEnvironmentDescriptor model.
    /// </summary>
    public interface IEducationalEnvironmentDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EducationalEnvironmentDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationalEnvironmentDescriptorMappingContract : IMappingContract
    {
        public EducationalEnvironmentDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationalEnvironmentDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContent model.
    /// </summary>
    public interface IEducationContent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string ContentIdentifier { get; set; }

        // Non-PK properties
        bool? AdditionalAuthorsIndicator { get; set; }
        string ContentClassDescriptor { get; set; }
        decimal? Cost { get; set; }
        string CostRateDescriptor { get; set; }
        string Description { get; set; }
        string InteractivityStyleDescriptor { get; set; }
        string LearningResourceMetadataURI { get; set; }
        string LearningStandardId { get; set; }
        string Namespace { get; set; }
        DateTime? PublicationDate { get; set; }
        short? PublicationYear { get; set; }
        string Publisher { get; set; }
        string ShortDescription { get; set; }
        string TimeRequired { get; set; }
        string UseRightsURL { get; set; }
        string Version { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IEducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; }
        ICollection<IEducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; }
        ICollection<IEducationContentAuthor> EducationContentAuthors { get; set; }
        ICollection<IEducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; }
        ICollection<IEducationContentDerivativeSourceLearningResourceMetadataURI> EducationContentDerivativeSourceLearningResourceMetadataURIs { get; set; }
        ICollection<IEducationContentDerivativeSourceURI> EducationContentDerivativeSourceURIs { get; set; }
        ICollection<IEducationContentLanguage> EducationContentLanguages { get; set; }

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentMappingContract(
            bool isAdditionalAuthorsIndicatorSupported,
            bool isContentClassDescriptorSupported,
            bool isCostSupported,
            bool isCostRateDescriptorSupported,
            bool isDescriptionSupported,
            bool isEducationContentAppropriateGradeLevelsSupported,
            bool isEducationContentAppropriateSexesSupported,
            bool isEducationContentAuthorsSupported,
            bool isEducationContentDerivativeSourceEducationContentsSupported,
            bool isEducationContentDerivativeSourceLearningResourceMetadataURIsSupported,
            bool isEducationContentDerivativeSourceURIsSupported,
            bool isEducationContentLanguagesSupported,
            bool isInteractivityStyleDescriptorSupported,
            bool isLearningResourceMetadataURISupported,
            bool isLearningStandardIdSupported,
            bool isLearningStandardReferenceSupported,
            bool isNamespaceSupported,
            bool isPublicationDateSupported,
            bool isPublicationYearSupported,
            bool isPublisherSupported,
            bool isShortDescriptionSupported,
            bool isTimeRequiredSupported,
            bool isUseRightsURLSupported,
            bool isVersionSupported,
            bool isEducationContentAppropriateGradeLevelsItemCreatable,
            Func<IEducationContentAppropriateGradeLevel, bool> isEducationContentAppropriateGradeLevelIncluded,
            bool isEducationContentAppropriateSexesItemCreatable,
            Func<IEducationContentAppropriateSex, bool> isEducationContentAppropriateSexIncluded,
            bool isEducationContentAuthorsItemCreatable,
            Func<IEducationContentAuthor, bool> isEducationContentAuthorIncluded,
            bool isEducationContentDerivativeSourceEducationContentsItemCreatable,
            Func<IEducationContentDerivativeSourceEducationContent, bool> isEducationContentDerivativeSourceEducationContentIncluded,
            bool isEducationContentDerivativeSourceLearningResourceMetadataURIsItemCreatable,
            Func<IEducationContentDerivativeSourceLearningResourceMetadataURI, bool> isEducationContentDerivativeSourceLearningResourceMetadataURIIncluded,
            bool isEducationContentDerivativeSourceURIsItemCreatable,
            Func<IEducationContentDerivativeSourceURI, bool> isEducationContentDerivativeSourceURIIncluded,
            bool isEducationContentLanguagesItemCreatable,
            Func<IEducationContentLanguage, bool> isEducationContentLanguageIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAdditionalAuthorsIndicatorSupported = isAdditionalAuthorsIndicatorSupported;
            IsContentClassDescriptorSupported = isContentClassDescriptorSupported;
            IsCostSupported = isCostSupported;
            IsCostRateDescriptorSupported = isCostRateDescriptorSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEducationContentAppropriateGradeLevelsSupported = isEducationContentAppropriateGradeLevelsSupported;
            IsEducationContentAppropriateSexesSupported = isEducationContentAppropriateSexesSupported;
            IsEducationContentAuthorsSupported = isEducationContentAuthorsSupported;
            IsEducationContentDerivativeSourceEducationContentsSupported = isEducationContentDerivativeSourceEducationContentsSupported;
            IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported = isEducationContentDerivativeSourceLearningResourceMetadataURIsSupported;
            IsEducationContentDerivativeSourceURIsSupported = isEducationContentDerivativeSourceURIsSupported;
            IsEducationContentLanguagesSupported = isEducationContentLanguagesSupported;
            IsInteractivityStyleDescriptorSupported = isInteractivityStyleDescriptorSupported;
            IsLearningResourceMetadataURISupported = isLearningResourceMetadataURISupported;
            IsLearningStandardIdSupported = isLearningStandardIdSupported;
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsPublicationDateSupported = isPublicationDateSupported;
            IsPublicationYearSupported = isPublicationYearSupported;
            IsPublisherSupported = isPublisherSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
            IsTimeRequiredSupported = isTimeRequiredSupported;
            IsUseRightsURLSupported = isUseRightsURLSupported;
            IsVersionSupported = isVersionSupported;
            IsEducationContentAppropriateGradeLevelsItemCreatable = isEducationContentAppropriateGradeLevelsItemCreatable;
            IsEducationContentAppropriateGradeLevelIncluded = isEducationContentAppropriateGradeLevelIncluded;
            IsEducationContentAppropriateSexesItemCreatable = isEducationContentAppropriateSexesItemCreatable;
            IsEducationContentAppropriateSexIncluded = isEducationContentAppropriateSexIncluded;
            IsEducationContentAuthorsItemCreatable = isEducationContentAuthorsItemCreatable;
            IsEducationContentAuthorIncluded = isEducationContentAuthorIncluded;
            IsEducationContentDerivativeSourceEducationContentsItemCreatable = isEducationContentDerivativeSourceEducationContentsItemCreatable;
            IsEducationContentDerivativeSourceEducationContentIncluded = isEducationContentDerivativeSourceEducationContentIncluded;
            IsEducationContentDerivativeSourceLearningResourceMetadataURIsItemCreatable = isEducationContentDerivativeSourceLearningResourceMetadataURIsItemCreatable;
            IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded = isEducationContentDerivativeSourceLearningResourceMetadataURIIncluded;
            IsEducationContentDerivativeSourceURIsItemCreatable = isEducationContentDerivativeSourceURIsItemCreatable;
            IsEducationContentDerivativeSourceURIIncluded = isEducationContentDerivativeSourceURIIncluded;
            IsEducationContentLanguagesItemCreatable = isEducationContentLanguagesItemCreatable;
            IsEducationContentLanguageIncluded = isEducationContentLanguageIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAdditionalAuthorsIndicatorSupported { get; }
        public bool IsContentClassDescriptorSupported { get; }
        public bool IsCostSupported { get; }
        public bool IsCostRateDescriptorSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEducationContentAppropriateGradeLevelsSupported { get; }
        public bool IsEducationContentAppropriateSexesSupported { get; }
        public bool IsEducationContentAuthorsSupported { get; }
        public bool IsEducationContentDerivativeSourceEducationContentsSupported { get; }
        public bool IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported { get; }
        public bool IsEducationContentDerivativeSourceURIsSupported { get; }
        public bool IsEducationContentLanguagesSupported { get; }
        public bool IsInteractivityStyleDescriptorSupported { get; }
        public bool IsLearningResourceMetadataURISupported { get; }
        public bool IsLearningStandardIdSupported { get; }
        public bool IsLearningStandardReferenceSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsPublicationDateSupported { get; }
        public bool IsPublicationYearSupported { get; }
        public bool IsPublisherSupported { get; }
        public bool IsShortDescriptionSupported { get; }
        public bool IsTimeRequiredSupported { get; }
        public bool IsUseRightsURLSupported { get; }
        public bool IsVersionSupported { get; }
        public bool IsEducationContentAppropriateGradeLevelsItemCreatable { get; }
        public Func<IEducationContentAppropriateGradeLevel, bool> IsEducationContentAppropriateGradeLevelIncluded { get; }
        public bool IsEducationContentAppropriateSexesItemCreatable { get; }
        public Func<IEducationContentAppropriateSex, bool> IsEducationContentAppropriateSexIncluded { get; }
        public bool IsEducationContentAuthorsItemCreatable { get; }
        public Func<IEducationContentAuthor, bool> IsEducationContentAuthorIncluded { get; }
        public bool IsEducationContentDerivativeSourceEducationContentsItemCreatable { get; }
        public Func<IEducationContentDerivativeSourceEducationContent, bool> IsEducationContentDerivativeSourceEducationContentIncluded { get; }
        public bool IsEducationContentDerivativeSourceLearningResourceMetadataURIsItemCreatable { get; }
        public Func<IEducationContentDerivativeSourceLearningResourceMetadataURI, bool> IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded { get; }
        public bool IsEducationContentDerivativeSourceURIsItemCreatable { get; }
        public Func<IEducationContentDerivativeSourceURI, bool> IsEducationContentDerivativeSourceURIIncluded { get; }
        public bool IsEducationContentLanguagesItemCreatable { get; }
        public Func<IEducationContentLanguage, bool> IsEducationContentLanguageIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AdditionalAuthorsIndicator":
                    return IsAdditionalAuthorsIndicatorSupported;
                case "ContentClassDescriptor":
                    return IsContentClassDescriptorSupported;
                case "Cost":
                    return IsCostSupported;
                case "CostRateDescriptor":
                    return IsCostRateDescriptorSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EducationContentAppropriateGradeLevels":
                    return IsEducationContentAppropriateGradeLevelsSupported;
                case "EducationContentAppropriateSexes":
                    return IsEducationContentAppropriateSexesSupported;
                case "EducationContentAuthors":
                    return IsEducationContentAuthorsSupported;
                case "EducationContentDerivativeSourceEducationContents":
                    return IsEducationContentDerivativeSourceEducationContentsSupported;
                case "EducationContentDerivativeSourceLearningResourceMetadataURIs":
                    return IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported;
                case "EducationContentDerivativeSourceURIs":
                    return IsEducationContentDerivativeSourceURIsSupported;
                case "EducationContentLanguages":
                    return IsEducationContentLanguagesSupported;
                case "InteractivityStyleDescriptor":
                    return IsInteractivityStyleDescriptorSupported;
                case "LearningResourceMetadataURI":
                    return IsLearningResourceMetadataURISupported;
                case "LearningStandardId":
                    return IsLearningStandardIdSupported;
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "PublicationDate":
                    return IsPublicationDateSupported;
                case "PublicationYear":
                    return IsPublicationYearSupported;
                case "Publisher":
                    return IsPublisherSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                case "TimeRequired":
                    return IsTimeRequiredSupported;
                case "UseRightsURL":
                    return IsUseRightsURLSupported;
                case "Version":
                    return IsVersionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContentIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationContentAppropriateGradeLevels":
                    return IsEducationContentAppropriateGradeLevelsItemCreatable;
                case "EducationContentAppropriateSexes":
                    return IsEducationContentAppropriateSexesItemCreatable;
                case "EducationContentAuthors":
                    return IsEducationContentAuthorsItemCreatable;
                case "EducationContentDerivativeSourceEducationContents":
                    return IsEducationContentDerivativeSourceEducationContentsItemCreatable;
                case "EducationContentDerivativeSourceLearningResourceMetadataURIs":
                    return IsEducationContentDerivativeSourceLearningResourceMetadataURIsItemCreatable;
                case "EducationContentDerivativeSourceURIs":
                    return IsEducationContentDerivativeSourceURIsItemCreatable;
                case "EducationContentLanguages":
                    return IsEducationContentLanguagesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentAppropriateGradeLevel model.
    /// </summary>
    public interface IEducationContentAppropriateGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentAppropriateGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentAppropriateGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentAppropriateSex model.
    /// </summary>
    public interface IEducationContentAppropriateSex : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string SexDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentAppropriateSexMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentAppropriateSexMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SexDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentAuthor model.
    /// </summary>
    public interface IEducationContentAuthor : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string Author { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentAuthorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentAuthorMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Author":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentDerivativeSourceEducationContent model.
    /// </summary>
    public interface IEducationContentDerivativeSourceEducationContent : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string DerivativeSourceContentIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? DerivativeSourceEducationContentResourceId { get; set; }
        string DerivativeSourceEducationContentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentDerivativeSourceEducationContentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentDerivativeSourceEducationContentMappingContract(
            bool isDerivativeSourceEducationContentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDerivativeSourceEducationContentReferenceSupported = isDerivativeSourceEducationContentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDerivativeSourceEducationContentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DerivativeSourceEducationContentReference":
                    return IsDerivativeSourceEducationContentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DerivativeSourceContentIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentDerivativeSourceLearningResourceMetadataURI model.
    /// </summary>
    public interface IEducationContentDerivativeSourceLearningResourceMetadataURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string DerivativeSourceLearningResourceMetadataURI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentDerivativeSourceLearningResourceMetadataURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentDerivativeSourceLearningResourceMetadataURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DerivativeSourceLearningResourceMetadataURI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentDerivativeSourceURI model.
    /// </summary>
    public interface IEducationContentDerivativeSourceURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string DerivativeSourceURI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentDerivativeSourceURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentDerivativeSourceURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DerivativeSourceURI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationContentLanguage model.
    /// </summary>
    public interface IEducationContentLanguage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationContent EducationContent { get; set; }
        
        string LanguageDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationContentLanguageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationContentLanguageMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganization model.
    /// </summary>
    public interface IEducationOrganization : IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }

        // Non-PK properties
        string NameOfInstitution { get; set; }
        string OperationalStatusDescriptor { get; set; }
        string ShortNameOfInstitution { get; set; }
        string WebSite { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IEducationOrganizationAddress> EducationOrganizationAddresses { get; set; }
        ICollection<IEducationOrganizationCategory> EducationOrganizationCategories { get; set; }
        ICollection<IEducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; }
        ICollection<IEducationOrganizationIndicator> EducationOrganizationIndicators { get; set; }
        ICollection<IEducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; }
        ICollection<IEducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationMappingContract : IMappingContract
    {
        public EducationOrganizationMappingContract(
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded
            )
        {
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
        }

        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationAddress model.
    /// </summary>
    public interface IEducationOrganizationAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganization EducationOrganization { get; set; }
        
        string AddressTypeDescriptor { get; set; }
        
        string City { get; set; }
        
        string PostalCode { get; set; }
        
        string StateAbbreviationDescriptor { get; set; }
        
        string StreetNumberName { get; set; }

        // Non-PK properties
        string ApartmentRoomSuiteNumber { get; set; }
        string BuildingSiteNumber { get; set; }
        string CongressionalDistrict { get; set; }
        string CountyFIPSCode { get; set; }
        bool? DoNotPublishIndicator { get; set; }
        string Latitude { get; set; }
        string LocaleDescriptor { get; set; }
        string Longitude { get; set; }
        string NameOfCounty { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IEducationOrganizationAddressPeriod> EducationOrganizationAddressPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationAddressMappingContract(
            bool isApartmentRoomSuiteNumberSupported,
            bool isBuildingSiteNumberSupported,
            bool isCongressionalDistrictSupported,
            bool isCountyFIPSCodeSupported,
            bool isDoNotPublishIndicatorSupported,
            bool isEducationOrganizationAddressPeriodsSupported,
            bool isLatitudeSupported,
            bool isLocaleDescriptorSupported,
            bool isLongitudeSupported,
            bool isNameOfCountySupported,
            bool isEducationOrganizationAddressPeriodsItemCreatable,
            Func<IEducationOrganizationAddressPeriod, bool> isEducationOrganizationAddressPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsApartmentRoomSuiteNumberSupported = isApartmentRoomSuiteNumberSupported;
            IsBuildingSiteNumberSupported = isBuildingSiteNumberSupported;
            IsCongressionalDistrictSupported = isCongressionalDistrictSupported;
            IsCountyFIPSCodeSupported = isCountyFIPSCodeSupported;
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsEducationOrganizationAddressPeriodsSupported = isEducationOrganizationAddressPeriodsSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLocaleDescriptorSupported = isLocaleDescriptorSupported;
            IsLongitudeSupported = isLongitudeSupported;
            IsNameOfCountySupported = isNameOfCountySupported;
            IsEducationOrganizationAddressPeriodsItemCreatable = isEducationOrganizationAddressPeriodsItemCreatable;
            IsEducationOrganizationAddressPeriodIncluded = isEducationOrganizationAddressPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsApartmentRoomSuiteNumberSupported { get; }
        public bool IsBuildingSiteNumberSupported { get; }
        public bool IsCongressionalDistrictSupported { get; }
        public bool IsCountyFIPSCodeSupported { get; }
        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsEducationOrganizationAddressPeriodsSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLocaleDescriptorSupported { get; }
        public bool IsLongitudeSupported { get; }
        public bool IsNameOfCountySupported { get; }
        public bool IsEducationOrganizationAddressPeriodsItemCreatable { get; }
        public Func<IEducationOrganizationAddressPeriod, bool> IsEducationOrganizationAddressPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ApartmentRoomSuiteNumber":
                    return IsApartmentRoomSuiteNumberSupported;
                case "BuildingSiteNumber":
                    return IsBuildingSiteNumberSupported;
                case "CongressionalDistrict":
                    return IsCongressionalDistrictSupported;
                case "CountyFIPSCode":
                    return IsCountyFIPSCodeSupported;
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "EducationOrganizationAddressPeriods":
                    return IsEducationOrganizationAddressPeriodsSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "LocaleDescriptor":
                    return IsLocaleDescriptorSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                case "NameOfCounty":
                    return IsNameOfCountySupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                case "City":
                    return true;
                case "PostalCode":
                    return true;
                case "StateAbbreviationDescriptor":
                    return true;
                case "StreetNumberName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddressPeriods":
                    return IsEducationOrganizationAddressPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationAddressPeriod model.
    /// </summary>
    public interface IEducationOrganizationAddressPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganizationAddress EducationOrganizationAddress { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationAddressPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationAddressPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationAssociationTypeDescriptor model.
    /// </summary>
    public interface IEducationOrganizationAssociationTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EducationOrganizationAssociationTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationAssociationTypeDescriptorMappingContract : IMappingContract
    {
        public EducationOrganizationAssociationTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationAssociationTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationCategory model.
    /// </summary>
    public interface IEducationOrganizationCategory : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganization EducationOrganization { get; set; }
        
        string EducationOrganizationCategoryDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationCategoryMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationCategoryMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationCategoryDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationCategoryDescriptor model.
    /// </summary>
    public interface IEducationOrganizationCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EducationOrganizationCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationCategoryDescriptorMappingContract : IMappingContract
    {
        public EducationOrganizationCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationIdentificationCode model.
    /// </summary>
    public interface IEducationOrganizationIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganization EducationOrganization { get; set; }
        
        string EducationOrganizationIdentificationSystemDescriptor { get; set; }

        // Non-PK properties
        string IdentificationCode { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationIdentificationCodeMappingContract(
            bool isIdentificationCodeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsIdentificationCodeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationIdentificationSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationIdentificationSystemDescriptor model.
    /// </summary>
    public interface IEducationOrganizationIdentificationSystemDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EducationOrganizationIdentificationSystemDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationIdentificationSystemDescriptorMappingContract : IMappingContract
    {
        public EducationOrganizationIdentificationSystemDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationIdentificationSystemDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationIndicator model.
    /// </summary>
    public interface IEducationOrganizationIndicator : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganization EducationOrganization { get; set; }
        
        string IndicatorDescriptor { get; set; }

        // Non-PK properties
        string DesignatedBy { get; set; }
        string IndicatorGroupDescriptor { get; set; }
        string IndicatorLevelDescriptor { get; set; }
        string IndicatorValue { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IEducationOrganizationIndicatorPeriod> EducationOrganizationIndicatorPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationIndicatorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationIndicatorMappingContract(
            bool isDesignatedBySupported,
            bool isEducationOrganizationIndicatorPeriodsSupported,
            bool isIndicatorGroupDescriptorSupported,
            bool isIndicatorLevelDescriptorSupported,
            bool isIndicatorValueSupported,
            bool isEducationOrganizationIndicatorPeriodsItemCreatable,
            Func<IEducationOrganizationIndicatorPeriod, bool> isEducationOrganizationIndicatorPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDesignatedBySupported = isDesignatedBySupported;
            IsEducationOrganizationIndicatorPeriodsSupported = isEducationOrganizationIndicatorPeriodsSupported;
            IsIndicatorGroupDescriptorSupported = isIndicatorGroupDescriptorSupported;
            IsIndicatorLevelDescriptorSupported = isIndicatorLevelDescriptorSupported;
            IsIndicatorValueSupported = isIndicatorValueSupported;
            IsEducationOrganizationIndicatorPeriodsItemCreatable = isEducationOrganizationIndicatorPeriodsItemCreatable;
            IsEducationOrganizationIndicatorPeriodIncluded = isEducationOrganizationIndicatorPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDesignatedBySupported { get; }
        public bool IsEducationOrganizationIndicatorPeriodsSupported { get; }
        public bool IsIndicatorGroupDescriptorSupported { get; }
        public bool IsIndicatorLevelDescriptorSupported { get; }
        public bool IsIndicatorValueSupported { get; }
        public bool IsEducationOrganizationIndicatorPeriodsItemCreatable { get; }
        public Func<IEducationOrganizationIndicatorPeriod, bool> IsEducationOrganizationIndicatorPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DesignatedBy":
                    return IsDesignatedBySupported;
                case "EducationOrganizationIndicatorPeriods":
                    return IsEducationOrganizationIndicatorPeriodsSupported;
                case "IndicatorGroupDescriptor":
                    return IsIndicatorGroupDescriptorSupported;
                case "IndicatorLevelDescriptor":
                    return IsIndicatorLevelDescriptorSupported;
                case "IndicatorValue":
                    return IsIndicatorValueSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IndicatorDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationIndicatorPeriods":
                    return IsEducationOrganizationIndicatorPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationIndicatorPeriod model.
    /// </summary>
    public interface IEducationOrganizationIndicatorPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganizationIndicator EducationOrganizationIndicator { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationIndicatorPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationIndicatorPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationInstitutionTelephone model.
    /// </summary>
    public interface IEducationOrganizationInstitutionTelephone : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganization EducationOrganization { get; set; }
        
        string InstitutionTelephoneNumberTypeDescriptor { get; set; }

        // Non-PK properties
        string TelephoneNumber { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationInstitutionTelephoneMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationInstitutionTelephoneMappingContract(
            bool isTelephoneNumberSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsTelephoneNumberSupported = isTelephoneNumberSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsTelephoneNumberSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "TelephoneNumber":
                    return IsTelephoneNumberSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InstitutionTelephoneNumberTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationInternationalAddress model.
    /// </summary>
    public interface IEducationOrganizationInternationalAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IEducationOrganization EducationOrganization { get; set; }
        
        string AddressTypeDescriptor { get; set; }

        // Non-PK properties
        string AddressLine1 { get; set; }
        string AddressLine2 { get; set; }
        string AddressLine3 { get; set; }
        string AddressLine4 { get; set; }
        DateTime? BeginDate { get; set; }
        string CountryDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        string Latitude { get; set; }
        string Longitude { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationInternationalAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationInternationalAddressMappingContract(
            bool isAddressLine1Supported,
            bool isAddressLine2Supported,
            bool isAddressLine3Supported,
            bool isAddressLine4Supported,
            bool isBeginDateSupported,
            bool isCountryDescriptorSupported,
            bool isEndDateSupported,
            bool isLatitudeSupported,
            bool isLongitudeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAddressLine1Supported = isAddressLine1Supported;
            IsAddressLine2Supported = isAddressLine2Supported;
            IsAddressLine3Supported = isAddressLine3Supported;
            IsAddressLine4Supported = isAddressLine4Supported;
            IsBeginDateSupported = isBeginDateSupported;
            IsCountryDescriptorSupported = isCountryDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLongitudeSupported = isLongitudeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAddressLine1Supported { get; }
        public bool IsAddressLine2Supported { get; }
        public bool IsAddressLine3Supported { get; }
        public bool IsAddressLine4Supported { get; }
        public bool IsBeginDateSupported { get; }
        public bool IsCountryDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLongitudeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AddressLine1":
                    return IsAddressLine1Supported;
                case "AddressLine2":
                    return IsAddressLine2Supported;
                case "AddressLine3":
                    return IsAddressLine3Supported;
                case "AddressLine4":
                    return IsAddressLine4Supported;
                case "BeginDate":
                    return IsBeginDateSupported;
                case "CountryDescriptor":
                    return IsCountryDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationInterventionPrescriptionAssociation model.
    /// </summary>
    public interface IEducationOrganizationInterventionPrescriptionAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        int InterventionPrescriptionEducationOrganizationId { get; set; }
        
        string InterventionPrescriptionIdentificationCode { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? InterventionPrescriptionResourceId { get; set; }
        string InterventionPrescriptionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationInterventionPrescriptionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationInterventionPrescriptionAssociationMappingContract(
            bool isBeginDateSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isInterventionPrescriptionReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsInterventionPrescriptionReferenceSupported = isInterventionPrescriptionReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsInterventionPrescriptionReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "InterventionPrescriptionReference":
                    return IsInterventionPrescriptionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "InterventionPrescriptionEducationOrganizationId":
                    return true;
                case "InterventionPrescriptionIdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationNetwork model.
    /// </summary>
    public interface IEducationOrganizationNetwork : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationNetworkId { get; set; }

        // Non-PK properties
        string NetworkPurposeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationNetworkMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationNetworkMappingContract(
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isNetworkPurposeDescriptorSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsNetworkPurposeDescriptorSupported = isNetworkPurposeDescriptorSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsNetworkPurposeDescriptorSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "NetworkPurposeDescriptor":
                    return IsNetworkPurposeDescriptorSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationNetworkId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationNetworkAssociation model.
    /// </summary>
    public interface IEducationOrganizationNetworkAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationNetworkId { get; set; }
        
        int MemberEducationOrganizationId { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationNetworkResourceId { get; set; }
        Guid? MemberEducationOrganizationResourceId { get; set; }
        string MemberEducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationNetworkAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationNetworkAssociationMappingContract(
            bool isBeginDateSupported,
            bool isEducationOrganizationNetworkReferenceSupported,
            bool isEndDateSupported,
            bool isMemberEducationOrganizationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEducationOrganizationNetworkReferenceSupported = isEducationOrganizationNetworkReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsMemberEducationOrganizationReferenceSupported = isMemberEducationOrganizationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEducationOrganizationNetworkReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsMemberEducationOrganizationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EducationOrganizationNetworkReference":
                    return IsEducationOrganizationNetworkReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "MemberEducationOrganizationReference":
                    return IsMemberEducationOrganizationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationNetworkId":
                    return true;
                case "MemberEducationOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationOrganizationPeerAssociation model.
    /// </summary>
    public interface IEducationOrganizationPeerAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        int PeerEducationOrganizationId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? PeerEducationOrganizationResourceId { get; set; }
        string PeerEducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationOrganizationPeerAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationOrganizationPeerAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isPeerEducationOrganizationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsPeerEducationOrganizationReferenceSupported = isPeerEducationOrganizationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsPeerEducationOrganizationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "PeerEducationOrganizationReference":
                    return IsPeerEducationOrganizationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "PeerEducationOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationPlanDescriptor model.
    /// </summary>
    public interface IEducationPlanDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EducationPlanDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationPlanDescriptorMappingContract : IMappingContract
    {
        public EducationPlanDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationPlanDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EducationServiceCenter model.
    /// </summary>
    public interface IEducationServiceCenter : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationServiceCenterId { get; set; }

        // Non-PK properties
        int? StateEducationAgencyId { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StateEducationAgencyResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EducationServiceCenterMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public EducationServiceCenterMappingContract(
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isStateEducationAgencyIdSupported,
            bool isStateEducationAgencyReferenceSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsStateEducationAgencyIdSupported = isStateEducationAgencyIdSupported;
            IsStateEducationAgencyReferenceSupported = isStateEducationAgencyReferenceSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsStateEducationAgencyIdSupported { get; }
        public bool IsStateEducationAgencyReferenceSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "StateEducationAgencyId":
                    return IsStateEducationAgencyIdSupported;
                case "StateEducationAgencyReference":
                    return IsStateEducationAgencyReferenceSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationServiceCenterId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ElectronicMailTypeDescriptor model.
    /// </summary>
    public interface IElectronicMailTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ElectronicMailTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ElectronicMailTypeDescriptorMappingContract : IMappingContract
    {
        public ElectronicMailTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ElectronicMailTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EmploymentStatusDescriptor model.
    /// </summary>
    public interface IEmploymentStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EmploymentStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EmploymentStatusDescriptorMappingContract : IMappingContract
    {
        public EmploymentStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EmploymentStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EntryGradeLevelReasonDescriptor model.
    /// </summary>
    public interface IEntryGradeLevelReasonDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EntryGradeLevelReasonDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EntryGradeLevelReasonDescriptorMappingContract : IMappingContract
    {
        public EntryGradeLevelReasonDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EntryGradeLevelReasonDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EntryTypeDescriptor model.
    /// </summary>
    public interface IEntryTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EntryTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EntryTypeDescriptorMappingContract : IMappingContract
    {
        public EntryTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EntryTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the EventCircumstanceDescriptor model.
    /// </summary>
    public interface IEventCircumstanceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int EventCircumstanceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class EventCircumstanceDescriptorMappingContract : IMappingContract
    {
        public EventCircumstanceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EventCircumstanceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ExitWithdrawTypeDescriptor model.
    /// </summary>
    public interface IExitWithdrawTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ExitWithdrawTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ExitWithdrawTypeDescriptorMappingContract : IMappingContract
    {
        public ExitWithdrawTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ExitWithdrawTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the FeederSchoolAssociation model.
    /// </summary>
    public interface IFeederSchoolAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        int FeederSchoolId { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }
        string FeederRelationshipDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? FeederSchoolResourceId { get; set; }
        Guid? SchoolResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class FeederSchoolAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public FeederSchoolAssociationMappingContract(
            bool isEndDateSupported,
            bool isFeederRelationshipDescriptionSupported,
            bool isFeederSchoolReferenceSupported,
            bool isSchoolReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            IsFeederRelationshipDescriptionSupported = isFeederRelationshipDescriptionSupported;
            IsFeederSchoolReferenceSupported = isFeederSchoolReferenceSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }
        public bool IsFeederRelationshipDescriptionSupported { get; }
        public bool IsFeederSchoolReferenceSupported { get; }
        public bool IsSchoolReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                case "FeederRelationshipDescription":
                    return IsFeederRelationshipDescriptionSupported;
                case "FeederSchoolReference":
                    return IsFeederSchoolReferenceSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "FeederSchoolId":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the FinancialCollectionDescriptor model.
    /// </summary>
    public interface IFinancialCollectionDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int FinancialCollectionDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class FinancialCollectionDescriptorMappingContract : IMappingContract
    {
        public FinancialCollectionDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "FinancialCollectionDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the FunctionDimension model.
    /// </summary>
    public interface IFunctionDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IFunctionDimensionReportingTag> FunctionDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class FunctionDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public FunctionDimensionMappingContract(
            bool isCodeNameSupported,
            bool isFunctionDimensionReportingTagsSupported,
            bool isFunctionDimensionReportingTagsItemCreatable,
            Func<IFunctionDimensionReportingTag, bool> isFunctionDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsFunctionDimensionReportingTagsSupported = isFunctionDimensionReportingTagsSupported;
            IsFunctionDimensionReportingTagsItemCreatable = isFunctionDimensionReportingTagsItemCreatable;
            IsFunctionDimensionReportingTagIncluded = isFunctionDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsFunctionDimensionReportingTagsSupported { get; }
        public bool IsFunctionDimensionReportingTagsItemCreatable { get; }
        public Func<IFunctionDimensionReportingTag, bool> IsFunctionDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "FunctionDimensionReportingTags":
                    return IsFunctionDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "FunctionDimensionReportingTags":
                    return IsFunctionDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the FunctionDimensionReportingTag model.
    /// </summary>
    public interface IFunctionDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IFunctionDimension FunctionDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class FunctionDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public FunctionDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the FundDimension model.
    /// </summary>
    public interface IFundDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IFundDimensionReportingTag> FundDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class FundDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public FundDimensionMappingContract(
            bool isCodeNameSupported,
            bool isFundDimensionReportingTagsSupported,
            bool isFundDimensionReportingTagsItemCreatable,
            Func<IFundDimensionReportingTag, bool> isFundDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsFundDimensionReportingTagsSupported = isFundDimensionReportingTagsSupported;
            IsFundDimensionReportingTagsItemCreatable = isFundDimensionReportingTagsItemCreatable;
            IsFundDimensionReportingTagIncluded = isFundDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsFundDimensionReportingTagsSupported { get; }
        public bool IsFundDimensionReportingTagsItemCreatable { get; }
        public Func<IFundDimensionReportingTag, bool> IsFundDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "FundDimensionReportingTags":
                    return IsFundDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "FundDimensionReportingTags":
                    return IsFundDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the FundDimensionReportingTag model.
    /// </summary>
    public interface IFundDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IFundDimension FundDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class FundDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public FundDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GeneralStudentProgramAssociation model.
    /// </summary>
    public interface IGeneralStudentProgramAssociation : ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int ProgramEducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }
        string ReasonExitedDescriptor { get; set; }
        bool? ServedOutsideOfRegularSession { get; set; }

        // One-to-one relationships

        IGeneralStudentProgramAssociationParticipationStatus GeneralStudentProgramAssociationParticipationStatus { get; set; }

        // Lists
        ICollection<IGeneralStudentProgramAssociationProgramParticipationStatus> GeneralStudentProgramAssociationProgramParticipationStatuses { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GeneralStudentProgramAssociationMappingContract : IMappingContract
    {
        public GeneralStudentProgramAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentReferenceSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GeneralStudentProgramAssociationParticipationStatus model.
    /// </summary>
    public interface IGeneralStudentProgramAssociationParticipationStatus : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; }

        // Non-PK properties
        string DesignatedBy { get; set; }
        string ParticipationStatusDescriptor { get; set; }
        DateTime? StatusBeginDate { get; set; }
        DateTime? StatusEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GeneralStudentProgramAssociationParticipationStatusMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GeneralStudentProgramAssociationParticipationStatusMappingContract(
            bool isDesignatedBySupported,
            bool isParticipationStatusDescriptorSupported,
            bool isStatusBeginDateSupported,
            bool isStatusEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDesignatedBySupported = isDesignatedBySupported;
            IsParticipationStatusDescriptorSupported = isParticipationStatusDescriptorSupported;
            IsStatusBeginDateSupported = isStatusBeginDateSupported;
            IsStatusEndDateSupported = isStatusEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDesignatedBySupported { get; }
        public bool IsParticipationStatusDescriptorSupported { get; }
        public bool IsStatusBeginDateSupported { get; }
        public bool IsStatusEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DesignatedBy":
                    return IsDesignatedBySupported;
                case "ParticipationStatusDescriptor":
                    return IsParticipationStatusDescriptorSupported;
                case "StatusBeginDate":
                    return IsStatusBeginDateSupported;
                case "StatusEndDate":
                    return IsStatusEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GeneralStudentProgramAssociationProgramParticipationStatus model.
    /// </summary>
    public interface IGeneralStudentProgramAssociationProgramParticipationStatus : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; }
        
        string ParticipationStatusDescriptor { get; set; }
        
        DateTime StatusBeginDate { get; set; }

        // Non-PK properties
        string DesignatedBy { get; set; }
        DateTime? StatusEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GeneralStudentProgramAssociationProgramParticipationStatusMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GeneralStudentProgramAssociationProgramParticipationStatusMappingContract(
            bool isDesignatedBySupported,
            bool isStatusEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDesignatedBySupported = isDesignatedBySupported;
            IsStatusEndDateSupported = isStatusEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDesignatedBySupported { get; }
        public bool IsStatusEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DesignatedBy":
                    return IsDesignatedBySupported;
                case "StatusEndDate":
                    return IsStatusEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ParticipationStatusDescriptor":
                    return true;
                case "StatusBeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Grade model.
    /// </summary>
    public interface IGrade : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        string GradeTypeDescriptor { get; set; }
        
        string GradingPeriodDescriptor { get; set; }
        
        short GradingPeriodSchoolYear { get; set; }
        
        int GradingPeriodSequence { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        DateTime? CurrentGradeAsOfDate { get; set; }
        bool? CurrentGradeIndicator { get; set; }
        string DiagnosticStatement { get; set; }
        string LetterGradeEarned { get; set; }
        decimal? NumericGradeEarned { get; set; }
        string PerformanceBaseConversionDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IGradeLearningStandardGrade> GradeLearningStandardGrades { get; set; }

        // Resource reference data
        Guid? GradingPeriodResourceId { get; set; }
        string GradingPeriodDiscriminator { get; set; }
        Guid? StudentSectionAssociationResourceId { get; set; }
        string StudentSectionAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GradeMappingContract(
            bool isCurrentGradeAsOfDateSupported,
            bool isCurrentGradeIndicatorSupported,
            bool isDiagnosticStatementSupported,
            bool isGradeLearningStandardGradesSupported,
            bool isGradingPeriodReferenceSupported,
            bool isLetterGradeEarnedSupported,
            bool isNumericGradeEarnedSupported,
            bool isPerformanceBaseConversionDescriptorSupported,
            bool isStudentSectionAssociationReferenceSupported,
            bool isGradeLearningStandardGradesItemCreatable,
            Func<IGradeLearningStandardGrade, bool> isGradeLearningStandardGradeIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCurrentGradeAsOfDateSupported = isCurrentGradeAsOfDateSupported;
            IsCurrentGradeIndicatorSupported = isCurrentGradeIndicatorSupported;
            IsDiagnosticStatementSupported = isDiagnosticStatementSupported;
            IsGradeLearningStandardGradesSupported = isGradeLearningStandardGradesSupported;
            IsGradingPeriodReferenceSupported = isGradingPeriodReferenceSupported;
            IsLetterGradeEarnedSupported = isLetterGradeEarnedSupported;
            IsNumericGradeEarnedSupported = isNumericGradeEarnedSupported;
            IsPerformanceBaseConversionDescriptorSupported = isPerformanceBaseConversionDescriptorSupported;
            IsStudentSectionAssociationReferenceSupported = isStudentSectionAssociationReferenceSupported;
            IsGradeLearningStandardGradesItemCreatable = isGradeLearningStandardGradesItemCreatable;
            IsGradeLearningStandardGradeIncluded = isGradeLearningStandardGradeIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCurrentGradeAsOfDateSupported { get; }
        public bool IsCurrentGradeIndicatorSupported { get; }
        public bool IsDiagnosticStatementSupported { get; }
        public bool IsGradeLearningStandardGradesSupported { get; }
        public bool IsGradingPeriodReferenceSupported { get; }
        public bool IsLetterGradeEarnedSupported { get; }
        public bool IsNumericGradeEarnedSupported { get; }
        public bool IsPerformanceBaseConversionDescriptorSupported { get; }
        public bool IsStudentSectionAssociationReferenceSupported { get; }
        public bool IsGradeLearningStandardGradesItemCreatable { get; }
        public Func<IGradeLearningStandardGrade, bool> IsGradeLearningStandardGradeIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CurrentGradeAsOfDate":
                    return IsCurrentGradeAsOfDateSupported;
                case "CurrentGradeIndicator":
                    return IsCurrentGradeIndicatorSupported;
                case "DiagnosticStatement":
                    return IsDiagnosticStatementSupported;
                case "GradeLearningStandardGrades":
                    return IsGradeLearningStandardGradesSupported;
                case "GradingPeriodReference":
                    return IsGradingPeriodReferenceSupported;
                case "LetterGradeEarned":
                    return IsLetterGradeEarnedSupported;
                case "NumericGradeEarned":
                    return IsNumericGradeEarnedSupported;
                case "PerformanceBaseConversionDescriptor":
                    return IsPerformanceBaseConversionDescriptorSupported;
                case "StudentSectionAssociationReference":
                    return IsStudentSectionAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "GradeTypeDescriptor":
                    return true;
                case "GradingPeriodDescriptor":
                    return true;
                case "GradingPeriodSchoolYear":
                    return true;
                case "GradingPeriodSequence":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GradeLearningStandardGrades":
                    return IsGradeLearningStandardGradesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradebookEntry model.
    /// </summary>
    public interface IGradebookEntry : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string GradebookEntryIdentifier { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties
        DateTime DateAssigned { get; set; }
        string Description { get; set; }
        DateTime? DueDate { get; set; }
        TimeSpan? DueTime { get; set; }
        string GradebookEntryTypeDescriptor { get; set; }
        string GradingPeriodDescriptor { get; set; }
        string LocalCourseCode { get; set; }
        decimal? MaxPoints { get; set; }
        int? PeriodSequence { get; set; }
        int? SchoolId { get; set; }
        short? SchoolYear { get; set; }
        string SectionIdentifier { get; set; }
        string SessionName { get; set; }
        string SourceSectionIdentifier { get; set; }
        string Title { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IGradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; }

        // Resource reference data
        Guid? GradingPeriodResourceId { get; set; }
        string GradingPeriodDiscriminator { get; set; }
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradebookEntryMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GradebookEntryMappingContract(
            bool isDateAssignedSupported,
            bool isDescriptionSupported,
            bool isDueDateSupported,
            bool isDueTimeSupported,
            bool isGradebookEntryLearningStandardsSupported,
            bool isGradebookEntryTypeDescriptorSupported,
            bool isGradingPeriodDescriptorSupported,
            bool isGradingPeriodReferenceSupported,
            bool isLocalCourseCodeSupported,
            bool isMaxPointsSupported,
            bool isPeriodSequenceSupported,
            bool isSchoolIdSupported,
            bool isSchoolYearSupported,
            bool isSectionIdentifierSupported,
            bool isSectionReferenceSupported,
            bool isSessionNameSupported,
            bool isSourceSectionIdentifierSupported,
            bool isTitleSupported,
            bool isGradebookEntryLearningStandardsItemCreatable,
            Func<IGradebookEntryLearningStandard, bool> isGradebookEntryLearningStandardIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDateAssignedSupported = isDateAssignedSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsDueDateSupported = isDueDateSupported;
            IsDueTimeSupported = isDueTimeSupported;
            IsGradebookEntryLearningStandardsSupported = isGradebookEntryLearningStandardsSupported;
            IsGradebookEntryTypeDescriptorSupported = isGradebookEntryTypeDescriptorSupported;
            IsGradingPeriodDescriptorSupported = isGradingPeriodDescriptorSupported;
            IsGradingPeriodReferenceSupported = isGradingPeriodReferenceSupported;
            IsLocalCourseCodeSupported = isLocalCourseCodeSupported;
            IsMaxPointsSupported = isMaxPointsSupported;
            IsPeriodSequenceSupported = isPeriodSequenceSupported;
            IsSchoolIdSupported = isSchoolIdSupported;
            IsSchoolYearSupported = isSchoolYearSupported;
            IsSectionIdentifierSupported = isSectionIdentifierSupported;
            IsSectionReferenceSupported = isSectionReferenceSupported;
            IsSessionNameSupported = isSessionNameSupported;
            IsSourceSectionIdentifierSupported = isSourceSectionIdentifierSupported;
            IsTitleSupported = isTitleSupported;
            IsGradebookEntryLearningStandardsItemCreatable = isGradebookEntryLearningStandardsItemCreatable;
            IsGradebookEntryLearningStandardIncluded = isGradebookEntryLearningStandardIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDateAssignedSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsDueDateSupported { get; }
        public bool IsDueTimeSupported { get; }
        public bool IsGradebookEntryLearningStandardsSupported { get; }
        public bool IsGradebookEntryTypeDescriptorSupported { get; }
        public bool IsGradingPeriodDescriptorSupported { get; }
        public bool IsGradingPeriodReferenceSupported { get; }
        public bool IsLocalCourseCodeSupported { get; }
        public bool IsMaxPointsSupported { get; }
        public bool IsPeriodSequenceSupported { get; }
        public bool IsSchoolIdSupported { get; }
        public bool IsSchoolYearSupported { get; }
        public bool IsSectionIdentifierSupported { get; }
        public bool IsSectionReferenceSupported { get; }
        public bool IsSessionNameSupported { get; }
        public bool IsSourceSectionIdentifierSupported { get; }
        public bool IsTitleSupported { get; }
        public bool IsGradebookEntryLearningStandardsItemCreatable { get; }
        public Func<IGradebookEntryLearningStandard, bool> IsGradebookEntryLearningStandardIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DateAssigned":
                    return IsDateAssignedSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "DueDate":
                    return IsDueDateSupported;
                case "DueTime":
                    return IsDueTimeSupported;
                case "GradebookEntryLearningStandards":
                    return IsGradebookEntryLearningStandardsSupported;
                case "GradebookEntryTypeDescriptor":
                    return IsGradebookEntryTypeDescriptorSupported;
                case "GradingPeriodDescriptor":
                    return IsGradingPeriodDescriptorSupported;
                case "GradingPeriodReference":
                    return IsGradingPeriodReferenceSupported;
                case "LocalCourseCode":
                    return IsLocalCourseCodeSupported;
                case "MaxPoints":
                    return IsMaxPointsSupported;
                case "PeriodSequence":
                    return IsPeriodSequenceSupported;
                case "SchoolId":
                    return IsSchoolIdSupported;
                case "SchoolYear":
                    return IsSchoolYearSupported;
                case "SectionIdentifier":
                    return IsSectionIdentifierSupported;
                case "SectionReference":
                    return IsSectionReferenceSupported;
                case "SessionName":
                    return IsSessionNameSupported;
                case "SourceSectionIdentifier":
                    return IsSourceSectionIdentifierSupported;
                case "Title":
                    return IsTitleSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradebookEntryIdentifier":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GradebookEntryLearningStandards":
                    return IsGradebookEntryLearningStandardsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradebookEntryLearningStandard model.
    /// </summary>
    public interface IGradebookEntryLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGradebookEntry GradebookEntry { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradebookEntryLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GradebookEntryLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradebookEntryTypeDescriptor model.
    /// </summary>
    public interface IGradebookEntryTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GradebookEntryTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradebookEntryTypeDescriptorMappingContract : IMappingContract
    {
        public GradebookEntryTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradebookEntryTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradeLearningStandardGrade model.
    /// </summary>
    public interface IGradeLearningStandardGrade : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGrade Grade { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties
        string DiagnosticStatement { get; set; }
        string LetterGradeEarned { get; set; }
        decimal? NumericGradeEarned { get; set; }
        string PerformanceBaseConversionDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradeLearningStandardGradeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GradeLearningStandardGradeMappingContract(
            bool isDiagnosticStatementSupported,
            bool isLearningStandardReferenceSupported,
            bool isLetterGradeEarnedSupported,
            bool isNumericGradeEarnedSupported,
            bool isPerformanceBaseConversionDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDiagnosticStatementSupported = isDiagnosticStatementSupported;
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            IsLetterGradeEarnedSupported = isLetterGradeEarnedSupported;
            IsNumericGradeEarnedSupported = isNumericGradeEarnedSupported;
            IsPerformanceBaseConversionDescriptorSupported = isPerformanceBaseConversionDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDiagnosticStatementSupported { get; }
        public bool IsLearningStandardReferenceSupported { get; }
        public bool IsLetterGradeEarnedSupported { get; }
        public bool IsNumericGradeEarnedSupported { get; }
        public bool IsPerformanceBaseConversionDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DiagnosticStatement":
                    return IsDiagnosticStatementSupported;
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                case "LetterGradeEarned":
                    return IsLetterGradeEarnedSupported;
                case "NumericGradeEarned":
                    return IsNumericGradeEarnedSupported;
                case "PerformanceBaseConversionDescriptor":
                    return IsPerformanceBaseConversionDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradeLevelDescriptor model.
    /// </summary>
    public interface IGradeLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GradeLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradeLevelDescriptorMappingContract : IMappingContract
    {
        public GradeLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradePointAverageTypeDescriptor model.
    /// </summary>
    public interface IGradePointAverageTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GradePointAverageTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradePointAverageTypeDescriptorMappingContract : IMappingContract
    {
        public GradePointAverageTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradePointAverageTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradeTypeDescriptor model.
    /// </summary>
    public interface IGradeTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GradeTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradeTypeDescriptorMappingContract : IMappingContract
    {
        public GradeTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradingPeriod model.
    /// </summary>
    public interface IGradingPeriod : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string GradingPeriodDescriptor { get; set; }
        
        int PeriodSequence { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        DateTime BeginDate { get; set; }
        DateTime EndDate { get; set; }
        int TotalInstructionalDays { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradingPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GradingPeriodMappingContract(
            bool isBeginDateSupported,
            bool isEndDateSupported,
            bool isSchoolReferenceSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isTotalInstructionalDaysSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsTotalInstructionalDaysSupported = isTotalInstructionalDaysSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsTotalInstructionalDaysSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "TotalInstructionalDays":
                    return IsTotalInstructionalDaysSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradingPeriodDescriptor":
                    return true;
                case "PeriodSequence":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GradingPeriodDescriptor model.
    /// </summary>
    public interface IGradingPeriodDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GradingPeriodDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GradingPeriodDescriptorMappingContract : IMappingContract
    {
        public GradingPeriodDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradingPeriodDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlan model.
    /// </summary>
    public interface IGraduationPlan : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string GraduationPlanTypeDescriptor { get; set; }
        
        short GraduationSchoolYear { get; set; }

        // Non-PK properties
        bool? IndividualPlan { get; set; }
        decimal? TotalRequiredCreditConversion { get; set; }
        decimal TotalRequiredCredits { get; set; }
        string TotalRequiredCreditTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IGraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; }
        ICollection<IGraduationPlanCreditsByCreditCategory> GraduationPlanCreditsByCreditCategories { get; set; }
        ICollection<IGraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; }
        ICollection<IGraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? GraduationSchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isGraduationPlanCreditsByCoursesSupported,
            bool isGraduationPlanCreditsByCreditCategoriesSupported,
            bool isGraduationPlanCreditsBySubjectsSupported,
            bool isGraduationPlanRequiredAssessmentsSupported,
            bool isGraduationSchoolYearTypeReferenceSupported,
            bool isIndividualPlanSupported,
            bool isTotalRequiredCreditConversionSupported,
            bool isTotalRequiredCreditsSupported,
            bool isTotalRequiredCreditTypeDescriptorSupported,
            bool isGraduationPlanCreditsByCoursesItemCreatable,
            Func<IGraduationPlanCreditsByCourse, bool> isGraduationPlanCreditsByCourseIncluded,
            bool isGraduationPlanCreditsByCreditCategoriesItemCreatable,
            Func<IGraduationPlanCreditsByCreditCategory, bool> isGraduationPlanCreditsByCreditCategoryIncluded,
            bool isGraduationPlanCreditsBySubjectsItemCreatable,
            Func<IGraduationPlanCreditsBySubject, bool> isGraduationPlanCreditsBySubjectIncluded,
            bool isGraduationPlanRequiredAssessmentsItemCreatable,
            Func<IGraduationPlanRequiredAssessment, bool> isGraduationPlanRequiredAssessmentIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsGraduationPlanCreditsByCoursesSupported = isGraduationPlanCreditsByCoursesSupported;
            IsGraduationPlanCreditsByCreditCategoriesSupported = isGraduationPlanCreditsByCreditCategoriesSupported;
            IsGraduationPlanCreditsBySubjectsSupported = isGraduationPlanCreditsBySubjectsSupported;
            IsGraduationPlanRequiredAssessmentsSupported = isGraduationPlanRequiredAssessmentsSupported;
            IsGraduationSchoolYearTypeReferenceSupported = isGraduationSchoolYearTypeReferenceSupported;
            IsIndividualPlanSupported = isIndividualPlanSupported;
            IsTotalRequiredCreditConversionSupported = isTotalRequiredCreditConversionSupported;
            IsTotalRequiredCreditsSupported = isTotalRequiredCreditsSupported;
            IsTotalRequiredCreditTypeDescriptorSupported = isTotalRequiredCreditTypeDescriptorSupported;
            IsGraduationPlanCreditsByCoursesItemCreatable = isGraduationPlanCreditsByCoursesItemCreatable;
            IsGraduationPlanCreditsByCourseIncluded = isGraduationPlanCreditsByCourseIncluded;
            IsGraduationPlanCreditsByCreditCategoriesItemCreatable = isGraduationPlanCreditsByCreditCategoriesItemCreatable;
            IsGraduationPlanCreditsByCreditCategoryIncluded = isGraduationPlanCreditsByCreditCategoryIncluded;
            IsGraduationPlanCreditsBySubjectsItemCreatable = isGraduationPlanCreditsBySubjectsItemCreatable;
            IsGraduationPlanCreditsBySubjectIncluded = isGraduationPlanCreditsBySubjectIncluded;
            IsGraduationPlanRequiredAssessmentsItemCreatable = isGraduationPlanRequiredAssessmentsItemCreatable;
            IsGraduationPlanRequiredAssessmentIncluded = isGraduationPlanRequiredAssessmentIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsGraduationPlanCreditsByCoursesSupported { get; }
        public bool IsGraduationPlanCreditsByCreditCategoriesSupported { get; }
        public bool IsGraduationPlanCreditsBySubjectsSupported { get; }
        public bool IsGraduationPlanRequiredAssessmentsSupported { get; }
        public bool IsGraduationSchoolYearTypeReferenceSupported { get; }
        public bool IsIndividualPlanSupported { get; }
        public bool IsTotalRequiredCreditConversionSupported { get; }
        public bool IsTotalRequiredCreditsSupported { get; }
        public bool IsTotalRequiredCreditTypeDescriptorSupported { get; }
        public bool IsGraduationPlanCreditsByCoursesItemCreatable { get; }
        public Func<IGraduationPlanCreditsByCourse, bool> IsGraduationPlanCreditsByCourseIncluded { get; }
        public bool IsGraduationPlanCreditsByCreditCategoriesItemCreatable { get; }
        public Func<IGraduationPlanCreditsByCreditCategory, bool> IsGraduationPlanCreditsByCreditCategoryIncluded { get; }
        public bool IsGraduationPlanCreditsBySubjectsItemCreatable { get; }
        public Func<IGraduationPlanCreditsBySubject, bool> IsGraduationPlanCreditsBySubjectIncluded { get; }
        public bool IsGraduationPlanRequiredAssessmentsItemCreatable { get; }
        public Func<IGraduationPlanRequiredAssessment, bool> IsGraduationPlanRequiredAssessmentIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "GraduationPlanCreditsByCourses":
                    return IsGraduationPlanCreditsByCoursesSupported;
                case "GraduationPlanCreditsByCreditCategories":
                    return IsGraduationPlanCreditsByCreditCategoriesSupported;
                case "GraduationPlanCreditsBySubjects":
                    return IsGraduationPlanCreditsBySubjectsSupported;
                case "GraduationPlanRequiredAssessments":
                    return IsGraduationPlanRequiredAssessmentsSupported;
                case "GraduationSchoolYearTypeReference":
                    return IsGraduationSchoolYearTypeReferenceSupported;
                case "IndividualPlan":
                    return IsIndividualPlanSupported;
                case "TotalRequiredCreditConversion":
                    return IsTotalRequiredCreditConversionSupported;
                case "TotalRequiredCredits":
                    return IsTotalRequiredCreditsSupported;
                case "TotalRequiredCreditTypeDescriptor":
                    return IsTotalRequiredCreditTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "GraduationPlanTypeDescriptor":
                    return true;
                case "GraduationSchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GraduationPlanCreditsByCourses":
                    return IsGraduationPlanCreditsByCoursesItemCreatable;
                case "GraduationPlanCreditsByCreditCategories":
                    return IsGraduationPlanCreditsByCreditCategoriesItemCreatable;
                case "GraduationPlanCreditsBySubjects":
                    return IsGraduationPlanCreditsBySubjectsItemCreatable;
                case "GraduationPlanRequiredAssessments":
                    return IsGraduationPlanRequiredAssessmentsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanCreditsByCourse model.
    /// </summary>
    public interface IGraduationPlanCreditsByCourse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlan GraduationPlan { get; set; }
        
        string CourseSetName { get; set; }

        // Non-PK properties
        decimal? CreditConversion { get; set; }
        decimal Credits { get; set; }
        string CreditTypeDescriptor { get; set; }
        string WhenTakenGradeLevelDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IGraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanCreditsByCourseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanCreditsByCourseMappingContract(
            bool isCreditConversionSupported,
            bool isCreditsSupported,
            bool isCreditTypeDescriptorSupported,
            bool isGraduationPlanCreditsByCourseCoursesSupported,
            bool isWhenTakenGradeLevelDescriptorSupported,
            bool isGraduationPlanCreditsByCourseCoursesItemCreatable,
            Func<IGraduationPlanCreditsByCourseCourse, bool> isGraduationPlanCreditsByCourseCourseIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCreditConversionSupported = isCreditConversionSupported;
            IsCreditsSupported = isCreditsSupported;
            IsCreditTypeDescriptorSupported = isCreditTypeDescriptorSupported;
            IsGraduationPlanCreditsByCourseCoursesSupported = isGraduationPlanCreditsByCourseCoursesSupported;
            IsWhenTakenGradeLevelDescriptorSupported = isWhenTakenGradeLevelDescriptorSupported;
            IsGraduationPlanCreditsByCourseCoursesItemCreatable = isGraduationPlanCreditsByCourseCoursesItemCreatable;
            IsGraduationPlanCreditsByCourseCourseIncluded = isGraduationPlanCreditsByCourseCourseIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCreditConversionSupported { get; }
        public bool IsCreditsSupported { get; }
        public bool IsCreditTypeDescriptorSupported { get; }
        public bool IsGraduationPlanCreditsByCourseCoursesSupported { get; }
        public bool IsWhenTakenGradeLevelDescriptorSupported { get; }
        public bool IsGraduationPlanCreditsByCourseCoursesItemCreatable { get; }
        public Func<IGraduationPlanCreditsByCourseCourse, bool> IsGraduationPlanCreditsByCourseCourseIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CreditConversion":
                    return IsCreditConversionSupported;
                case "Credits":
                    return IsCreditsSupported;
                case "CreditTypeDescriptor":
                    return IsCreditTypeDescriptorSupported;
                case "GraduationPlanCreditsByCourseCourses":
                    return IsGraduationPlanCreditsByCourseCoursesSupported;
                case "WhenTakenGradeLevelDescriptor":
                    return IsWhenTakenGradeLevelDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseSetName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GraduationPlanCreditsByCourseCourses":
                    return IsGraduationPlanCreditsByCourseCoursesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanCreditsByCourseCourse model.
    /// </summary>
    public interface IGraduationPlanCreditsByCourseCourse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlanCreditsByCourse GraduationPlanCreditsByCourse { get; set; }
        
        string CourseCode { get; set; }
        
        int CourseEducationOrganizationId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CourseResourceId { get; set; }
        string CourseDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanCreditsByCourseCourseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanCreditsByCourseCourseMappingContract(
            bool isCourseReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCourseReferenceSupported = isCourseReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCourseReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CourseReference":
                    return IsCourseReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseCode":
                    return true;
                case "CourseEducationOrganizationId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanCreditsByCreditCategory model.
    /// </summary>
    public interface IGraduationPlanCreditsByCreditCategory : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlan GraduationPlan { get; set; }
        
        string CreditCategoryDescriptor { get; set; }

        // Non-PK properties
        decimal? CreditConversion { get; set; }
        decimal Credits { get; set; }
        string CreditTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanCreditsByCreditCategoryMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanCreditsByCreditCategoryMappingContract(
            bool isCreditConversionSupported,
            bool isCreditsSupported,
            bool isCreditTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCreditConversionSupported = isCreditConversionSupported;
            IsCreditsSupported = isCreditsSupported;
            IsCreditTypeDescriptorSupported = isCreditTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCreditConversionSupported { get; }
        public bool IsCreditsSupported { get; }
        public bool IsCreditTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CreditConversion":
                    return IsCreditConversionSupported;
                case "Credits":
                    return IsCreditsSupported;
                case "CreditTypeDescriptor":
                    return IsCreditTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CreditCategoryDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanCreditsBySubject model.
    /// </summary>
    public interface IGraduationPlanCreditsBySubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlan GraduationPlan { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties
        decimal? CreditConversion { get; set; }
        decimal Credits { get; set; }
        string CreditTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanCreditsBySubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanCreditsBySubjectMappingContract(
            bool isCreditConversionSupported,
            bool isCreditsSupported,
            bool isCreditTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCreditConversionSupported = isCreditConversionSupported;
            IsCreditsSupported = isCreditsSupported;
            IsCreditTypeDescriptorSupported = isCreditTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCreditConversionSupported { get; }
        public bool IsCreditsSupported { get; }
        public bool IsCreditTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CreditConversion":
                    return IsCreditConversionSupported;
                case "Credits":
                    return IsCreditsSupported;
                case "CreditTypeDescriptor":
                    return IsCreditTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanRequiredAssessment model.
    /// </summary>
    public interface IGraduationPlanRequiredAssessment : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlan GraduationPlan { get; set; }
        
        string AssessmentIdentifier { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties

        // One-to-one relationships

        IGraduationPlanRequiredAssessmentPerformanceLevel GraduationPlanRequiredAssessmentPerformanceLevel { get; set; }

        // Lists
        ICollection<IGraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; }

        // Resource reference data
        Guid? AssessmentResourceId { get; set; }
        string AssessmentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanRequiredAssessmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanRequiredAssessmentMappingContract(
            bool isAssessmentReferenceSupported,
            bool isGraduationPlanRequiredAssessmentPerformanceLevelSupported,
            bool isGraduationPlanRequiredAssessmentScoresSupported,
            bool isGraduationPlanRequiredAssessmentPerformanceLevelCreatable,
            bool isGraduationPlanRequiredAssessmentScoresItemCreatable,
            Func<IGraduationPlanRequiredAssessmentScore, bool> isGraduationPlanRequiredAssessmentScoreIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentReferenceSupported = isAssessmentReferenceSupported;
            IsGraduationPlanRequiredAssessmentPerformanceLevelSupported = isGraduationPlanRequiredAssessmentPerformanceLevelSupported;
            IsGraduationPlanRequiredAssessmentScoresSupported = isGraduationPlanRequiredAssessmentScoresSupported;
            IsGraduationPlanRequiredAssessmentPerformanceLevelCreatable = isGraduationPlanRequiredAssessmentPerformanceLevelCreatable;
            IsGraduationPlanRequiredAssessmentScoresItemCreatable = isGraduationPlanRequiredAssessmentScoresItemCreatable;
            IsGraduationPlanRequiredAssessmentScoreIncluded = isGraduationPlanRequiredAssessmentScoreIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentReferenceSupported { get; }
        public bool IsGraduationPlanRequiredAssessmentPerformanceLevelSupported { get; }
        public bool IsGraduationPlanRequiredAssessmentScoresSupported { get; }
        public bool IsGraduationPlanRequiredAssessmentPerformanceLevelCreatable { get; }
        public bool IsGraduationPlanRequiredAssessmentScoresItemCreatable { get; }
        public Func<IGraduationPlanRequiredAssessmentScore, bool> IsGraduationPlanRequiredAssessmentScoreIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentReference":
                    return IsAssessmentReferenceSupported;
                case "GraduationPlanRequiredAssessmentPerformanceLevel":
                    return IsGraduationPlanRequiredAssessmentPerformanceLevelSupported;
                case "GraduationPlanRequiredAssessmentScores":
                    return IsGraduationPlanRequiredAssessmentScoresSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GraduationPlanRequiredAssessmentPerformanceLevel":
                    return IsGraduationPlanRequiredAssessmentPerformanceLevelCreatable;
                case "GraduationPlanRequiredAssessmentScores":
                    return IsGraduationPlanRequiredAssessmentScoresItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanRequiredAssessmentPerformanceLevel model.
    /// </summary>
    public interface IGraduationPlanRequiredAssessmentPerformanceLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlanRequiredAssessment GraduationPlanRequiredAssessment { get; set; }

        // Non-PK properties
        string AssessmentReportingMethodDescriptor { get; set; }
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }
        string PerformanceLevelDescriptor { get; set; }
        string PerformanceLevelIndicatorName { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanRequiredAssessmentPerformanceLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanRequiredAssessmentPerformanceLevelMappingContract(
            bool isAssessmentReportingMethodDescriptorSupported,
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isPerformanceLevelDescriptorSupported,
            bool isPerformanceLevelIndicatorNameSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentReportingMethodDescriptorSupported = isAssessmentReportingMethodDescriptorSupported;
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsPerformanceLevelDescriptorSupported = isPerformanceLevelDescriptorSupported;
            IsPerformanceLevelIndicatorNameSupported = isPerformanceLevelIndicatorNameSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentReportingMethodDescriptorSupported { get; }
        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsPerformanceLevelDescriptorSupported { get; }
        public bool IsPerformanceLevelIndicatorNameSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentReportingMethodDescriptor":
                    return IsAssessmentReportingMethodDescriptorSupported;
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "PerformanceLevelDescriptor":
                    return IsPerformanceLevelDescriptorSupported;
                case "PerformanceLevelIndicatorName":
                    return IsPerformanceLevelIndicatorNameSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanRequiredAssessmentScore model.
    /// </summary>
    public interface IGraduationPlanRequiredAssessmentScore : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IGraduationPlanRequiredAssessment GraduationPlanRequiredAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }

        // Non-PK properties
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanRequiredAssessmentScoreMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public GraduationPlanRequiredAssessmentScoreMappingContract(
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GraduationPlanTypeDescriptor model.
    /// </summary>
    public interface IGraduationPlanTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GraduationPlanTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GraduationPlanTypeDescriptorMappingContract : IMappingContract
    {
        public GraduationPlanTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GraduationPlanTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the GunFreeSchoolsActReportingStatusDescriptor model.
    /// </summary>
    public interface IGunFreeSchoolsActReportingStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int GunFreeSchoolsActReportingStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class GunFreeSchoolsActReportingStatusDescriptorMappingContract : IMappingContract
    {
        public GunFreeSchoolsActReportingStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GunFreeSchoolsActReportingStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the HomelessPrimaryNighttimeResidenceDescriptor model.
    /// </summary>
    public interface IHomelessPrimaryNighttimeResidenceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int HomelessPrimaryNighttimeResidenceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class HomelessPrimaryNighttimeResidenceDescriptorMappingContract : IMappingContract
    {
        public HomelessPrimaryNighttimeResidenceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "HomelessPrimaryNighttimeResidenceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the HomelessProgramServiceDescriptor model.
    /// </summary>
    public interface IHomelessProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int HomelessProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class HomelessProgramServiceDescriptorMappingContract : IMappingContract
    {
        public HomelessProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "HomelessProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the IdentificationDocumentUseDescriptor model.
    /// </summary>
    public interface IIdentificationDocumentUseDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int IdentificationDocumentUseDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class IdentificationDocumentUseDescriptorMappingContract : IMappingContract
    {
        public IdentificationDocumentUseDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationDocumentUseDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the IncidentLocationDescriptor model.
    /// </summary>
    public interface IIncidentLocationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int IncidentLocationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class IncidentLocationDescriptorMappingContract : IMappingContract
    {
        public IncidentLocationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IncidentLocationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the IndicatorDescriptor model.
    /// </summary>
    public interface IIndicatorDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int IndicatorDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class IndicatorDescriptorMappingContract : IMappingContract
    {
        public IndicatorDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IndicatorDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the IndicatorGroupDescriptor model.
    /// </summary>
    public interface IIndicatorGroupDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int IndicatorGroupDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class IndicatorGroupDescriptorMappingContract : IMappingContract
    {
        public IndicatorGroupDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IndicatorGroupDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the IndicatorLevelDescriptor model.
    /// </summary>
    public interface IIndicatorLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int IndicatorLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class IndicatorLevelDescriptorMappingContract : IMappingContract
    {
        public IndicatorLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IndicatorLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InstitutionTelephoneNumberTypeDescriptor model.
    /// </summary>
    public interface IInstitutionTelephoneNumberTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InstitutionTelephoneNumberTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InstitutionTelephoneNumberTypeDescriptorMappingContract : IMappingContract
    {
        public InstitutionTelephoneNumberTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InstitutionTelephoneNumberTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InteractivityStyleDescriptor model.
    /// </summary>
    public interface IInteractivityStyleDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InteractivityStyleDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InteractivityStyleDescriptorMappingContract : IMappingContract
    {
        public InteractivityStyleDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InteractivityStyleDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InternetAccessDescriptor model.
    /// </summary>
    public interface IInternetAccessDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InternetAccessDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InternetAccessDescriptorMappingContract : IMappingContract
    {
        public InternetAccessDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InternetAccessDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InternetAccessTypeInResidenceDescriptor model.
    /// </summary>
    public interface IInternetAccessTypeInResidenceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InternetAccessTypeInResidenceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InternetAccessTypeInResidenceDescriptorMappingContract : IMappingContract
    {
        public InternetAccessTypeInResidenceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InternetAccessTypeInResidenceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InternetPerformanceInResidenceDescriptor model.
    /// </summary>
    public interface IInternetPerformanceInResidenceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InternetPerformanceInResidenceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InternetPerformanceInResidenceDescriptorMappingContract : IMappingContract
    {
        public InternetPerformanceInResidenceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InternetPerformanceInResidenceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Intervention model.
    /// </summary>
    public interface IIntervention : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string InterventionIdentificationCode { get; set; }

        // Non-PK properties
        DateTime BeginDate { get; set; }
        string DeliveryMethodDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        string InterventionClassDescriptor { get; set; }
        int? MaxDosage { get; set; }
        int? MinDosage { get; set; }
        string Namespace { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IInterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; }
        ICollection<IInterventionAppropriateSex> InterventionAppropriateSexes { get; set; }
        ICollection<IInterventionDiagnosis> InterventionDiagnoses { get; set; }
        ICollection<IInterventionEducationContent> InterventionEducationContents { get; set; }
        ICollection<IInterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; }
        ICollection<IInterventionLearningResourceMetadataURI> InterventionLearningResourceMetadataURIs { get; set; }
        ICollection<IInterventionMeetingTime> InterventionMeetingTimes { get; set; }
        ICollection<IInterventionPopulationServed> InterventionPopulationServeds { get; set; }
        ICollection<IInterventionStaff> InterventionStaffs { get; set; }
        ICollection<IInterventionURI> InterventionURIs { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionMappingContract(
            bool isBeginDateSupported,
            bool isDeliveryMethodDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isInterventionAppropriateGradeLevelsSupported,
            bool isInterventionAppropriateSexesSupported,
            bool isInterventionClassDescriptorSupported,
            bool isInterventionDiagnosesSupported,
            bool isInterventionEducationContentsSupported,
            bool isInterventionInterventionPrescriptionsSupported,
            bool isInterventionLearningResourceMetadataURIsSupported,
            bool isInterventionMeetingTimesSupported,
            bool isInterventionPopulationServedsSupported,
            bool isInterventionStaffsSupported,
            bool isInterventionURIsSupported,
            bool isMaxDosageSupported,
            bool isMinDosageSupported,
            bool isNamespaceSupported,
            bool isInterventionAppropriateGradeLevelsItemCreatable,
            Func<IInterventionAppropriateGradeLevel, bool> isInterventionAppropriateGradeLevelIncluded,
            bool isInterventionAppropriateSexesItemCreatable,
            Func<IInterventionAppropriateSex, bool> isInterventionAppropriateSexIncluded,
            bool isInterventionDiagnosesItemCreatable,
            Func<IInterventionDiagnosis, bool> isInterventionDiagnosisIncluded,
            bool isInterventionEducationContentsItemCreatable,
            Func<IInterventionEducationContent, bool> isInterventionEducationContentIncluded,
            bool isInterventionInterventionPrescriptionsItemCreatable,
            Func<IInterventionInterventionPrescription, bool> isInterventionInterventionPrescriptionIncluded,
            bool isInterventionLearningResourceMetadataURIsItemCreatable,
            Func<IInterventionLearningResourceMetadataURI, bool> isInterventionLearningResourceMetadataURIIncluded,
            bool isInterventionMeetingTimesItemCreatable,
            Func<IInterventionMeetingTime, bool> isInterventionMeetingTimeIncluded,
            bool isInterventionPopulationServedsItemCreatable,
            Func<IInterventionPopulationServed, bool> isInterventionPopulationServedIncluded,
            bool isInterventionStaffsItemCreatable,
            Func<IInterventionStaff, bool> isInterventionStaffIncluded,
            bool isInterventionURIsItemCreatable,
            Func<IInterventionURI, bool> isInterventionURIIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsDeliveryMethodDescriptorSupported = isDeliveryMethodDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsInterventionAppropriateGradeLevelsSupported = isInterventionAppropriateGradeLevelsSupported;
            IsInterventionAppropriateSexesSupported = isInterventionAppropriateSexesSupported;
            IsInterventionClassDescriptorSupported = isInterventionClassDescriptorSupported;
            IsInterventionDiagnosesSupported = isInterventionDiagnosesSupported;
            IsInterventionEducationContentsSupported = isInterventionEducationContentsSupported;
            IsInterventionInterventionPrescriptionsSupported = isInterventionInterventionPrescriptionsSupported;
            IsInterventionLearningResourceMetadataURIsSupported = isInterventionLearningResourceMetadataURIsSupported;
            IsInterventionMeetingTimesSupported = isInterventionMeetingTimesSupported;
            IsInterventionPopulationServedsSupported = isInterventionPopulationServedsSupported;
            IsInterventionStaffsSupported = isInterventionStaffsSupported;
            IsInterventionURIsSupported = isInterventionURIsSupported;
            IsMaxDosageSupported = isMaxDosageSupported;
            IsMinDosageSupported = isMinDosageSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsInterventionAppropriateGradeLevelsItemCreatable = isInterventionAppropriateGradeLevelsItemCreatable;
            IsInterventionAppropriateGradeLevelIncluded = isInterventionAppropriateGradeLevelIncluded;
            IsInterventionAppropriateSexesItemCreatable = isInterventionAppropriateSexesItemCreatable;
            IsInterventionAppropriateSexIncluded = isInterventionAppropriateSexIncluded;
            IsInterventionDiagnosesItemCreatable = isInterventionDiagnosesItemCreatable;
            IsInterventionDiagnosisIncluded = isInterventionDiagnosisIncluded;
            IsInterventionEducationContentsItemCreatable = isInterventionEducationContentsItemCreatable;
            IsInterventionEducationContentIncluded = isInterventionEducationContentIncluded;
            IsInterventionInterventionPrescriptionsItemCreatable = isInterventionInterventionPrescriptionsItemCreatable;
            IsInterventionInterventionPrescriptionIncluded = isInterventionInterventionPrescriptionIncluded;
            IsInterventionLearningResourceMetadataURIsItemCreatable = isInterventionLearningResourceMetadataURIsItemCreatable;
            IsInterventionLearningResourceMetadataURIIncluded = isInterventionLearningResourceMetadataURIIncluded;
            IsInterventionMeetingTimesItemCreatable = isInterventionMeetingTimesItemCreatable;
            IsInterventionMeetingTimeIncluded = isInterventionMeetingTimeIncluded;
            IsInterventionPopulationServedsItemCreatable = isInterventionPopulationServedsItemCreatable;
            IsInterventionPopulationServedIncluded = isInterventionPopulationServedIncluded;
            IsInterventionStaffsItemCreatable = isInterventionStaffsItemCreatable;
            IsInterventionStaffIncluded = isInterventionStaffIncluded;
            IsInterventionURIsItemCreatable = isInterventionURIsItemCreatable;
            IsInterventionURIIncluded = isInterventionURIIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsDeliveryMethodDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsInterventionAppropriateGradeLevelsSupported { get; }
        public bool IsInterventionAppropriateSexesSupported { get; }
        public bool IsInterventionClassDescriptorSupported { get; }
        public bool IsInterventionDiagnosesSupported { get; }
        public bool IsInterventionEducationContentsSupported { get; }
        public bool IsInterventionInterventionPrescriptionsSupported { get; }
        public bool IsInterventionLearningResourceMetadataURIsSupported { get; }
        public bool IsInterventionMeetingTimesSupported { get; }
        public bool IsInterventionPopulationServedsSupported { get; }
        public bool IsInterventionStaffsSupported { get; }
        public bool IsInterventionURIsSupported { get; }
        public bool IsMaxDosageSupported { get; }
        public bool IsMinDosageSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsInterventionAppropriateGradeLevelsItemCreatable { get; }
        public Func<IInterventionAppropriateGradeLevel, bool> IsInterventionAppropriateGradeLevelIncluded { get; }
        public bool IsInterventionAppropriateSexesItemCreatable { get; }
        public Func<IInterventionAppropriateSex, bool> IsInterventionAppropriateSexIncluded { get; }
        public bool IsInterventionDiagnosesItemCreatable { get; }
        public Func<IInterventionDiagnosis, bool> IsInterventionDiagnosisIncluded { get; }
        public bool IsInterventionEducationContentsItemCreatable { get; }
        public Func<IInterventionEducationContent, bool> IsInterventionEducationContentIncluded { get; }
        public bool IsInterventionInterventionPrescriptionsItemCreatable { get; }
        public Func<IInterventionInterventionPrescription, bool> IsInterventionInterventionPrescriptionIncluded { get; }
        public bool IsInterventionLearningResourceMetadataURIsItemCreatable { get; }
        public Func<IInterventionLearningResourceMetadataURI, bool> IsInterventionLearningResourceMetadataURIIncluded { get; }
        public bool IsInterventionMeetingTimesItemCreatable { get; }
        public Func<IInterventionMeetingTime, bool> IsInterventionMeetingTimeIncluded { get; }
        public bool IsInterventionPopulationServedsItemCreatable { get; }
        public Func<IInterventionPopulationServed, bool> IsInterventionPopulationServedIncluded { get; }
        public bool IsInterventionStaffsItemCreatable { get; }
        public Func<IInterventionStaff, bool> IsInterventionStaffIncluded { get; }
        public bool IsInterventionURIsItemCreatable { get; }
        public Func<IInterventionURI, bool> IsInterventionURIIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "DeliveryMethodDescriptor":
                    return IsDeliveryMethodDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "InterventionAppropriateGradeLevels":
                    return IsInterventionAppropriateGradeLevelsSupported;
                case "InterventionAppropriateSexes":
                    return IsInterventionAppropriateSexesSupported;
                case "InterventionClassDescriptor":
                    return IsInterventionClassDescriptorSupported;
                case "InterventionDiagnoses":
                    return IsInterventionDiagnosesSupported;
                case "InterventionEducationContents":
                    return IsInterventionEducationContentsSupported;
                case "InterventionInterventionPrescriptions":
                    return IsInterventionInterventionPrescriptionsSupported;
                case "InterventionLearningResourceMetadataURIs":
                    return IsInterventionLearningResourceMetadataURIsSupported;
                case "InterventionMeetingTimes":
                    return IsInterventionMeetingTimesSupported;
                case "InterventionPopulationServeds":
                    return IsInterventionPopulationServedsSupported;
                case "InterventionStaffs":
                    return IsInterventionStaffsSupported;
                case "InterventionURIs":
                    return IsInterventionURIsSupported;
                case "MaxDosage":
                    return IsMaxDosageSupported;
                case "MinDosage":
                    return IsMinDosageSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "InterventionIdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "InterventionAppropriateGradeLevels":
                    return IsInterventionAppropriateGradeLevelsItemCreatable;
                case "InterventionAppropriateSexes":
                    return IsInterventionAppropriateSexesItemCreatable;
                case "InterventionDiagnoses":
                    return IsInterventionDiagnosesItemCreatable;
                case "InterventionEducationContents":
                    return IsInterventionEducationContentsItemCreatable;
                case "InterventionInterventionPrescriptions":
                    return IsInterventionInterventionPrescriptionsItemCreatable;
                case "InterventionLearningResourceMetadataURIs":
                    return IsInterventionLearningResourceMetadataURIsItemCreatable;
                case "InterventionMeetingTimes":
                    return IsInterventionMeetingTimesItemCreatable;
                case "InterventionPopulationServeds":
                    return IsInterventionPopulationServedsItemCreatable;
                case "InterventionStaffs":
                    return IsInterventionStaffsItemCreatable;
                case "InterventionURIs":
                    return IsInterventionURIsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionAppropriateGradeLevel model.
    /// </summary>
    public interface IInterventionAppropriateGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionAppropriateGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionAppropriateGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionAppropriateSex model.
    /// </summary>
    public interface IInterventionAppropriateSex : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string SexDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionAppropriateSexMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionAppropriateSexMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SexDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionClassDescriptor model.
    /// </summary>
    public interface IInterventionClassDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InterventionClassDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionClassDescriptorMappingContract : IMappingContract
    {
        public InterventionClassDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InterventionClassDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionDiagnosis model.
    /// </summary>
    public interface IInterventionDiagnosis : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string DiagnosisDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionDiagnosisMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionDiagnosisMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiagnosisDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionEducationContent model.
    /// </summary>
    public interface IInterventionEducationContent : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string ContentIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationContentResourceId { get; set; }
        string EducationContentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionEducationContentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionEducationContentMappingContract(
            bool isEducationContentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationContentReferenceSupported = isEducationContentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationContentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationContentReference":
                    return IsEducationContentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContentIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionEffectivenessRatingDescriptor model.
    /// </summary>
    public interface IInterventionEffectivenessRatingDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int InterventionEffectivenessRatingDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionEffectivenessRatingDescriptorMappingContract : IMappingContract
    {
        public InterventionEffectivenessRatingDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InterventionEffectivenessRatingDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionInterventionPrescription model.
    /// </summary>
    public interface IInterventionInterventionPrescription : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        int InterventionPrescriptionEducationOrganizationId { get; set; }
        
        string InterventionPrescriptionIdentificationCode { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? InterventionPrescriptionResourceId { get; set; }
        string InterventionPrescriptionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionInterventionPrescriptionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionInterventionPrescriptionMappingContract(
            bool isInterventionPrescriptionReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsInterventionPrescriptionReferenceSupported = isInterventionPrescriptionReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsInterventionPrescriptionReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "InterventionPrescriptionReference":
                    return IsInterventionPrescriptionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "InterventionPrescriptionEducationOrganizationId":
                    return true;
                case "InterventionPrescriptionIdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionLearningResourceMetadataURI model.
    /// </summary>
    public interface IInterventionLearningResourceMetadataURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string LearningResourceMetadataURI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionLearningResourceMetadataURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionLearningResourceMetadataURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningResourceMetadataURI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionMeetingTime model.
    /// </summary>
    public interface IInterventionMeetingTime : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        TimeSpan EndTime { get; set; }
        
        TimeSpan StartTime { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionMeetingTimeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionMeetingTimeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EndTime":
                    return true;
                case "StartTime":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPopulationServed model.
    /// </summary>
    public interface IInterventionPopulationServed : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string PopulationServedDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPopulationServedMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPopulationServedMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PopulationServedDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescription model.
    /// </summary>
    public interface IInterventionPrescription : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string InterventionPrescriptionIdentificationCode { get; set; }

        // Non-PK properties
        string DeliveryMethodDescriptor { get; set; }
        string InterventionClassDescriptor { get; set; }
        int? MaxDosage { get; set; }
        int? MinDosage { get; set; }
        string Namespace { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IInterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; }
        ICollection<IInterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; }
        ICollection<IInterventionPrescriptionDiagnosis> InterventionPrescriptionDiagnoses { get; set; }
        ICollection<IInterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; }
        ICollection<IInterventionPrescriptionLearningResourceMetadataURI> InterventionPrescriptionLearningResourceMetadataURIs { get; set; }
        ICollection<IInterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; }
        ICollection<IInterventionPrescriptionURI> InterventionPrescriptionURIs { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionMappingContract(
            bool isDeliveryMethodDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isInterventionClassDescriptorSupported,
            bool isInterventionPrescriptionAppropriateGradeLevelsSupported,
            bool isInterventionPrescriptionAppropriateSexesSupported,
            bool isInterventionPrescriptionDiagnosesSupported,
            bool isInterventionPrescriptionEducationContentsSupported,
            bool isInterventionPrescriptionLearningResourceMetadataURIsSupported,
            bool isInterventionPrescriptionPopulationServedsSupported,
            bool isInterventionPrescriptionURIsSupported,
            bool isMaxDosageSupported,
            bool isMinDosageSupported,
            bool isNamespaceSupported,
            bool isInterventionPrescriptionAppropriateGradeLevelsItemCreatable,
            Func<IInterventionPrescriptionAppropriateGradeLevel, bool> isInterventionPrescriptionAppropriateGradeLevelIncluded,
            bool isInterventionPrescriptionAppropriateSexesItemCreatable,
            Func<IInterventionPrescriptionAppropriateSex, bool> isInterventionPrescriptionAppropriateSexIncluded,
            bool isInterventionPrescriptionDiagnosesItemCreatable,
            Func<IInterventionPrescriptionDiagnosis, bool> isInterventionPrescriptionDiagnosisIncluded,
            bool isInterventionPrescriptionEducationContentsItemCreatable,
            Func<IInterventionPrescriptionEducationContent, bool> isInterventionPrescriptionEducationContentIncluded,
            bool isInterventionPrescriptionLearningResourceMetadataURIsItemCreatable,
            Func<IInterventionPrescriptionLearningResourceMetadataURI, bool> isInterventionPrescriptionLearningResourceMetadataURIIncluded,
            bool isInterventionPrescriptionPopulationServedsItemCreatable,
            Func<IInterventionPrescriptionPopulationServed, bool> isInterventionPrescriptionPopulationServedIncluded,
            bool isInterventionPrescriptionURIsItemCreatable,
            Func<IInterventionPrescriptionURI, bool> isInterventionPrescriptionURIIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDeliveryMethodDescriptorSupported = isDeliveryMethodDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsInterventionClassDescriptorSupported = isInterventionClassDescriptorSupported;
            IsInterventionPrescriptionAppropriateGradeLevelsSupported = isInterventionPrescriptionAppropriateGradeLevelsSupported;
            IsInterventionPrescriptionAppropriateSexesSupported = isInterventionPrescriptionAppropriateSexesSupported;
            IsInterventionPrescriptionDiagnosesSupported = isInterventionPrescriptionDiagnosesSupported;
            IsInterventionPrescriptionEducationContentsSupported = isInterventionPrescriptionEducationContentsSupported;
            IsInterventionPrescriptionLearningResourceMetadataURIsSupported = isInterventionPrescriptionLearningResourceMetadataURIsSupported;
            IsInterventionPrescriptionPopulationServedsSupported = isInterventionPrescriptionPopulationServedsSupported;
            IsInterventionPrescriptionURIsSupported = isInterventionPrescriptionURIsSupported;
            IsMaxDosageSupported = isMaxDosageSupported;
            IsMinDosageSupported = isMinDosageSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsInterventionPrescriptionAppropriateGradeLevelsItemCreatable = isInterventionPrescriptionAppropriateGradeLevelsItemCreatable;
            IsInterventionPrescriptionAppropriateGradeLevelIncluded = isInterventionPrescriptionAppropriateGradeLevelIncluded;
            IsInterventionPrescriptionAppropriateSexesItemCreatable = isInterventionPrescriptionAppropriateSexesItemCreatable;
            IsInterventionPrescriptionAppropriateSexIncluded = isInterventionPrescriptionAppropriateSexIncluded;
            IsInterventionPrescriptionDiagnosesItemCreatable = isInterventionPrescriptionDiagnosesItemCreatable;
            IsInterventionPrescriptionDiagnosisIncluded = isInterventionPrescriptionDiagnosisIncluded;
            IsInterventionPrescriptionEducationContentsItemCreatable = isInterventionPrescriptionEducationContentsItemCreatable;
            IsInterventionPrescriptionEducationContentIncluded = isInterventionPrescriptionEducationContentIncluded;
            IsInterventionPrescriptionLearningResourceMetadataURIsItemCreatable = isInterventionPrescriptionLearningResourceMetadataURIsItemCreatable;
            IsInterventionPrescriptionLearningResourceMetadataURIIncluded = isInterventionPrescriptionLearningResourceMetadataURIIncluded;
            IsInterventionPrescriptionPopulationServedsItemCreatable = isInterventionPrescriptionPopulationServedsItemCreatable;
            IsInterventionPrescriptionPopulationServedIncluded = isInterventionPrescriptionPopulationServedIncluded;
            IsInterventionPrescriptionURIsItemCreatable = isInterventionPrescriptionURIsItemCreatable;
            IsInterventionPrescriptionURIIncluded = isInterventionPrescriptionURIIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDeliveryMethodDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsInterventionClassDescriptorSupported { get; }
        public bool IsInterventionPrescriptionAppropriateGradeLevelsSupported { get; }
        public bool IsInterventionPrescriptionAppropriateSexesSupported { get; }
        public bool IsInterventionPrescriptionDiagnosesSupported { get; }
        public bool IsInterventionPrescriptionEducationContentsSupported { get; }
        public bool IsInterventionPrescriptionLearningResourceMetadataURIsSupported { get; }
        public bool IsInterventionPrescriptionPopulationServedsSupported { get; }
        public bool IsInterventionPrescriptionURIsSupported { get; }
        public bool IsMaxDosageSupported { get; }
        public bool IsMinDosageSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsInterventionPrescriptionAppropriateGradeLevelsItemCreatable { get; }
        public Func<IInterventionPrescriptionAppropriateGradeLevel, bool> IsInterventionPrescriptionAppropriateGradeLevelIncluded { get; }
        public bool IsInterventionPrescriptionAppropriateSexesItemCreatable { get; }
        public Func<IInterventionPrescriptionAppropriateSex, bool> IsInterventionPrescriptionAppropriateSexIncluded { get; }
        public bool IsInterventionPrescriptionDiagnosesItemCreatable { get; }
        public Func<IInterventionPrescriptionDiagnosis, bool> IsInterventionPrescriptionDiagnosisIncluded { get; }
        public bool IsInterventionPrescriptionEducationContentsItemCreatable { get; }
        public Func<IInterventionPrescriptionEducationContent, bool> IsInterventionPrescriptionEducationContentIncluded { get; }
        public bool IsInterventionPrescriptionLearningResourceMetadataURIsItemCreatable { get; }
        public Func<IInterventionPrescriptionLearningResourceMetadataURI, bool> IsInterventionPrescriptionLearningResourceMetadataURIIncluded { get; }
        public bool IsInterventionPrescriptionPopulationServedsItemCreatable { get; }
        public Func<IInterventionPrescriptionPopulationServed, bool> IsInterventionPrescriptionPopulationServedIncluded { get; }
        public bool IsInterventionPrescriptionURIsItemCreatable { get; }
        public Func<IInterventionPrescriptionURI, bool> IsInterventionPrescriptionURIIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DeliveryMethodDescriptor":
                    return IsDeliveryMethodDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "InterventionClassDescriptor":
                    return IsInterventionClassDescriptorSupported;
                case "InterventionPrescriptionAppropriateGradeLevels":
                    return IsInterventionPrescriptionAppropriateGradeLevelsSupported;
                case "InterventionPrescriptionAppropriateSexes":
                    return IsInterventionPrescriptionAppropriateSexesSupported;
                case "InterventionPrescriptionDiagnoses":
                    return IsInterventionPrescriptionDiagnosesSupported;
                case "InterventionPrescriptionEducationContents":
                    return IsInterventionPrescriptionEducationContentsSupported;
                case "InterventionPrescriptionLearningResourceMetadataURIs":
                    return IsInterventionPrescriptionLearningResourceMetadataURIsSupported;
                case "InterventionPrescriptionPopulationServeds":
                    return IsInterventionPrescriptionPopulationServedsSupported;
                case "InterventionPrescriptionURIs":
                    return IsInterventionPrescriptionURIsSupported;
                case "MaxDosage":
                    return IsMaxDosageSupported;
                case "MinDosage":
                    return IsMinDosageSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "InterventionPrescriptionIdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "InterventionPrescriptionAppropriateGradeLevels":
                    return IsInterventionPrescriptionAppropriateGradeLevelsItemCreatable;
                case "InterventionPrescriptionAppropriateSexes":
                    return IsInterventionPrescriptionAppropriateSexesItemCreatable;
                case "InterventionPrescriptionDiagnoses":
                    return IsInterventionPrescriptionDiagnosesItemCreatable;
                case "InterventionPrescriptionEducationContents":
                    return IsInterventionPrescriptionEducationContentsItemCreatable;
                case "InterventionPrescriptionLearningResourceMetadataURIs":
                    return IsInterventionPrescriptionLearningResourceMetadataURIsItemCreatable;
                case "InterventionPrescriptionPopulationServeds":
                    return IsInterventionPrescriptionPopulationServedsItemCreatable;
                case "InterventionPrescriptionURIs":
                    return IsInterventionPrescriptionURIsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionAppropriateGradeLevel model.
    /// </summary>
    public interface IInterventionPrescriptionAppropriateGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionAppropriateGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionAppropriateGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionAppropriateSex model.
    /// </summary>
    public interface IInterventionPrescriptionAppropriateSex : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string SexDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionAppropriateSexMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionAppropriateSexMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SexDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionDiagnosis model.
    /// </summary>
    public interface IInterventionPrescriptionDiagnosis : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string DiagnosisDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionDiagnosisMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionDiagnosisMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiagnosisDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionEducationContent model.
    /// </summary>
    public interface IInterventionPrescriptionEducationContent : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string ContentIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationContentResourceId { get; set; }
        string EducationContentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionEducationContentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionEducationContentMappingContract(
            bool isEducationContentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationContentReferenceSupported = isEducationContentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationContentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationContentReference":
                    return IsEducationContentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContentIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionLearningResourceMetadataURI model.
    /// </summary>
    public interface IInterventionPrescriptionLearningResourceMetadataURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string LearningResourceMetadataURI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionLearningResourceMetadataURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionLearningResourceMetadataURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningResourceMetadataURI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionPopulationServed model.
    /// </summary>
    public interface IInterventionPrescriptionPopulationServed : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string PopulationServedDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionPopulationServedMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionPopulationServedMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PopulationServedDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionPrescriptionURI model.
    /// </summary>
    public interface IInterventionPrescriptionURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionPrescription InterventionPrescription { get; set; }
        
        string URI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionPrescriptionURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionPrescriptionURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "URI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStaff model.
    /// </summary>
    public interface IInterventionStaff : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStaffMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStaffMappingContract(
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudy model.
    /// </summary>
    public interface IInterventionStudy : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string InterventionStudyIdentificationCode { get; set; }

        // Non-PK properties
        string DeliveryMethodDescriptor { get; set; }
        string InterventionClassDescriptor { get; set; }
        int InterventionPrescriptionEducationOrganizationId { get; set; }
        string InterventionPrescriptionIdentificationCode { get; set; }
        int Participants { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IInterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; }
        ICollection<IInterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; }
        ICollection<IInterventionStudyEducationContent> InterventionStudyEducationContents { get; set; }
        ICollection<IInterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; }
        ICollection<IInterventionStudyLearningResourceMetadataURI> InterventionStudyLearningResourceMetadataURIs { get; set; }
        ICollection<IInterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; }
        ICollection<IInterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; }
        ICollection<IInterventionStudyURI> InterventionStudyURIs { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? InterventionPrescriptionResourceId { get; set; }
        string InterventionPrescriptionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyMappingContract(
            bool isDeliveryMethodDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isInterventionClassDescriptorSupported,
            bool isInterventionPrescriptionEducationOrganizationIdSupported,
            bool isInterventionPrescriptionIdentificationCodeSupported,
            bool isInterventionPrescriptionReferenceSupported,
            bool isInterventionStudyAppropriateGradeLevelsSupported,
            bool isInterventionStudyAppropriateSexesSupported,
            bool isInterventionStudyEducationContentsSupported,
            bool isInterventionStudyInterventionEffectivenessesSupported,
            bool isInterventionStudyLearningResourceMetadataURIsSupported,
            bool isInterventionStudyPopulationServedsSupported,
            bool isInterventionStudyStateAbbreviationsSupported,
            bool isInterventionStudyURIsSupported,
            bool isParticipantsSupported,
            bool isInterventionStudyAppropriateGradeLevelsItemCreatable,
            Func<IInterventionStudyAppropriateGradeLevel, bool> isInterventionStudyAppropriateGradeLevelIncluded,
            bool isInterventionStudyAppropriateSexesItemCreatable,
            Func<IInterventionStudyAppropriateSex, bool> isInterventionStudyAppropriateSexIncluded,
            bool isInterventionStudyEducationContentsItemCreatable,
            Func<IInterventionStudyEducationContent, bool> isInterventionStudyEducationContentIncluded,
            bool isInterventionStudyInterventionEffectivenessesItemCreatable,
            Func<IInterventionStudyInterventionEffectiveness, bool> isInterventionStudyInterventionEffectivenessIncluded,
            bool isInterventionStudyLearningResourceMetadataURIsItemCreatable,
            Func<IInterventionStudyLearningResourceMetadataURI, bool> isInterventionStudyLearningResourceMetadataURIIncluded,
            bool isInterventionStudyPopulationServedsItemCreatable,
            Func<IInterventionStudyPopulationServed, bool> isInterventionStudyPopulationServedIncluded,
            bool isInterventionStudyStateAbbreviationsItemCreatable,
            Func<IInterventionStudyStateAbbreviation, bool> isInterventionStudyStateAbbreviationIncluded,
            bool isInterventionStudyURIsItemCreatable,
            Func<IInterventionStudyURI, bool> isInterventionStudyURIIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDeliveryMethodDescriptorSupported = isDeliveryMethodDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsInterventionClassDescriptorSupported = isInterventionClassDescriptorSupported;
            IsInterventionPrescriptionEducationOrganizationIdSupported = isInterventionPrescriptionEducationOrganizationIdSupported;
            IsInterventionPrescriptionIdentificationCodeSupported = isInterventionPrescriptionIdentificationCodeSupported;
            IsInterventionPrescriptionReferenceSupported = isInterventionPrescriptionReferenceSupported;
            IsInterventionStudyAppropriateGradeLevelsSupported = isInterventionStudyAppropriateGradeLevelsSupported;
            IsInterventionStudyAppropriateSexesSupported = isInterventionStudyAppropriateSexesSupported;
            IsInterventionStudyEducationContentsSupported = isInterventionStudyEducationContentsSupported;
            IsInterventionStudyInterventionEffectivenessesSupported = isInterventionStudyInterventionEffectivenessesSupported;
            IsInterventionStudyLearningResourceMetadataURIsSupported = isInterventionStudyLearningResourceMetadataURIsSupported;
            IsInterventionStudyPopulationServedsSupported = isInterventionStudyPopulationServedsSupported;
            IsInterventionStudyStateAbbreviationsSupported = isInterventionStudyStateAbbreviationsSupported;
            IsInterventionStudyURIsSupported = isInterventionStudyURIsSupported;
            IsParticipantsSupported = isParticipantsSupported;
            IsInterventionStudyAppropriateGradeLevelsItemCreatable = isInterventionStudyAppropriateGradeLevelsItemCreatable;
            IsInterventionStudyAppropriateGradeLevelIncluded = isInterventionStudyAppropriateGradeLevelIncluded;
            IsInterventionStudyAppropriateSexesItemCreatable = isInterventionStudyAppropriateSexesItemCreatable;
            IsInterventionStudyAppropriateSexIncluded = isInterventionStudyAppropriateSexIncluded;
            IsInterventionStudyEducationContentsItemCreatable = isInterventionStudyEducationContentsItemCreatable;
            IsInterventionStudyEducationContentIncluded = isInterventionStudyEducationContentIncluded;
            IsInterventionStudyInterventionEffectivenessesItemCreatable = isInterventionStudyInterventionEffectivenessesItemCreatable;
            IsInterventionStudyInterventionEffectivenessIncluded = isInterventionStudyInterventionEffectivenessIncluded;
            IsInterventionStudyLearningResourceMetadataURIsItemCreatable = isInterventionStudyLearningResourceMetadataURIsItemCreatable;
            IsInterventionStudyLearningResourceMetadataURIIncluded = isInterventionStudyLearningResourceMetadataURIIncluded;
            IsInterventionStudyPopulationServedsItemCreatable = isInterventionStudyPopulationServedsItemCreatable;
            IsInterventionStudyPopulationServedIncluded = isInterventionStudyPopulationServedIncluded;
            IsInterventionStudyStateAbbreviationsItemCreatable = isInterventionStudyStateAbbreviationsItemCreatable;
            IsInterventionStudyStateAbbreviationIncluded = isInterventionStudyStateAbbreviationIncluded;
            IsInterventionStudyURIsItemCreatable = isInterventionStudyURIsItemCreatable;
            IsInterventionStudyURIIncluded = isInterventionStudyURIIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDeliveryMethodDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsInterventionClassDescriptorSupported { get; }
        public bool IsInterventionPrescriptionEducationOrganizationIdSupported { get; }
        public bool IsInterventionPrescriptionIdentificationCodeSupported { get; }
        public bool IsInterventionPrescriptionReferenceSupported { get; }
        public bool IsInterventionStudyAppropriateGradeLevelsSupported { get; }
        public bool IsInterventionStudyAppropriateSexesSupported { get; }
        public bool IsInterventionStudyEducationContentsSupported { get; }
        public bool IsInterventionStudyInterventionEffectivenessesSupported { get; }
        public bool IsInterventionStudyLearningResourceMetadataURIsSupported { get; }
        public bool IsInterventionStudyPopulationServedsSupported { get; }
        public bool IsInterventionStudyStateAbbreviationsSupported { get; }
        public bool IsInterventionStudyURIsSupported { get; }
        public bool IsParticipantsSupported { get; }
        public bool IsInterventionStudyAppropriateGradeLevelsItemCreatable { get; }
        public Func<IInterventionStudyAppropriateGradeLevel, bool> IsInterventionStudyAppropriateGradeLevelIncluded { get; }
        public bool IsInterventionStudyAppropriateSexesItemCreatable { get; }
        public Func<IInterventionStudyAppropriateSex, bool> IsInterventionStudyAppropriateSexIncluded { get; }
        public bool IsInterventionStudyEducationContentsItemCreatable { get; }
        public Func<IInterventionStudyEducationContent, bool> IsInterventionStudyEducationContentIncluded { get; }
        public bool IsInterventionStudyInterventionEffectivenessesItemCreatable { get; }
        public Func<IInterventionStudyInterventionEffectiveness, bool> IsInterventionStudyInterventionEffectivenessIncluded { get; }
        public bool IsInterventionStudyLearningResourceMetadataURIsItemCreatable { get; }
        public Func<IInterventionStudyLearningResourceMetadataURI, bool> IsInterventionStudyLearningResourceMetadataURIIncluded { get; }
        public bool IsInterventionStudyPopulationServedsItemCreatable { get; }
        public Func<IInterventionStudyPopulationServed, bool> IsInterventionStudyPopulationServedIncluded { get; }
        public bool IsInterventionStudyStateAbbreviationsItemCreatable { get; }
        public Func<IInterventionStudyStateAbbreviation, bool> IsInterventionStudyStateAbbreviationIncluded { get; }
        public bool IsInterventionStudyURIsItemCreatable { get; }
        public Func<IInterventionStudyURI, bool> IsInterventionStudyURIIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DeliveryMethodDescriptor":
                    return IsDeliveryMethodDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "InterventionClassDescriptor":
                    return IsInterventionClassDescriptorSupported;
                case "InterventionPrescriptionEducationOrganizationId":
                    return IsInterventionPrescriptionEducationOrganizationIdSupported;
                case "InterventionPrescriptionIdentificationCode":
                    return IsInterventionPrescriptionIdentificationCodeSupported;
                case "InterventionPrescriptionReference":
                    return IsInterventionPrescriptionReferenceSupported;
                case "InterventionStudyAppropriateGradeLevels":
                    return IsInterventionStudyAppropriateGradeLevelsSupported;
                case "InterventionStudyAppropriateSexes":
                    return IsInterventionStudyAppropriateSexesSupported;
                case "InterventionStudyEducationContents":
                    return IsInterventionStudyEducationContentsSupported;
                case "InterventionStudyInterventionEffectivenesses":
                    return IsInterventionStudyInterventionEffectivenessesSupported;
                case "InterventionStudyLearningResourceMetadataURIs":
                    return IsInterventionStudyLearningResourceMetadataURIsSupported;
                case "InterventionStudyPopulationServeds":
                    return IsInterventionStudyPopulationServedsSupported;
                case "InterventionStudyStateAbbreviations":
                    return IsInterventionStudyStateAbbreviationsSupported;
                case "InterventionStudyURIs":
                    return IsInterventionStudyURIsSupported;
                case "Participants":
                    return IsParticipantsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "InterventionStudyIdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "InterventionStudyAppropriateGradeLevels":
                    return IsInterventionStudyAppropriateGradeLevelsItemCreatable;
                case "InterventionStudyAppropriateSexes":
                    return IsInterventionStudyAppropriateSexesItemCreatable;
                case "InterventionStudyEducationContents":
                    return IsInterventionStudyEducationContentsItemCreatable;
                case "InterventionStudyInterventionEffectivenesses":
                    return IsInterventionStudyInterventionEffectivenessesItemCreatable;
                case "InterventionStudyLearningResourceMetadataURIs":
                    return IsInterventionStudyLearningResourceMetadataURIsItemCreatable;
                case "InterventionStudyPopulationServeds":
                    return IsInterventionStudyPopulationServedsItemCreatable;
                case "InterventionStudyStateAbbreviations":
                    return IsInterventionStudyStateAbbreviationsItemCreatable;
                case "InterventionStudyURIs":
                    return IsInterventionStudyURIsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyAppropriateGradeLevel model.
    /// </summary>
    public interface IInterventionStudyAppropriateGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyAppropriateGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyAppropriateGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyAppropriateSex model.
    /// </summary>
    public interface IInterventionStudyAppropriateSex : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string SexDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyAppropriateSexMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyAppropriateSexMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SexDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyEducationContent model.
    /// </summary>
    public interface IInterventionStudyEducationContent : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string ContentIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationContentResourceId { get; set; }
        string EducationContentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyEducationContentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyEducationContentMappingContract(
            bool isEducationContentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationContentReferenceSupported = isEducationContentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationContentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationContentReference":
                    return IsEducationContentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContentIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyInterventionEffectiveness model.
    /// </summary>
    public interface IInterventionStudyInterventionEffectiveness : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string DiagnosisDescriptor { get; set; }
        
        string GradeLevelDescriptor { get; set; }
        
        string PopulationServedDescriptor { get; set; }

        // Non-PK properties
        int? ImprovementIndex { get; set; }
        string InterventionEffectivenessRatingDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyInterventionEffectivenessMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyInterventionEffectivenessMappingContract(
            bool isImprovementIndexSupported,
            bool isInterventionEffectivenessRatingDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsImprovementIndexSupported = isImprovementIndexSupported;
            IsInterventionEffectivenessRatingDescriptorSupported = isInterventionEffectivenessRatingDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsImprovementIndexSupported { get; }
        public bool IsInterventionEffectivenessRatingDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ImprovementIndex":
                    return IsImprovementIndexSupported;
                case "InterventionEffectivenessRatingDescriptor":
                    return IsInterventionEffectivenessRatingDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiagnosisDescriptor":
                    return true;
                case "GradeLevelDescriptor":
                    return true;
                case "PopulationServedDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyLearningResourceMetadataURI model.
    /// </summary>
    public interface IInterventionStudyLearningResourceMetadataURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string LearningResourceMetadataURI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyLearningResourceMetadataURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyLearningResourceMetadataURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningResourceMetadataURI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyPopulationServed model.
    /// </summary>
    public interface IInterventionStudyPopulationServed : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string PopulationServedDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyPopulationServedMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyPopulationServedMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PopulationServedDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyStateAbbreviation model.
    /// </summary>
    public interface IInterventionStudyStateAbbreviation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string StateAbbreviationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyStateAbbreviationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyStateAbbreviationMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StateAbbreviationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionStudyURI model.
    /// </summary>
    public interface IInterventionStudyURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IInterventionStudy InterventionStudy { get; set; }
        
        string URI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionStudyURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionStudyURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "URI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the InterventionURI model.
    /// </summary>
    public interface IInterventionURI : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IIntervention Intervention { get; set; }
        
        string URI { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class InterventionURIMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public InterventionURIMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "URI":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LanguageDescriptor model.
    /// </summary>
    public interface ILanguageDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LanguageDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LanguageDescriptorMappingContract : IMappingContract
    {
        public LanguageDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LanguageInstructionProgramServiceDescriptor model.
    /// </summary>
    public interface ILanguageInstructionProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LanguageInstructionProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LanguageInstructionProgramServiceDescriptorMappingContract : IMappingContract
    {
        public LanguageInstructionProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageInstructionProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LanguageUseDescriptor model.
    /// </summary>
    public interface ILanguageUseDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LanguageUseDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LanguageUseDescriptorMappingContract : IMappingContract
    {
        public LanguageUseDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageUseDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningObjective model.
    /// </summary>
    public interface ILearningObjective : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string LearningObjectiveId { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties
        string Description { get; set; }
        string Nomenclature { get; set; }
        string Objective { get; set; }
        string ParentLearningObjectiveId { get; set; }
        string ParentNamespace { get; set; }
        string SuccessCriteria { get; set; }

        // One-to-one relationships

        ILearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; }

        // Lists
        ICollection<ILearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; }
        ICollection<ILearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; }
        ICollection<ILearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; }

        // Resource reference data
        Guid? ParentLearningObjectiveResourceId { get; set; }
        string ParentLearningObjectiveDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningObjectiveMappingContract(
            bool isDescriptionSupported,
            bool isLearningObjectiveAcademicSubjectsSupported,
            bool isLearningObjectiveContentStandardSupported,
            bool isLearningObjectiveGradeLevelsSupported,
            bool isLearningObjectiveLearningStandardsSupported,
            bool isNomenclatureSupported,
            bool isObjectiveSupported,
            bool isParentLearningObjectiveIdSupported,
            bool isParentLearningObjectiveReferenceSupported,
            bool isParentNamespaceSupported,
            bool isSuccessCriteriaSupported,
            bool isLearningObjectiveContentStandardCreatable,
            bool isLearningObjectiveAcademicSubjectsItemCreatable,
            Func<ILearningObjectiveAcademicSubject, bool> isLearningObjectiveAcademicSubjectIncluded,
            bool isLearningObjectiveGradeLevelsItemCreatable,
            Func<ILearningObjectiveGradeLevel, bool> isLearningObjectiveGradeLevelIncluded,
            bool isLearningObjectiveLearningStandardsItemCreatable,
            Func<ILearningObjectiveLearningStandard, bool> isLearningObjectiveLearningStandardIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDescriptionSupported = isDescriptionSupported;
            IsLearningObjectiveAcademicSubjectsSupported = isLearningObjectiveAcademicSubjectsSupported;
            IsLearningObjectiveContentStandardSupported = isLearningObjectiveContentStandardSupported;
            IsLearningObjectiveGradeLevelsSupported = isLearningObjectiveGradeLevelsSupported;
            IsLearningObjectiveLearningStandardsSupported = isLearningObjectiveLearningStandardsSupported;
            IsNomenclatureSupported = isNomenclatureSupported;
            IsObjectiveSupported = isObjectiveSupported;
            IsParentLearningObjectiveIdSupported = isParentLearningObjectiveIdSupported;
            IsParentLearningObjectiveReferenceSupported = isParentLearningObjectiveReferenceSupported;
            IsParentNamespaceSupported = isParentNamespaceSupported;
            IsSuccessCriteriaSupported = isSuccessCriteriaSupported;
            IsLearningObjectiveContentStandardCreatable = isLearningObjectiveContentStandardCreatable;
            IsLearningObjectiveAcademicSubjectsItemCreatable = isLearningObjectiveAcademicSubjectsItemCreatable;
            IsLearningObjectiveAcademicSubjectIncluded = isLearningObjectiveAcademicSubjectIncluded;
            IsLearningObjectiveGradeLevelsItemCreatable = isLearningObjectiveGradeLevelsItemCreatable;
            IsLearningObjectiveGradeLevelIncluded = isLearningObjectiveGradeLevelIncluded;
            IsLearningObjectiveLearningStandardsItemCreatable = isLearningObjectiveLearningStandardsItemCreatable;
            IsLearningObjectiveLearningStandardIncluded = isLearningObjectiveLearningStandardIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDescriptionSupported { get; }
        public bool IsLearningObjectiveAcademicSubjectsSupported { get; }
        public bool IsLearningObjectiveContentStandardSupported { get; }
        public bool IsLearningObjectiveGradeLevelsSupported { get; }
        public bool IsLearningObjectiveLearningStandardsSupported { get; }
        public bool IsNomenclatureSupported { get; }
        public bool IsObjectiveSupported { get; }
        public bool IsParentLearningObjectiveIdSupported { get; }
        public bool IsParentLearningObjectiveReferenceSupported { get; }
        public bool IsParentNamespaceSupported { get; }
        public bool IsSuccessCriteriaSupported { get; }
        public bool IsLearningObjectiveContentStandardCreatable { get; }
        public bool IsLearningObjectiveAcademicSubjectsItemCreatable { get; }
        public Func<ILearningObjectiveAcademicSubject, bool> IsLearningObjectiveAcademicSubjectIncluded { get; }
        public bool IsLearningObjectiveGradeLevelsItemCreatable { get; }
        public Func<ILearningObjectiveGradeLevel, bool> IsLearningObjectiveGradeLevelIncluded { get; }
        public bool IsLearningObjectiveLearningStandardsItemCreatable { get; }
        public Func<ILearningObjectiveLearningStandard, bool> IsLearningObjectiveLearningStandardIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Description":
                    return IsDescriptionSupported;
                case "LearningObjectiveAcademicSubjects":
                    return IsLearningObjectiveAcademicSubjectsSupported;
                case "LearningObjectiveContentStandard":
                    return IsLearningObjectiveContentStandardSupported;
                case "LearningObjectiveGradeLevels":
                    return IsLearningObjectiveGradeLevelsSupported;
                case "LearningObjectiveLearningStandards":
                    return IsLearningObjectiveLearningStandardsSupported;
                case "Nomenclature":
                    return IsNomenclatureSupported;
                case "Objective":
                    return IsObjectiveSupported;
                case "ParentLearningObjectiveId":
                    return IsParentLearningObjectiveIdSupported;
                case "ParentLearningObjectiveReference":
                    return IsParentLearningObjectiveReferenceSupported;
                case "ParentNamespace":
                    return IsParentNamespaceSupported;
                case "SuccessCriteria":
                    return IsSuccessCriteriaSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningObjectiveId":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "LearningObjectiveContentStandard":
                    return IsLearningObjectiveContentStandardCreatable;
                case "LearningObjectiveAcademicSubjects":
                    return IsLearningObjectiveAcademicSubjectsItemCreatable;
                case "LearningObjectiveGradeLevels":
                    return IsLearningObjectiveGradeLevelsItemCreatable;
                case "LearningObjectiveLearningStandards":
                    return IsLearningObjectiveLearningStandardsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningObjectiveAcademicSubject model.
    /// </summary>
    public interface ILearningObjectiveAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningObjective LearningObjective { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningObjectiveAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningObjectiveAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningObjectiveContentStandard model.
    /// </summary>
    public interface ILearningObjectiveContentStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningObjective LearningObjective { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }
        int? MandatingEducationOrganizationId { get; set; }
        DateTime? PublicationDate { get; set; }
        string PublicationStatusDescriptor { get; set; }
        short? PublicationYear { get; set; }
        string Title { get; set; }
        string URI { get; set; }
        string Version { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ILearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; }

        // Resource reference data
        Guid? MandatingEducationOrganizationResourceId { get; set; }
        string MandatingEducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningObjectiveContentStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningObjectiveContentStandardMappingContract(
            bool isBeginDateSupported,
            bool isEndDateSupported,
            bool isLearningObjectiveContentStandardAuthorsSupported,
            bool isMandatingEducationOrganizationIdSupported,
            bool isMandatingEducationOrganizationReferenceSupported,
            bool isPublicationDateSupported,
            bool isPublicationStatusDescriptorSupported,
            bool isPublicationYearSupported,
            bool isTitleSupported,
            bool isURISupported,
            bool isVersionSupported,
            bool isLearningObjectiveContentStandardAuthorsItemCreatable,
            Func<ILearningObjectiveContentStandardAuthor, bool> isLearningObjectiveContentStandardAuthorIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsLearningObjectiveContentStandardAuthorsSupported = isLearningObjectiveContentStandardAuthorsSupported;
            IsMandatingEducationOrganizationIdSupported = isMandatingEducationOrganizationIdSupported;
            IsMandatingEducationOrganizationReferenceSupported = isMandatingEducationOrganizationReferenceSupported;
            IsPublicationDateSupported = isPublicationDateSupported;
            IsPublicationStatusDescriptorSupported = isPublicationStatusDescriptorSupported;
            IsPublicationYearSupported = isPublicationYearSupported;
            IsTitleSupported = isTitleSupported;
            IsURISupported = isURISupported;
            IsVersionSupported = isVersionSupported;
            IsLearningObjectiveContentStandardAuthorsItemCreatable = isLearningObjectiveContentStandardAuthorsItemCreatable;
            IsLearningObjectiveContentStandardAuthorIncluded = isLearningObjectiveContentStandardAuthorIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsLearningObjectiveContentStandardAuthorsSupported { get; }
        public bool IsMandatingEducationOrganizationIdSupported { get; }
        public bool IsMandatingEducationOrganizationReferenceSupported { get; }
        public bool IsPublicationDateSupported { get; }
        public bool IsPublicationStatusDescriptorSupported { get; }
        public bool IsPublicationYearSupported { get; }
        public bool IsTitleSupported { get; }
        public bool IsURISupported { get; }
        public bool IsVersionSupported { get; }
        public bool IsLearningObjectiveContentStandardAuthorsItemCreatable { get; }
        public Func<ILearningObjectiveContentStandardAuthor, bool> IsLearningObjectiveContentStandardAuthorIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "LearningObjectiveContentStandardAuthors":
                    return IsLearningObjectiveContentStandardAuthorsSupported;
                case "MandatingEducationOrganizationId":
                    return IsMandatingEducationOrganizationIdSupported;
                case "MandatingEducationOrganizationReference":
                    return IsMandatingEducationOrganizationReferenceSupported;
                case "PublicationDate":
                    return IsPublicationDateSupported;
                case "PublicationStatusDescriptor":
                    return IsPublicationStatusDescriptorSupported;
                case "PublicationYear":
                    return IsPublicationYearSupported;
                case "Title":
                    return IsTitleSupported;
                case "URI":
                    return IsURISupported;
                case "Version":
                    return IsVersionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "LearningObjectiveContentStandardAuthors":
                    return IsLearningObjectiveContentStandardAuthorsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningObjectiveContentStandardAuthor model.
    /// </summary>
    public interface ILearningObjectiveContentStandardAuthor : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; }
        
        string Author { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningObjectiveContentStandardAuthorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningObjectiveContentStandardAuthorMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Author":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningObjectiveGradeLevel model.
    /// </summary>
    public interface ILearningObjectiveGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningObjective LearningObjective { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningObjectiveGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningObjectiveGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningObjectiveLearningStandard model.
    /// </summary>
    public interface ILearningObjectiveLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningObjective LearningObjective { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningObjectiveLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningObjectiveLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandard model.
    /// </summary>
    public interface ILearningStandard : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string LearningStandardId { get; set; }

        // Non-PK properties
        string CourseTitle { get; set; }
        string Description { get; set; }
        string LearningStandardCategoryDescriptor { get; set; }
        string LearningStandardItemCode { get; set; }
        string LearningStandardScopeDescriptor { get; set; }
        string Namespace { get; set; }
        string ParentLearningStandardId { get; set; }
        string SuccessCriteria { get; set; }
        string URI { get; set; }

        // One-to-one relationships

        ILearningStandardContentStandard LearningStandardContentStandard { get; set; }

        // Lists
        ICollection<ILearningStandardAcademicSubject> LearningStandardAcademicSubjects { get; set; }
        ICollection<ILearningStandardGradeLevel> LearningStandardGradeLevels { get; set; }
        ICollection<ILearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; }
        ICollection<ILearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; }

        // Resource reference data
        Guid? ParentLearningStandardResourceId { get; set; }
        string ParentLearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardMappingContract(
            bool isCourseTitleSupported,
            bool isDescriptionSupported,
            bool isLearningStandardAcademicSubjectsSupported,
            bool isLearningStandardCategoryDescriptorSupported,
            bool isLearningStandardContentStandardSupported,
            bool isLearningStandardGradeLevelsSupported,
            bool isLearningStandardIdentificationCodesSupported,
            bool isLearningStandardItemCodeSupported,
            bool isLearningStandardPrerequisiteLearningStandardsSupported,
            bool isLearningStandardScopeDescriptorSupported,
            bool isNamespaceSupported,
            bool isParentLearningStandardIdSupported,
            bool isParentLearningStandardReferenceSupported,
            bool isSuccessCriteriaSupported,
            bool isURISupported,
            bool isLearningStandardContentStandardCreatable,
            bool isLearningStandardAcademicSubjectsItemCreatable,
            Func<ILearningStandardAcademicSubject, bool> isLearningStandardAcademicSubjectIncluded,
            bool isLearningStandardGradeLevelsItemCreatable,
            Func<ILearningStandardGradeLevel, bool> isLearningStandardGradeLevelIncluded,
            bool isLearningStandardIdentificationCodesItemCreatable,
            Func<ILearningStandardIdentificationCode, bool> isLearningStandardIdentificationCodeIncluded,
            bool isLearningStandardPrerequisiteLearningStandardsItemCreatable,
            Func<ILearningStandardPrerequisiteLearningStandard, bool> isLearningStandardPrerequisiteLearningStandardIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCourseTitleSupported = isCourseTitleSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsLearningStandardAcademicSubjectsSupported = isLearningStandardAcademicSubjectsSupported;
            IsLearningStandardCategoryDescriptorSupported = isLearningStandardCategoryDescriptorSupported;
            IsLearningStandardContentStandardSupported = isLearningStandardContentStandardSupported;
            IsLearningStandardGradeLevelsSupported = isLearningStandardGradeLevelsSupported;
            IsLearningStandardIdentificationCodesSupported = isLearningStandardIdentificationCodesSupported;
            IsLearningStandardItemCodeSupported = isLearningStandardItemCodeSupported;
            IsLearningStandardPrerequisiteLearningStandardsSupported = isLearningStandardPrerequisiteLearningStandardsSupported;
            IsLearningStandardScopeDescriptorSupported = isLearningStandardScopeDescriptorSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsParentLearningStandardIdSupported = isParentLearningStandardIdSupported;
            IsParentLearningStandardReferenceSupported = isParentLearningStandardReferenceSupported;
            IsSuccessCriteriaSupported = isSuccessCriteriaSupported;
            IsURISupported = isURISupported;
            IsLearningStandardContentStandardCreatable = isLearningStandardContentStandardCreatable;
            IsLearningStandardAcademicSubjectsItemCreatable = isLearningStandardAcademicSubjectsItemCreatable;
            IsLearningStandardAcademicSubjectIncluded = isLearningStandardAcademicSubjectIncluded;
            IsLearningStandardGradeLevelsItemCreatable = isLearningStandardGradeLevelsItemCreatable;
            IsLearningStandardGradeLevelIncluded = isLearningStandardGradeLevelIncluded;
            IsLearningStandardIdentificationCodesItemCreatable = isLearningStandardIdentificationCodesItemCreatable;
            IsLearningStandardIdentificationCodeIncluded = isLearningStandardIdentificationCodeIncluded;
            IsLearningStandardPrerequisiteLearningStandardsItemCreatable = isLearningStandardPrerequisiteLearningStandardsItemCreatable;
            IsLearningStandardPrerequisiteLearningStandardIncluded = isLearningStandardPrerequisiteLearningStandardIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCourseTitleSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsLearningStandardAcademicSubjectsSupported { get; }
        public bool IsLearningStandardCategoryDescriptorSupported { get; }
        public bool IsLearningStandardContentStandardSupported { get; }
        public bool IsLearningStandardGradeLevelsSupported { get; }
        public bool IsLearningStandardIdentificationCodesSupported { get; }
        public bool IsLearningStandardItemCodeSupported { get; }
        public bool IsLearningStandardPrerequisiteLearningStandardsSupported { get; }
        public bool IsLearningStandardScopeDescriptorSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsParentLearningStandardIdSupported { get; }
        public bool IsParentLearningStandardReferenceSupported { get; }
        public bool IsSuccessCriteriaSupported { get; }
        public bool IsURISupported { get; }
        public bool IsLearningStandardContentStandardCreatable { get; }
        public bool IsLearningStandardAcademicSubjectsItemCreatable { get; }
        public Func<ILearningStandardAcademicSubject, bool> IsLearningStandardAcademicSubjectIncluded { get; }
        public bool IsLearningStandardGradeLevelsItemCreatable { get; }
        public Func<ILearningStandardGradeLevel, bool> IsLearningStandardGradeLevelIncluded { get; }
        public bool IsLearningStandardIdentificationCodesItemCreatable { get; }
        public Func<ILearningStandardIdentificationCode, bool> IsLearningStandardIdentificationCodeIncluded { get; }
        public bool IsLearningStandardPrerequisiteLearningStandardsItemCreatable { get; }
        public Func<ILearningStandardPrerequisiteLearningStandard, bool> IsLearningStandardPrerequisiteLearningStandardIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CourseTitle":
                    return IsCourseTitleSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "LearningStandardAcademicSubjects":
                    return IsLearningStandardAcademicSubjectsSupported;
                case "LearningStandardCategoryDescriptor":
                    return IsLearningStandardCategoryDescriptorSupported;
                case "LearningStandardContentStandard":
                    return IsLearningStandardContentStandardSupported;
                case "LearningStandardGradeLevels":
                    return IsLearningStandardGradeLevelsSupported;
                case "LearningStandardIdentificationCodes":
                    return IsLearningStandardIdentificationCodesSupported;
                case "LearningStandardItemCode":
                    return IsLearningStandardItemCodeSupported;
                case "LearningStandardPrerequisiteLearningStandards":
                    return IsLearningStandardPrerequisiteLearningStandardsSupported;
                case "LearningStandardScopeDescriptor":
                    return IsLearningStandardScopeDescriptorSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ParentLearningStandardId":
                    return IsParentLearningStandardIdSupported;
                case "ParentLearningStandardReference":
                    return IsParentLearningStandardReferenceSupported;
                case "SuccessCriteria":
                    return IsSuccessCriteriaSupported;
                case "URI":
                    return IsURISupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardContentStandard":
                    return IsLearningStandardContentStandardCreatable;
                case "LearningStandardAcademicSubjects":
                    return IsLearningStandardAcademicSubjectsItemCreatable;
                case "LearningStandardGradeLevels":
                    return IsLearningStandardGradeLevelsItemCreatable;
                case "LearningStandardIdentificationCodes":
                    return IsLearningStandardIdentificationCodesItemCreatable;
                case "LearningStandardPrerequisiteLearningStandards":
                    return IsLearningStandardPrerequisiteLearningStandardsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardAcademicSubject model.
    /// </summary>
    public interface ILearningStandardAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningStandard LearningStandard { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardCategoryDescriptor model.
    /// </summary>
    public interface ILearningStandardCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LearningStandardCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardCategoryDescriptorMappingContract : IMappingContract
    {
        public LearningStandardCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardContentStandard model.
    /// </summary>
    public interface ILearningStandardContentStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningStandard LearningStandard { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }
        int? MandatingEducationOrganizationId { get; set; }
        DateTime? PublicationDate { get; set; }
        string PublicationStatusDescriptor { get; set; }
        short? PublicationYear { get; set; }
        string Title { get; set; }
        string URI { get; set; }
        string Version { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ILearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; }

        // Resource reference data
        Guid? MandatingEducationOrganizationResourceId { get; set; }
        string MandatingEducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardContentStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardContentStandardMappingContract(
            bool isBeginDateSupported,
            bool isEndDateSupported,
            bool isLearningStandardContentStandardAuthorsSupported,
            bool isMandatingEducationOrganizationIdSupported,
            bool isMandatingEducationOrganizationReferenceSupported,
            bool isPublicationDateSupported,
            bool isPublicationStatusDescriptorSupported,
            bool isPublicationYearSupported,
            bool isTitleSupported,
            bool isURISupported,
            bool isVersionSupported,
            bool isLearningStandardContentStandardAuthorsItemCreatable,
            Func<ILearningStandardContentStandardAuthor, bool> isLearningStandardContentStandardAuthorIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsLearningStandardContentStandardAuthorsSupported = isLearningStandardContentStandardAuthorsSupported;
            IsMandatingEducationOrganizationIdSupported = isMandatingEducationOrganizationIdSupported;
            IsMandatingEducationOrganizationReferenceSupported = isMandatingEducationOrganizationReferenceSupported;
            IsPublicationDateSupported = isPublicationDateSupported;
            IsPublicationStatusDescriptorSupported = isPublicationStatusDescriptorSupported;
            IsPublicationYearSupported = isPublicationYearSupported;
            IsTitleSupported = isTitleSupported;
            IsURISupported = isURISupported;
            IsVersionSupported = isVersionSupported;
            IsLearningStandardContentStandardAuthorsItemCreatable = isLearningStandardContentStandardAuthorsItemCreatable;
            IsLearningStandardContentStandardAuthorIncluded = isLearningStandardContentStandardAuthorIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsLearningStandardContentStandardAuthorsSupported { get; }
        public bool IsMandatingEducationOrganizationIdSupported { get; }
        public bool IsMandatingEducationOrganizationReferenceSupported { get; }
        public bool IsPublicationDateSupported { get; }
        public bool IsPublicationStatusDescriptorSupported { get; }
        public bool IsPublicationYearSupported { get; }
        public bool IsTitleSupported { get; }
        public bool IsURISupported { get; }
        public bool IsVersionSupported { get; }
        public bool IsLearningStandardContentStandardAuthorsItemCreatable { get; }
        public Func<ILearningStandardContentStandardAuthor, bool> IsLearningStandardContentStandardAuthorIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "LearningStandardContentStandardAuthors":
                    return IsLearningStandardContentStandardAuthorsSupported;
                case "MandatingEducationOrganizationId":
                    return IsMandatingEducationOrganizationIdSupported;
                case "MandatingEducationOrganizationReference":
                    return IsMandatingEducationOrganizationReferenceSupported;
                case "PublicationDate":
                    return IsPublicationDateSupported;
                case "PublicationStatusDescriptor":
                    return IsPublicationStatusDescriptorSupported;
                case "PublicationYear":
                    return IsPublicationYearSupported;
                case "Title":
                    return IsTitleSupported;
                case "URI":
                    return IsURISupported;
                case "Version":
                    return IsVersionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardContentStandardAuthors":
                    return IsLearningStandardContentStandardAuthorsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardContentStandardAuthor model.
    /// </summary>
    public interface ILearningStandardContentStandardAuthor : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningStandardContentStandard LearningStandardContentStandard { get; set; }
        
        string Author { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardContentStandardAuthorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardContentStandardAuthorMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Author":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardEquivalenceAssociation model.
    /// </summary>
    public interface ILearningStandardEquivalenceAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string SourceLearningStandardId { get; set; }
        
        string TargetLearningStandardId { get; set; }

        // Non-PK properties
        DateTime? EffectiveDate { get; set; }
        string LearningStandardEquivalenceStrengthDescription { get; set; }
        string LearningStandardEquivalenceStrengthDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SourceLearningStandardResourceId { get; set; }
        string SourceLearningStandardDiscriminator { get; set; }
        Guid? TargetLearningStandardResourceId { get; set; }
        string TargetLearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardEquivalenceAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardEquivalenceAssociationMappingContract(
            bool isEffectiveDateSupported,
            bool isLearningStandardEquivalenceStrengthDescriptionSupported,
            bool isLearningStandardEquivalenceStrengthDescriptorSupported,
            bool isSourceLearningStandardReferenceSupported,
            bool isTargetLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEffectiveDateSupported = isEffectiveDateSupported;
            IsLearningStandardEquivalenceStrengthDescriptionSupported = isLearningStandardEquivalenceStrengthDescriptionSupported;
            IsLearningStandardEquivalenceStrengthDescriptorSupported = isLearningStandardEquivalenceStrengthDescriptorSupported;
            IsSourceLearningStandardReferenceSupported = isSourceLearningStandardReferenceSupported;
            IsTargetLearningStandardReferenceSupported = isTargetLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEffectiveDateSupported { get; }
        public bool IsLearningStandardEquivalenceStrengthDescriptionSupported { get; }
        public bool IsLearningStandardEquivalenceStrengthDescriptorSupported { get; }
        public bool IsSourceLearningStandardReferenceSupported { get; }
        public bool IsTargetLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EffectiveDate":
                    return IsEffectiveDateSupported;
                case "LearningStandardEquivalenceStrengthDescription":
                    return IsLearningStandardEquivalenceStrengthDescriptionSupported;
                case "LearningStandardEquivalenceStrengthDescriptor":
                    return IsLearningStandardEquivalenceStrengthDescriptorSupported;
                case "SourceLearningStandardReference":
                    return IsSourceLearningStandardReferenceSupported;
                case "TargetLearningStandardReference":
                    return IsTargetLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "SourceLearningStandardId":
                    return true;
                case "TargetLearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardEquivalenceStrengthDescriptor model.
    /// </summary>
    public interface ILearningStandardEquivalenceStrengthDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LearningStandardEquivalenceStrengthDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardEquivalenceStrengthDescriptorMappingContract : IMappingContract
    {
        public LearningStandardEquivalenceStrengthDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardEquivalenceStrengthDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardGradeLevel model.
    /// </summary>
    public interface ILearningStandardGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningStandard LearningStandard { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardIdentificationCode model.
    /// </summary>
    public interface ILearningStandardIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningStandard LearningStandard { get; set; }
        
        string ContentStandardName { get; set; }
        
        string IdentificationCode { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardIdentificationCodeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContentStandardName":
                    return true;
                case "IdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardPrerequisiteLearningStandard model.
    /// </summary>
    public interface ILearningStandardPrerequisiteLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILearningStandard LearningStandard { get; set; }
        
        string PrerequisiteLearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? PrerequisiteLearningStandardResourceId { get; set; }
        string PrerequisiteLearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardPrerequisiteLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LearningStandardPrerequisiteLearningStandardMappingContract(
            bool isPrerequisiteLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrerequisiteLearningStandardReferenceSupported = isPrerequisiteLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrerequisiteLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrerequisiteLearningStandardReference":
                    return IsPrerequisiteLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PrerequisiteLearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LearningStandardScopeDescriptor model.
    /// </summary>
    public interface ILearningStandardScopeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LearningStandardScopeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LearningStandardScopeDescriptorMappingContract : IMappingContract
    {
        public LearningStandardScopeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardScopeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LevelOfEducationDescriptor model.
    /// </summary>
    public interface ILevelOfEducationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LevelOfEducationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LevelOfEducationDescriptorMappingContract : IMappingContract
    {
        public LevelOfEducationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LevelOfEducationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LicenseStatusDescriptor model.
    /// </summary>
    public interface ILicenseStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LicenseStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LicenseStatusDescriptorMappingContract : IMappingContract
    {
        public LicenseStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LicenseStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LicenseTypeDescriptor model.
    /// </summary>
    public interface ILicenseTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LicenseTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LicenseTypeDescriptorMappingContract : IMappingContract
    {
        public LicenseTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LicenseTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LimitedEnglishProficiencyDescriptor model.
    /// </summary>
    public interface ILimitedEnglishProficiencyDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LimitedEnglishProficiencyDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LimitedEnglishProficiencyDescriptorMappingContract : IMappingContract
    {
        public LimitedEnglishProficiencyDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LimitedEnglishProficiencyDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalAccount model.
    /// </summary>
    public interface ILocalAccount : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string AccountName { get; set; }
        int ChartOfAccountEducationOrganizationId { get; set; }
        string ChartOfAccountIdentifier { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ILocalAccountReportingTag> LocalAccountReportingTags { get; set; }

        // Resource reference data
        Guid? ChartOfAccountResourceId { get; set; }
        string ChartOfAccountDiscriminator { get; set; }
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalAccountMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalAccountMappingContract(
            bool isAccountNameSupported,
            bool isChartOfAccountEducationOrganizationIdSupported,
            bool isChartOfAccountIdentifierSupported,
            bool isChartOfAccountReferenceSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isLocalAccountReportingTagsSupported,
            bool isLocalAccountReportingTagsItemCreatable,
            Func<ILocalAccountReportingTag, bool> isLocalAccountReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAccountNameSupported = isAccountNameSupported;
            IsChartOfAccountEducationOrganizationIdSupported = isChartOfAccountEducationOrganizationIdSupported;
            IsChartOfAccountIdentifierSupported = isChartOfAccountIdentifierSupported;
            IsChartOfAccountReferenceSupported = isChartOfAccountReferenceSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsLocalAccountReportingTagsSupported = isLocalAccountReportingTagsSupported;
            IsLocalAccountReportingTagsItemCreatable = isLocalAccountReportingTagsItemCreatable;
            IsLocalAccountReportingTagIncluded = isLocalAccountReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAccountNameSupported { get; }
        public bool IsChartOfAccountEducationOrganizationIdSupported { get; }
        public bool IsChartOfAccountIdentifierSupported { get; }
        public bool IsChartOfAccountReferenceSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsLocalAccountReportingTagsSupported { get; }
        public bool IsLocalAccountReportingTagsItemCreatable { get; }
        public Func<ILocalAccountReportingTag, bool> IsLocalAccountReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AccountName":
                    return IsAccountNameSupported;
                case "ChartOfAccountEducationOrganizationId":
                    return IsChartOfAccountEducationOrganizationIdSupported;
                case "ChartOfAccountIdentifier":
                    return IsChartOfAccountIdentifierSupported;
                case "ChartOfAccountReference":
                    return IsChartOfAccountReferenceSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "LocalAccountReportingTags":
                    return IsLocalAccountReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "LocalAccountReportingTags":
                    return IsLocalAccountReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalAccountReportingTag model.
    /// </summary>
    public interface ILocalAccountReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILocalAccount LocalAccount { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties
        string TagValue { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalAccountReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalAccountReportingTagMappingContract(
            bool isTagValueSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsTagValueSupported = isTagValueSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsTagValueSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "TagValue":
                    return IsTagValueSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalActual model.
    /// </summary>
    public interface ILocalActual : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        DateTime AsOfDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        decimal Amount { get; set; }
        string FinancialCollectionDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LocalAccountResourceId { get; set; }
        string LocalAccountDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalActualMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalActualMappingContract(
            bool isAmountSupported,
            bool isFinancialCollectionDescriptorSupported,
            bool isLocalAccountReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAmountSupported = isAmountSupported;
            IsFinancialCollectionDescriptorSupported = isFinancialCollectionDescriptorSupported;
            IsLocalAccountReferenceSupported = isLocalAccountReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAmountSupported { get; }
        public bool IsFinancialCollectionDescriptorSupported { get; }
        public bool IsLocalAccountReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Amount":
                    return IsAmountSupported;
                case "FinancialCollectionDescriptor":
                    return IsFinancialCollectionDescriptorSupported;
                case "LocalAccountReference":
                    return IsLocalAccountReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "AsOfDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalBudget model.
    /// </summary>
    public interface ILocalBudget : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        DateTime AsOfDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        decimal Amount { get; set; }
        string FinancialCollectionDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LocalAccountResourceId { get; set; }
        string LocalAccountDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalBudgetMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalBudgetMappingContract(
            bool isAmountSupported,
            bool isFinancialCollectionDescriptorSupported,
            bool isLocalAccountReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAmountSupported = isAmountSupported;
            IsFinancialCollectionDescriptorSupported = isFinancialCollectionDescriptorSupported;
            IsLocalAccountReferenceSupported = isLocalAccountReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAmountSupported { get; }
        public bool IsFinancialCollectionDescriptorSupported { get; }
        public bool IsLocalAccountReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Amount":
                    return IsAmountSupported;
                case "FinancialCollectionDescriptor":
                    return IsFinancialCollectionDescriptorSupported;
                case "LocalAccountReference":
                    return IsLocalAccountReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "AsOfDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalContractedStaff model.
    /// </summary>
    public interface ILocalContractedStaff : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        DateTime AsOfDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        decimal Amount { get; set; }
        string FinancialCollectionDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LocalAccountResourceId { get; set; }
        string LocalAccountDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalContractedStaffMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalContractedStaffMappingContract(
            bool isAmountSupported,
            bool isFinancialCollectionDescriptorSupported,
            bool isLocalAccountReferenceSupported,
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAmountSupported = isAmountSupported;
            IsFinancialCollectionDescriptorSupported = isFinancialCollectionDescriptorSupported;
            IsLocalAccountReferenceSupported = isLocalAccountReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAmountSupported { get; }
        public bool IsFinancialCollectionDescriptorSupported { get; }
        public bool IsLocalAccountReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Amount":
                    return IsAmountSupported;
                case "FinancialCollectionDescriptor":
                    return IsFinancialCollectionDescriptorSupported;
                case "LocalAccountReference":
                    return IsLocalAccountReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "AsOfDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocaleDescriptor model.
    /// </summary>
    public interface ILocaleDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LocaleDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocaleDescriptorMappingContract : IMappingContract
    {
        public LocaleDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocaleDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalEducationAgency model.
    /// </summary>
    public interface ILocalEducationAgency : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int LocalEducationAgencyId { get; set; }

        // Non-PK properties
        string CharterStatusDescriptor { get; set; }
        int? EducationServiceCenterId { get; set; }
        string LocalEducationAgencyCategoryDescriptor { get; set; }
        int? ParentLocalEducationAgencyId { get; set; }
        int? StateEducationAgencyId { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ILocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; }
        ICollection<ILocalEducationAgencyFederalFunds> LocalEducationAgencyFederalFunds { get; set; }

        // Resource reference data
        Guid? EducationServiceCenterResourceId { get; set; }
        Guid? ParentLocalEducationAgencyResourceId { get; set; }
        Guid? StateEducationAgencyResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalEducationAgencyMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalEducationAgencyMappingContract(
            bool isCharterStatusDescriptorSupported,
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isEducationServiceCenterIdSupported,
            bool isEducationServiceCenterReferenceSupported,
            bool isLocalEducationAgencyAccountabilitiesSupported,
            bool isLocalEducationAgencyCategoryDescriptorSupported,
            bool isLocalEducationAgencyFederalFundsSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isParentLocalEducationAgencyIdSupported,
            bool isParentLocalEducationAgencyReferenceSupported,
            bool isShortNameOfInstitutionSupported,
            bool isStateEducationAgencyIdSupported,
            bool isStateEducationAgencyReferenceSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            bool isLocalEducationAgencyAccountabilitiesItemCreatable,
            Func<ILocalEducationAgencyAccountability, bool> isLocalEducationAgencyAccountabilityIncluded,
            bool isLocalEducationAgencyFederalFundsItemCreatable,
            Func<ILocalEducationAgencyFederalFunds, bool> isLocalEducationAgencyFederalFundsIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCharterStatusDescriptorSupported = isCharterStatusDescriptorSupported;
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsEducationServiceCenterIdSupported = isEducationServiceCenterIdSupported;
            IsEducationServiceCenterReferenceSupported = isEducationServiceCenterReferenceSupported;
            IsLocalEducationAgencyAccountabilitiesSupported = isLocalEducationAgencyAccountabilitiesSupported;
            IsLocalEducationAgencyCategoryDescriptorSupported = isLocalEducationAgencyCategoryDescriptorSupported;
            IsLocalEducationAgencyFederalFundsSupported = isLocalEducationAgencyFederalFundsSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsParentLocalEducationAgencyIdSupported = isParentLocalEducationAgencyIdSupported;
            IsParentLocalEducationAgencyReferenceSupported = isParentLocalEducationAgencyReferenceSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsStateEducationAgencyIdSupported = isStateEducationAgencyIdSupported;
            IsStateEducationAgencyReferenceSupported = isStateEducationAgencyReferenceSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            IsLocalEducationAgencyAccountabilitiesItemCreatable = isLocalEducationAgencyAccountabilitiesItemCreatable;
            IsLocalEducationAgencyAccountabilityIncluded = isLocalEducationAgencyAccountabilityIncluded;
            IsLocalEducationAgencyFederalFundsItemCreatable = isLocalEducationAgencyFederalFundsItemCreatable;
            IsLocalEducationAgencyFederalFundsIncluded = isLocalEducationAgencyFederalFundsIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCharterStatusDescriptorSupported { get; }
        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsEducationServiceCenterIdSupported { get; }
        public bool IsEducationServiceCenterReferenceSupported { get; }
        public bool IsLocalEducationAgencyAccountabilitiesSupported { get; }
        public bool IsLocalEducationAgencyCategoryDescriptorSupported { get; }
        public bool IsLocalEducationAgencyFederalFundsSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsParentLocalEducationAgencyIdSupported { get; }
        public bool IsParentLocalEducationAgencyReferenceSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsStateEducationAgencyIdSupported { get; }
        public bool IsStateEducationAgencyReferenceSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }
        public bool IsLocalEducationAgencyAccountabilitiesItemCreatable { get; }
        public Func<ILocalEducationAgencyAccountability, bool> IsLocalEducationAgencyAccountabilityIncluded { get; }
        public bool IsLocalEducationAgencyFederalFundsItemCreatable { get; }
        public Func<ILocalEducationAgencyFederalFunds, bool> IsLocalEducationAgencyFederalFundsIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CharterStatusDescriptor":
                    return IsCharterStatusDescriptorSupported;
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "EducationServiceCenterId":
                    return IsEducationServiceCenterIdSupported;
                case "EducationServiceCenterReference":
                    return IsEducationServiceCenterReferenceSupported;
                case "LocalEducationAgencyAccountabilities":
                    return IsLocalEducationAgencyAccountabilitiesSupported;
                case "LocalEducationAgencyCategoryDescriptor":
                    return IsLocalEducationAgencyCategoryDescriptorSupported;
                case "LocalEducationAgencyFederalFunds":
                    return IsLocalEducationAgencyFederalFundsSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ParentLocalEducationAgencyId":
                    return IsParentLocalEducationAgencyIdSupported;
                case "ParentLocalEducationAgencyReference":
                    return IsParentLocalEducationAgencyReferenceSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "StateEducationAgencyId":
                    return IsStateEducationAgencyIdSupported;
                case "StateEducationAgencyReference":
                    return IsStateEducationAgencyReferenceSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalEducationAgencyId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                case "LocalEducationAgencyAccountabilities":
                    return IsLocalEducationAgencyAccountabilitiesItemCreatable;
                case "LocalEducationAgencyFederalFunds":
                    return IsLocalEducationAgencyFederalFundsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalEducationAgencyAccountability model.
    /// </summary>
    public interface ILocalEducationAgencyAccountability : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILocalEducationAgency LocalEducationAgency { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        string GunFreeSchoolsActReportingStatusDescriptor { get; set; }
        string SchoolChoiceImplementStatusDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalEducationAgencyAccountabilityMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalEducationAgencyAccountabilityMappingContract(
            bool isGunFreeSchoolsActReportingStatusDescriptorSupported,
            bool isSchoolChoiceImplementStatusDescriptorSupported,
            bool isSchoolYearTypeReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGunFreeSchoolsActReportingStatusDescriptorSupported = isGunFreeSchoolsActReportingStatusDescriptorSupported;
            IsSchoolChoiceImplementStatusDescriptorSupported = isSchoolChoiceImplementStatusDescriptorSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGunFreeSchoolsActReportingStatusDescriptorSupported { get; }
        public bool IsSchoolChoiceImplementStatusDescriptorSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GunFreeSchoolsActReportingStatusDescriptor":
                    return IsGunFreeSchoolsActReportingStatusDescriptorSupported;
                case "SchoolChoiceImplementStatusDescriptor":
                    return IsSchoolChoiceImplementStatusDescriptorSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalEducationAgencyCategoryDescriptor model.
    /// </summary>
    public interface ILocalEducationAgencyCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int LocalEducationAgencyCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalEducationAgencyCategoryDescriptorMappingContract : IMappingContract
    {
        public LocalEducationAgencyCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalEducationAgencyCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalEducationAgencyFederalFunds model.
    /// </summary>
    public interface ILocalEducationAgencyFederalFunds : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ILocalEducationAgency LocalEducationAgency { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        decimal? InnovativeDollarsSpent { get; set; }
        decimal? InnovativeDollarsSpentStrategicPriorities { get; set; }
        decimal? InnovativeProgramsFundsReceived { get; set; }
        decimal? SchoolImprovementAllocation { get; set; }
        decimal? SchoolImprovementReservedFundsPercentage { get; set; }
        decimal? StateAssessmentAdministrationFunding { get; set; }
        decimal? SupplementalEducationalServicesFundsSpent { get; set; }
        decimal? SupplementalEducationalServicesPerPupilExpenditure { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalEducationAgencyFederalFundsMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalEducationAgencyFederalFundsMappingContract(
            bool isInnovativeDollarsSpentSupported,
            bool isInnovativeDollarsSpentStrategicPrioritiesSupported,
            bool isInnovativeProgramsFundsReceivedSupported,
            bool isSchoolImprovementAllocationSupported,
            bool isSchoolImprovementReservedFundsPercentageSupported,
            bool isStateAssessmentAdministrationFundingSupported,
            bool isSupplementalEducationalServicesFundsSpentSupported,
            bool isSupplementalEducationalServicesPerPupilExpenditureSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsInnovativeDollarsSpentSupported = isInnovativeDollarsSpentSupported;
            IsInnovativeDollarsSpentStrategicPrioritiesSupported = isInnovativeDollarsSpentStrategicPrioritiesSupported;
            IsInnovativeProgramsFundsReceivedSupported = isInnovativeProgramsFundsReceivedSupported;
            IsSchoolImprovementAllocationSupported = isSchoolImprovementAllocationSupported;
            IsSchoolImprovementReservedFundsPercentageSupported = isSchoolImprovementReservedFundsPercentageSupported;
            IsStateAssessmentAdministrationFundingSupported = isStateAssessmentAdministrationFundingSupported;
            IsSupplementalEducationalServicesFundsSpentSupported = isSupplementalEducationalServicesFundsSpentSupported;
            IsSupplementalEducationalServicesPerPupilExpenditureSupported = isSupplementalEducationalServicesPerPupilExpenditureSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsInnovativeDollarsSpentSupported { get; }
        public bool IsInnovativeDollarsSpentStrategicPrioritiesSupported { get; }
        public bool IsInnovativeProgramsFundsReceivedSupported { get; }
        public bool IsSchoolImprovementAllocationSupported { get; }
        public bool IsSchoolImprovementReservedFundsPercentageSupported { get; }
        public bool IsStateAssessmentAdministrationFundingSupported { get; }
        public bool IsSupplementalEducationalServicesFundsSpentSupported { get; }
        public bool IsSupplementalEducationalServicesPerPupilExpenditureSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "InnovativeDollarsSpent":
                    return IsInnovativeDollarsSpentSupported;
                case "InnovativeDollarsSpentStrategicPriorities":
                    return IsInnovativeDollarsSpentStrategicPrioritiesSupported;
                case "InnovativeProgramsFundsReceived":
                    return IsInnovativeProgramsFundsReceivedSupported;
                case "SchoolImprovementAllocation":
                    return IsSchoolImprovementAllocationSupported;
                case "SchoolImprovementReservedFundsPercentage":
                    return IsSchoolImprovementReservedFundsPercentageSupported;
                case "StateAssessmentAdministrationFunding":
                    return IsStateAssessmentAdministrationFundingSupported;
                case "SupplementalEducationalServicesFundsSpent":
                    return IsSupplementalEducationalServicesFundsSpentSupported;
                case "SupplementalEducationalServicesPerPupilExpenditure":
                    return IsSupplementalEducationalServicesPerPupilExpenditureSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalEncumbrance model.
    /// </summary>
    public interface ILocalEncumbrance : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        DateTime AsOfDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        decimal Amount { get; set; }
        string FinancialCollectionDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LocalAccountResourceId { get; set; }
        string LocalAccountDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalEncumbranceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalEncumbranceMappingContract(
            bool isAmountSupported,
            bool isFinancialCollectionDescriptorSupported,
            bool isLocalAccountReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAmountSupported = isAmountSupported;
            IsFinancialCollectionDescriptorSupported = isFinancialCollectionDescriptorSupported;
            IsLocalAccountReferenceSupported = isLocalAccountReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAmountSupported { get; }
        public bool IsFinancialCollectionDescriptorSupported { get; }
        public bool IsLocalAccountReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Amount":
                    return IsAmountSupported;
                case "FinancialCollectionDescriptor":
                    return IsFinancialCollectionDescriptorSupported;
                case "LocalAccountReference":
                    return IsLocalAccountReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "AsOfDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the LocalPayroll model.
    /// </summary>
    public interface ILocalPayroll : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AccountIdentifier { get; set; }
        
        DateTime AsOfDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int FiscalYear { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        decimal Amount { get; set; }
        string FinancialCollectionDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LocalAccountResourceId { get; set; }
        string LocalAccountDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocalPayrollMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocalPayrollMappingContract(
            bool isAmountSupported,
            bool isFinancialCollectionDescriptorSupported,
            bool isLocalAccountReferenceSupported,
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAmountSupported = isAmountSupported;
            IsFinancialCollectionDescriptorSupported = isFinancialCollectionDescriptorSupported;
            IsLocalAccountReferenceSupported = isLocalAccountReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAmountSupported { get; }
        public bool IsFinancialCollectionDescriptorSupported { get; }
        public bool IsLocalAccountReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Amount":
                    return IsAmountSupported;
                case "FinancialCollectionDescriptor":
                    return IsFinancialCollectionDescriptorSupported;
                case "LocalAccountReference":
                    return IsLocalAccountReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccountIdentifier":
                    return true;
                case "AsOfDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "FiscalYear":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Location model.
    /// </summary>
    public interface ILocation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string ClassroomIdentificationCode { get; set; }
        
        int SchoolId { get; set; }

        // Non-PK properties
        int? MaximumNumberOfSeats { get; set; }
        int? OptimalNumberOfSeats { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class LocationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public LocationMappingContract(
            bool isMaximumNumberOfSeatsSupported,
            bool isOptimalNumberOfSeatsSupported,
            bool isSchoolReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaximumNumberOfSeatsSupported = isMaximumNumberOfSeatsSupported;
            IsOptimalNumberOfSeatsSupported = isOptimalNumberOfSeatsSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaximumNumberOfSeatsSupported { get; }
        public bool IsOptimalNumberOfSeatsSupported { get; }
        public bool IsSchoolReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaximumNumberOfSeats":
                    return IsMaximumNumberOfSeatsSupported;
                case "OptimalNumberOfSeats":
                    return IsOptimalNumberOfSeatsSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ClassroomIdentificationCode":
                    return true;
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the MagnetSpecialProgramEmphasisSchoolDescriptor model.
    /// </summary>
    public interface IMagnetSpecialProgramEmphasisSchoolDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int MagnetSpecialProgramEmphasisSchoolDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class MagnetSpecialProgramEmphasisSchoolDescriptorMappingContract : IMappingContract
    {
        public MagnetSpecialProgramEmphasisSchoolDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MagnetSpecialProgramEmphasisSchoolDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the MediumOfInstructionDescriptor model.
    /// </summary>
    public interface IMediumOfInstructionDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int MediumOfInstructionDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class MediumOfInstructionDescriptorMappingContract : IMappingContract
    {
        public MediumOfInstructionDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MediumOfInstructionDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the MethodCreditEarnedDescriptor model.
    /// </summary>
    public interface IMethodCreditEarnedDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int MethodCreditEarnedDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class MethodCreditEarnedDescriptorMappingContract : IMappingContract
    {
        public MethodCreditEarnedDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MethodCreditEarnedDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the MigrantEducationProgramServiceDescriptor model.
    /// </summary>
    public interface IMigrantEducationProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int MigrantEducationProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class MigrantEducationProgramServiceDescriptorMappingContract : IMappingContract
    {
        public MigrantEducationProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MigrantEducationProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ModelEntityDescriptor model.
    /// </summary>
    public interface IModelEntityDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ModelEntityDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ModelEntityDescriptorMappingContract : IMappingContract
    {
        public ModelEntityDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ModelEntityDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the MonitoredDescriptor model.
    /// </summary>
    public interface IMonitoredDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int MonitoredDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class MonitoredDescriptorMappingContract : IMappingContract
    {
        public MonitoredDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MonitoredDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the NeglectedOrDelinquentProgramDescriptor model.
    /// </summary>
    public interface INeglectedOrDelinquentProgramDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int NeglectedOrDelinquentProgramDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class NeglectedOrDelinquentProgramDescriptorMappingContract : IMappingContract
    {
        public NeglectedOrDelinquentProgramDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "NeglectedOrDelinquentProgramDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the NeglectedOrDelinquentProgramServiceDescriptor model.
    /// </summary>
    public interface INeglectedOrDelinquentProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int NeglectedOrDelinquentProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class NeglectedOrDelinquentProgramServiceDescriptorMappingContract : IMappingContract
    {
        public NeglectedOrDelinquentProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "NeglectedOrDelinquentProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the NetworkPurposeDescriptor model.
    /// </summary>
    public interface INetworkPurposeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int NetworkPurposeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class NetworkPurposeDescriptorMappingContract : IMappingContract
    {
        public NetworkPurposeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "NetworkPurposeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectDimension model.
    /// </summary>
    public interface IObjectDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IObjectDimensionReportingTag> ObjectDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectDimensionMappingContract(
            bool isCodeNameSupported,
            bool isObjectDimensionReportingTagsSupported,
            bool isObjectDimensionReportingTagsItemCreatable,
            Func<IObjectDimensionReportingTag, bool> isObjectDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsObjectDimensionReportingTagsSupported = isObjectDimensionReportingTagsSupported;
            IsObjectDimensionReportingTagsItemCreatable = isObjectDimensionReportingTagsItemCreatable;
            IsObjectDimensionReportingTagIncluded = isObjectDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsObjectDimensionReportingTagsSupported { get; }
        public bool IsObjectDimensionReportingTagsItemCreatable { get; }
        public Func<IObjectDimensionReportingTag, bool> IsObjectDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "ObjectDimensionReportingTags":
                    return IsObjectDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ObjectDimensionReportingTags":
                    return IsObjectDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectDimensionReportingTag model.
    /// </summary>
    public interface IObjectDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IObjectDimension ObjectDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectiveAssessment model.
    /// </summary>
    public interface IObjectiveAssessment : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AssessmentIdentifier { get; set; }
        
        string IdentificationCode { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties
        string AcademicSubjectDescriptor { get; set; }
        string Description { get; set; }
        decimal? MaxRawScore { get; set; }
        string Nomenclature { get; set; }
        string ParentIdentificationCode { get; set; }
        decimal? PercentOfAssessment { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; }
        ICollection<IObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; }
        ICollection<IObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; }
        ICollection<IObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; }

        // Resource reference data
        Guid? AssessmentResourceId { get; set; }
        string AssessmentDiscriminator { get; set; }
        Guid? ParentObjectiveAssessmentResourceId { get; set; }
        string ParentObjectiveAssessmentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectiveAssessmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectiveAssessmentMappingContract(
            bool isAcademicSubjectDescriptorSupported,
            bool isAssessmentReferenceSupported,
            bool isDescriptionSupported,
            bool isMaxRawScoreSupported,
            bool isNomenclatureSupported,
            bool isObjectiveAssessmentAssessmentItemsSupported,
            bool isObjectiveAssessmentLearningStandardsSupported,
            bool isObjectiveAssessmentPerformanceLevelsSupported,
            bool isObjectiveAssessmentScoresSupported,
            bool isParentIdentificationCodeSupported,
            bool isParentObjectiveAssessmentReferenceSupported,
            bool isPercentOfAssessmentSupported,
            bool isObjectiveAssessmentAssessmentItemsItemCreatable,
            Func<IObjectiveAssessmentAssessmentItem, bool> isObjectiveAssessmentAssessmentItemIncluded,
            bool isObjectiveAssessmentLearningStandardsItemCreatable,
            Func<IObjectiveAssessmentLearningStandard, bool> isObjectiveAssessmentLearningStandardIncluded,
            bool isObjectiveAssessmentPerformanceLevelsItemCreatable,
            Func<IObjectiveAssessmentPerformanceLevel, bool> isObjectiveAssessmentPerformanceLevelIncluded,
            bool isObjectiveAssessmentScoresItemCreatable,
            Func<IObjectiveAssessmentScore, bool> isObjectiveAssessmentScoreIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAcademicSubjectDescriptorSupported = isAcademicSubjectDescriptorSupported;
            IsAssessmentReferenceSupported = isAssessmentReferenceSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsMaxRawScoreSupported = isMaxRawScoreSupported;
            IsNomenclatureSupported = isNomenclatureSupported;
            IsObjectiveAssessmentAssessmentItemsSupported = isObjectiveAssessmentAssessmentItemsSupported;
            IsObjectiveAssessmentLearningStandardsSupported = isObjectiveAssessmentLearningStandardsSupported;
            IsObjectiveAssessmentPerformanceLevelsSupported = isObjectiveAssessmentPerformanceLevelsSupported;
            IsObjectiveAssessmentScoresSupported = isObjectiveAssessmentScoresSupported;
            IsParentIdentificationCodeSupported = isParentIdentificationCodeSupported;
            IsParentObjectiveAssessmentReferenceSupported = isParentObjectiveAssessmentReferenceSupported;
            IsPercentOfAssessmentSupported = isPercentOfAssessmentSupported;
            IsObjectiveAssessmentAssessmentItemsItemCreatable = isObjectiveAssessmentAssessmentItemsItemCreatable;
            IsObjectiveAssessmentAssessmentItemIncluded = isObjectiveAssessmentAssessmentItemIncluded;
            IsObjectiveAssessmentLearningStandardsItemCreatable = isObjectiveAssessmentLearningStandardsItemCreatable;
            IsObjectiveAssessmentLearningStandardIncluded = isObjectiveAssessmentLearningStandardIncluded;
            IsObjectiveAssessmentPerformanceLevelsItemCreatable = isObjectiveAssessmentPerformanceLevelsItemCreatable;
            IsObjectiveAssessmentPerformanceLevelIncluded = isObjectiveAssessmentPerformanceLevelIncluded;
            IsObjectiveAssessmentScoresItemCreatable = isObjectiveAssessmentScoresItemCreatable;
            IsObjectiveAssessmentScoreIncluded = isObjectiveAssessmentScoreIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAcademicSubjectDescriptorSupported { get; }
        public bool IsAssessmentReferenceSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsMaxRawScoreSupported { get; }
        public bool IsNomenclatureSupported { get; }
        public bool IsObjectiveAssessmentAssessmentItemsSupported { get; }
        public bool IsObjectiveAssessmentLearningStandardsSupported { get; }
        public bool IsObjectiveAssessmentPerformanceLevelsSupported { get; }
        public bool IsObjectiveAssessmentScoresSupported { get; }
        public bool IsParentIdentificationCodeSupported { get; }
        public bool IsParentObjectiveAssessmentReferenceSupported { get; }
        public bool IsPercentOfAssessmentSupported { get; }
        public bool IsObjectiveAssessmentAssessmentItemsItemCreatable { get; }
        public Func<IObjectiveAssessmentAssessmentItem, bool> IsObjectiveAssessmentAssessmentItemIncluded { get; }
        public bool IsObjectiveAssessmentLearningStandardsItemCreatable { get; }
        public Func<IObjectiveAssessmentLearningStandard, bool> IsObjectiveAssessmentLearningStandardIncluded { get; }
        public bool IsObjectiveAssessmentPerformanceLevelsItemCreatable { get; }
        public Func<IObjectiveAssessmentPerformanceLevel, bool> IsObjectiveAssessmentPerformanceLevelIncluded { get; }
        public bool IsObjectiveAssessmentScoresItemCreatable { get; }
        public Func<IObjectiveAssessmentScore, bool> IsObjectiveAssessmentScoreIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AcademicSubjectDescriptor":
                    return IsAcademicSubjectDescriptorSupported;
                case "AssessmentReference":
                    return IsAssessmentReferenceSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "MaxRawScore":
                    return IsMaxRawScoreSupported;
                case "Nomenclature":
                    return IsNomenclatureSupported;
                case "ObjectiveAssessmentAssessmentItems":
                    return IsObjectiveAssessmentAssessmentItemsSupported;
                case "ObjectiveAssessmentLearningStandards":
                    return IsObjectiveAssessmentLearningStandardsSupported;
                case "ObjectiveAssessmentPerformanceLevels":
                    return IsObjectiveAssessmentPerformanceLevelsSupported;
                case "ObjectiveAssessmentScores":
                    return IsObjectiveAssessmentScoresSupported;
                case "ParentIdentificationCode":
                    return IsParentIdentificationCodeSupported;
                case "ParentObjectiveAssessmentReference":
                    return IsParentObjectiveAssessmentReferenceSupported;
                case "PercentOfAssessment":
                    return IsPercentOfAssessmentSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "IdentificationCode":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ObjectiveAssessmentAssessmentItems":
                    return IsObjectiveAssessmentAssessmentItemsItemCreatable;
                case "ObjectiveAssessmentLearningStandards":
                    return IsObjectiveAssessmentLearningStandardsItemCreatable;
                case "ObjectiveAssessmentPerformanceLevels":
                    return IsObjectiveAssessmentPerformanceLevelsItemCreatable;
                case "ObjectiveAssessmentScores":
                    return IsObjectiveAssessmentScoresItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectiveAssessmentAssessmentItem model.
    /// </summary>
    public interface IObjectiveAssessmentAssessmentItem : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IObjectiveAssessment ObjectiveAssessment { get; set; }
        
        string AssessmentItemIdentificationCode { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? AssessmentItemResourceId { get; set; }
        string AssessmentItemDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectiveAssessmentAssessmentItemMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectiveAssessmentAssessmentItemMappingContract(
            bool isAssessmentItemReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentItemReferenceSupported = isAssessmentItemReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentItemReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentItemReference":
                    return IsAssessmentItemReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentItemIdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectiveAssessmentLearningStandard model.
    /// </summary>
    public interface IObjectiveAssessmentLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IObjectiveAssessment ObjectiveAssessment { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectiveAssessmentLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectiveAssessmentLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectiveAssessmentPerformanceLevel model.
    /// </summary>
    public interface IObjectiveAssessmentPerformanceLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IObjectiveAssessment ObjectiveAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }
        
        string PerformanceLevelDescriptor { get; set; }

        // Non-PK properties
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }
        string PerformanceLevelIndicatorName { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectiveAssessmentPerformanceLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectiveAssessmentPerformanceLevelMappingContract(
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isPerformanceLevelIndicatorNameSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsPerformanceLevelIndicatorNameSupported = isPerformanceLevelIndicatorNameSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsPerformanceLevelIndicatorNameSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "PerformanceLevelIndicatorName":
                    return IsPerformanceLevelIndicatorNameSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                case "PerformanceLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ObjectiveAssessmentScore model.
    /// </summary>
    public interface IObjectiveAssessmentScore : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IObjectiveAssessment ObjectiveAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }

        // Non-PK properties
        string MaximumScore { get; set; }
        string MinimumScore { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ObjectiveAssessmentScoreMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ObjectiveAssessmentScoreMappingContract(
            bool isMaximumScoreSupported,
            bool isMinimumScoreSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaximumScoreSupported = isMaximumScoreSupported;
            IsMinimumScoreSupported = isMinimumScoreSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaximumScoreSupported { get; }
        public bool IsMinimumScoreSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaximumScore":
                    return IsMaximumScoreSupported;
                case "MinimumScore":
                    return IsMinimumScoreSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OldEthnicityDescriptor model.
    /// </summary>
    public interface IOldEthnicityDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int OldEthnicityDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OldEthnicityDescriptorMappingContract : IMappingContract
    {
        public OldEthnicityDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OldEthnicityDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OpenStaffPosition model.
    /// </summary>
    public interface IOpenStaffPosition : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string RequisitionNumber { get; set; }

        // Non-PK properties
        DateTime DatePosted { get; set; }
        DateTime? DatePostingRemoved { get; set; }
        string EmploymentStatusDescriptor { get; set; }
        string PositionTitle { get; set; }
        string PostingResultDescriptor { get; set; }
        string ProgramAssignmentDescriptor { get; set; }
        string StaffClassificationDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IOpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; }
        ICollection<IOpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OpenStaffPositionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public OpenStaffPositionMappingContract(
            bool isDatePostedSupported,
            bool isDatePostingRemovedSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEmploymentStatusDescriptorSupported,
            bool isOpenStaffPositionAcademicSubjectsSupported,
            bool isOpenStaffPositionInstructionalGradeLevelsSupported,
            bool isPositionTitleSupported,
            bool isPostingResultDescriptorSupported,
            bool isProgramAssignmentDescriptorSupported,
            bool isStaffClassificationDescriptorSupported,
            bool isOpenStaffPositionAcademicSubjectsItemCreatable,
            Func<IOpenStaffPositionAcademicSubject, bool> isOpenStaffPositionAcademicSubjectIncluded,
            bool isOpenStaffPositionInstructionalGradeLevelsItemCreatable,
            Func<IOpenStaffPositionInstructionalGradeLevel, bool> isOpenStaffPositionInstructionalGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDatePostedSupported = isDatePostedSupported;
            IsDatePostingRemovedSupported = isDatePostingRemovedSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEmploymentStatusDescriptorSupported = isEmploymentStatusDescriptorSupported;
            IsOpenStaffPositionAcademicSubjectsSupported = isOpenStaffPositionAcademicSubjectsSupported;
            IsOpenStaffPositionInstructionalGradeLevelsSupported = isOpenStaffPositionInstructionalGradeLevelsSupported;
            IsPositionTitleSupported = isPositionTitleSupported;
            IsPostingResultDescriptorSupported = isPostingResultDescriptorSupported;
            IsProgramAssignmentDescriptorSupported = isProgramAssignmentDescriptorSupported;
            IsStaffClassificationDescriptorSupported = isStaffClassificationDescriptorSupported;
            IsOpenStaffPositionAcademicSubjectsItemCreatable = isOpenStaffPositionAcademicSubjectsItemCreatable;
            IsOpenStaffPositionAcademicSubjectIncluded = isOpenStaffPositionAcademicSubjectIncluded;
            IsOpenStaffPositionInstructionalGradeLevelsItemCreatable = isOpenStaffPositionInstructionalGradeLevelsItemCreatable;
            IsOpenStaffPositionInstructionalGradeLevelIncluded = isOpenStaffPositionInstructionalGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDatePostedSupported { get; }
        public bool IsDatePostingRemovedSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEmploymentStatusDescriptorSupported { get; }
        public bool IsOpenStaffPositionAcademicSubjectsSupported { get; }
        public bool IsOpenStaffPositionInstructionalGradeLevelsSupported { get; }
        public bool IsPositionTitleSupported { get; }
        public bool IsPostingResultDescriptorSupported { get; }
        public bool IsProgramAssignmentDescriptorSupported { get; }
        public bool IsStaffClassificationDescriptorSupported { get; }
        public bool IsOpenStaffPositionAcademicSubjectsItemCreatable { get; }
        public Func<IOpenStaffPositionAcademicSubject, bool> IsOpenStaffPositionAcademicSubjectIncluded { get; }
        public bool IsOpenStaffPositionInstructionalGradeLevelsItemCreatable { get; }
        public Func<IOpenStaffPositionInstructionalGradeLevel, bool> IsOpenStaffPositionInstructionalGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DatePosted":
                    return IsDatePostedSupported;
                case "DatePostingRemoved":
                    return IsDatePostingRemovedSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EmploymentStatusDescriptor":
                    return IsEmploymentStatusDescriptorSupported;
                case "OpenStaffPositionAcademicSubjects":
                    return IsOpenStaffPositionAcademicSubjectsSupported;
                case "OpenStaffPositionInstructionalGradeLevels":
                    return IsOpenStaffPositionInstructionalGradeLevelsSupported;
                case "PositionTitle":
                    return IsPositionTitleSupported;
                case "PostingResultDescriptor":
                    return IsPostingResultDescriptorSupported;
                case "ProgramAssignmentDescriptor":
                    return IsProgramAssignmentDescriptorSupported;
                case "StaffClassificationDescriptor":
                    return IsStaffClassificationDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "RequisitionNumber":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "OpenStaffPositionAcademicSubjects":
                    return IsOpenStaffPositionAcademicSubjectsItemCreatable;
                case "OpenStaffPositionInstructionalGradeLevels":
                    return IsOpenStaffPositionInstructionalGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OpenStaffPositionAcademicSubject model.
    /// </summary>
    public interface IOpenStaffPositionAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IOpenStaffPosition OpenStaffPosition { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OpenStaffPositionAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public OpenStaffPositionAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OpenStaffPositionInstructionalGradeLevel model.
    /// </summary>
    public interface IOpenStaffPositionInstructionalGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IOpenStaffPosition OpenStaffPosition { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OpenStaffPositionInstructionalGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public OpenStaffPositionInstructionalGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OperationalStatusDescriptor model.
    /// </summary>
    public interface IOperationalStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int OperationalStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OperationalStatusDescriptorMappingContract : IMappingContract
    {
        public OperationalStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OperationalStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OperationalUnitDimension model.
    /// </summary>
    public interface IOperationalUnitDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IOperationalUnitDimensionReportingTag> OperationalUnitDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OperationalUnitDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public OperationalUnitDimensionMappingContract(
            bool isCodeNameSupported,
            bool isOperationalUnitDimensionReportingTagsSupported,
            bool isOperationalUnitDimensionReportingTagsItemCreatable,
            Func<IOperationalUnitDimensionReportingTag, bool> isOperationalUnitDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsOperationalUnitDimensionReportingTagsSupported = isOperationalUnitDimensionReportingTagsSupported;
            IsOperationalUnitDimensionReportingTagsItemCreatable = isOperationalUnitDimensionReportingTagsItemCreatable;
            IsOperationalUnitDimensionReportingTagIncluded = isOperationalUnitDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsOperationalUnitDimensionReportingTagsSupported { get; }
        public bool IsOperationalUnitDimensionReportingTagsItemCreatable { get; }
        public Func<IOperationalUnitDimensionReportingTag, bool> IsOperationalUnitDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "OperationalUnitDimensionReportingTags":
                    return IsOperationalUnitDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "OperationalUnitDimensionReportingTags":
                    return IsOperationalUnitDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OperationalUnitDimensionReportingTag model.
    /// </summary>
    public interface IOperationalUnitDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IOperationalUnitDimension OperationalUnitDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OperationalUnitDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public OperationalUnitDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OrganizationDepartment model.
    /// </summary>
    public interface IOrganizationDepartment : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int OrganizationDepartmentId { get; set; }

        // Non-PK properties
        string AcademicSubjectDescriptor { get; set; }
        int? ParentEducationOrganizationId { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ParentEducationOrganizationResourceId { get; set; }
        string ParentEducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OrganizationDepartmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public OrganizationDepartmentMappingContract(
            bool isAcademicSubjectDescriptorSupported,
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isParentEducationOrganizationIdSupported,
            bool isParentEducationOrganizationReferenceSupported,
            bool isShortNameOfInstitutionSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAcademicSubjectDescriptorSupported = isAcademicSubjectDescriptorSupported;
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsParentEducationOrganizationIdSupported = isParentEducationOrganizationIdSupported;
            IsParentEducationOrganizationReferenceSupported = isParentEducationOrganizationReferenceSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAcademicSubjectDescriptorSupported { get; }
        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsParentEducationOrganizationIdSupported { get; }
        public bool IsParentEducationOrganizationReferenceSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AcademicSubjectDescriptor":
                    return IsAcademicSubjectDescriptorSupported;
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ParentEducationOrganizationId":
                    return IsParentEducationOrganizationIdSupported;
                case "ParentEducationOrganizationReference":
                    return IsParentEducationOrganizationReferenceSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OrganizationDepartmentId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the OtherNameTypeDescriptor model.
    /// </summary>
    public interface IOtherNameTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int OtherNameTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class OtherNameTypeDescriptorMappingContract : IMappingContract
    {
        public OtherNameTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OtherNameTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Parent model.
    /// </summary>
    public interface IParent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IIdentifiablePerson, IGetByExample
    {
        // Primary Key properties
        [UniqueId]
        string ParentUniqueId { get; set; }

        // Non-PK properties
        string FirstName { get; set; }
        string GenerationCodeSuffix { get; set; }
        string HighestCompletedLevelOfEducationDescriptor { get; set; }
        string LastSurname { get; set; }
        string LoginId { get; set; }
        string MaidenName { get; set; }
        string MiddleName { get; set; }
        string PersonalTitlePrefix { get; set; }
        string PersonId { get; set; }
        string SexDescriptor { get; set; }
        string SourceSystemDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IParentAddress> ParentAddresses { get; set; }
        ICollection<IParentElectronicMail> ParentElectronicMails { get; set; }
        ICollection<IParentInternationalAddress> ParentInternationalAddresses { get; set; }
        ICollection<IParentLanguage> ParentLanguages { get; set; }
        ICollection<IParentOtherName> ParentOtherNames { get; set; }
        ICollection<IParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; }
        ICollection<IParentTelephone> ParentTelephones { get; set; }

        // Resource reference data
        Guid? PersonResourceId { get; set; }
        string PersonDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentMappingContract(
            bool isFirstNameSupported,
            bool isGenerationCodeSuffixSupported,
            bool isHighestCompletedLevelOfEducationDescriptorSupported,
            bool isLastSurnameSupported,
            bool isLoginIdSupported,
            bool isMaidenNameSupported,
            bool isMiddleNameSupported,
            bool isParentAddressesSupported,
            bool isParentElectronicMailsSupported,
            bool isParentInternationalAddressesSupported,
            bool isParentLanguagesSupported,
            bool isParentOtherNamesSupported,
            bool isParentPersonalIdentificationDocumentsSupported,
            bool isParentTelephonesSupported,
            bool isParentUniqueIdSupported,
            bool isPersonalTitlePrefixSupported,
            bool isPersonIdSupported,
            bool isPersonReferenceSupported,
            bool isSexDescriptorSupported,
            bool isSourceSystemDescriptorSupported,
            bool isParentAddressesItemCreatable,
            Func<IParentAddress, bool> isParentAddressIncluded,
            bool isParentElectronicMailsItemCreatable,
            Func<IParentElectronicMail, bool> isParentElectronicMailIncluded,
            bool isParentInternationalAddressesItemCreatable,
            Func<IParentInternationalAddress, bool> isParentInternationalAddressIncluded,
            bool isParentLanguagesItemCreatable,
            Func<IParentLanguage, bool> isParentLanguageIncluded,
            bool isParentOtherNamesItemCreatable,
            Func<IParentOtherName, bool> isParentOtherNameIncluded,
            bool isParentPersonalIdentificationDocumentsItemCreatable,
            Func<IParentPersonalIdentificationDocument, bool> isParentPersonalIdentificationDocumentIncluded,
            bool isParentTelephonesItemCreatable,
            Func<IParentTelephone, bool> isParentTelephoneIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsFirstNameSupported = isFirstNameSupported;
            IsGenerationCodeSuffixSupported = isGenerationCodeSuffixSupported;
            IsHighestCompletedLevelOfEducationDescriptorSupported = isHighestCompletedLevelOfEducationDescriptorSupported;
            IsLastSurnameSupported = isLastSurnameSupported;
            IsLoginIdSupported = isLoginIdSupported;
            IsMaidenNameSupported = isMaidenNameSupported;
            IsMiddleNameSupported = isMiddleNameSupported;
            IsParentAddressesSupported = isParentAddressesSupported;
            IsParentElectronicMailsSupported = isParentElectronicMailsSupported;
            IsParentInternationalAddressesSupported = isParentInternationalAddressesSupported;
            IsParentLanguagesSupported = isParentLanguagesSupported;
            IsParentOtherNamesSupported = isParentOtherNamesSupported;
            IsParentPersonalIdentificationDocumentsSupported = isParentPersonalIdentificationDocumentsSupported;
            IsParentTelephonesSupported = isParentTelephonesSupported;
            IsParentUniqueIdSupported = isParentUniqueIdSupported;
            IsPersonalTitlePrefixSupported = isPersonalTitlePrefixSupported;
            IsPersonIdSupported = isPersonIdSupported;
            IsPersonReferenceSupported = isPersonReferenceSupported;
            IsSexDescriptorSupported = isSexDescriptorSupported;
            IsSourceSystemDescriptorSupported = isSourceSystemDescriptorSupported;
            IsParentAddressesItemCreatable = isParentAddressesItemCreatable;
            IsParentAddressIncluded = isParentAddressIncluded;
            IsParentElectronicMailsItemCreatable = isParentElectronicMailsItemCreatable;
            IsParentElectronicMailIncluded = isParentElectronicMailIncluded;
            IsParentInternationalAddressesItemCreatable = isParentInternationalAddressesItemCreatable;
            IsParentInternationalAddressIncluded = isParentInternationalAddressIncluded;
            IsParentLanguagesItemCreatable = isParentLanguagesItemCreatable;
            IsParentLanguageIncluded = isParentLanguageIncluded;
            IsParentOtherNamesItemCreatable = isParentOtherNamesItemCreatable;
            IsParentOtherNameIncluded = isParentOtherNameIncluded;
            IsParentPersonalIdentificationDocumentsItemCreatable = isParentPersonalIdentificationDocumentsItemCreatable;
            IsParentPersonalIdentificationDocumentIncluded = isParentPersonalIdentificationDocumentIncluded;
            IsParentTelephonesItemCreatable = isParentTelephonesItemCreatable;
            IsParentTelephoneIncluded = isParentTelephoneIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsFirstNameSupported { get; }
        public bool IsGenerationCodeSuffixSupported { get; }
        public bool IsHighestCompletedLevelOfEducationDescriptorSupported { get; }
        public bool IsLastSurnameSupported { get; }
        public bool IsLoginIdSupported { get; }
        public bool IsMaidenNameSupported { get; }
        public bool IsMiddleNameSupported { get; }
        public bool IsParentAddressesSupported { get; }
        public bool IsParentElectronicMailsSupported { get; }
        public bool IsParentInternationalAddressesSupported { get; }
        public bool IsParentLanguagesSupported { get; }
        public bool IsParentOtherNamesSupported { get; }
        public bool IsParentPersonalIdentificationDocumentsSupported { get; }
        public bool IsParentTelephonesSupported { get; }
        public bool IsParentUniqueIdSupported { get; }
        public bool IsPersonalTitlePrefixSupported { get; }
        public bool IsPersonIdSupported { get; }
        public bool IsPersonReferenceSupported { get; }
        public bool IsSexDescriptorSupported { get; }
        public bool IsSourceSystemDescriptorSupported { get; }
        public bool IsParentAddressesItemCreatable { get; }
        public Func<IParentAddress, bool> IsParentAddressIncluded { get; }
        public bool IsParentElectronicMailsItemCreatable { get; }
        public Func<IParentElectronicMail, bool> IsParentElectronicMailIncluded { get; }
        public bool IsParentInternationalAddressesItemCreatable { get; }
        public Func<IParentInternationalAddress, bool> IsParentInternationalAddressIncluded { get; }
        public bool IsParentLanguagesItemCreatable { get; }
        public Func<IParentLanguage, bool> IsParentLanguageIncluded { get; }
        public bool IsParentOtherNamesItemCreatable { get; }
        public Func<IParentOtherName, bool> IsParentOtherNameIncluded { get; }
        public bool IsParentPersonalIdentificationDocumentsItemCreatable { get; }
        public Func<IParentPersonalIdentificationDocument, bool> IsParentPersonalIdentificationDocumentIncluded { get; }
        public bool IsParentTelephonesItemCreatable { get; }
        public Func<IParentTelephone, bool> IsParentTelephoneIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "FirstName":
                    return IsFirstNameSupported;
                case "GenerationCodeSuffix":
                    return IsGenerationCodeSuffixSupported;
                case "HighestCompletedLevelOfEducationDescriptor":
                    return IsHighestCompletedLevelOfEducationDescriptorSupported;
                case "LastSurname":
                    return IsLastSurnameSupported;
                case "LoginId":
                    return IsLoginIdSupported;
                case "MaidenName":
                    return IsMaidenNameSupported;
                case "MiddleName":
                    return IsMiddleNameSupported;
                case "ParentAddresses":
                    return IsParentAddressesSupported;
                case "ParentElectronicMails":
                    return IsParentElectronicMailsSupported;
                case "ParentInternationalAddresses":
                    return IsParentInternationalAddressesSupported;
                case "ParentLanguages":
                    return IsParentLanguagesSupported;
                case "ParentOtherNames":
                    return IsParentOtherNamesSupported;
                case "ParentPersonalIdentificationDocuments":
                    return IsParentPersonalIdentificationDocumentsSupported;
                case "ParentTelephones":
                    return IsParentTelephonesSupported;
                case "ParentUniqueId":
                    return IsParentUniqueIdSupported;
                case "PersonalTitlePrefix":
                    return IsPersonalTitlePrefixSupported;
                case "PersonId":
                    return IsPersonIdSupported;
                case "PersonReference":
                    return IsPersonReferenceSupported;
                case "SexDescriptor":
                    return IsSexDescriptorSupported;
                case "SourceSystemDescriptor":
                    return IsSourceSystemDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ParentAddresses":
                    return IsParentAddressesItemCreatable;
                case "ParentElectronicMails":
                    return IsParentElectronicMailsItemCreatable;
                case "ParentInternationalAddresses":
                    return IsParentInternationalAddressesItemCreatable;
                case "ParentLanguages":
                    return IsParentLanguagesItemCreatable;
                case "ParentOtherNames":
                    return IsParentOtherNamesItemCreatable;
                case "ParentPersonalIdentificationDocuments":
                    return IsParentPersonalIdentificationDocumentsItemCreatable;
                case "ParentTelephones":
                    return IsParentTelephonesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentAddress model.
    /// </summary>
    public interface IParentAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string AddressTypeDescriptor { get; set; }
        
        string City { get; set; }
        
        string PostalCode { get; set; }
        
        string StateAbbreviationDescriptor { get; set; }
        
        string StreetNumberName { get; set; }

        // Non-PK properties
        string ApartmentRoomSuiteNumber { get; set; }
        string BuildingSiteNumber { get; set; }
        string CongressionalDistrict { get; set; }
        string CountyFIPSCode { get; set; }
        bool? DoNotPublishIndicator { get; set; }
        string Latitude { get; set; }
        string LocaleDescriptor { get; set; }
        string Longitude { get; set; }
        string NameOfCounty { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IParentAddressPeriod> ParentAddressPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentAddressMappingContract(
            bool isApartmentRoomSuiteNumberSupported,
            bool isBuildingSiteNumberSupported,
            bool isCongressionalDistrictSupported,
            bool isCountyFIPSCodeSupported,
            bool isDoNotPublishIndicatorSupported,
            bool isLatitudeSupported,
            bool isLocaleDescriptorSupported,
            bool isLongitudeSupported,
            bool isNameOfCountySupported,
            bool isParentAddressPeriodsSupported,
            bool isParentAddressPeriodsItemCreatable,
            Func<IParentAddressPeriod, bool> isParentAddressPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsApartmentRoomSuiteNumberSupported = isApartmentRoomSuiteNumberSupported;
            IsBuildingSiteNumberSupported = isBuildingSiteNumberSupported;
            IsCongressionalDistrictSupported = isCongressionalDistrictSupported;
            IsCountyFIPSCodeSupported = isCountyFIPSCodeSupported;
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLocaleDescriptorSupported = isLocaleDescriptorSupported;
            IsLongitudeSupported = isLongitudeSupported;
            IsNameOfCountySupported = isNameOfCountySupported;
            IsParentAddressPeriodsSupported = isParentAddressPeriodsSupported;
            IsParentAddressPeriodsItemCreatable = isParentAddressPeriodsItemCreatable;
            IsParentAddressPeriodIncluded = isParentAddressPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsApartmentRoomSuiteNumberSupported { get; }
        public bool IsBuildingSiteNumberSupported { get; }
        public bool IsCongressionalDistrictSupported { get; }
        public bool IsCountyFIPSCodeSupported { get; }
        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLocaleDescriptorSupported { get; }
        public bool IsLongitudeSupported { get; }
        public bool IsNameOfCountySupported { get; }
        public bool IsParentAddressPeriodsSupported { get; }
        public bool IsParentAddressPeriodsItemCreatable { get; }
        public Func<IParentAddressPeriod, bool> IsParentAddressPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ApartmentRoomSuiteNumber":
                    return IsApartmentRoomSuiteNumberSupported;
                case "BuildingSiteNumber":
                    return IsBuildingSiteNumberSupported;
                case "CongressionalDistrict":
                    return IsCongressionalDistrictSupported;
                case "CountyFIPSCode":
                    return IsCountyFIPSCodeSupported;
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "LocaleDescriptor":
                    return IsLocaleDescriptorSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                case "NameOfCounty":
                    return IsNameOfCountySupported;
                case "ParentAddressPeriods":
                    return IsParentAddressPeriodsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                case "City":
                    return true;
                case "PostalCode":
                    return true;
                case "StateAbbreviationDescriptor":
                    return true;
                case "StreetNumberName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ParentAddressPeriods":
                    return IsParentAddressPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentAddressPeriod model.
    /// </summary>
    public interface IParentAddressPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParentAddress ParentAddress { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentAddressPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentAddressPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentElectronicMail model.
    /// </summary>
    public interface IParentElectronicMail : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string ElectronicMailAddress { get; set; }
        
        string ElectronicMailTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        bool? PrimaryEmailAddressIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentElectronicMailMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentElectronicMailMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isPrimaryEmailAddressIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsPrimaryEmailAddressIndicatorSupported = isPrimaryEmailAddressIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsPrimaryEmailAddressIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "PrimaryEmailAddressIndicator":
                    return IsPrimaryEmailAddressIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ElectronicMailAddress":
                    return true;
                case "ElectronicMailTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentInternationalAddress model.
    /// </summary>
    public interface IParentInternationalAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string AddressTypeDescriptor { get; set; }

        // Non-PK properties
        string AddressLine1 { get; set; }
        string AddressLine2 { get; set; }
        string AddressLine3 { get; set; }
        string AddressLine4 { get; set; }
        DateTime? BeginDate { get; set; }
        string CountryDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        string Latitude { get; set; }
        string Longitude { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentInternationalAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentInternationalAddressMappingContract(
            bool isAddressLine1Supported,
            bool isAddressLine2Supported,
            bool isAddressLine3Supported,
            bool isAddressLine4Supported,
            bool isBeginDateSupported,
            bool isCountryDescriptorSupported,
            bool isEndDateSupported,
            bool isLatitudeSupported,
            bool isLongitudeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAddressLine1Supported = isAddressLine1Supported;
            IsAddressLine2Supported = isAddressLine2Supported;
            IsAddressLine3Supported = isAddressLine3Supported;
            IsAddressLine4Supported = isAddressLine4Supported;
            IsBeginDateSupported = isBeginDateSupported;
            IsCountryDescriptorSupported = isCountryDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLongitudeSupported = isLongitudeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAddressLine1Supported { get; }
        public bool IsAddressLine2Supported { get; }
        public bool IsAddressLine3Supported { get; }
        public bool IsAddressLine4Supported { get; }
        public bool IsBeginDateSupported { get; }
        public bool IsCountryDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLongitudeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AddressLine1":
                    return IsAddressLine1Supported;
                case "AddressLine2":
                    return IsAddressLine2Supported;
                case "AddressLine3":
                    return IsAddressLine3Supported;
                case "AddressLine4":
                    return IsAddressLine4Supported;
                case "BeginDate":
                    return IsBeginDateSupported;
                case "CountryDescriptor":
                    return IsCountryDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentLanguage model.
    /// </summary>
    public interface IParentLanguage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string LanguageDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IParentLanguageUse> ParentLanguageUses { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentLanguageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentLanguageMappingContract(
            bool isParentLanguageUsesSupported,
            bool isParentLanguageUsesItemCreatable,
            Func<IParentLanguageUse, bool> isParentLanguageUseIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsParentLanguageUsesSupported = isParentLanguageUsesSupported;
            IsParentLanguageUsesItemCreatable = isParentLanguageUsesItemCreatable;
            IsParentLanguageUseIncluded = isParentLanguageUseIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsParentLanguageUsesSupported { get; }
        public bool IsParentLanguageUsesItemCreatable { get; }
        public Func<IParentLanguageUse, bool> IsParentLanguageUseIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ParentLanguageUses":
                    return IsParentLanguageUsesSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ParentLanguageUses":
                    return IsParentLanguageUsesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentLanguageUse model.
    /// </summary>
    public interface IParentLanguageUse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParentLanguage ParentLanguage { get; set; }
        
        string LanguageUseDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentLanguageUseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentLanguageUseMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageUseDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentOtherName model.
    /// </summary>
    public interface IParentOtherName : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string OtherNameTypeDescriptor { get; set; }

        // Non-PK properties
        string FirstName { get; set; }
        string GenerationCodeSuffix { get; set; }
        string LastSurname { get; set; }
        string MiddleName { get; set; }
        string PersonalTitlePrefix { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentOtherNameMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentOtherNameMappingContract(
            bool isFirstNameSupported,
            bool isGenerationCodeSuffixSupported,
            bool isLastSurnameSupported,
            bool isMiddleNameSupported,
            bool isPersonalTitlePrefixSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsFirstNameSupported = isFirstNameSupported;
            IsGenerationCodeSuffixSupported = isGenerationCodeSuffixSupported;
            IsLastSurnameSupported = isLastSurnameSupported;
            IsMiddleNameSupported = isMiddleNameSupported;
            IsPersonalTitlePrefixSupported = isPersonalTitlePrefixSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsFirstNameSupported { get; }
        public bool IsGenerationCodeSuffixSupported { get; }
        public bool IsLastSurnameSupported { get; }
        public bool IsMiddleNameSupported { get; }
        public bool IsPersonalTitlePrefixSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "FirstName":
                    return IsFirstNameSupported;
                case "GenerationCodeSuffix":
                    return IsGenerationCodeSuffixSupported;
                case "LastSurname":
                    return IsLastSurnameSupported;
                case "MiddleName":
                    return IsMiddleNameSupported;
                case "PersonalTitlePrefix":
                    return IsPersonalTitlePrefixSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OtherNameTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentPersonalIdentificationDocument model.
    /// </summary>
    public interface IParentPersonalIdentificationDocument : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string IdentificationDocumentUseDescriptor { get; set; }
        
        string PersonalInformationVerificationDescriptor { get; set; }

        // Non-PK properties
        DateTime? DocumentExpirationDate { get; set; }
        string DocumentTitle { get; set; }
        string IssuerCountryDescriptor { get; set; }
        string IssuerDocumentIdentificationCode { get; set; }
        string IssuerName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentPersonalIdentificationDocumentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentPersonalIdentificationDocumentMappingContract(
            bool isDocumentExpirationDateSupported,
            bool isDocumentTitleSupported,
            bool isIssuerCountryDescriptorSupported,
            bool isIssuerDocumentIdentificationCodeSupported,
            bool isIssuerNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDocumentExpirationDateSupported = isDocumentExpirationDateSupported;
            IsDocumentTitleSupported = isDocumentTitleSupported;
            IsIssuerCountryDescriptorSupported = isIssuerCountryDescriptorSupported;
            IsIssuerDocumentIdentificationCodeSupported = isIssuerDocumentIdentificationCodeSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDocumentExpirationDateSupported { get; }
        public bool IsDocumentTitleSupported { get; }
        public bool IsIssuerCountryDescriptorSupported { get; }
        public bool IsIssuerDocumentIdentificationCodeSupported { get; }
        public bool IsIssuerNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DocumentExpirationDate":
                    return IsDocumentExpirationDateSupported;
                case "DocumentTitle":
                    return IsDocumentTitleSupported;
                case "IssuerCountryDescriptor":
                    return IsIssuerCountryDescriptorSupported;
                case "IssuerDocumentIdentificationCode":
                    return IsIssuerDocumentIdentificationCodeSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationDocumentUseDescriptor":
                    return true;
                case "PersonalInformationVerificationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParentTelephone model.
    /// </summary>
    public interface IParentTelephone : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IParent Parent { get; set; }
        
        string TelephoneNumber { get; set; }
        
        string TelephoneNumberTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        int? OrderOfPriority { get; set; }
        bool? TextMessageCapabilityIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParentTelephoneMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ParentTelephoneMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isOrderOfPrioritySupported,
            bool isTextMessageCapabilityIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsOrderOfPrioritySupported = isOrderOfPrioritySupported;
            IsTextMessageCapabilityIndicatorSupported = isTextMessageCapabilityIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsOrderOfPrioritySupported { get; }
        public bool IsTextMessageCapabilityIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "OrderOfPriority":
                    return IsOrderOfPrioritySupported;
                case "TextMessageCapabilityIndicator":
                    return IsTextMessageCapabilityIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TelephoneNumber":
                    return true;
                case "TelephoneNumberTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParticipationDescriptor model.
    /// </summary>
    public interface IParticipationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ParticipationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParticipationDescriptorMappingContract : IMappingContract
    {
        public ParticipationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ParticipationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ParticipationStatusDescriptor model.
    /// </summary>
    public interface IParticipationStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ParticipationStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ParticipationStatusDescriptorMappingContract : IMappingContract
    {
        public ParticipationStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ParticipationStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PerformanceBaseConversionDescriptor model.
    /// </summary>
    public interface IPerformanceBaseConversionDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PerformanceBaseConversionDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PerformanceBaseConversionDescriptorMappingContract : IMappingContract
    {
        public PerformanceBaseConversionDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PerformanceBaseConversionDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PerformanceLevelDescriptor model.
    /// </summary>
    public interface IPerformanceLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PerformanceLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PerformanceLevelDescriptorMappingContract : IMappingContract
    {
        public PerformanceLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PerformanceLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Person model.
    /// </summary>
    public interface IPerson : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string PersonId { get; set; }
        
        string SourceSystemDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PersonMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public PersonMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PersonId":
                    return true;
                case "SourceSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PersonalInformationVerificationDescriptor model.
    /// </summary>
    public interface IPersonalInformationVerificationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PersonalInformationVerificationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PersonalInformationVerificationDescriptorMappingContract : IMappingContract
    {
        public PersonalInformationVerificationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PersonalInformationVerificationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PlatformTypeDescriptor model.
    /// </summary>
    public interface IPlatformTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PlatformTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PlatformTypeDescriptorMappingContract : IMappingContract
    {
        public PlatformTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PlatformTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PopulationServedDescriptor model.
    /// </summary>
    public interface IPopulationServedDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PopulationServedDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PopulationServedDescriptorMappingContract : IMappingContract
    {
        public PopulationServedDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PopulationServedDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PostingResultDescriptor model.
    /// </summary>
    public interface IPostingResultDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PostingResultDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PostingResultDescriptorMappingContract : IMappingContract
    {
        public PostingResultDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PostingResultDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PostSecondaryEvent model.
    /// </summary>
    public interface IPostSecondaryEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime EventDate { get; set; }
        
        string PostSecondaryEventCategoryDescriptor { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        int? PostSecondaryInstitutionId { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? PostSecondaryInstitutionResourceId { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PostSecondaryEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public PostSecondaryEventMappingContract(
            bool isPostSecondaryInstitutionIdSupported,
            bool isPostSecondaryInstitutionReferenceSupported,
            bool isStudentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPostSecondaryInstitutionIdSupported = isPostSecondaryInstitutionIdSupported;
            IsPostSecondaryInstitutionReferenceSupported = isPostSecondaryInstitutionReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPostSecondaryInstitutionIdSupported { get; }
        public bool IsPostSecondaryInstitutionReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PostSecondaryInstitutionId":
                    return IsPostSecondaryInstitutionIdSupported;
                case "PostSecondaryInstitutionReference":
                    return IsPostSecondaryInstitutionReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EventDate":
                    return true;
                case "PostSecondaryEventCategoryDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PostSecondaryEventCategoryDescriptor model.
    /// </summary>
    public interface IPostSecondaryEventCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PostSecondaryEventCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PostSecondaryEventCategoryDescriptorMappingContract : IMappingContract
    {
        public PostSecondaryEventCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PostSecondaryEventCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PostSecondaryInstitution model.
    /// </summary>
    public interface IPostSecondaryInstitution : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int PostSecondaryInstitutionId { get; set; }

        // Non-PK properties
        string AdministrativeFundingControlDescriptor { get; set; }
        string PostSecondaryInstitutionLevelDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IPostSecondaryInstitutionMediumOfInstruction> PostSecondaryInstitutionMediumOfInstructions { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PostSecondaryInstitutionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public PostSecondaryInstitutionMappingContract(
            bool isAdministrativeFundingControlDescriptorSupported,
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isPostSecondaryInstitutionLevelDescriptorSupported,
            bool isPostSecondaryInstitutionMediumOfInstructionsSupported,
            bool isShortNameOfInstitutionSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            bool isPostSecondaryInstitutionMediumOfInstructionsItemCreatable,
            Func<IPostSecondaryInstitutionMediumOfInstruction, bool> isPostSecondaryInstitutionMediumOfInstructionIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAdministrativeFundingControlDescriptorSupported = isAdministrativeFundingControlDescriptorSupported;
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsPostSecondaryInstitutionLevelDescriptorSupported = isPostSecondaryInstitutionLevelDescriptorSupported;
            IsPostSecondaryInstitutionMediumOfInstructionsSupported = isPostSecondaryInstitutionMediumOfInstructionsSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            IsPostSecondaryInstitutionMediumOfInstructionsItemCreatable = isPostSecondaryInstitutionMediumOfInstructionsItemCreatable;
            IsPostSecondaryInstitutionMediumOfInstructionIncluded = isPostSecondaryInstitutionMediumOfInstructionIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAdministrativeFundingControlDescriptorSupported { get; }
        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsPostSecondaryInstitutionLevelDescriptorSupported { get; }
        public bool IsPostSecondaryInstitutionMediumOfInstructionsSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }
        public bool IsPostSecondaryInstitutionMediumOfInstructionsItemCreatable { get; }
        public Func<IPostSecondaryInstitutionMediumOfInstruction, bool> IsPostSecondaryInstitutionMediumOfInstructionIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AdministrativeFundingControlDescriptor":
                    return IsAdministrativeFundingControlDescriptorSupported;
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "PostSecondaryInstitutionLevelDescriptor":
                    return IsPostSecondaryInstitutionLevelDescriptorSupported;
                case "PostSecondaryInstitutionMediumOfInstructions":
                    return IsPostSecondaryInstitutionMediumOfInstructionsSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PostSecondaryInstitutionId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                case "PostSecondaryInstitutionMediumOfInstructions":
                    return IsPostSecondaryInstitutionMediumOfInstructionsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PostSecondaryInstitutionLevelDescriptor model.
    /// </summary>
    public interface IPostSecondaryInstitutionLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PostSecondaryInstitutionLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PostSecondaryInstitutionLevelDescriptorMappingContract : IMappingContract
    {
        public PostSecondaryInstitutionLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PostSecondaryInstitutionLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PostSecondaryInstitutionMediumOfInstruction model.
    /// </summary>
    public interface IPostSecondaryInstitutionMediumOfInstruction : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IPostSecondaryInstitution PostSecondaryInstitution { get; set; }
        
        string MediumOfInstructionDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PostSecondaryInstitutionMediumOfInstructionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public PostSecondaryInstitutionMediumOfInstructionMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MediumOfInstructionDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PrimaryLearningDeviceAccessDescriptor model.
    /// </summary>
    public interface IPrimaryLearningDeviceAccessDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PrimaryLearningDeviceAccessDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PrimaryLearningDeviceAccessDescriptorMappingContract : IMappingContract
    {
        public PrimaryLearningDeviceAccessDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PrimaryLearningDeviceAccessDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PrimaryLearningDeviceAwayFromSchoolDescriptor model.
    /// </summary>
    public interface IPrimaryLearningDeviceAwayFromSchoolDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PrimaryLearningDeviceAwayFromSchoolDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PrimaryLearningDeviceAwayFromSchoolDescriptorMappingContract : IMappingContract
    {
        public PrimaryLearningDeviceAwayFromSchoolDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PrimaryLearningDeviceAwayFromSchoolDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PrimaryLearningDeviceProviderDescriptor model.
    /// </summary>
    public interface IPrimaryLearningDeviceProviderDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PrimaryLearningDeviceProviderDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PrimaryLearningDeviceProviderDescriptorMappingContract : IMappingContract
    {
        public PrimaryLearningDeviceProviderDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PrimaryLearningDeviceProviderDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProficiencyDescriptor model.
    /// </summary>
    public interface IProficiencyDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProficiencyDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProficiencyDescriptorMappingContract : IMappingContract
    {
        public ProficiencyDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProficiencyDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Program model.
    /// </summary>
    public interface IProgram : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties
        string ProgramId { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IProgramCharacteristic> ProgramCharacteristics { get; set; }
        ICollection<IProgramLearningObjective> ProgramLearningObjectives { get; set; }
        ICollection<IProgramLearningStandard> ProgramLearningStandards { get; set; }
        ICollection<IProgramService> ProgramServices { get; set; }
        ICollection<IProgramSponsor> ProgramSponsors { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isProgramCharacteristicsSupported,
            bool isProgramIdSupported,
            bool isProgramLearningObjectivesSupported,
            bool isProgramLearningStandardsSupported,
            bool isProgramServicesSupported,
            bool isProgramSponsorsSupported,
            bool isProgramCharacteristicsItemCreatable,
            Func<IProgramCharacteristic, bool> isProgramCharacteristicIncluded,
            bool isProgramLearningObjectivesItemCreatable,
            Func<IProgramLearningObjective, bool> isProgramLearningObjectiveIncluded,
            bool isProgramLearningStandardsItemCreatable,
            Func<IProgramLearningStandard, bool> isProgramLearningStandardIncluded,
            bool isProgramServicesItemCreatable,
            Func<IProgramService, bool> isProgramServiceIncluded,
            bool isProgramSponsorsItemCreatable,
            Func<IProgramSponsor, bool> isProgramSponsorIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsProgramCharacteristicsSupported = isProgramCharacteristicsSupported;
            IsProgramIdSupported = isProgramIdSupported;
            IsProgramLearningObjectivesSupported = isProgramLearningObjectivesSupported;
            IsProgramLearningStandardsSupported = isProgramLearningStandardsSupported;
            IsProgramServicesSupported = isProgramServicesSupported;
            IsProgramSponsorsSupported = isProgramSponsorsSupported;
            IsProgramCharacteristicsItemCreatable = isProgramCharacteristicsItemCreatable;
            IsProgramCharacteristicIncluded = isProgramCharacteristicIncluded;
            IsProgramLearningObjectivesItemCreatable = isProgramLearningObjectivesItemCreatable;
            IsProgramLearningObjectiveIncluded = isProgramLearningObjectiveIncluded;
            IsProgramLearningStandardsItemCreatable = isProgramLearningStandardsItemCreatable;
            IsProgramLearningStandardIncluded = isProgramLearningStandardIncluded;
            IsProgramServicesItemCreatable = isProgramServicesItemCreatable;
            IsProgramServiceIncluded = isProgramServiceIncluded;
            IsProgramSponsorsItemCreatable = isProgramSponsorsItemCreatable;
            IsProgramSponsorIncluded = isProgramSponsorIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsProgramCharacteristicsSupported { get; }
        public bool IsProgramIdSupported { get; }
        public bool IsProgramLearningObjectivesSupported { get; }
        public bool IsProgramLearningStandardsSupported { get; }
        public bool IsProgramServicesSupported { get; }
        public bool IsProgramSponsorsSupported { get; }
        public bool IsProgramCharacteristicsItemCreatable { get; }
        public Func<IProgramCharacteristic, bool> IsProgramCharacteristicIncluded { get; }
        public bool IsProgramLearningObjectivesItemCreatable { get; }
        public Func<IProgramLearningObjective, bool> IsProgramLearningObjectiveIncluded { get; }
        public bool IsProgramLearningStandardsItemCreatable { get; }
        public Func<IProgramLearningStandard, bool> IsProgramLearningStandardIncluded { get; }
        public bool IsProgramServicesItemCreatable { get; }
        public Func<IProgramService, bool> IsProgramServiceIncluded { get; }
        public bool IsProgramSponsorsItemCreatable { get; }
        public Func<IProgramSponsor, bool> IsProgramSponsorIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "ProgramCharacteristics":
                    return IsProgramCharacteristicsSupported;
                case "ProgramId":
                    return IsProgramIdSupported;
                case "ProgramLearningObjectives":
                    return IsProgramLearningObjectivesSupported;
                case "ProgramLearningStandards":
                    return IsProgramLearningStandardsSupported;
                case "ProgramServices":
                    return IsProgramServicesSupported;
                case "ProgramSponsors":
                    return IsProgramSponsorsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ProgramCharacteristics":
                    return IsProgramCharacteristicsItemCreatable;
                case "ProgramLearningObjectives":
                    return IsProgramLearningObjectivesItemCreatable;
                case "ProgramLearningStandards":
                    return IsProgramLearningStandardsItemCreatable;
                case "ProgramServices":
                    return IsProgramServicesItemCreatable;
                case "ProgramSponsors":
                    return IsProgramSponsorsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramAssignmentDescriptor model.
    /// </summary>
    public interface IProgramAssignmentDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProgramAssignmentDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramAssignmentDescriptorMappingContract : IMappingContract
    {
        public ProgramAssignmentDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramAssignmentDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramCharacteristic model.
    /// </summary>
    public interface IProgramCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProgram Program { get; set; }
        
        string ProgramCharacteristicDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramCharacteristicMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramCharacteristicDescriptor model.
    /// </summary>
    public interface IProgramCharacteristicDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProgramCharacteristicDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramCharacteristicDescriptorMappingContract : IMappingContract
    {
        public ProgramCharacteristicDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramCharacteristicDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramDimension model.
    /// </summary>
    public interface IProgramDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IProgramDimensionReportingTag> ProgramDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramDimensionMappingContract(
            bool isCodeNameSupported,
            bool isProgramDimensionReportingTagsSupported,
            bool isProgramDimensionReportingTagsItemCreatable,
            Func<IProgramDimensionReportingTag, bool> isProgramDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsProgramDimensionReportingTagsSupported = isProgramDimensionReportingTagsSupported;
            IsProgramDimensionReportingTagsItemCreatable = isProgramDimensionReportingTagsItemCreatable;
            IsProgramDimensionReportingTagIncluded = isProgramDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsProgramDimensionReportingTagsSupported { get; }
        public bool IsProgramDimensionReportingTagsItemCreatable { get; }
        public Func<IProgramDimensionReportingTag, bool> IsProgramDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "ProgramDimensionReportingTags":
                    return IsProgramDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ProgramDimensionReportingTags":
                    return IsProgramDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramDimensionReportingTag model.
    /// </summary>
    public interface IProgramDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProgramDimension ProgramDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramLearningObjective model.
    /// </summary>
    public interface IProgramLearningObjective : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProgram Program { get; set; }
        
        string LearningObjectiveId { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningObjectiveResourceId { get; set; }
        string LearningObjectiveDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramLearningObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramLearningObjectiveMappingContract(
            bool isLearningObjectiveReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningObjectiveReferenceSupported = isLearningObjectiveReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningObjectiveReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningObjectiveReference":
                    return IsLearningObjectiveReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningObjectiveId":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramLearningStandard model.
    /// </summary>
    public interface IProgramLearningStandard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProgram Program { get; set; }
        
        string LearningStandardId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? LearningStandardResourceId { get; set; }
        string LearningStandardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramLearningStandardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramLearningStandardMappingContract(
            bool isLearningStandardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsLearningStandardReferenceSupported = isLearningStandardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsLearningStandardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "LearningStandardReference":
                    return IsLearningStandardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningStandardId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramService model.
    /// </summary>
    public interface IProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProgram Program { get; set; }
        
        string ServiceDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramServiceMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramSponsor model.
    /// </summary>
    public interface IProgramSponsor : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProgram Program { get; set; }
        
        string ProgramSponsorDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramSponsorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProgramSponsorMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramSponsorDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramSponsorDescriptor model.
    /// </summary>
    public interface IProgramSponsorDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProgramSponsorDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramSponsorDescriptorMappingContract : IMappingContract
    {
        public ProgramSponsorDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramSponsorDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgramTypeDescriptor model.
    /// </summary>
    public interface IProgramTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProgramTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgramTypeDescriptorMappingContract : IMappingContract
    {
        public ProgramTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgressDescriptor model.
    /// </summary>
    public interface IProgressDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProgressDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgressDescriptorMappingContract : IMappingContract
    {
        public ProgressDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgressDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProgressLevelDescriptor model.
    /// </summary>
    public interface IProgressLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProgressLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProgressLevelDescriptorMappingContract : IMappingContract
    {
        public ProgressLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgressLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProjectDimension model.
    /// </summary>
    public interface IProjectDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IProjectDimensionReportingTag> ProjectDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProjectDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProjectDimensionMappingContract(
            bool isCodeNameSupported,
            bool isProjectDimensionReportingTagsSupported,
            bool isProjectDimensionReportingTagsItemCreatable,
            Func<IProjectDimensionReportingTag, bool> isProjectDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsProjectDimensionReportingTagsSupported = isProjectDimensionReportingTagsSupported;
            IsProjectDimensionReportingTagsItemCreatable = isProjectDimensionReportingTagsItemCreatable;
            IsProjectDimensionReportingTagIncluded = isProjectDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsProjectDimensionReportingTagsSupported { get; }
        public bool IsProjectDimensionReportingTagsItemCreatable { get; }
        public Func<IProjectDimensionReportingTag, bool> IsProjectDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "ProjectDimensionReportingTags":
                    return IsProjectDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ProjectDimensionReportingTags":
                    return IsProjectDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProjectDimensionReportingTag model.
    /// </summary>
    public interface IProjectDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IProjectDimension ProjectDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProjectDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ProjectDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProviderCategoryDescriptor model.
    /// </summary>
    public interface IProviderCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProviderCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProviderCategoryDescriptorMappingContract : IMappingContract
    {
        public ProviderCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProviderCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProviderProfitabilityDescriptor model.
    /// </summary>
    public interface IProviderProfitabilityDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProviderProfitabilityDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProviderProfitabilityDescriptorMappingContract : IMappingContract
    {
        public ProviderProfitabilityDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProviderProfitabilityDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ProviderStatusDescriptor model.
    /// </summary>
    public interface IProviderStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ProviderStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ProviderStatusDescriptorMappingContract : IMappingContract
    {
        public ProviderStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProviderStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the PublicationStatusDescriptor model.
    /// </summary>
    public interface IPublicationStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int PublicationStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class PublicationStatusDescriptorMappingContract : IMappingContract
    {
        public PublicationStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "PublicationStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the QuestionFormDescriptor model.
    /// </summary>
    public interface IQuestionFormDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int QuestionFormDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class QuestionFormDescriptorMappingContract : IMappingContract
    {
        public QuestionFormDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "QuestionFormDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RaceDescriptor model.
    /// </summary>
    public interface IRaceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int RaceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RaceDescriptorMappingContract : IMappingContract
    {
        public RaceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RaceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReasonExitedDescriptor model.
    /// </summary>
    public interface IReasonExitedDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ReasonExitedDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReasonExitedDescriptorMappingContract : IMappingContract
    {
        public ReasonExitedDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReasonExitedDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReasonNotTestedDescriptor model.
    /// </summary>
    public interface IReasonNotTestedDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ReasonNotTestedDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReasonNotTestedDescriptorMappingContract : IMappingContract
    {
        public ReasonNotTestedDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReasonNotTestedDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RecognitionTypeDescriptor model.
    /// </summary>
    public interface IRecognitionTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int RecognitionTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RecognitionTypeDescriptorMappingContract : IMappingContract
    {
        public RecognitionTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RecognitionTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RelationDescriptor model.
    /// </summary>
    public interface IRelationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int RelationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RelationDescriptorMappingContract : IMappingContract
    {
        public RelationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RelationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RepeatIdentifierDescriptor model.
    /// </summary>
    public interface IRepeatIdentifierDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int RepeatIdentifierDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RepeatIdentifierDescriptorMappingContract : IMappingContract
    {
        public RepeatIdentifierDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RepeatIdentifierDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReportCard model.
    /// </summary>
    public interface IReportCard : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string GradingPeriodDescriptor { get; set; }
        
        int GradingPeriodSchoolId { get; set; }
        
        short GradingPeriodSchoolYear { get; set; }
        
        int GradingPeriodSequence { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        decimal? GPACumulative { get; set; }
        decimal? GPAGivenGradingPeriod { get; set; }
        decimal? NumberOfDaysAbsent { get; set; }
        decimal? NumberOfDaysInAttendance { get; set; }
        int? NumberOfDaysTardy { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IReportCardGradePointAverage> ReportCardGradePointAverages { get; set; }
        ICollection<IReportCardGrade> ReportCardGrades { get; set; }
        ICollection<IReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; }
        ICollection<IReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? GradingPeriodResourceId { get; set; }
        string GradingPeriodDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReportCardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ReportCardMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isGPACumulativeSupported,
            bool isGPAGivenGradingPeriodSupported,
            bool isGradingPeriodReferenceSupported,
            bool isNumberOfDaysAbsentSupported,
            bool isNumberOfDaysInAttendanceSupported,
            bool isNumberOfDaysTardySupported,
            bool isReportCardGradePointAveragesSupported,
            bool isReportCardGradesSupported,
            bool isReportCardStudentCompetencyObjectivesSupported,
            bool isReportCardStudentLearningObjectivesSupported,
            bool isStudentReferenceSupported,
            bool isReportCardGradesItemCreatable,
            Func<IReportCardGrade, bool> isReportCardGradeIncluded,
            bool isReportCardGradePointAveragesItemCreatable,
            Func<IReportCardGradePointAverage, bool> isReportCardGradePointAverageIncluded,
            bool isReportCardStudentCompetencyObjectivesItemCreatable,
            Func<IReportCardStudentCompetencyObjective, bool> isReportCardStudentCompetencyObjectiveIncluded,
            bool isReportCardStudentLearningObjectivesItemCreatable,
            Func<IReportCardStudentLearningObjective, bool> isReportCardStudentLearningObjectiveIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsGPACumulativeSupported = isGPACumulativeSupported;
            IsGPAGivenGradingPeriodSupported = isGPAGivenGradingPeriodSupported;
            IsGradingPeriodReferenceSupported = isGradingPeriodReferenceSupported;
            IsNumberOfDaysAbsentSupported = isNumberOfDaysAbsentSupported;
            IsNumberOfDaysInAttendanceSupported = isNumberOfDaysInAttendanceSupported;
            IsNumberOfDaysTardySupported = isNumberOfDaysTardySupported;
            IsReportCardGradePointAveragesSupported = isReportCardGradePointAveragesSupported;
            IsReportCardGradesSupported = isReportCardGradesSupported;
            IsReportCardStudentCompetencyObjectivesSupported = isReportCardStudentCompetencyObjectivesSupported;
            IsReportCardStudentLearningObjectivesSupported = isReportCardStudentLearningObjectivesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsReportCardGradesItemCreatable = isReportCardGradesItemCreatable;
            IsReportCardGradeIncluded = isReportCardGradeIncluded;
            IsReportCardGradePointAveragesItemCreatable = isReportCardGradePointAveragesItemCreatable;
            IsReportCardGradePointAverageIncluded = isReportCardGradePointAverageIncluded;
            IsReportCardStudentCompetencyObjectivesItemCreatable = isReportCardStudentCompetencyObjectivesItemCreatable;
            IsReportCardStudentCompetencyObjectiveIncluded = isReportCardStudentCompetencyObjectiveIncluded;
            IsReportCardStudentLearningObjectivesItemCreatable = isReportCardStudentLearningObjectivesItemCreatable;
            IsReportCardStudentLearningObjectiveIncluded = isReportCardStudentLearningObjectiveIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsGPACumulativeSupported { get; }
        public bool IsGPAGivenGradingPeriodSupported { get; }
        public bool IsGradingPeriodReferenceSupported { get; }
        public bool IsNumberOfDaysAbsentSupported { get; }
        public bool IsNumberOfDaysInAttendanceSupported { get; }
        public bool IsNumberOfDaysTardySupported { get; }
        public bool IsReportCardGradePointAveragesSupported { get; }
        public bool IsReportCardGradesSupported { get; }
        public bool IsReportCardStudentCompetencyObjectivesSupported { get; }
        public bool IsReportCardStudentLearningObjectivesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsReportCardGradesItemCreatable { get; }
        public Func<IReportCardGrade, bool> IsReportCardGradeIncluded { get; }
        public bool IsReportCardGradePointAveragesItemCreatable { get; }
        public Func<IReportCardGradePointAverage, bool> IsReportCardGradePointAverageIncluded { get; }
        public bool IsReportCardStudentCompetencyObjectivesItemCreatable { get; }
        public Func<IReportCardStudentCompetencyObjective, bool> IsReportCardStudentCompetencyObjectiveIncluded { get; }
        public bool IsReportCardStudentLearningObjectivesItemCreatable { get; }
        public Func<IReportCardStudentLearningObjective, bool> IsReportCardStudentLearningObjectiveIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "GPACumulative":
                    return IsGPACumulativeSupported;
                case "GPAGivenGradingPeriod":
                    return IsGPAGivenGradingPeriodSupported;
                case "GradingPeriodReference":
                    return IsGradingPeriodReferenceSupported;
                case "NumberOfDaysAbsent":
                    return IsNumberOfDaysAbsentSupported;
                case "NumberOfDaysInAttendance":
                    return IsNumberOfDaysInAttendanceSupported;
                case "NumberOfDaysTardy":
                    return IsNumberOfDaysTardySupported;
                case "ReportCardGradePointAverages":
                    return IsReportCardGradePointAveragesSupported;
                case "ReportCardGrades":
                    return IsReportCardGradesSupported;
                case "ReportCardStudentCompetencyObjectives":
                    return IsReportCardStudentCompetencyObjectivesSupported;
                case "ReportCardStudentLearningObjectives":
                    return IsReportCardStudentLearningObjectivesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "GradingPeriodDescriptor":
                    return true;
                case "GradingPeriodSchoolId":
                    return true;
                case "GradingPeriodSchoolYear":
                    return true;
                case "GradingPeriodSequence":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "ReportCardGrades":
                    return IsReportCardGradesItemCreatable;
                case "ReportCardGradePointAverages":
                    return IsReportCardGradePointAveragesItemCreatable;
                case "ReportCardStudentCompetencyObjectives":
                    return IsReportCardStudentCompetencyObjectivesItemCreatable;
                case "ReportCardStudentLearningObjectives":
                    return IsReportCardStudentLearningObjectivesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReportCardGrade model.
    /// </summary>
    public interface IReportCardGrade : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IReportCard ReportCard { get; set; }
        
        DateTime BeginDate { get; set; }
        
        string GradeTypeDescriptor { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? GradeResourceId { get; set; }
        string GradeDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReportCardGradeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ReportCardGradeMappingContract(
            bool isGradeReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGradeReferenceSupported = isGradeReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGradeReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GradeReference":
                    return IsGradeReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "GradeTypeDescriptor":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReportCardGradePointAverage model.
    /// </summary>
    public interface IReportCardGradePointAverage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IReportCard ReportCard { get; set; }
        
        string GradePointAverageTypeDescriptor { get; set; }

        // Non-PK properties
        decimal GradePointAverageValue { get; set; }
        bool? IsCumulative { get; set; }
        decimal? MaxGradePointAverageValue { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReportCardGradePointAverageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ReportCardGradePointAverageMappingContract(
            bool isGradePointAverageValueSupported,
            bool isIsCumulativeSupported,
            bool isMaxGradePointAverageValueSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGradePointAverageValueSupported = isGradePointAverageValueSupported;
            IsIsCumulativeSupported = isIsCumulativeSupported;
            IsMaxGradePointAverageValueSupported = isMaxGradePointAverageValueSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGradePointAverageValueSupported { get; }
        public bool IsIsCumulativeSupported { get; }
        public bool IsMaxGradePointAverageValueSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GradePointAverageValue":
                    return IsGradePointAverageValueSupported;
                case "IsCumulative":
                    return IsIsCumulativeSupported;
                case "MaxGradePointAverageValue":
                    return IsMaxGradePointAverageValueSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradePointAverageTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReportCardStudentCompetencyObjective model.
    /// </summary>
    public interface IReportCardStudentCompetencyObjective : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IReportCard ReportCard { get; set; }
        
        string Objective { get; set; }
        
        int ObjectiveEducationOrganizationId { get; set; }
        
        string ObjectiveGradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StudentCompetencyObjectiveResourceId { get; set; }
        string StudentCompetencyObjectiveDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReportCardStudentCompetencyObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ReportCardStudentCompetencyObjectiveMappingContract(
            bool isStudentCompetencyObjectiveReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentCompetencyObjectiveReferenceSupported = isStudentCompetencyObjectiveReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentCompetencyObjectiveReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentCompetencyObjectiveReference":
                    return IsStudentCompetencyObjectiveReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Objective":
                    return true;
                case "ObjectiveEducationOrganizationId":
                    return true;
                case "ObjectiveGradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReportCardStudentLearningObjective model.
    /// </summary>
    public interface IReportCardStudentLearningObjective : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IReportCard ReportCard { get; set; }
        
        string LearningObjectiveId { get; set; }
        
        string Namespace { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StudentLearningObjectiveResourceId { get; set; }
        string StudentLearningObjectiveDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReportCardStudentLearningObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public ReportCardStudentLearningObjectiveMappingContract(
            bool isStudentLearningObjectiveReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentLearningObjectiveReferenceSupported = isStudentLearningObjectiveReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentLearningObjectiveReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentLearningObjectiveReference":
                    return IsStudentLearningObjectiveReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LearningObjectiveId":
                    return true;
                case "Namespace":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReporterDescriptionDescriptor model.
    /// </summary>
    public interface IReporterDescriptionDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ReporterDescriptionDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReporterDescriptionDescriptorMappingContract : IMappingContract
    {
        public ReporterDescriptionDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReporterDescriptionDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ReportingTagDescriptor model.
    /// </summary>
    public interface IReportingTagDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ReportingTagDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ReportingTagDescriptorMappingContract : IMappingContract
    {
        public ReportingTagDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ResidencyStatusDescriptor model.
    /// </summary>
    public interface IResidencyStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ResidencyStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ResidencyStatusDescriptorMappingContract : IMappingContract
    {
        public ResidencyStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ResidencyStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ResponseIndicatorDescriptor model.
    /// </summary>
    public interface IResponseIndicatorDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ResponseIndicatorDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ResponseIndicatorDescriptorMappingContract : IMappingContract
    {
        public ResponseIndicatorDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ResponseIndicatorDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ResponsibilityDescriptor model.
    /// </summary>
    public interface IResponsibilityDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ResponsibilityDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ResponsibilityDescriptorMappingContract : IMappingContract
    {
        public ResponsibilityDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ResponsibilityDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RestraintEvent model.
    /// </summary>
    public interface IRestraintEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string RestraintEventIdentifier { get; set; }
        
        int SchoolId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string EducationalEnvironmentDescriptor { get; set; }
        DateTime EventDate { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IRestraintEventProgram> RestraintEventPrograms { get; set; }
        ICollection<IRestraintEventReason> RestraintEventReasons { get; set; }

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RestraintEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public RestraintEventMappingContract(
            bool isEducationalEnvironmentDescriptorSupported,
            bool isEventDateSupported,
            bool isRestraintEventProgramsSupported,
            bool isRestraintEventReasonsSupported,
            bool isSchoolReferenceSupported,
            bool isStudentReferenceSupported,
            bool isRestraintEventProgramsItemCreatable,
            Func<IRestraintEventProgram, bool> isRestraintEventProgramIncluded,
            bool isRestraintEventReasonsItemCreatable,
            Func<IRestraintEventReason, bool> isRestraintEventReasonIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationalEnvironmentDescriptorSupported = isEducationalEnvironmentDescriptorSupported;
            IsEventDateSupported = isEventDateSupported;
            IsRestraintEventProgramsSupported = isRestraintEventProgramsSupported;
            IsRestraintEventReasonsSupported = isRestraintEventReasonsSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsRestraintEventProgramsItemCreatable = isRestraintEventProgramsItemCreatable;
            IsRestraintEventProgramIncluded = isRestraintEventProgramIncluded;
            IsRestraintEventReasonsItemCreatable = isRestraintEventReasonsItemCreatable;
            IsRestraintEventReasonIncluded = isRestraintEventReasonIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationalEnvironmentDescriptorSupported { get; }
        public bool IsEventDateSupported { get; }
        public bool IsRestraintEventProgramsSupported { get; }
        public bool IsRestraintEventReasonsSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsRestraintEventProgramsItemCreatable { get; }
        public Func<IRestraintEventProgram, bool> IsRestraintEventProgramIncluded { get; }
        public bool IsRestraintEventReasonsItemCreatable { get; }
        public Func<IRestraintEventReason, bool> IsRestraintEventReasonIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationalEnvironmentDescriptor":
                    return IsEducationalEnvironmentDescriptorSupported;
                case "EventDate":
                    return IsEventDateSupported;
                case "RestraintEventPrograms":
                    return IsRestraintEventProgramsSupported;
                case "RestraintEventReasons":
                    return IsRestraintEventReasonsSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RestraintEventIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "RestraintEventPrograms":
                    return IsRestraintEventProgramsItemCreatable;
                case "RestraintEventReasons":
                    return IsRestraintEventReasonsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RestraintEventProgram model.
    /// </summary>
    public interface IRestraintEventProgram : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IRestraintEvent RestraintEvent { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RestraintEventProgramMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public RestraintEventProgramMappingContract(
            bool isProgramReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsProgramReferenceSupported = isProgramReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsProgramReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RestraintEventReason model.
    /// </summary>
    public interface IRestraintEventReason : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IRestraintEvent RestraintEvent { get; set; }
        
        string RestraintEventReasonDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RestraintEventReasonMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public RestraintEventReasonMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RestraintEventReasonDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RestraintEventReasonDescriptor model.
    /// </summary>
    public interface IRestraintEventReasonDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int RestraintEventReasonDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RestraintEventReasonDescriptorMappingContract : IMappingContract
    {
        public RestraintEventReasonDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RestraintEventReasonDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ResultDatatypeTypeDescriptor model.
    /// </summary>
    public interface IResultDatatypeTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ResultDatatypeTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ResultDatatypeTypeDescriptorMappingContract : IMappingContract
    {
        public ResultDatatypeTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ResultDatatypeTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the RetestIndicatorDescriptor model.
    /// </summary>
    public interface IRetestIndicatorDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int RetestIndicatorDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class RetestIndicatorDescriptorMappingContract : IMappingContract
    {
        public RetestIndicatorDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RetestIndicatorDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the School model.
    /// </summary>
    public interface ISchool : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int SchoolId { get; set; }

        // Non-PK properties
        string AdministrativeFundingControlDescriptor { get; set; }
        string CharterApprovalAgencyTypeDescriptor { get; set; }
        short? CharterApprovalSchoolYear { get; set; }
        string CharterStatusDescriptor { get; set; }
        string InternetAccessDescriptor { get; set; }
        int? LocalEducationAgencyId { get; set; }
        string MagnetSpecialProgramEmphasisSchoolDescriptor { get; set; }
        string SchoolTypeDescriptor { get; set; }
        string TitleIPartASchoolDesignationDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISchoolCategory> SchoolCategories { get; set; }
        ICollection<ISchoolGradeLevel> SchoolGradeLevels { get; set; }

        // Resource reference data
        Guid? CharterApprovalSchoolYearTypeResourceId { get; set; }
        Guid? LocalEducationAgencyResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SchoolMappingContract(
            bool isAdministrativeFundingControlDescriptorSupported,
            bool isCharterApprovalAgencyTypeDescriptorSupported,
            bool isCharterApprovalSchoolYearSupported,
            bool isCharterApprovalSchoolYearTypeReferenceSupported,
            bool isCharterStatusDescriptorSupported,
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isInternetAccessDescriptorSupported,
            bool isLocalEducationAgencyIdSupported,
            bool isLocalEducationAgencyReferenceSupported,
            bool isMagnetSpecialProgramEmphasisSchoolDescriptorSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isSchoolCategoriesSupported,
            bool isSchoolGradeLevelsSupported,
            bool isSchoolTypeDescriptorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isTitleIPartASchoolDesignationDescriptorSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            bool isSchoolCategoriesItemCreatable,
            Func<ISchoolCategory, bool> isSchoolCategoryIncluded,
            bool isSchoolGradeLevelsItemCreatable,
            Func<ISchoolGradeLevel, bool> isSchoolGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAdministrativeFundingControlDescriptorSupported = isAdministrativeFundingControlDescriptorSupported;
            IsCharterApprovalAgencyTypeDescriptorSupported = isCharterApprovalAgencyTypeDescriptorSupported;
            IsCharterApprovalSchoolYearSupported = isCharterApprovalSchoolYearSupported;
            IsCharterApprovalSchoolYearTypeReferenceSupported = isCharterApprovalSchoolYearTypeReferenceSupported;
            IsCharterStatusDescriptorSupported = isCharterStatusDescriptorSupported;
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsInternetAccessDescriptorSupported = isInternetAccessDescriptorSupported;
            IsLocalEducationAgencyIdSupported = isLocalEducationAgencyIdSupported;
            IsLocalEducationAgencyReferenceSupported = isLocalEducationAgencyReferenceSupported;
            IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported = isMagnetSpecialProgramEmphasisSchoolDescriptorSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsSchoolCategoriesSupported = isSchoolCategoriesSupported;
            IsSchoolGradeLevelsSupported = isSchoolGradeLevelsSupported;
            IsSchoolTypeDescriptorSupported = isSchoolTypeDescriptorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsTitleIPartASchoolDesignationDescriptorSupported = isTitleIPartASchoolDesignationDescriptorSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            IsSchoolCategoriesItemCreatable = isSchoolCategoriesItemCreatable;
            IsSchoolCategoryIncluded = isSchoolCategoryIncluded;
            IsSchoolGradeLevelsItemCreatable = isSchoolGradeLevelsItemCreatable;
            IsSchoolGradeLevelIncluded = isSchoolGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAdministrativeFundingControlDescriptorSupported { get; }
        public bool IsCharterApprovalAgencyTypeDescriptorSupported { get; }
        public bool IsCharterApprovalSchoolYearSupported { get; }
        public bool IsCharterApprovalSchoolYearTypeReferenceSupported { get; }
        public bool IsCharterStatusDescriptorSupported { get; }
        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsInternetAccessDescriptorSupported { get; }
        public bool IsLocalEducationAgencyIdSupported { get; }
        public bool IsLocalEducationAgencyReferenceSupported { get; }
        public bool IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsSchoolCategoriesSupported { get; }
        public bool IsSchoolGradeLevelsSupported { get; }
        public bool IsSchoolTypeDescriptorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsTitleIPartASchoolDesignationDescriptorSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }
        public bool IsSchoolCategoriesItemCreatable { get; }
        public Func<ISchoolCategory, bool> IsSchoolCategoryIncluded { get; }
        public bool IsSchoolGradeLevelsItemCreatable { get; }
        public Func<ISchoolGradeLevel, bool> IsSchoolGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AdministrativeFundingControlDescriptor":
                    return IsAdministrativeFundingControlDescriptorSupported;
                case "CharterApprovalAgencyTypeDescriptor":
                    return IsCharterApprovalAgencyTypeDescriptorSupported;
                case "CharterApprovalSchoolYear":
                    return IsCharterApprovalSchoolYearSupported;
                case "CharterApprovalSchoolYearTypeReference":
                    return IsCharterApprovalSchoolYearTypeReferenceSupported;
                case "CharterStatusDescriptor":
                    return IsCharterStatusDescriptorSupported;
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "InternetAccessDescriptor":
                    return IsInternetAccessDescriptorSupported;
                case "LocalEducationAgencyId":
                    return IsLocalEducationAgencyIdSupported;
                case "LocalEducationAgencyReference":
                    return IsLocalEducationAgencyReferenceSupported;
                case "MagnetSpecialProgramEmphasisSchoolDescriptor":
                    return IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "SchoolCategories":
                    return IsSchoolCategoriesSupported;
                case "SchoolGradeLevels":
                    return IsSchoolGradeLevelsSupported;
                case "SchoolTypeDescriptor":
                    return IsSchoolTypeDescriptorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "TitleIPartASchoolDesignationDescriptor":
                    return IsTitleIPartASchoolDesignationDescriptorSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                case "SchoolCategories":
                    return IsSchoolCategoriesItemCreatable;
                case "SchoolGradeLevels":
                    return IsSchoolGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolCategory model.
    /// </summary>
    public interface ISchoolCategory : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISchool School { get; set; }
        
        string SchoolCategoryDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolCategoryMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SchoolCategoryMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolCategoryDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolCategoryDescriptor model.
    /// </summary>
    public interface ISchoolCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SchoolCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolCategoryDescriptorMappingContract : IMappingContract
    {
        public SchoolCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolChoiceImplementStatusDescriptor model.
    /// </summary>
    public interface ISchoolChoiceImplementStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SchoolChoiceImplementStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolChoiceImplementStatusDescriptorMappingContract : IMappingContract
    {
        public SchoolChoiceImplementStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolChoiceImplementStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolFoodServiceProgramServiceDescriptor model.
    /// </summary>
    public interface ISchoolFoodServiceProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SchoolFoodServiceProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolFoodServiceProgramServiceDescriptorMappingContract : IMappingContract
    {
        public SchoolFoodServiceProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolFoodServiceProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolGradeLevel model.
    /// </summary>
    public interface ISchoolGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISchool School { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SchoolGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolTypeDescriptor model.
    /// </summary>
    public interface ISchoolTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SchoolTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolTypeDescriptorMappingContract : IMappingContract
    {
        public SchoolTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SchoolYearType model.
    /// </summary>
    public interface ISchoolYearType : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        short SchoolYear { get; set; }

        // Non-PK properties
        bool CurrentSchoolYear { get; set; }
        string SchoolYearDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SchoolYearTypeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SchoolYearTypeMappingContract(
            bool isCurrentSchoolYearSupported,
            bool isSchoolYearDescriptionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCurrentSchoolYearSupported = isCurrentSchoolYearSupported;
            IsSchoolYearDescriptionSupported = isSchoolYearDescriptionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCurrentSchoolYearSupported { get; }
        public bool IsSchoolYearDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CurrentSchoolYear":
                    return IsCurrentSchoolYearSupported;
                case "SchoolYearDescription":
                    return IsSchoolYearDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Section model.
    /// </summary>
    public interface ISection : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties
        decimal? AvailableCreditConversion { get; set; }
        decimal? AvailableCredits { get; set; }
        string AvailableCreditTypeDescriptor { get; set; }
        string EducationalEnvironmentDescriptor { get; set; }
        string InstructionLanguageDescriptor { get; set; }
        string LocationClassroomIdentificationCode { get; set; }
        int? LocationSchoolId { get; set; }
        string MediumOfInstructionDescriptor { get; set; }
        bool? OfficialAttendancePeriod { get; set; }
        string PopulationServedDescriptor { get; set; }
        string SectionName { get; set; }
        int? SequenceOfCourse { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISectionCharacteristic> SectionCharacteristics { get; set; }
        ICollection<ISectionClassPeriod> SectionClassPeriods { get; set; }
        ICollection<ISectionCourseLevelCharacteristic> SectionCourseLevelCharacteristics { get; set; }
        ICollection<ISectionOfferedGradeLevel> SectionOfferedGradeLevels { get; set; }
        ICollection<ISectionProgram> SectionPrograms { get; set; }

        // Resource reference data
        Guid? CourseOfferingResourceId { get; set; }
        string CourseOfferingDiscriminator { get; set; }
        Guid? LocationResourceId { get; set; }
        string LocationDiscriminator { get; set; }
        Guid? LocationSchoolResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionMappingContract(
            bool isAvailableCreditConversionSupported,
            bool isAvailableCreditsSupported,
            bool isAvailableCreditTypeDescriptorSupported,
            bool isCourseOfferingReferenceSupported,
            bool isEducationalEnvironmentDescriptorSupported,
            bool isInstructionLanguageDescriptorSupported,
            bool isLocationClassroomIdentificationCodeSupported,
            bool isLocationReferenceSupported,
            bool isLocationSchoolIdSupported,
            bool isLocationSchoolReferenceSupported,
            bool isMediumOfInstructionDescriptorSupported,
            bool isOfficialAttendancePeriodSupported,
            bool isPopulationServedDescriptorSupported,
            bool isSectionCharacteristicsSupported,
            bool isSectionClassPeriodsSupported,
            bool isSectionCourseLevelCharacteristicsSupported,
            bool isSectionNameSupported,
            bool isSectionOfferedGradeLevelsSupported,
            bool isSectionProgramsSupported,
            bool isSequenceOfCourseSupported,
            bool isSectionCharacteristicsItemCreatable,
            Func<ISectionCharacteristic, bool> isSectionCharacteristicIncluded,
            bool isSectionClassPeriodsItemCreatable,
            Func<ISectionClassPeriod, bool> isSectionClassPeriodIncluded,
            bool isSectionCourseLevelCharacteristicsItemCreatable,
            Func<ISectionCourseLevelCharacteristic, bool> isSectionCourseLevelCharacteristicIncluded,
            bool isSectionOfferedGradeLevelsItemCreatable,
            Func<ISectionOfferedGradeLevel, bool> isSectionOfferedGradeLevelIncluded,
            bool isSectionProgramsItemCreatable,
            Func<ISectionProgram, bool> isSectionProgramIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAvailableCreditConversionSupported = isAvailableCreditConversionSupported;
            IsAvailableCreditsSupported = isAvailableCreditsSupported;
            IsAvailableCreditTypeDescriptorSupported = isAvailableCreditTypeDescriptorSupported;
            IsCourseOfferingReferenceSupported = isCourseOfferingReferenceSupported;
            IsEducationalEnvironmentDescriptorSupported = isEducationalEnvironmentDescriptorSupported;
            IsInstructionLanguageDescriptorSupported = isInstructionLanguageDescriptorSupported;
            IsLocationClassroomIdentificationCodeSupported = isLocationClassroomIdentificationCodeSupported;
            IsLocationReferenceSupported = isLocationReferenceSupported;
            IsLocationSchoolIdSupported = isLocationSchoolIdSupported;
            IsLocationSchoolReferenceSupported = isLocationSchoolReferenceSupported;
            IsMediumOfInstructionDescriptorSupported = isMediumOfInstructionDescriptorSupported;
            IsOfficialAttendancePeriodSupported = isOfficialAttendancePeriodSupported;
            IsPopulationServedDescriptorSupported = isPopulationServedDescriptorSupported;
            IsSectionCharacteristicsSupported = isSectionCharacteristicsSupported;
            IsSectionClassPeriodsSupported = isSectionClassPeriodsSupported;
            IsSectionCourseLevelCharacteristicsSupported = isSectionCourseLevelCharacteristicsSupported;
            IsSectionNameSupported = isSectionNameSupported;
            IsSectionOfferedGradeLevelsSupported = isSectionOfferedGradeLevelsSupported;
            IsSectionProgramsSupported = isSectionProgramsSupported;
            IsSequenceOfCourseSupported = isSequenceOfCourseSupported;
            IsSectionCharacteristicsItemCreatable = isSectionCharacteristicsItemCreatable;
            IsSectionCharacteristicIncluded = isSectionCharacteristicIncluded;
            IsSectionClassPeriodsItemCreatable = isSectionClassPeriodsItemCreatable;
            IsSectionClassPeriodIncluded = isSectionClassPeriodIncluded;
            IsSectionCourseLevelCharacteristicsItemCreatable = isSectionCourseLevelCharacteristicsItemCreatable;
            IsSectionCourseLevelCharacteristicIncluded = isSectionCourseLevelCharacteristicIncluded;
            IsSectionOfferedGradeLevelsItemCreatable = isSectionOfferedGradeLevelsItemCreatable;
            IsSectionOfferedGradeLevelIncluded = isSectionOfferedGradeLevelIncluded;
            IsSectionProgramsItemCreatable = isSectionProgramsItemCreatable;
            IsSectionProgramIncluded = isSectionProgramIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAvailableCreditConversionSupported { get; }
        public bool IsAvailableCreditsSupported { get; }
        public bool IsAvailableCreditTypeDescriptorSupported { get; }
        public bool IsCourseOfferingReferenceSupported { get; }
        public bool IsEducationalEnvironmentDescriptorSupported { get; }
        public bool IsInstructionLanguageDescriptorSupported { get; }
        public bool IsLocationClassroomIdentificationCodeSupported { get; }
        public bool IsLocationReferenceSupported { get; }
        public bool IsLocationSchoolIdSupported { get; }
        public bool IsLocationSchoolReferenceSupported { get; }
        public bool IsMediumOfInstructionDescriptorSupported { get; }
        public bool IsOfficialAttendancePeriodSupported { get; }
        public bool IsPopulationServedDescriptorSupported { get; }
        public bool IsSectionCharacteristicsSupported { get; }
        public bool IsSectionClassPeriodsSupported { get; }
        public bool IsSectionCourseLevelCharacteristicsSupported { get; }
        public bool IsSectionNameSupported { get; }
        public bool IsSectionOfferedGradeLevelsSupported { get; }
        public bool IsSectionProgramsSupported { get; }
        public bool IsSequenceOfCourseSupported { get; }
        public bool IsSectionCharacteristicsItemCreatable { get; }
        public Func<ISectionCharacteristic, bool> IsSectionCharacteristicIncluded { get; }
        public bool IsSectionClassPeriodsItemCreatable { get; }
        public Func<ISectionClassPeriod, bool> IsSectionClassPeriodIncluded { get; }
        public bool IsSectionCourseLevelCharacteristicsItemCreatable { get; }
        public Func<ISectionCourseLevelCharacteristic, bool> IsSectionCourseLevelCharacteristicIncluded { get; }
        public bool IsSectionOfferedGradeLevelsItemCreatable { get; }
        public Func<ISectionOfferedGradeLevel, bool> IsSectionOfferedGradeLevelIncluded { get; }
        public bool IsSectionProgramsItemCreatable { get; }
        public Func<ISectionProgram, bool> IsSectionProgramIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AvailableCreditConversion":
                    return IsAvailableCreditConversionSupported;
                case "AvailableCredits":
                    return IsAvailableCreditsSupported;
                case "AvailableCreditTypeDescriptor":
                    return IsAvailableCreditTypeDescriptorSupported;
                case "CourseOfferingReference":
                    return IsCourseOfferingReferenceSupported;
                case "EducationalEnvironmentDescriptor":
                    return IsEducationalEnvironmentDescriptorSupported;
                case "InstructionLanguageDescriptor":
                    return IsInstructionLanguageDescriptorSupported;
                case "LocationClassroomIdentificationCode":
                    return IsLocationClassroomIdentificationCodeSupported;
                case "LocationReference":
                    return IsLocationReferenceSupported;
                case "LocationSchoolId":
                    return IsLocationSchoolIdSupported;
                case "LocationSchoolReference":
                    return IsLocationSchoolReferenceSupported;
                case "MediumOfInstructionDescriptor":
                    return IsMediumOfInstructionDescriptorSupported;
                case "OfficialAttendancePeriod":
                    return IsOfficialAttendancePeriodSupported;
                case "PopulationServedDescriptor":
                    return IsPopulationServedDescriptorSupported;
                case "SectionCharacteristics":
                    return IsSectionCharacteristicsSupported;
                case "SectionClassPeriods":
                    return IsSectionClassPeriodsSupported;
                case "SectionCourseLevelCharacteristics":
                    return IsSectionCourseLevelCharacteristicsSupported;
                case "SectionName":
                    return IsSectionNameSupported;
                case "SectionOfferedGradeLevels":
                    return IsSectionOfferedGradeLevelsSupported;
                case "SectionPrograms":
                    return IsSectionProgramsSupported;
                case "SequenceOfCourse":
                    return IsSequenceOfCourseSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "SectionCharacteristics":
                    return IsSectionCharacteristicsItemCreatable;
                case "SectionClassPeriods":
                    return IsSectionClassPeriodsItemCreatable;
                case "SectionCourseLevelCharacteristics":
                    return IsSectionCourseLevelCharacteristicsItemCreatable;
                case "SectionOfferedGradeLevels":
                    return IsSectionOfferedGradeLevelsItemCreatable;
                case "SectionPrograms":
                    return IsSectionProgramsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionAttendanceTakenEvent model.
    /// </summary>
    public interface ISectionAttendanceTakenEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CalendarCode { get; set; }
        
        DateTime Date { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties
        DateTime EventDate { get; set; }
        string StaffUniqueId { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CalendarDateResourceId { get; set; }
        string CalendarDateDiscriminator { get; set; }
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionAttendanceTakenEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionAttendanceTakenEventMappingContract(
            bool isCalendarDateReferenceSupported,
            bool isEventDateSupported,
            bool isSectionReferenceSupported,
            bool isStaffReferenceSupported,
            bool isStaffUniqueIdSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCalendarDateReferenceSupported = isCalendarDateReferenceSupported;
            IsEventDateSupported = isEventDateSupported;
            IsSectionReferenceSupported = isSectionReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStaffUniqueIdSupported = isStaffUniqueIdSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCalendarDateReferenceSupported { get; }
        public bool IsEventDateSupported { get; }
        public bool IsSectionReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStaffUniqueIdSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CalendarDateReference":
                    return IsCalendarDateReferenceSupported;
                case "EventDate":
                    return IsEventDateSupported;
                case "SectionReference":
                    return IsSectionReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StaffUniqueId":
                    return IsStaffUniqueIdSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CalendarCode":
                    return true;
                case "Date":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionCharacteristic model.
    /// </summary>
    public interface ISectionCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISection Section { get; set; }
        
        string SectionCharacteristicDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionCharacteristicMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SectionCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionCharacteristicDescriptor model.
    /// </summary>
    public interface ISectionCharacteristicDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SectionCharacteristicDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionCharacteristicDescriptorMappingContract : IMappingContract
    {
        public SectionCharacteristicDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SectionCharacteristicDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionClassPeriod model.
    /// </summary>
    public interface ISectionClassPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISection Section { get; set; }
        
        string ClassPeriodName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ClassPeriodResourceId { get; set; }
        string ClassPeriodDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionClassPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionClassPeriodMappingContract(
            bool isClassPeriodReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsClassPeriodReferenceSupported = isClassPeriodReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsClassPeriodReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ClassPeriodReference":
                    return IsClassPeriodReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ClassPeriodName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionCourseLevelCharacteristic model.
    /// </summary>
    public interface ISectionCourseLevelCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISection Section { get; set; }
        
        string CourseLevelCharacteristicDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionCourseLevelCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionCourseLevelCharacteristicMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseLevelCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionOfferedGradeLevel model.
    /// </summary>
    public interface ISectionOfferedGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISection Section { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionOfferedGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionOfferedGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SectionProgram model.
    /// </summary>
    public interface ISectionProgram : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISection Section { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SectionProgramMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SectionProgramMappingContract(
            bool isProgramReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsProgramReferenceSupported = isProgramReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsProgramReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SeparationDescriptor model.
    /// </summary>
    public interface ISeparationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SeparationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SeparationDescriptorMappingContract : IMappingContract
    {
        public SeparationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SeparationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SeparationReasonDescriptor model.
    /// </summary>
    public interface ISeparationReasonDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SeparationReasonDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SeparationReasonDescriptorMappingContract : IMappingContract
    {
        public SeparationReasonDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SeparationReasonDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the ServiceDescriptor model.
    /// </summary>
    public interface IServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int ServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class ServiceDescriptorMappingContract : IMappingContract
    {
        public ServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Session model.
    /// </summary>
    public interface ISession : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties
        DateTime BeginDate { get; set; }
        DateTime EndDate { get; set; }
        string TermDescriptor { get; set; }
        int TotalInstructionalDays { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISessionAcademicWeek> SessionAcademicWeeks { get; set; }
        ICollection<ISessionGradingPeriod> SessionGradingPeriods { get; set; }

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SessionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SessionMappingContract(
            bool isBeginDateSupported,
            bool isEndDateSupported,
            bool isSchoolReferenceSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isSessionAcademicWeeksSupported,
            bool isSessionGradingPeriodsSupported,
            bool isTermDescriptorSupported,
            bool isTotalInstructionalDaysSupported,
            bool isSessionAcademicWeeksItemCreatable,
            Func<ISessionAcademicWeek, bool> isSessionAcademicWeekIncluded,
            bool isSessionGradingPeriodsItemCreatable,
            Func<ISessionGradingPeriod, bool> isSessionGradingPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsSessionAcademicWeeksSupported = isSessionAcademicWeeksSupported;
            IsSessionGradingPeriodsSupported = isSessionGradingPeriodsSupported;
            IsTermDescriptorSupported = isTermDescriptorSupported;
            IsTotalInstructionalDaysSupported = isTotalInstructionalDaysSupported;
            IsSessionAcademicWeeksItemCreatable = isSessionAcademicWeeksItemCreatable;
            IsSessionAcademicWeekIncluded = isSessionAcademicWeekIncluded;
            IsSessionGradingPeriodsItemCreatable = isSessionGradingPeriodsItemCreatable;
            IsSessionGradingPeriodIncluded = isSessionGradingPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsSessionAcademicWeeksSupported { get; }
        public bool IsSessionGradingPeriodsSupported { get; }
        public bool IsTermDescriptorSupported { get; }
        public bool IsTotalInstructionalDaysSupported { get; }
        public bool IsSessionAcademicWeeksItemCreatable { get; }
        public Func<ISessionAcademicWeek, bool> IsSessionAcademicWeekIncluded { get; }
        public bool IsSessionGradingPeriodsItemCreatable { get; }
        public Func<ISessionGradingPeriod, bool> IsSessionGradingPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "SessionAcademicWeeks":
                    return IsSessionAcademicWeeksSupported;
                case "SessionGradingPeriods":
                    return IsSessionGradingPeriodsSupported;
                case "TermDescriptor":
                    return IsTermDescriptorSupported;
                case "TotalInstructionalDays":
                    return IsTotalInstructionalDaysSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "SessionAcademicWeeks":
                    return IsSessionAcademicWeeksItemCreatable;
                case "SessionGradingPeriods":
                    return IsSessionGradingPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SessionAcademicWeek model.
    /// </summary>
    public interface ISessionAcademicWeek : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISession Session { get; set; }
        
        string WeekIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? AcademicWeekResourceId { get; set; }
        string AcademicWeekDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SessionAcademicWeekMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SessionAcademicWeekMappingContract(
            bool isAcademicWeekReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAcademicWeekReferenceSupported = isAcademicWeekReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAcademicWeekReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AcademicWeekReference":
                    return IsAcademicWeekReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "WeekIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SessionGradingPeriod model.
    /// </summary>
    public interface ISessionGradingPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISession Session { get; set; }
        
        string GradingPeriodDescriptor { get; set; }
        
        int PeriodSequence { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? GradingPeriodResourceId { get; set; }
        string GradingPeriodDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SessionGradingPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SessionGradingPeriodMappingContract(
            bool isGradingPeriodReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGradingPeriodReferenceSupported = isGradingPeriodReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGradingPeriodReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GradingPeriodReference":
                    return IsGradingPeriodReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradingPeriodDescriptor":
                    return true;
                case "PeriodSequence":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SexDescriptor model.
    /// </summary>
    public interface ISexDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SexDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SexDescriptorMappingContract : IMappingContract
    {
        public SexDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SexDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SourceDimension model.
    /// </summary>
    public interface ISourceDimension : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Code { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        string CodeName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISourceDimensionReportingTag> SourceDimensionReportingTags { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SourceDimensionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SourceDimensionMappingContract(
            bool isCodeNameSupported,
            bool isSourceDimensionReportingTagsSupported,
            bool isSourceDimensionReportingTagsItemCreatable,
            Func<ISourceDimensionReportingTag, bool> isSourceDimensionReportingTagIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCodeNameSupported = isCodeNameSupported;
            IsSourceDimensionReportingTagsSupported = isSourceDimensionReportingTagsSupported;
            IsSourceDimensionReportingTagsItemCreatable = isSourceDimensionReportingTagsItemCreatable;
            IsSourceDimensionReportingTagIncluded = isSourceDimensionReportingTagIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCodeNameSupported { get; }
        public bool IsSourceDimensionReportingTagsSupported { get; }
        public bool IsSourceDimensionReportingTagsItemCreatable { get; }
        public Func<ISourceDimensionReportingTag, bool> IsSourceDimensionReportingTagIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeName":
                    return IsCodeNameSupported;
                case "SourceDimensionReportingTags":
                    return IsSourceDimensionReportingTagsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Code":
                    return true;
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "SourceDimensionReportingTags":
                    return IsSourceDimensionReportingTagsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SourceDimensionReportingTag model.
    /// </summary>
    public interface ISourceDimensionReportingTag : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISourceDimension SourceDimension { get; set; }
        
        string ReportingTagDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SourceDimensionReportingTagMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SourceDimensionReportingTagMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ReportingTagDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SourceSystemDescriptor model.
    /// </summary>
    public interface ISourceSystemDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SourceSystemDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SourceSystemDescriptorMappingContract : IMappingContract
    {
        public SourceSystemDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SourceSystemDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SpecialEducationProgramServiceDescriptor model.
    /// </summary>
    public interface ISpecialEducationProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SpecialEducationProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SpecialEducationProgramServiceDescriptorMappingContract : IMappingContract
    {
        public SpecialEducationProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SpecialEducationProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SpecialEducationSettingDescriptor model.
    /// </summary>
    public interface ISpecialEducationSettingDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SpecialEducationSettingDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SpecialEducationSettingDescriptorMappingContract : IMappingContract
    {
        public SpecialEducationSettingDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SpecialEducationSettingDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Staff model.
    /// </summary>
    public interface IStaff : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IIdentifiablePerson, IGetByExample
    {
        // Primary Key properties
        [UniqueId]
        string StaffUniqueId { get; set; }

        // Non-PK properties
        DateTime? BirthDate { get; set; }
        string CitizenshipStatusDescriptor { get; set; }
        string FirstName { get; set; }
        string GenerationCodeSuffix { get; set; }
        string HighestCompletedLevelOfEducationDescriptor { get; set; }
        bool? HighlyQualifiedTeacher { get; set; }
        bool? HispanicLatinoEthnicity { get; set; }
        string LastSurname { get; set; }
        string LoginId { get; set; }
        string MaidenName { get; set; }
        string MiddleName { get; set; }
        string OldEthnicityDescriptor { get; set; }
        string PersonalTitlePrefix { get; set; }
        string PersonId { get; set; }
        string SexDescriptor { get; set; }
        string SourceSystemDescriptor { get; set; }
        decimal? YearsOfPriorProfessionalExperience { get; set; }
        decimal? YearsOfPriorTeachingExperience { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStaffAddress> StaffAddresses { get; set; }
        ICollection<IStaffAncestryEthnicOrigin> StaffAncestryEthnicOrigins { get; set; }
        ICollection<IStaffCredential> StaffCredentials { get; set; }
        ICollection<IStaffElectronicMail> StaffElectronicMails { get; set; }
        ICollection<IStaffIdentificationCode> StaffIdentificationCodes { get; set; }
        ICollection<IStaffIdentificationDocument> StaffIdentificationDocuments { get; set; }
        ICollection<IStaffInternationalAddress> StaffInternationalAddresses { get; set; }
        ICollection<IStaffLanguage> StaffLanguages { get; set; }
        ICollection<IStaffOtherName> StaffOtherNames { get; set; }
        ICollection<IStaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; }
        ICollection<IStaffRace> StaffRaces { get; set; }
        ICollection<IStaffRecognition> StaffRecognitions { get; set; }
        ICollection<IStaffTelephone> StaffTelephones { get; set; }
        ICollection<IStaffTribalAffiliation> StaffTribalAffiliations { get; set; }
        ICollection<IStaffVisa> StaffVisas { get; set; }

        // Resource reference data
        Guid? PersonResourceId { get; set; }
        string PersonDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffMappingContract(
            bool isBirthDateSupported,
            bool isCitizenshipStatusDescriptorSupported,
            bool isFirstNameSupported,
            bool isGenerationCodeSuffixSupported,
            bool isHighestCompletedLevelOfEducationDescriptorSupported,
            bool isHighlyQualifiedTeacherSupported,
            bool isHispanicLatinoEthnicitySupported,
            bool isLastSurnameSupported,
            bool isLoginIdSupported,
            bool isMaidenNameSupported,
            bool isMiddleNameSupported,
            bool isOldEthnicityDescriptorSupported,
            bool isPersonalTitlePrefixSupported,
            bool isPersonIdSupported,
            bool isPersonReferenceSupported,
            bool isSexDescriptorSupported,
            bool isSourceSystemDescriptorSupported,
            bool isStaffAddressesSupported,
            bool isStaffAncestryEthnicOriginsSupported,
            bool isStaffCredentialsSupported,
            bool isStaffElectronicMailsSupported,
            bool isStaffIdentificationCodesSupported,
            bool isStaffIdentificationDocumentsSupported,
            bool isStaffInternationalAddressesSupported,
            bool isStaffLanguagesSupported,
            bool isStaffOtherNamesSupported,
            bool isStaffPersonalIdentificationDocumentsSupported,
            bool isStaffRacesSupported,
            bool isStaffRecognitionsSupported,
            bool isStaffTelephonesSupported,
            bool isStaffTribalAffiliationsSupported,
            bool isStaffUniqueIdSupported,
            bool isStaffVisasSupported,
            bool isYearsOfPriorProfessionalExperienceSupported,
            bool isYearsOfPriorTeachingExperienceSupported,
            bool isStaffAddressesItemCreatable,
            Func<IStaffAddress, bool> isStaffAddressIncluded,
            bool isStaffAncestryEthnicOriginsItemCreatable,
            Func<IStaffAncestryEthnicOrigin, bool> isStaffAncestryEthnicOriginIncluded,
            bool isStaffCredentialsItemCreatable,
            Func<IStaffCredential, bool> isStaffCredentialIncluded,
            bool isStaffElectronicMailsItemCreatable,
            Func<IStaffElectronicMail, bool> isStaffElectronicMailIncluded,
            bool isStaffIdentificationCodesItemCreatable,
            Func<IStaffIdentificationCode, bool> isStaffIdentificationCodeIncluded,
            bool isStaffIdentificationDocumentsItemCreatable,
            Func<IStaffIdentificationDocument, bool> isStaffIdentificationDocumentIncluded,
            bool isStaffInternationalAddressesItemCreatable,
            Func<IStaffInternationalAddress, bool> isStaffInternationalAddressIncluded,
            bool isStaffLanguagesItemCreatable,
            Func<IStaffLanguage, bool> isStaffLanguageIncluded,
            bool isStaffOtherNamesItemCreatable,
            Func<IStaffOtherName, bool> isStaffOtherNameIncluded,
            bool isStaffPersonalIdentificationDocumentsItemCreatable,
            Func<IStaffPersonalIdentificationDocument, bool> isStaffPersonalIdentificationDocumentIncluded,
            bool isStaffRacesItemCreatable,
            Func<IStaffRace, bool> isStaffRaceIncluded,
            bool isStaffRecognitionsItemCreatable,
            Func<IStaffRecognition, bool> isStaffRecognitionIncluded,
            bool isStaffTelephonesItemCreatable,
            Func<IStaffTelephone, bool> isStaffTelephoneIncluded,
            bool isStaffTribalAffiliationsItemCreatable,
            Func<IStaffTribalAffiliation, bool> isStaffTribalAffiliationIncluded,
            bool isStaffVisasItemCreatable,
            Func<IStaffVisa, bool> isStaffVisaIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBirthDateSupported = isBirthDateSupported;
            IsCitizenshipStatusDescriptorSupported = isCitizenshipStatusDescriptorSupported;
            IsFirstNameSupported = isFirstNameSupported;
            IsGenerationCodeSuffixSupported = isGenerationCodeSuffixSupported;
            IsHighestCompletedLevelOfEducationDescriptorSupported = isHighestCompletedLevelOfEducationDescriptorSupported;
            IsHighlyQualifiedTeacherSupported = isHighlyQualifiedTeacherSupported;
            IsHispanicLatinoEthnicitySupported = isHispanicLatinoEthnicitySupported;
            IsLastSurnameSupported = isLastSurnameSupported;
            IsLoginIdSupported = isLoginIdSupported;
            IsMaidenNameSupported = isMaidenNameSupported;
            IsMiddleNameSupported = isMiddleNameSupported;
            IsOldEthnicityDescriptorSupported = isOldEthnicityDescriptorSupported;
            IsPersonalTitlePrefixSupported = isPersonalTitlePrefixSupported;
            IsPersonIdSupported = isPersonIdSupported;
            IsPersonReferenceSupported = isPersonReferenceSupported;
            IsSexDescriptorSupported = isSexDescriptorSupported;
            IsSourceSystemDescriptorSupported = isSourceSystemDescriptorSupported;
            IsStaffAddressesSupported = isStaffAddressesSupported;
            IsStaffAncestryEthnicOriginsSupported = isStaffAncestryEthnicOriginsSupported;
            IsStaffCredentialsSupported = isStaffCredentialsSupported;
            IsStaffElectronicMailsSupported = isStaffElectronicMailsSupported;
            IsStaffIdentificationCodesSupported = isStaffIdentificationCodesSupported;
            IsStaffIdentificationDocumentsSupported = isStaffIdentificationDocumentsSupported;
            IsStaffInternationalAddressesSupported = isStaffInternationalAddressesSupported;
            IsStaffLanguagesSupported = isStaffLanguagesSupported;
            IsStaffOtherNamesSupported = isStaffOtherNamesSupported;
            IsStaffPersonalIdentificationDocumentsSupported = isStaffPersonalIdentificationDocumentsSupported;
            IsStaffRacesSupported = isStaffRacesSupported;
            IsStaffRecognitionsSupported = isStaffRecognitionsSupported;
            IsStaffTelephonesSupported = isStaffTelephonesSupported;
            IsStaffTribalAffiliationsSupported = isStaffTribalAffiliationsSupported;
            IsStaffUniqueIdSupported = isStaffUniqueIdSupported;
            IsStaffVisasSupported = isStaffVisasSupported;
            IsYearsOfPriorProfessionalExperienceSupported = isYearsOfPriorProfessionalExperienceSupported;
            IsYearsOfPriorTeachingExperienceSupported = isYearsOfPriorTeachingExperienceSupported;
            IsStaffAddressesItemCreatable = isStaffAddressesItemCreatable;
            IsStaffAddressIncluded = isStaffAddressIncluded;
            IsStaffAncestryEthnicOriginsItemCreatable = isStaffAncestryEthnicOriginsItemCreatable;
            IsStaffAncestryEthnicOriginIncluded = isStaffAncestryEthnicOriginIncluded;
            IsStaffCredentialsItemCreatable = isStaffCredentialsItemCreatable;
            IsStaffCredentialIncluded = isStaffCredentialIncluded;
            IsStaffElectronicMailsItemCreatable = isStaffElectronicMailsItemCreatable;
            IsStaffElectronicMailIncluded = isStaffElectronicMailIncluded;
            IsStaffIdentificationCodesItemCreatable = isStaffIdentificationCodesItemCreatable;
            IsStaffIdentificationCodeIncluded = isStaffIdentificationCodeIncluded;
            IsStaffIdentificationDocumentsItemCreatable = isStaffIdentificationDocumentsItemCreatable;
            IsStaffIdentificationDocumentIncluded = isStaffIdentificationDocumentIncluded;
            IsStaffInternationalAddressesItemCreatable = isStaffInternationalAddressesItemCreatable;
            IsStaffInternationalAddressIncluded = isStaffInternationalAddressIncluded;
            IsStaffLanguagesItemCreatable = isStaffLanguagesItemCreatable;
            IsStaffLanguageIncluded = isStaffLanguageIncluded;
            IsStaffOtherNamesItemCreatable = isStaffOtherNamesItemCreatable;
            IsStaffOtherNameIncluded = isStaffOtherNameIncluded;
            IsStaffPersonalIdentificationDocumentsItemCreatable = isStaffPersonalIdentificationDocumentsItemCreatable;
            IsStaffPersonalIdentificationDocumentIncluded = isStaffPersonalIdentificationDocumentIncluded;
            IsStaffRacesItemCreatable = isStaffRacesItemCreatable;
            IsStaffRaceIncluded = isStaffRaceIncluded;
            IsStaffRecognitionsItemCreatable = isStaffRecognitionsItemCreatable;
            IsStaffRecognitionIncluded = isStaffRecognitionIncluded;
            IsStaffTelephonesItemCreatable = isStaffTelephonesItemCreatable;
            IsStaffTelephoneIncluded = isStaffTelephoneIncluded;
            IsStaffTribalAffiliationsItemCreatable = isStaffTribalAffiliationsItemCreatable;
            IsStaffTribalAffiliationIncluded = isStaffTribalAffiliationIncluded;
            IsStaffVisasItemCreatable = isStaffVisasItemCreatable;
            IsStaffVisaIncluded = isStaffVisaIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBirthDateSupported { get; }
        public bool IsCitizenshipStatusDescriptorSupported { get; }
        public bool IsFirstNameSupported { get; }
        public bool IsGenerationCodeSuffixSupported { get; }
        public bool IsHighestCompletedLevelOfEducationDescriptorSupported { get; }
        public bool IsHighlyQualifiedTeacherSupported { get; }
        public bool IsHispanicLatinoEthnicitySupported { get; }
        public bool IsLastSurnameSupported { get; }
        public bool IsLoginIdSupported { get; }
        public bool IsMaidenNameSupported { get; }
        public bool IsMiddleNameSupported { get; }
        public bool IsOldEthnicityDescriptorSupported { get; }
        public bool IsPersonalTitlePrefixSupported { get; }
        public bool IsPersonIdSupported { get; }
        public bool IsPersonReferenceSupported { get; }
        public bool IsSexDescriptorSupported { get; }
        public bool IsSourceSystemDescriptorSupported { get; }
        public bool IsStaffAddressesSupported { get; }
        public bool IsStaffAncestryEthnicOriginsSupported { get; }
        public bool IsStaffCredentialsSupported { get; }
        public bool IsStaffElectronicMailsSupported { get; }
        public bool IsStaffIdentificationCodesSupported { get; }
        public bool IsStaffIdentificationDocumentsSupported { get; }
        public bool IsStaffInternationalAddressesSupported { get; }
        public bool IsStaffLanguagesSupported { get; }
        public bool IsStaffOtherNamesSupported { get; }
        public bool IsStaffPersonalIdentificationDocumentsSupported { get; }
        public bool IsStaffRacesSupported { get; }
        public bool IsStaffRecognitionsSupported { get; }
        public bool IsStaffTelephonesSupported { get; }
        public bool IsStaffTribalAffiliationsSupported { get; }
        public bool IsStaffUniqueIdSupported { get; }
        public bool IsStaffVisasSupported { get; }
        public bool IsYearsOfPriorProfessionalExperienceSupported { get; }
        public bool IsYearsOfPriorTeachingExperienceSupported { get; }
        public bool IsStaffAddressesItemCreatable { get; }
        public Func<IStaffAddress, bool> IsStaffAddressIncluded { get; }
        public bool IsStaffAncestryEthnicOriginsItemCreatable { get; }
        public Func<IStaffAncestryEthnicOrigin, bool> IsStaffAncestryEthnicOriginIncluded { get; }
        public bool IsStaffCredentialsItemCreatable { get; }
        public Func<IStaffCredential, bool> IsStaffCredentialIncluded { get; }
        public bool IsStaffElectronicMailsItemCreatable { get; }
        public Func<IStaffElectronicMail, bool> IsStaffElectronicMailIncluded { get; }
        public bool IsStaffIdentificationCodesItemCreatable { get; }
        public Func<IStaffIdentificationCode, bool> IsStaffIdentificationCodeIncluded { get; }
        public bool IsStaffIdentificationDocumentsItemCreatable { get; }
        public Func<IStaffIdentificationDocument, bool> IsStaffIdentificationDocumentIncluded { get; }
        public bool IsStaffInternationalAddressesItemCreatable { get; }
        public Func<IStaffInternationalAddress, bool> IsStaffInternationalAddressIncluded { get; }
        public bool IsStaffLanguagesItemCreatable { get; }
        public Func<IStaffLanguage, bool> IsStaffLanguageIncluded { get; }
        public bool IsStaffOtherNamesItemCreatable { get; }
        public Func<IStaffOtherName, bool> IsStaffOtherNameIncluded { get; }
        public bool IsStaffPersonalIdentificationDocumentsItemCreatable { get; }
        public Func<IStaffPersonalIdentificationDocument, bool> IsStaffPersonalIdentificationDocumentIncluded { get; }
        public bool IsStaffRacesItemCreatable { get; }
        public Func<IStaffRace, bool> IsStaffRaceIncluded { get; }
        public bool IsStaffRecognitionsItemCreatable { get; }
        public Func<IStaffRecognition, bool> IsStaffRecognitionIncluded { get; }
        public bool IsStaffTelephonesItemCreatable { get; }
        public Func<IStaffTelephone, bool> IsStaffTelephoneIncluded { get; }
        public bool IsStaffTribalAffiliationsItemCreatable { get; }
        public Func<IStaffTribalAffiliation, bool> IsStaffTribalAffiliationIncluded { get; }
        public bool IsStaffVisasItemCreatable { get; }
        public Func<IStaffVisa, bool> IsStaffVisaIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BirthDate":
                    return IsBirthDateSupported;
                case "CitizenshipStatusDescriptor":
                    return IsCitizenshipStatusDescriptorSupported;
                case "FirstName":
                    return IsFirstNameSupported;
                case "GenerationCodeSuffix":
                    return IsGenerationCodeSuffixSupported;
                case "HighestCompletedLevelOfEducationDescriptor":
                    return IsHighestCompletedLevelOfEducationDescriptorSupported;
                case "HighlyQualifiedTeacher":
                    return IsHighlyQualifiedTeacherSupported;
                case "HispanicLatinoEthnicity":
                    return IsHispanicLatinoEthnicitySupported;
                case "LastSurname":
                    return IsLastSurnameSupported;
                case "LoginId":
                    return IsLoginIdSupported;
                case "MaidenName":
                    return IsMaidenNameSupported;
                case "MiddleName":
                    return IsMiddleNameSupported;
                case "OldEthnicityDescriptor":
                    return IsOldEthnicityDescriptorSupported;
                case "PersonalTitlePrefix":
                    return IsPersonalTitlePrefixSupported;
                case "PersonId":
                    return IsPersonIdSupported;
                case "PersonReference":
                    return IsPersonReferenceSupported;
                case "SexDescriptor":
                    return IsSexDescriptorSupported;
                case "SourceSystemDescriptor":
                    return IsSourceSystemDescriptorSupported;
                case "StaffAddresses":
                    return IsStaffAddressesSupported;
                case "StaffAncestryEthnicOrigins":
                    return IsStaffAncestryEthnicOriginsSupported;
                case "StaffCredentials":
                    return IsStaffCredentialsSupported;
                case "StaffElectronicMails":
                    return IsStaffElectronicMailsSupported;
                case "StaffIdentificationCodes":
                    return IsStaffIdentificationCodesSupported;
                case "StaffIdentificationDocuments":
                    return IsStaffIdentificationDocumentsSupported;
                case "StaffInternationalAddresses":
                    return IsStaffInternationalAddressesSupported;
                case "StaffLanguages":
                    return IsStaffLanguagesSupported;
                case "StaffOtherNames":
                    return IsStaffOtherNamesSupported;
                case "StaffPersonalIdentificationDocuments":
                    return IsStaffPersonalIdentificationDocumentsSupported;
                case "StaffRaces":
                    return IsStaffRacesSupported;
                case "StaffRecognitions":
                    return IsStaffRecognitionsSupported;
                case "StaffTelephones":
                    return IsStaffTelephonesSupported;
                case "StaffTribalAffiliations":
                    return IsStaffTribalAffiliationsSupported;
                case "StaffUniqueId":
                    return IsStaffUniqueIdSupported;
                case "StaffVisas":
                    return IsStaffVisasSupported;
                case "YearsOfPriorProfessionalExperience":
                    return IsYearsOfPriorProfessionalExperienceSupported;
                case "YearsOfPriorTeachingExperience":
                    return IsYearsOfPriorTeachingExperienceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffAddresses":
                    return IsStaffAddressesItemCreatable;
                case "StaffAncestryEthnicOrigins":
                    return IsStaffAncestryEthnicOriginsItemCreatable;
                case "StaffCredentials":
                    return IsStaffCredentialsItemCreatable;
                case "StaffElectronicMails":
                    return IsStaffElectronicMailsItemCreatable;
                case "StaffIdentificationCodes":
                    return IsStaffIdentificationCodesItemCreatable;
                case "StaffIdentificationDocuments":
                    return IsStaffIdentificationDocumentsItemCreatable;
                case "StaffInternationalAddresses":
                    return IsStaffInternationalAddressesItemCreatable;
                case "StaffLanguages":
                    return IsStaffLanguagesItemCreatable;
                case "StaffOtherNames":
                    return IsStaffOtherNamesItemCreatable;
                case "StaffPersonalIdentificationDocuments":
                    return IsStaffPersonalIdentificationDocumentsItemCreatable;
                case "StaffRaces":
                    return IsStaffRacesItemCreatable;
                case "StaffRecognitions":
                    return IsStaffRecognitionsItemCreatable;
                case "StaffTelephones":
                    return IsStaffTelephonesItemCreatable;
                case "StaffTribalAffiliations":
                    return IsStaffTribalAffiliationsItemCreatable;
                case "StaffVisas":
                    return IsStaffVisasItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffAbsenceEvent model.
    /// </summary>
    public interface IStaffAbsenceEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AbsenceEventCategoryDescriptor { get; set; }
        
        DateTime EventDate { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        string AbsenceEventReason { get; set; }
        decimal? HoursAbsent { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffAbsenceEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffAbsenceEventMappingContract(
            bool isAbsenceEventReasonSupported,
            bool isHoursAbsentSupported,
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAbsenceEventReasonSupported = isAbsenceEventReasonSupported;
            IsHoursAbsentSupported = isHoursAbsentSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAbsenceEventReasonSupported { get; }
        public bool IsHoursAbsentSupported { get; }
        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AbsenceEventReason":
                    return IsAbsenceEventReasonSupported;
                case "HoursAbsent":
                    return IsHoursAbsentSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AbsenceEventCategoryDescriptor":
                    return true;
                case "EventDate":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffAddress model.
    /// </summary>
    public interface IStaffAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string AddressTypeDescriptor { get; set; }
        
        string City { get; set; }
        
        string PostalCode { get; set; }
        
        string StateAbbreviationDescriptor { get; set; }
        
        string StreetNumberName { get; set; }

        // Non-PK properties
        string ApartmentRoomSuiteNumber { get; set; }
        string BuildingSiteNumber { get; set; }
        string CongressionalDistrict { get; set; }
        string CountyFIPSCode { get; set; }
        bool? DoNotPublishIndicator { get; set; }
        string Latitude { get; set; }
        string LocaleDescriptor { get; set; }
        string Longitude { get; set; }
        string NameOfCounty { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStaffAddressPeriod> StaffAddressPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffAddressMappingContract(
            bool isApartmentRoomSuiteNumberSupported,
            bool isBuildingSiteNumberSupported,
            bool isCongressionalDistrictSupported,
            bool isCountyFIPSCodeSupported,
            bool isDoNotPublishIndicatorSupported,
            bool isLatitudeSupported,
            bool isLocaleDescriptorSupported,
            bool isLongitudeSupported,
            bool isNameOfCountySupported,
            bool isStaffAddressPeriodsSupported,
            bool isStaffAddressPeriodsItemCreatable,
            Func<IStaffAddressPeriod, bool> isStaffAddressPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsApartmentRoomSuiteNumberSupported = isApartmentRoomSuiteNumberSupported;
            IsBuildingSiteNumberSupported = isBuildingSiteNumberSupported;
            IsCongressionalDistrictSupported = isCongressionalDistrictSupported;
            IsCountyFIPSCodeSupported = isCountyFIPSCodeSupported;
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLocaleDescriptorSupported = isLocaleDescriptorSupported;
            IsLongitudeSupported = isLongitudeSupported;
            IsNameOfCountySupported = isNameOfCountySupported;
            IsStaffAddressPeriodsSupported = isStaffAddressPeriodsSupported;
            IsStaffAddressPeriodsItemCreatable = isStaffAddressPeriodsItemCreatable;
            IsStaffAddressPeriodIncluded = isStaffAddressPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsApartmentRoomSuiteNumberSupported { get; }
        public bool IsBuildingSiteNumberSupported { get; }
        public bool IsCongressionalDistrictSupported { get; }
        public bool IsCountyFIPSCodeSupported { get; }
        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLocaleDescriptorSupported { get; }
        public bool IsLongitudeSupported { get; }
        public bool IsNameOfCountySupported { get; }
        public bool IsStaffAddressPeriodsSupported { get; }
        public bool IsStaffAddressPeriodsItemCreatable { get; }
        public Func<IStaffAddressPeriod, bool> IsStaffAddressPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ApartmentRoomSuiteNumber":
                    return IsApartmentRoomSuiteNumberSupported;
                case "BuildingSiteNumber":
                    return IsBuildingSiteNumberSupported;
                case "CongressionalDistrict":
                    return IsCongressionalDistrictSupported;
                case "CountyFIPSCode":
                    return IsCountyFIPSCodeSupported;
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "LocaleDescriptor":
                    return IsLocaleDescriptorSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                case "NameOfCounty":
                    return IsNameOfCountySupported;
                case "StaffAddressPeriods":
                    return IsStaffAddressPeriodsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                case "City":
                    return true;
                case "PostalCode":
                    return true;
                case "StateAbbreviationDescriptor":
                    return true;
                case "StreetNumberName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffAddressPeriods":
                    return IsStaffAddressPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffAddressPeriod model.
    /// </summary>
    public interface IStaffAddressPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffAddress StaffAddress { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffAddressPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffAddressPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffAncestryEthnicOrigin model.
    /// </summary>
    public interface IStaffAncestryEthnicOrigin : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string AncestryEthnicOriginDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffAncestryEthnicOriginMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffAncestryEthnicOriginMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AncestryEthnicOriginDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffClassificationDescriptor model.
    /// </summary>
    public interface IStaffClassificationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StaffClassificationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffClassificationDescriptorMappingContract : IMappingContract
    {
        public StaffClassificationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffClassificationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffCohortAssociation model.
    /// </summary>
    public interface IStaffCohortAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        string CohortIdentifier { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }
        bool? StudentRecordAccess { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CohortResourceId { get; set; }
        string CohortDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffCohortAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffCohortAssociationMappingContract(
            bool isCohortReferenceSupported,
            bool isEndDateSupported,
            bool isStaffReferenceSupported,
            bool isStudentRecordAccessSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCohortReferenceSupported = isCohortReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStudentRecordAccessSupported = isStudentRecordAccessSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCohortReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStudentRecordAccessSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CohortReference":
                    return IsCohortReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StudentRecordAccess":
                    return IsStudentRecordAccessSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "CohortIdentifier":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffCredential model.
    /// </summary>
    public interface IStaffCredential : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string CredentialIdentifier { get; set; }
        
        string StateOfIssueStateAbbreviationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CredentialResourceId { get; set; }
        string CredentialDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffCredentialMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffCredentialMappingContract(
            bool isCredentialReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCredentialReferenceSupported = isCredentialReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCredentialReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CredentialReference":
                    return IsCredentialReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CredentialIdentifier":
                    return true;
                case "StateOfIssueStateAbbreviationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffDisciplineIncidentAssociation model.
    /// </summary>
    public interface IStaffDisciplineIncidentAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode> StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes { get; set; }

        // Resource reference data
        Guid? DisciplineIncidentResourceId { get; set; }
        string DisciplineIncidentDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffDisciplineIncidentAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffDisciplineIncidentAssociationMappingContract(
            bool isDisciplineIncidentReferenceSupported,
            bool isStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported,
            bool isStaffReferenceSupported,
            bool isStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesItemCreatable,
            Func<IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode, bool> isStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDisciplineIncidentReferenceSupported = isDisciplineIncidentReferenceSupported;
            IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported = isStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesItemCreatable = isStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesItemCreatable;
            IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded = isStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDisciplineIncidentReferenceSupported { get; }
        public bool IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesItemCreatable { get; }
        public Func<IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode, bool> IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DisciplineIncidentReference":
                    return IsDisciplineIncidentReferenceSupported;
                case "StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes":
                    return IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes":
                    return IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode model.
    /// </summary>
    public interface IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffDisciplineIncidentAssociation StaffDisciplineIncidentAssociation { get; set; }
        
        string DisciplineIncidentParticipationCodeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineIncidentParticipationCodeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffEducationOrganizationAssignmentAssociation model.
    /// </summary>
    public interface IStaffEducationOrganizationAssignmentAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string StaffClassificationDescriptor { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        string CredentialIdentifier { get; set; }
        int? EmploymentEducationOrganizationId { get; set; }
        DateTime? EmploymentHireDate { get; set; }
        string EmploymentStatusDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        decimal? FullTimeEquivalency { get; set; }
        int? OrderOfAssignment { get; set; }
        string PositionTitle { get; set; }
        string StateOfIssueStateAbbreviationDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CredentialResourceId { get; set; }
        string CredentialDiscriminator { get; set; }
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? EmploymentStaffEducationOrganizationEmploymentAssociationResourceId { get; set; }
        string EmploymentStaffEducationOrganizationEmploymentAssociationDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffEducationOrganizationAssignmentAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffEducationOrganizationAssignmentAssociationMappingContract(
            bool isCredentialIdentifierSupported,
            bool isCredentialReferenceSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEmploymentEducationOrganizationIdSupported,
            bool isEmploymentHireDateSupported,
            bool isEmploymentStaffEducationOrganizationEmploymentAssociationReferenceSupported,
            bool isEmploymentStatusDescriptorSupported,
            bool isEndDateSupported,
            bool isFullTimeEquivalencySupported,
            bool isOrderOfAssignmentSupported,
            bool isPositionTitleSupported,
            bool isStaffReferenceSupported,
            bool isStateOfIssueStateAbbreviationDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCredentialIdentifierSupported = isCredentialIdentifierSupported;
            IsCredentialReferenceSupported = isCredentialReferenceSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEmploymentEducationOrganizationIdSupported = isEmploymentEducationOrganizationIdSupported;
            IsEmploymentHireDateSupported = isEmploymentHireDateSupported;
            IsEmploymentStaffEducationOrganizationEmploymentAssociationReferenceSupported = isEmploymentStaffEducationOrganizationEmploymentAssociationReferenceSupported;
            IsEmploymentStatusDescriptorSupported = isEmploymentStatusDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsFullTimeEquivalencySupported = isFullTimeEquivalencySupported;
            IsOrderOfAssignmentSupported = isOrderOfAssignmentSupported;
            IsPositionTitleSupported = isPositionTitleSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStateOfIssueStateAbbreviationDescriptorSupported = isStateOfIssueStateAbbreviationDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCredentialIdentifierSupported { get; }
        public bool IsCredentialReferenceSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEmploymentEducationOrganizationIdSupported { get; }
        public bool IsEmploymentHireDateSupported { get; }
        public bool IsEmploymentStaffEducationOrganizationEmploymentAssociationReferenceSupported { get; }
        public bool IsEmploymentStatusDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsFullTimeEquivalencySupported { get; }
        public bool IsOrderOfAssignmentSupported { get; }
        public bool IsPositionTitleSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStateOfIssueStateAbbreviationDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CredentialIdentifier":
                    return IsCredentialIdentifierSupported;
                case "CredentialReference":
                    return IsCredentialReferenceSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EmploymentEducationOrganizationId":
                    return IsEmploymentEducationOrganizationIdSupported;
                case "EmploymentHireDate":
                    return IsEmploymentHireDateSupported;
                case "EmploymentStaffEducationOrganizationEmploymentAssociationReference":
                    return IsEmploymentStaffEducationOrganizationEmploymentAssociationReferenceSupported;
                case "EmploymentStatusDescriptor":
                    return IsEmploymentStatusDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "FullTimeEquivalency":
                    return IsFullTimeEquivalencySupported;
                case "OrderOfAssignment":
                    return IsOrderOfAssignmentSupported;
                case "PositionTitle":
                    return IsPositionTitleSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StateOfIssueStateAbbreviationDescriptor":
                    return IsStateOfIssueStateAbbreviationDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "StaffClassificationDescriptor":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffEducationOrganizationContactAssociation model.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string ContactTitle { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        string ContactTypeDescriptor { get; set; }
        string ElectronicMailAddress { get; set; }

        // One-to-one relationships

        IStaffEducationOrganizationContactAssociationAddress StaffEducationOrganizationContactAssociationAddress { get; set; }

        // Lists
        ICollection<IStaffEducationOrganizationContactAssociationTelephone> StaffEducationOrganizationContactAssociationTelephones { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffEducationOrganizationContactAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffEducationOrganizationContactAssociationMappingContract(
            bool isContactTypeDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isElectronicMailAddressSupported,
            bool isStaffEducationOrganizationContactAssociationAddressSupported,
            bool isStaffEducationOrganizationContactAssociationTelephonesSupported,
            bool isStaffReferenceSupported,
            bool isStaffEducationOrganizationContactAssociationAddressCreatable,
            bool isStaffEducationOrganizationContactAssociationTelephonesItemCreatable,
            Func<IStaffEducationOrganizationContactAssociationTelephone, bool> isStaffEducationOrganizationContactAssociationTelephoneIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsContactTypeDescriptorSupported = isContactTypeDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsElectronicMailAddressSupported = isElectronicMailAddressSupported;
            IsStaffEducationOrganizationContactAssociationAddressSupported = isStaffEducationOrganizationContactAssociationAddressSupported;
            IsStaffEducationOrganizationContactAssociationTelephonesSupported = isStaffEducationOrganizationContactAssociationTelephonesSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStaffEducationOrganizationContactAssociationAddressCreatable = isStaffEducationOrganizationContactAssociationAddressCreatable;
            IsStaffEducationOrganizationContactAssociationTelephonesItemCreatable = isStaffEducationOrganizationContactAssociationTelephonesItemCreatable;
            IsStaffEducationOrganizationContactAssociationTelephoneIncluded = isStaffEducationOrganizationContactAssociationTelephoneIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsContactTypeDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsElectronicMailAddressSupported { get; }
        public bool IsStaffEducationOrganizationContactAssociationAddressSupported { get; }
        public bool IsStaffEducationOrganizationContactAssociationTelephonesSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStaffEducationOrganizationContactAssociationAddressCreatable { get; }
        public bool IsStaffEducationOrganizationContactAssociationTelephonesItemCreatable { get; }
        public Func<IStaffEducationOrganizationContactAssociationTelephone, bool> IsStaffEducationOrganizationContactAssociationTelephoneIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ContactTypeDescriptor":
                    return IsContactTypeDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "ElectronicMailAddress":
                    return IsElectronicMailAddressSupported;
                case "StaffEducationOrganizationContactAssociationAddress":
                    return IsStaffEducationOrganizationContactAssociationAddressSupported;
                case "StaffEducationOrganizationContactAssociationTelephones":
                    return IsStaffEducationOrganizationContactAssociationTelephonesSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ContactTitle":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffEducationOrganizationContactAssociationAddress":
                    return IsStaffEducationOrganizationContactAssociationAddressCreatable;
                case "StaffEducationOrganizationContactAssociationTelephones":
                    return IsStaffEducationOrganizationContactAssociationTelephonesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffEducationOrganizationContactAssociationAddress model.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffEducationOrganizationContactAssociation StaffEducationOrganizationContactAssociation { get; set; }

        // Non-PK properties
        string AddressTypeDescriptor { get; set; }
        string ApartmentRoomSuiteNumber { get; set; }
        string BuildingSiteNumber { get; set; }
        string City { get; set; }
        string CongressionalDistrict { get; set; }
        string CountyFIPSCode { get; set; }
        bool? DoNotPublishIndicator { get; set; }
        string Latitude { get; set; }
        string LocaleDescriptor { get; set; }
        string Longitude { get; set; }
        string NameOfCounty { get; set; }
        string PostalCode { get; set; }
        string StateAbbreviationDescriptor { get; set; }
        string StreetNumberName { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStaffEducationOrganizationContactAssociationAddressPeriod> StaffEducationOrganizationContactAssociationAddressPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffEducationOrganizationContactAssociationAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffEducationOrganizationContactAssociationAddressMappingContract(
            bool isAddressTypeDescriptorSupported,
            bool isApartmentRoomSuiteNumberSupported,
            bool isBuildingSiteNumberSupported,
            bool isCitySupported,
            bool isCongressionalDistrictSupported,
            bool isCountyFIPSCodeSupported,
            bool isDoNotPublishIndicatorSupported,
            bool isLatitudeSupported,
            bool isLocaleDescriptorSupported,
            bool isLongitudeSupported,
            bool isNameOfCountySupported,
            bool isPostalCodeSupported,
            bool isStaffEducationOrganizationContactAssociationAddressPeriodsSupported,
            bool isStateAbbreviationDescriptorSupported,
            bool isStreetNumberNameSupported,
            bool isStaffEducationOrganizationContactAssociationAddressPeriodsItemCreatable,
            Func<IStaffEducationOrganizationContactAssociationAddressPeriod, bool> isStaffEducationOrganizationContactAssociationAddressPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAddressTypeDescriptorSupported = isAddressTypeDescriptorSupported;
            IsApartmentRoomSuiteNumberSupported = isApartmentRoomSuiteNumberSupported;
            IsBuildingSiteNumberSupported = isBuildingSiteNumberSupported;
            IsCitySupported = isCitySupported;
            IsCongressionalDistrictSupported = isCongressionalDistrictSupported;
            IsCountyFIPSCodeSupported = isCountyFIPSCodeSupported;
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLocaleDescriptorSupported = isLocaleDescriptorSupported;
            IsLongitudeSupported = isLongitudeSupported;
            IsNameOfCountySupported = isNameOfCountySupported;
            IsPostalCodeSupported = isPostalCodeSupported;
            IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported = isStaffEducationOrganizationContactAssociationAddressPeriodsSupported;
            IsStateAbbreviationDescriptorSupported = isStateAbbreviationDescriptorSupported;
            IsStreetNumberNameSupported = isStreetNumberNameSupported;
            IsStaffEducationOrganizationContactAssociationAddressPeriodsItemCreatable = isStaffEducationOrganizationContactAssociationAddressPeriodsItemCreatable;
            IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded = isStaffEducationOrganizationContactAssociationAddressPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAddressTypeDescriptorSupported { get; }
        public bool IsApartmentRoomSuiteNumberSupported { get; }
        public bool IsBuildingSiteNumberSupported { get; }
        public bool IsCitySupported { get; }
        public bool IsCongressionalDistrictSupported { get; }
        public bool IsCountyFIPSCodeSupported { get; }
        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLocaleDescriptorSupported { get; }
        public bool IsLongitudeSupported { get; }
        public bool IsNameOfCountySupported { get; }
        public bool IsPostalCodeSupported { get; }
        public bool IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported { get; }
        public bool IsStateAbbreviationDescriptorSupported { get; }
        public bool IsStreetNumberNameSupported { get; }
        public bool IsStaffEducationOrganizationContactAssociationAddressPeriodsItemCreatable { get; }
        public Func<IStaffEducationOrganizationContactAssociationAddressPeriod, bool> IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AddressTypeDescriptor":
                    return IsAddressTypeDescriptorSupported;
                case "ApartmentRoomSuiteNumber":
                    return IsApartmentRoomSuiteNumberSupported;
                case "BuildingSiteNumber":
                    return IsBuildingSiteNumberSupported;
                case "City":
                    return IsCitySupported;
                case "CongressionalDistrict":
                    return IsCongressionalDistrictSupported;
                case "CountyFIPSCode":
                    return IsCountyFIPSCodeSupported;
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "LocaleDescriptor":
                    return IsLocaleDescriptorSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                case "NameOfCounty":
                    return IsNameOfCountySupported;
                case "PostalCode":
                    return IsPostalCodeSupported;
                case "StaffEducationOrganizationContactAssociationAddressPeriods":
                    return IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported;
                case "StateAbbreviationDescriptor":
                    return IsStateAbbreviationDescriptorSupported;
                case "StreetNumberName":
                    return IsStreetNumberNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffEducationOrganizationContactAssociationAddressPeriods":
                    return IsStaffEducationOrganizationContactAssociationAddressPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffEducationOrganizationContactAssociationAddressPeriod model.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationAddressPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffEducationOrganizationContactAssociationAddress StaffEducationOrganizationContactAssociationAddress { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffEducationOrganizationContactAssociationAddressPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffEducationOrganizationContactAssociationAddressPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffEducationOrganizationContactAssociationTelephone model.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationTelephone : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffEducationOrganizationContactAssociation StaffEducationOrganizationContactAssociation { get; set; }
        
        string TelephoneNumber { get; set; }
        
        string TelephoneNumberTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        int? OrderOfPriority { get; set; }
        bool? TextMessageCapabilityIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffEducationOrganizationContactAssociationTelephoneMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffEducationOrganizationContactAssociationTelephoneMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isOrderOfPrioritySupported,
            bool isTextMessageCapabilityIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsOrderOfPrioritySupported = isOrderOfPrioritySupported;
            IsTextMessageCapabilityIndicatorSupported = isTextMessageCapabilityIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsOrderOfPrioritySupported { get; }
        public bool IsTextMessageCapabilityIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "OrderOfPriority":
                    return IsOrderOfPrioritySupported;
                case "TextMessageCapabilityIndicator":
                    return IsTextMessageCapabilityIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TelephoneNumber":
                    return true;
                case "TelephoneNumberTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffEducationOrganizationEmploymentAssociation model.
    /// </summary>
    public interface IStaffEducationOrganizationEmploymentAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string EmploymentStatusDescriptor { get; set; }
        
        DateTime HireDate { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        string CredentialIdentifier { get; set; }
        string Department { get; set; }
        DateTime? EndDate { get; set; }
        decimal? FullTimeEquivalency { get; set; }
        decimal? HourlyWage { get; set; }
        DateTime? OfferDate { get; set; }
        string SeparationDescriptor { get; set; }
        string SeparationReasonDescriptor { get; set; }
        string StateOfIssueStateAbbreviationDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CredentialResourceId { get; set; }
        string CredentialDiscriminator { get; set; }
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffEducationOrganizationEmploymentAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffEducationOrganizationEmploymentAssociationMappingContract(
            bool isCredentialIdentifierSupported,
            bool isCredentialReferenceSupported,
            bool isDepartmentSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isFullTimeEquivalencySupported,
            bool isHourlyWageSupported,
            bool isOfferDateSupported,
            bool isSeparationDescriptorSupported,
            bool isSeparationReasonDescriptorSupported,
            bool isStaffReferenceSupported,
            bool isStateOfIssueStateAbbreviationDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCredentialIdentifierSupported = isCredentialIdentifierSupported;
            IsCredentialReferenceSupported = isCredentialReferenceSupported;
            IsDepartmentSupported = isDepartmentSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsFullTimeEquivalencySupported = isFullTimeEquivalencySupported;
            IsHourlyWageSupported = isHourlyWageSupported;
            IsOfferDateSupported = isOfferDateSupported;
            IsSeparationDescriptorSupported = isSeparationDescriptorSupported;
            IsSeparationReasonDescriptorSupported = isSeparationReasonDescriptorSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStateOfIssueStateAbbreviationDescriptorSupported = isStateOfIssueStateAbbreviationDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCredentialIdentifierSupported { get; }
        public bool IsCredentialReferenceSupported { get; }
        public bool IsDepartmentSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsFullTimeEquivalencySupported { get; }
        public bool IsHourlyWageSupported { get; }
        public bool IsOfferDateSupported { get; }
        public bool IsSeparationDescriptorSupported { get; }
        public bool IsSeparationReasonDescriptorSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStateOfIssueStateAbbreviationDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CredentialIdentifier":
                    return IsCredentialIdentifierSupported;
                case "CredentialReference":
                    return IsCredentialReferenceSupported;
                case "Department":
                    return IsDepartmentSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "FullTimeEquivalency":
                    return IsFullTimeEquivalencySupported;
                case "HourlyWage":
                    return IsHourlyWageSupported;
                case "OfferDate":
                    return IsOfferDateSupported;
                case "SeparationDescriptor":
                    return IsSeparationDescriptorSupported;
                case "SeparationReasonDescriptor":
                    return IsSeparationReasonDescriptorSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StateOfIssueStateAbbreviationDescriptor":
                    return IsStateOfIssueStateAbbreviationDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "EmploymentStatusDescriptor":
                    return true;
                case "HireDate":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffElectronicMail model.
    /// </summary>
    public interface IStaffElectronicMail : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string ElectronicMailAddress { get; set; }
        
        string ElectronicMailTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        bool? PrimaryEmailAddressIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffElectronicMailMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffElectronicMailMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isPrimaryEmailAddressIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsPrimaryEmailAddressIndicatorSupported = isPrimaryEmailAddressIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsPrimaryEmailAddressIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "PrimaryEmailAddressIndicator":
                    return IsPrimaryEmailAddressIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ElectronicMailAddress":
                    return true;
                case "ElectronicMailTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffIdentificationCode model.
    /// </summary>
    public interface IStaffIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string StaffIdentificationSystemDescriptor { get; set; }

        // Non-PK properties
        string AssigningOrganizationIdentificationCode { get; set; }
        string IdentificationCode { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffIdentificationCodeMappingContract(
            bool isAssigningOrganizationIdentificationCodeSupported,
            bool isIdentificationCodeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssigningOrganizationIdentificationCodeSupported = isAssigningOrganizationIdentificationCodeSupported;
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssigningOrganizationIdentificationCodeSupported { get; }
        public bool IsIdentificationCodeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssigningOrganizationIdentificationCode":
                    return IsAssigningOrganizationIdentificationCodeSupported;
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffIdentificationSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffIdentificationDocument model.
    /// </summary>
    public interface IStaffIdentificationDocument : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string IdentificationDocumentUseDescriptor { get; set; }
        
        string PersonalInformationVerificationDescriptor { get; set; }

        // Non-PK properties
        DateTime? DocumentExpirationDate { get; set; }
        string DocumentTitle { get; set; }
        string IssuerCountryDescriptor { get; set; }
        string IssuerDocumentIdentificationCode { get; set; }
        string IssuerName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffIdentificationDocumentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffIdentificationDocumentMappingContract(
            bool isDocumentExpirationDateSupported,
            bool isDocumentTitleSupported,
            bool isIssuerCountryDescriptorSupported,
            bool isIssuerDocumentIdentificationCodeSupported,
            bool isIssuerNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDocumentExpirationDateSupported = isDocumentExpirationDateSupported;
            IsDocumentTitleSupported = isDocumentTitleSupported;
            IsIssuerCountryDescriptorSupported = isIssuerCountryDescriptorSupported;
            IsIssuerDocumentIdentificationCodeSupported = isIssuerDocumentIdentificationCodeSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDocumentExpirationDateSupported { get; }
        public bool IsDocumentTitleSupported { get; }
        public bool IsIssuerCountryDescriptorSupported { get; }
        public bool IsIssuerDocumentIdentificationCodeSupported { get; }
        public bool IsIssuerNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DocumentExpirationDate":
                    return IsDocumentExpirationDateSupported;
                case "DocumentTitle":
                    return IsDocumentTitleSupported;
                case "IssuerCountryDescriptor":
                    return IsIssuerCountryDescriptorSupported;
                case "IssuerDocumentIdentificationCode":
                    return IsIssuerDocumentIdentificationCodeSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationDocumentUseDescriptor":
                    return true;
                case "PersonalInformationVerificationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffIdentificationSystemDescriptor model.
    /// </summary>
    public interface IStaffIdentificationSystemDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StaffIdentificationSystemDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffIdentificationSystemDescriptorMappingContract : IMappingContract
    {
        public StaffIdentificationSystemDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffIdentificationSystemDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffInternationalAddress model.
    /// </summary>
    public interface IStaffInternationalAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string AddressTypeDescriptor { get; set; }

        // Non-PK properties
        string AddressLine1 { get; set; }
        string AddressLine2 { get; set; }
        string AddressLine3 { get; set; }
        string AddressLine4 { get; set; }
        DateTime? BeginDate { get; set; }
        string CountryDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        string Latitude { get; set; }
        string Longitude { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffInternationalAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffInternationalAddressMappingContract(
            bool isAddressLine1Supported,
            bool isAddressLine2Supported,
            bool isAddressLine3Supported,
            bool isAddressLine4Supported,
            bool isBeginDateSupported,
            bool isCountryDescriptorSupported,
            bool isEndDateSupported,
            bool isLatitudeSupported,
            bool isLongitudeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAddressLine1Supported = isAddressLine1Supported;
            IsAddressLine2Supported = isAddressLine2Supported;
            IsAddressLine3Supported = isAddressLine3Supported;
            IsAddressLine4Supported = isAddressLine4Supported;
            IsBeginDateSupported = isBeginDateSupported;
            IsCountryDescriptorSupported = isCountryDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLongitudeSupported = isLongitudeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAddressLine1Supported { get; }
        public bool IsAddressLine2Supported { get; }
        public bool IsAddressLine3Supported { get; }
        public bool IsAddressLine4Supported { get; }
        public bool IsBeginDateSupported { get; }
        public bool IsCountryDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLongitudeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AddressLine1":
                    return IsAddressLine1Supported;
                case "AddressLine2":
                    return IsAddressLine2Supported;
                case "AddressLine3":
                    return IsAddressLine3Supported;
                case "AddressLine4":
                    return IsAddressLine4Supported;
                case "BeginDate":
                    return IsBeginDateSupported;
                case "CountryDescriptor":
                    return IsCountryDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffLanguage model.
    /// </summary>
    public interface IStaffLanguage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string LanguageDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IStaffLanguageUse> StaffLanguageUses { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffLanguageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffLanguageMappingContract(
            bool isStaffLanguageUsesSupported,
            bool isStaffLanguageUsesItemCreatable,
            Func<IStaffLanguageUse, bool> isStaffLanguageUseIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStaffLanguageUsesSupported = isStaffLanguageUsesSupported;
            IsStaffLanguageUsesItemCreatable = isStaffLanguageUsesItemCreatable;
            IsStaffLanguageUseIncluded = isStaffLanguageUseIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStaffLanguageUsesSupported { get; }
        public bool IsStaffLanguageUsesItemCreatable { get; }
        public Func<IStaffLanguageUse, bool> IsStaffLanguageUseIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StaffLanguageUses":
                    return IsStaffLanguageUsesSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffLanguageUses":
                    return IsStaffLanguageUsesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffLanguageUse model.
    /// </summary>
    public interface IStaffLanguageUse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffLanguage StaffLanguage { get; set; }
        
        string LanguageUseDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffLanguageUseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffLanguageUseMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageUseDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffLeave model.
    /// </summary>
    public interface IStaffLeave : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        string StaffLeaveEventCategoryDescriptor { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }
        string Reason { get; set; }
        bool? SubstituteAssigned { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffLeaveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffLeaveMappingContract(
            bool isEndDateSupported,
            bool isReasonSupported,
            bool isStaffReferenceSupported,
            bool isSubstituteAssignedSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            IsReasonSupported = isReasonSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsSubstituteAssignedSupported = isSubstituteAssignedSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }
        public bool IsReasonSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsSubstituteAssignedSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                case "Reason":
                    return IsReasonSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "SubstituteAssigned":
                    return IsSubstituteAssignedSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "StaffLeaveEventCategoryDescriptor":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffLeaveEventCategoryDescriptor model.
    /// </summary>
    public interface IStaffLeaveEventCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StaffLeaveEventCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffLeaveEventCategoryDescriptorMappingContract : IMappingContract
    {
        public StaffLeaveEventCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffLeaveEventCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffOtherName model.
    /// </summary>
    public interface IStaffOtherName : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string OtherNameTypeDescriptor { get; set; }

        // Non-PK properties
        string FirstName { get; set; }
        string GenerationCodeSuffix { get; set; }
        string LastSurname { get; set; }
        string MiddleName { get; set; }
        string PersonalTitlePrefix { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffOtherNameMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffOtherNameMappingContract(
            bool isFirstNameSupported,
            bool isGenerationCodeSuffixSupported,
            bool isLastSurnameSupported,
            bool isMiddleNameSupported,
            bool isPersonalTitlePrefixSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsFirstNameSupported = isFirstNameSupported;
            IsGenerationCodeSuffixSupported = isGenerationCodeSuffixSupported;
            IsLastSurnameSupported = isLastSurnameSupported;
            IsMiddleNameSupported = isMiddleNameSupported;
            IsPersonalTitlePrefixSupported = isPersonalTitlePrefixSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsFirstNameSupported { get; }
        public bool IsGenerationCodeSuffixSupported { get; }
        public bool IsLastSurnameSupported { get; }
        public bool IsMiddleNameSupported { get; }
        public bool IsPersonalTitlePrefixSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "FirstName":
                    return IsFirstNameSupported;
                case "GenerationCodeSuffix":
                    return IsGenerationCodeSuffixSupported;
                case "LastSurname":
                    return IsLastSurnameSupported;
                case "MiddleName":
                    return IsMiddleNameSupported;
                case "PersonalTitlePrefix":
                    return IsPersonalTitlePrefixSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OtherNameTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffPersonalIdentificationDocument model.
    /// </summary>
    public interface IStaffPersonalIdentificationDocument : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string IdentificationDocumentUseDescriptor { get; set; }
        
        string PersonalInformationVerificationDescriptor { get; set; }

        // Non-PK properties
        DateTime? DocumentExpirationDate { get; set; }
        string DocumentTitle { get; set; }
        string IssuerCountryDescriptor { get; set; }
        string IssuerDocumentIdentificationCode { get; set; }
        string IssuerName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffPersonalIdentificationDocumentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffPersonalIdentificationDocumentMappingContract(
            bool isDocumentExpirationDateSupported,
            bool isDocumentTitleSupported,
            bool isIssuerCountryDescriptorSupported,
            bool isIssuerDocumentIdentificationCodeSupported,
            bool isIssuerNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDocumentExpirationDateSupported = isDocumentExpirationDateSupported;
            IsDocumentTitleSupported = isDocumentTitleSupported;
            IsIssuerCountryDescriptorSupported = isIssuerCountryDescriptorSupported;
            IsIssuerDocumentIdentificationCodeSupported = isIssuerDocumentIdentificationCodeSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDocumentExpirationDateSupported { get; }
        public bool IsDocumentTitleSupported { get; }
        public bool IsIssuerCountryDescriptorSupported { get; }
        public bool IsIssuerDocumentIdentificationCodeSupported { get; }
        public bool IsIssuerNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DocumentExpirationDate":
                    return IsDocumentExpirationDateSupported;
                case "DocumentTitle":
                    return IsDocumentTitleSupported;
                case "IssuerCountryDescriptor":
                    return IsIssuerCountryDescriptorSupported;
                case "IssuerDocumentIdentificationCode":
                    return IsIssuerDocumentIdentificationCodeSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationDocumentUseDescriptor":
                    return true;
                case "PersonalInformationVerificationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffProgramAssociation model.
    /// </summary>
    public interface IStaffProgramAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        int ProgramEducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }
        bool? StudentRecordAccess { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffProgramAssociationMappingContract(
            bool isEndDateSupported,
            bool isProgramReferenceSupported,
            bool isStaffReferenceSupported,
            bool isStudentRecordAccessSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStudentRecordAccessSupported = isStudentRecordAccessSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStudentRecordAccessSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StudentRecordAccess":
                    return IsStudentRecordAccessSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffRace model.
    /// </summary>
    public interface IStaffRace : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string RaceDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffRaceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffRaceMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RaceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffRecognition model.
    /// </summary>
    public interface IStaffRecognition : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string RecognitionTypeDescriptor { get; set; }

        // Non-PK properties
        string AchievementCategoryDescriptor { get; set; }
        string AchievementCategorySystem { get; set; }
        string AchievementTitle { get; set; }
        string Criteria { get; set; }
        string CriteriaURL { get; set; }
        string EvidenceStatement { get; set; }
        string ImageURL { get; set; }
        string IssuerName { get; set; }
        string IssuerOriginURL { get; set; }
        DateTime? RecognitionAwardDate { get; set; }
        DateTime? RecognitionAwardExpiresDate { get; set; }
        string RecognitionDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffRecognitionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffRecognitionMappingContract(
            bool isAchievementCategoryDescriptorSupported,
            bool isAchievementCategorySystemSupported,
            bool isAchievementTitleSupported,
            bool isCriteriaSupported,
            bool isCriteriaURLSupported,
            bool isEvidenceStatementSupported,
            bool isImageURLSupported,
            bool isIssuerNameSupported,
            bool isIssuerOriginURLSupported,
            bool isRecognitionAwardDateSupported,
            bool isRecognitionAwardExpiresDateSupported,
            bool isRecognitionDescriptionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAchievementCategoryDescriptorSupported = isAchievementCategoryDescriptorSupported;
            IsAchievementCategorySystemSupported = isAchievementCategorySystemSupported;
            IsAchievementTitleSupported = isAchievementTitleSupported;
            IsCriteriaSupported = isCriteriaSupported;
            IsCriteriaURLSupported = isCriteriaURLSupported;
            IsEvidenceStatementSupported = isEvidenceStatementSupported;
            IsImageURLSupported = isImageURLSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            IsIssuerOriginURLSupported = isIssuerOriginURLSupported;
            IsRecognitionAwardDateSupported = isRecognitionAwardDateSupported;
            IsRecognitionAwardExpiresDateSupported = isRecognitionAwardExpiresDateSupported;
            IsRecognitionDescriptionSupported = isRecognitionDescriptionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAchievementCategoryDescriptorSupported { get; }
        public bool IsAchievementCategorySystemSupported { get; }
        public bool IsAchievementTitleSupported { get; }
        public bool IsCriteriaSupported { get; }
        public bool IsCriteriaURLSupported { get; }
        public bool IsEvidenceStatementSupported { get; }
        public bool IsImageURLSupported { get; }
        public bool IsIssuerNameSupported { get; }
        public bool IsIssuerOriginURLSupported { get; }
        public bool IsRecognitionAwardDateSupported { get; }
        public bool IsRecognitionAwardExpiresDateSupported { get; }
        public bool IsRecognitionDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AchievementCategoryDescriptor":
                    return IsAchievementCategoryDescriptorSupported;
                case "AchievementCategorySystem":
                    return IsAchievementCategorySystemSupported;
                case "AchievementTitle":
                    return IsAchievementTitleSupported;
                case "Criteria":
                    return IsCriteriaSupported;
                case "CriteriaURL":
                    return IsCriteriaURLSupported;
                case "EvidenceStatement":
                    return IsEvidenceStatementSupported;
                case "ImageURL":
                    return IsImageURLSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                case "IssuerOriginURL":
                    return IsIssuerOriginURLSupported;
                case "RecognitionAwardDate":
                    return IsRecognitionAwardDateSupported;
                case "RecognitionAwardExpiresDate":
                    return IsRecognitionAwardExpiresDateSupported;
                case "RecognitionDescription":
                    return IsRecognitionDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RecognitionTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffSchoolAssociation model.
    /// </summary>
    public interface IStaffSchoolAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string ProgramAssignmentDescriptor { get; set; }
        
        int SchoolId { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        string CalendarCode { get; set; }
        short? SchoolYear { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; }
        ICollection<IStaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; }

        // Resource reference data
        Guid? CalendarResourceId { get; set; }
        string CalendarDiscriminator { get; set; }
        Guid? SchoolResourceId { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffSchoolAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffSchoolAssociationMappingContract(
            bool isCalendarCodeSupported,
            bool isCalendarReferenceSupported,
            bool isSchoolReferenceSupported,
            bool isSchoolYearSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isStaffReferenceSupported,
            bool isStaffSchoolAssociationAcademicSubjectsSupported,
            bool isStaffSchoolAssociationGradeLevelsSupported,
            bool isStaffSchoolAssociationAcademicSubjectsItemCreatable,
            Func<IStaffSchoolAssociationAcademicSubject, bool> isStaffSchoolAssociationAcademicSubjectIncluded,
            bool isStaffSchoolAssociationGradeLevelsItemCreatable,
            Func<IStaffSchoolAssociationGradeLevel, bool> isStaffSchoolAssociationGradeLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCalendarCodeSupported = isCalendarCodeSupported;
            IsCalendarReferenceSupported = isCalendarReferenceSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSchoolYearSupported = isSchoolYearSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStaffSchoolAssociationAcademicSubjectsSupported = isStaffSchoolAssociationAcademicSubjectsSupported;
            IsStaffSchoolAssociationGradeLevelsSupported = isStaffSchoolAssociationGradeLevelsSupported;
            IsStaffSchoolAssociationAcademicSubjectsItemCreatable = isStaffSchoolAssociationAcademicSubjectsItemCreatable;
            IsStaffSchoolAssociationAcademicSubjectIncluded = isStaffSchoolAssociationAcademicSubjectIncluded;
            IsStaffSchoolAssociationGradeLevelsItemCreatable = isStaffSchoolAssociationGradeLevelsItemCreatable;
            IsStaffSchoolAssociationGradeLevelIncluded = isStaffSchoolAssociationGradeLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCalendarCodeSupported { get; }
        public bool IsCalendarReferenceSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSchoolYearSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStaffSchoolAssociationAcademicSubjectsSupported { get; }
        public bool IsStaffSchoolAssociationGradeLevelsSupported { get; }
        public bool IsStaffSchoolAssociationAcademicSubjectsItemCreatable { get; }
        public Func<IStaffSchoolAssociationAcademicSubject, bool> IsStaffSchoolAssociationAcademicSubjectIncluded { get; }
        public bool IsStaffSchoolAssociationGradeLevelsItemCreatable { get; }
        public Func<IStaffSchoolAssociationGradeLevel, bool> IsStaffSchoolAssociationGradeLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CalendarCode":
                    return IsCalendarCodeSupported;
                case "CalendarReference":
                    return IsCalendarReferenceSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SchoolYear":
                    return IsSchoolYearSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StaffSchoolAssociationAcademicSubjects":
                    return IsStaffSchoolAssociationAcademicSubjectsSupported;
                case "StaffSchoolAssociationGradeLevels":
                    return IsStaffSchoolAssociationGradeLevelsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramAssignmentDescriptor":
                    return true;
                case "SchoolId":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StaffSchoolAssociationAcademicSubjects":
                    return IsStaffSchoolAssociationAcademicSubjectsItemCreatable;
                case "StaffSchoolAssociationGradeLevels":
                    return IsStaffSchoolAssociationGradeLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffSchoolAssociationAcademicSubject model.
    /// </summary>
    public interface IStaffSchoolAssociationAcademicSubject : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffSchoolAssociation StaffSchoolAssociation { get; set; }
        
        string AcademicSubjectDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffSchoolAssociationAcademicSubjectMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffSchoolAssociationAcademicSubjectMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicSubjectDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffSchoolAssociationGradeLevel model.
    /// </summary>
    public interface IStaffSchoolAssociationGradeLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaffSchoolAssociation StaffSchoolAssociation { get; set; }
        
        string GradeLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffSchoolAssociationGradeLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffSchoolAssociationGradeLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradeLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffSectionAssociation model.
    /// </summary>
    public interface IStaffSectionAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        string ClassroomPositionDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        bool? HighlyQualifiedTeacher { get; set; }
        decimal? PercentageContribution { get; set; }
        bool? TeacherStudentDataLinkExclusion { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffSectionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffSectionAssociationMappingContract(
            bool isBeginDateSupported,
            bool isClassroomPositionDescriptorSupported,
            bool isEndDateSupported,
            bool isHighlyQualifiedTeacherSupported,
            bool isPercentageContributionSupported,
            bool isSectionReferenceSupported,
            bool isStaffReferenceSupported,
            bool isTeacherStudentDataLinkExclusionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsClassroomPositionDescriptorSupported = isClassroomPositionDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsHighlyQualifiedTeacherSupported = isHighlyQualifiedTeacherSupported;
            IsPercentageContributionSupported = isPercentageContributionSupported;
            IsSectionReferenceSupported = isSectionReferenceSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsTeacherStudentDataLinkExclusionSupported = isTeacherStudentDataLinkExclusionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsClassroomPositionDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsHighlyQualifiedTeacherSupported { get; }
        public bool IsPercentageContributionSupported { get; }
        public bool IsSectionReferenceSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsTeacherStudentDataLinkExclusionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "ClassroomPositionDescriptor":
                    return IsClassroomPositionDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "HighlyQualifiedTeacher":
                    return IsHighlyQualifiedTeacherSupported;
                case "PercentageContribution":
                    return IsPercentageContributionSupported;
                case "SectionReference":
                    return IsSectionReferenceSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "TeacherStudentDataLinkExclusion":
                    return IsTeacherStudentDataLinkExclusionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffTelephone model.
    /// </summary>
    public interface IStaffTelephone : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string TelephoneNumber { get; set; }
        
        string TelephoneNumberTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        int? OrderOfPriority { get; set; }
        bool? TextMessageCapabilityIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffTelephoneMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffTelephoneMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isOrderOfPrioritySupported,
            bool isTextMessageCapabilityIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsOrderOfPrioritySupported = isOrderOfPrioritySupported;
            IsTextMessageCapabilityIndicatorSupported = isTextMessageCapabilityIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsOrderOfPrioritySupported { get; }
        public bool IsTextMessageCapabilityIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "OrderOfPriority":
                    return IsOrderOfPrioritySupported;
                case "TextMessageCapabilityIndicator":
                    return IsTextMessageCapabilityIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TelephoneNumber":
                    return true;
                case "TelephoneNumberTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffTribalAffiliation model.
    /// </summary>
    public interface IStaffTribalAffiliation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string TribalAffiliationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffTribalAffiliationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffTribalAffiliationMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TribalAffiliationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StaffVisa model.
    /// </summary>
    public interface IStaffVisa : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStaff Staff { get; set; }
        
        string VisaDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StaffVisaMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StaffVisaMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "VisaDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StateAbbreviationDescriptor model.
    /// </summary>
    public interface IStateAbbreviationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StateAbbreviationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StateAbbreviationDescriptorMappingContract : IMappingContract
    {
        public StateAbbreviationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StateAbbreviationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StateEducationAgency model.
    /// </summary>
    public interface IStateEducationAgency : EdFi.IEducationOrganization, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int StateEducationAgencyId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IStateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; }
        ICollection<IStateEducationAgencyFederalFunds> StateEducationAgencyFederalFunds { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StateEducationAgencyMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StateEducationAgencyMappingContract(
            bool isEducationOrganizationAddressesSupported,
            bool isEducationOrganizationCategoriesSupported,
            bool isEducationOrganizationIdentificationCodesSupported,
            bool isEducationOrganizationIndicatorsSupported,
            bool isEducationOrganizationInstitutionTelephonesSupported,
            bool isEducationOrganizationInternationalAddressesSupported,
            bool isNameOfInstitutionSupported,
            bool isOperationalStatusDescriptorSupported,
            bool isShortNameOfInstitutionSupported,
            bool isStateEducationAgencyAccountabilitiesSupported,
            bool isStateEducationAgencyFederalFundsSupported,
            bool isWebSiteSupported,
            bool isEducationOrganizationAddressesItemCreatable,
            Func<IEducationOrganizationAddress, bool> isEducationOrganizationAddressIncluded,
            bool isEducationOrganizationCategoriesItemCreatable,
            Func<IEducationOrganizationCategory, bool> isEducationOrganizationCategoryIncluded,
            bool isEducationOrganizationIdentificationCodesItemCreatable,
            Func<IEducationOrganizationIdentificationCode, bool> isEducationOrganizationIdentificationCodeIncluded,
            bool isEducationOrganizationIndicatorsItemCreatable,
            Func<IEducationOrganizationIndicator, bool> isEducationOrganizationIndicatorIncluded,
            bool isEducationOrganizationInstitutionTelephonesItemCreatable,
            Func<IEducationOrganizationInstitutionTelephone, bool> isEducationOrganizationInstitutionTelephoneIncluded,
            bool isEducationOrganizationInternationalAddressesItemCreatable,
            Func<IEducationOrganizationInternationalAddress, bool> isEducationOrganizationInternationalAddressIncluded,
            bool isStateEducationAgencyAccountabilitiesItemCreatable,
            Func<IStateEducationAgencyAccountability, bool> isStateEducationAgencyAccountabilityIncluded,
            bool isStateEducationAgencyFederalFundsItemCreatable,
            Func<IStateEducationAgencyFederalFunds, bool> isStateEducationAgencyFederalFundsIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationAddressesSupported = isEducationOrganizationAddressesSupported;
            IsEducationOrganizationCategoriesSupported = isEducationOrganizationCategoriesSupported;
            IsEducationOrganizationIdentificationCodesSupported = isEducationOrganizationIdentificationCodesSupported;
            IsEducationOrganizationIndicatorsSupported = isEducationOrganizationIndicatorsSupported;
            IsEducationOrganizationInstitutionTelephonesSupported = isEducationOrganizationInstitutionTelephonesSupported;
            IsEducationOrganizationInternationalAddressesSupported = isEducationOrganizationInternationalAddressesSupported;
            IsNameOfInstitutionSupported = isNameOfInstitutionSupported;
            IsOperationalStatusDescriptorSupported = isOperationalStatusDescriptorSupported;
            IsShortNameOfInstitutionSupported = isShortNameOfInstitutionSupported;
            IsStateEducationAgencyAccountabilitiesSupported = isStateEducationAgencyAccountabilitiesSupported;
            IsStateEducationAgencyFederalFundsSupported = isStateEducationAgencyFederalFundsSupported;
            IsWebSiteSupported = isWebSiteSupported;
            IsEducationOrganizationAddressesItemCreatable = isEducationOrganizationAddressesItemCreatable;
            IsEducationOrganizationAddressIncluded = isEducationOrganizationAddressIncluded;
            IsEducationOrganizationCategoriesItemCreatable = isEducationOrganizationCategoriesItemCreatable;
            IsEducationOrganizationCategoryIncluded = isEducationOrganizationCategoryIncluded;
            IsEducationOrganizationIdentificationCodesItemCreatable = isEducationOrganizationIdentificationCodesItemCreatable;
            IsEducationOrganizationIdentificationCodeIncluded = isEducationOrganizationIdentificationCodeIncluded;
            IsEducationOrganizationIndicatorsItemCreatable = isEducationOrganizationIndicatorsItemCreatable;
            IsEducationOrganizationIndicatorIncluded = isEducationOrganizationIndicatorIncluded;
            IsEducationOrganizationInstitutionTelephonesItemCreatable = isEducationOrganizationInstitutionTelephonesItemCreatable;
            IsEducationOrganizationInstitutionTelephoneIncluded = isEducationOrganizationInstitutionTelephoneIncluded;
            IsEducationOrganizationInternationalAddressesItemCreatable = isEducationOrganizationInternationalAddressesItemCreatable;
            IsEducationOrganizationInternationalAddressIncluded = isEducationOrganizationInternationalAddressIncluded;
            IsStateEducationAgencyAccountabilitiesItemCreatable = isStateEducationAgencyAccountabilitiesItemCreatable;
            IsStateEducationAgencyAccountabilityIncluded = isStateEducationAgencyAccountabilityIncluded;
            IsStateEducationAgencyFederalFundsItemCreatable = isStateEducationAgencyFederalFundsItemCreatable;
            IsStateEducationAgencyFederalFundsIncluded = isStateEducationAgencyFederalFundsIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationAddressesSupported { get; }
        public bool IsEducationOrganizationCategoriesSupported { get; }
        public bool IsEducationOrganizationIdentificationCodesSupported { get; }
        public bool IsEducationOrganizationIndicatorsSupported { get; }
        public bool IsEducationOrganizationInstitutionTelephonesSupported { get; }
        public bool IsEducationOrganizationInternationalAddressesSupported { get; }
        public bool IsNameOfInstitutionSupported { get; }
        public bool IsOperationalStatusDescriptorSupported { get; }
        public bool IsShortNameOfInstitutionSupported { get; }
        public bool IsStateEducationAgencyAccountabilitiesSupported { get; }
        public bool IsStateEducationAgencyFederalFundsSupported { get; }
        public bool IsWebSiteSupported { get; }
        public bool IsEducationOrganizationAddressesItemCreatable { get; }
        public Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; }
        public bool IsEducationOrganizationCategoriesItemCreatable { get; }
        public Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; }
        public bool IsEducationOrganizationIdentificationCodesItemCreatable { get; }
        public Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; }
        public bool IsEducationOrganizationIndicatorsItemCreatable { get; }
        public Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; }
        public bool IsEducationOrganizationInstitutionTelephonesItemCreatable { get; }
        public Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; }
        public bool IsEducationOrganizationInternationalAddressesItemCreatable { get; }
        public Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; }
        public bool IsStateEducationAgencyAccountabilitiesItemCreatable { get; }
        public Func<IStateEducationAgencyAccountability, bool> IsStateEducationAgencyAccountabilityIncluded { get; }
        public bool IsStateEducationAgencyFederalFundsItemCreatable { get; }
        public Func<IStateEducationAgencyFederalFunds, bool> IsStateEducationAgencyFederalFundsIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesSupported;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesSupported;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesSupported;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsSupported;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesSupported;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesSupported;
                case "NameOfInstitution":
                    return IsNameOfInstitutionSupported;
                case "OperationalStatusDescriptor":
                    return IsOperationalStatusDescriptorSupported;
                case "ShortNameOfInstitution":
                    return IsShortNameOfInstitutionSupported;
                case "StateEducationAgencyAccountabilities":
                    return IsStateEducationAgencyAccountabilitiesSupported;
                case "StateEducationAgencyFederalFunds":
                    return IsStateEducationAgencyFederalFundsSupported;
                case "WebSite":
                    return IsWebSiteSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StateEducationAgencyId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationAddresses":
                    return IsEducationOrganizationAddressesItemCreatable;
                case "EducationOrganizationCategories":
                    return IsEducationOrganizationCategoriesItemCreatable;
                case "EducationOrganizationIdentificationCodes":
                    return IsEducationOrganizationIdentificationCodesItemCreatable;
                case "EducationOrganizationIndicators":
                    return IsEducationOrganizationIndicatorsItemCreatable;
                case "EducationOrganizationInstitutionTelephones":
                    return IsEducationOrganizationInstitutionTelephonesItemCreatable;
                case "EducationOrganizationInternationalAddresses":
                    return IsEducationOrganizationInternationalAddressesItemCreatable;
                case "StateEducationAgencyAccountabilities":
                    return IsStateEducationAgencyAccountabilitiesItemCreatable;
                case "StateEducationAgencyFederalFunds":
                    return IsStateEducationAgencyFederalFundsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StateEducationAgencyAccountability model.
    /// </summary>
    public interface IStateEducationAgencyAccountability : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStateEducationAgency StateEducationAgency { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        bool? CTEGraduationRateInclusion { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StateEducationAgencyAccountabilityMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StateEducationAgencyAccountabilityMappingContract(
            bool isCTEGraduationRateInclusionSupported,
            bool isSchoolYearTypeReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCTEGraduationRateInclusionSupported = isCTEGraduationRateInclusionSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCTEGraduationRateInclusionSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CTEGraduationRateInclusion":
                    return IsCTEGraduationRateInclusionSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StateEducationAgencyFederalFunds model.
    /// </summary>
    public interface IStateEducationAgencyFederalFunds : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStateEducationAgency StateEducationAgency { get; set; }
        
        int FiscalYear { get; set; }

        // Non-PK properties
        decimal? FederalProgramsFundingAllocation { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StateEducationAgencyFederalFundsMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StateEducationAgencyFederalFundsMappingContract(
            bool isFederalProgramsFundingAllocationSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsFederalProgramsFundingAllocationSupported = isFederalProgramsFundingAllocationSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsFederalProgramsFundingAllocationSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "FederalProgramsFundingAllocation":
                    return IsFederalProgramsFundingAllocationSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "FiscalYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Student model.
    /// </summary>
    public interface IStudent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IIdentifiablePerson, IGetByExample
    {
        // Primary Key properties
        [UniqueId]
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string BirthCity { get; set; }
        string BirthCountryDescriptor { get; set; }
        DateTime BirthDate { get; set; }
        string BirthInternationalProvince { get; set; }
        string BirthSexDescriptor { get; set; }
        string BirthStateAbbreviationDescriptor { get; set; }
        string CitizenshipStatusDescriptor { get; set; }
        DateTime? DateEnteredUS { get; set; }
        string FirstName { get; set; }
        string GenerationCodeSuffix { get; set; }
        string LastSurname { get; set; }
        string MaidenName { get; set; }
        string MiddleName { get; set; }
        bool? MultipleBirthStatus { get; set; }
        string PersonalTitlePrefix { get; set; }
        string PersonId { get; set; }
        string SourceSystemDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentIdentificationDocument> StudentIdentificationDocuments { get; set; }
        ICollection<IStudentOtherName> StudentOtherNames { get; set; }
        ICollection<IStudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; }
        ICollection<IStudentVisa> StudentVisas { get; set; }

        // Resource reference data
        Guid? PersonResourceId { get; set; }
        string PersonDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentMappingContract(
            bool isBirthCitySupported,
            bool isBirthCountryDescriptorSupported,
            bool isBirthDateSupported,
            bool isBirthInternationalProvinceSupported,
            bool isBirthSexDescriptorSupported,
            bool isBirthStateAbbreviationDescriptorSupported,
            bool isCitizenshipStatusDescriptorSupported,
            bool isDateEnteredUSSupported,
            bool isFirstNameSupported,
            bool isGenerationCodeSuffixSupported,
            bool isLastSurnameSupported,
            bool isMaidenNameSupported,
            bool isMiddleNameSupported,
            bool isMultipleBirthStatusSupported,
            bool isPersonalTitlePrefixSupported,
            bool isPersonIdSupported,
            bool isPersonReferenceSupported,
            bool isSourceSystemDescriptorSupported,
            bool isStudentIdentificationDocumentsSupported,
            bool isStudentOtherNamesSupported,
            bool isStudentPersonalIdentificationDocumentsSupported,
            bool isStudentUniqueIdSupported,
            bool isStudentVisasSupported,
            bool isStudentIdentificationDocumentsItemCreatable,
            Func<IStudentIdentificationDocument, bool> isStudentIdentificationDocumentIncluded,
            bool isStudentOtherNamesItemCreatable,
            Func<IStudentOtherName, bool> isStudentOtherNameIncluded,
            bool isStudentPersonalIdentificationDocumentsItemCreatable,
            Func<IStudentPersonalIdentificationDocument, bool> isStudentPersonalIdentificationDocumentIncluded,
            bool isStudentVisasItemCreatable,
            Func<IStudentVisa, bool> isStudentVisaIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBirthCitySupported = isBirthCitySupported;
            IsBirthCountryDescriptorSupported = isBirthCountryDescriptorSupported;
            IsBirthDateSupported = isBirthDateSupported;
            IsBirthInternationalProvinceSupported = isBirthInternationalProvinceSupported;
            IsBirthSexDescriptorSupported = isBirthSexDescriptorSupported;
            IsBirthStateAbbreviationDescriptorSupported = isBirthStateAbbreviationDescriptorSupported;
            IsCitizenshipStatusDescriptorSupported = isCitizenshipStatusDescriptorSupported;
            IsDateEnteredUSSupported = isDateEnteredUSSupported;
            IsFirstNameSupported = isFirstNameSupported;
            IsGenerationCodeSuffixSupported = isGenerationCodeSuffixSupported;
            IsLastSurnameSupported = isLastSurnameSupported;
            IsMaidenNameSupported = isMaidenNameSupported;
            IsMiddleNameSupported = isMiddleNameSupported;
            IsMultipleBirthStatusSupported = isMultipleBirthStatusSupported;
            IsPersonalTitlePrefixSupported = isPersonalTitlePrefixSupported;
            IsPersonIdSupported = isPersonIdSupported;
            IsPersonReferenceSupported = isPersonReferenceSupported;
            IsSourceSystemDescriptorSupported = isSourceSystemDescriptorSupported;
            IsStudentIdentificationDocumentsSupported = isStudentIdentificationDocumentsSupported;
            IsStudentOtherNamesSupported = isStudentOtherNamesSupported;
            IsStudentPersonalIdentificationDocumentsSupported = isStudentPersonalIdentificationDocumentsSupported;
            IsStudentUniqueIdSupported = isStudentUniqueIdSupported;
            IsStudentVisasSupported = isStudentVisasSupported;
            IsStudentIdentificationDocumentsItemCreatable = isStudentIdentificationDocumentsItemCreatable;
            IsStudentIdentificationDocumentIncluded = isStudentIdentificationDocumentIncluded;
            IsStudentOtherNamesItemCreatable = isStudentOtherNamesItemCreatable;
            IsStudentOtherNameIncluded = isStudentOtherNameIncluded;
            IsStudentPersonalIdentificationDocumentsItemCreatable = isStudentPersonalIdentificationDocumentsItemCreatable;
            IsStudentPersonalIdentificationDocumentIncluded = isStudentPersonalIdentificationDocumentIncluded;
            IsStudentVisasItemCreatable = isStudentVisasItemCreatable;
            IsStudentVisaIncluded = isStudentVisaIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBirthCitySupported { get; }
        public bool IsBirthCountryDescriptorSupported { get; }
        public bool IsBirthDateSupported { get; }
        public bool IsBirthInternationalProvinceSupported { get; }
        public bool IsBirthSexDescriptorSupported { get; }
        public bool IsBirthStateAbbreviationDescriptorSupported { get; }
        public bool IsCitizenshipStatusDescriptorSupported { get; }
        public bool IsDateEnteredUSSupported { get; }
        public bool IsFirstNameSupported { get; }
        public bool IsGenerationCodeSuffixSupported { get; }
        public bool IsLastSurnameSupported { get; }
        public bool IsMaidenNameSupported { get; }
        public bool IsMiddleNameSupported { get; }
        public bool IsMultipleBirthStatusSupported { get; }
        public bool IsPersonalTitlePrefixSupported { get; }
        public bool IsPersonIdSupported { get; }
        public bool IsPersonReferenceSupported { get; }
        public bool IsSourceSystemDescriptorSupported { get; }
        public bool IsStudentIdentificationDocumentsSupported { get; }
        public bool IsStudentOtherNamesSupported { get; }
        public bool IsStudentPersonalIdentificationDocumentsSupported { get; }
        public bool IsStudentUniqueIdSupported { get; }
        public bool IsStudentVisasSupported { get; }
        public bool IsStudentIdentificationDocumentsItemCreatable { get; }
        public Func<IStudentIdentificationDocument, bool> IsStudentIdentificationDocumentIncluded { get; }
        public bool IsStudentOtherNamesItemCreatable { get; }
        public Func<IStudentOtherName, bool> IsStudentOtherNameIncluded { get; }
        public bool IsStudentPersonalIdentificationDocumentsItemCreatable { get; }
        public Func<IStudentPersonalIdentificationDocument, bool> IsStudentPersonalIdentificationDocumentIncluded { get; }
        public bool IsStudentVisasItemCreatable { get; }
        public Func<IStudentVisa, bool> IsStudentVisaIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BirthCity":
                    return IsBirthCitySupported;
                case "BirthCountryDescriptor":
                    return IsBirthCountryDescriptorSupported;
                case "BirthDate":
                    return IsBirthDateSupported;
                case "BirthInternationalProvince":
                    return IsBirthInternationalProvinceSupported;
                case "BirthSexDescriptor":
                    return IsBirthSexDescriptorSupported;
                case "BirthStateAbbreviationDescriptor":
                    return IsBirthStateAbbreviationDescriptorSupported;
                case "CitizenshipStatusDescriptor":
                    return IsCitizenshipStatusDescriptorSupported;
                case "DateEnteredUS":
                    return IsDateEnteredUSSupported;
                case "FirstName":
                    return IsFirstNameSupported;
                case "GenerationCodeSuffix":
                    return IsGenerationCodeSuffixSupported;
                case "LastSurname":
                    return IsLastSurnameSupported;
                case "MaidenName":
                    return IsMaidenNameSupported;
                case "MiddleName":
                    return IsMiddleNameSupported;
                case "MultipleBirthStatus":
                    return IsMultipleBirthStatusSupported;
                case "PersonalTitlePrefix":
                    return IsPersonalTitlePrefixSupported;
                case "PersonId":
                    return IsPersonIdSupported;
                case "PersonReference":
                    return IsPersonReferenceSupported;
                case "SourceSystemDescriptor":
                    return IsSourceSystemDescriptorSupported;
                case "StudentIdentificationDocuments":
                    return IsStudentIdentificationDocumentsSupported;
                case "StudentOtherNames":
                    return IsStudentOtherNamesSupported;
                case "StudentPersonalIdentificationDocuments":
                    return IsStudentPersonalIdentificationDocumentsSupported;
                case "StudentUniqueId":
                    return IsStudentUniqueIdSupported;
                case "StudentVisas":
                    return IsStudentVisasSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentIdentificationDocuments":
                    return IsStudentIdentificationDocumentsItemCreatable;
                case "StudentOtherNames":
                    return IsStudentOtherNamesItemCreatable;
                case "StudentPersonalIdentificationDocuments":
                    return IsStudentPersonalIdentificationDocumentsItemCreatable;
                case "StudentVisas":
                    return IsStudentVisasItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecord model.
    /// </summary>
    public interface IStudentAcademicRecord : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        short SchoolYear { get; set; }
        
        string StudentUniqueId { get; set; }
        
        string TermDescriptor { get; set; }

        // Non-PK properties
        decimal? CumulativeAttemptedCreditConversion { get; set; }
        decimal? CumulativeAttemptedCredits { get; set; }
        string CumulativeAttemptedCreditTypeDescriptor { get; set; }
        decimal? CumulativeEarnedCreditConversion { get; set; }
        decimal? CumulativeEarnedCredits { get; set; }
        string CumulativeEarnedCreditTypeDescriptor { get; set; }
        decimal? CumulativeGradePointAverage { get; set; }
        decimal? CumulativeGradePointsEarned { get; set; }
        string GradeValueQualifier { get; set; }
        DateTime? ProjectedGraduationDate { get; set; }
        decimal? SessionAttemptedCreditConversion { get; set; }
        decimal? SessionAttemptedCredits { get; set; }
        string SessionAttemptedCreditTypeDescriptor { get; set; }
        decimal? SessionEarnedCreditConversion { get; set; }
        decimal? SessionEarnedCredits { get; set; }
        string SessionEarnedCreditTypeDescriptor { get; set; }
        decimal? SessionGradePointAverage { get; set; }
        decimal? SessionGradePointsEarned { get; set; }

        // One-to-one relationships

        IStudentAcademicRecordClassRanking StudentAcademicRecordClassRanking { get; set; }

        // Lists
        ICollection<IStudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; }
        ICollection<IStudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; }
        ICollection<IStudentAcademicRecordGradePointAverage> StudentAcademicRecordGradePointAverages { get; set; }
        ICollection<IStudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; }
        ICollection<IStudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordMappingContract(
            bool isCumulativeAttemptedCreditConversionSupported,
            bool isCumulativeAttemptedCreditsSupported,
            bool isCumulativeAttemptedCreditTypeDescriptorSupported,
            bool isCumulativeEarnedCreditConversionSupported,
            bool isCumulativeEarnedCreditsSupported,
            bool isCumulativeEarnedCreditTypeDescriptorSupported,
            bool isCumulativeGradePointAverageSupported,
            bool isCumulativeGradePointsEarnedSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isGradeValueQualifierSupported,
            bool isProjectedGraduationDateSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isSessionAttemptedCreditConversionSupported,
            bool isSessionAttemptedCreditsSupported,
            bool isSessionAttemptedCreditTypeDescriptorSupported,
            bool isSessionEarnedCreditConversionSupported,
            bool isSessionEarnedCreditsSupported,
            bool isSessionEarnedCreditTypeDescriptorSupported,
            bool isSessionGradePointAverageSupported,
            bool isSessionGradePointsEarnedSupported,
            bool isStudentAcademicRecordAcademicHonorsSupported,
            bool isStudentAcademicRecordClassRankingSupported,
            bool isStudentAcademicRecordDiplomasSupported,
            bool isStudentAcademicRecordGradePointAveragesSupported,
            bool isStudentAcademicRecordRecognitionsSupported,
            bool isStudentAcademicRecordReportCardsSupported,
            bool isStudentReferenceSupported,
            bool isStudentAcademicRecordClassRankingCreatable,
            bool isStudentAcademicRecordAcademicHonorsItemCreatable,
            Func<IStudentAcademicRecordAcademicHonor, bool> isStudentAcademicRecordAcademicHonorIncluded,
            bool isStudentAcademicRecordDiplomasItemCreatable,
            Func<IStudentAcademicRecordDiploma, bool> isStudentAcademicRecordDiplomaIncluded,
            bool isStudentAcademicRecordGradePointAveragesItemCreatable,
            Func<IStudentAcademicRecordGradePointAverage, bool> isStudentAcademicRecordGradePointAverageIncluded,
            bool isStudentAcademicRecordRecognitionsItemCreatable,
            Func<IStudentAcademicRecordRecognition, bool> isStudentAcademicRecordRecognitionIncluded,
            bool isStudentAcademicRecordReportCardsItemCreatable,
            Func<IStudentAcademicRecordReportCard, bool> isStudentAcademicRecordReportCardIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCumulativeAttemptedCreditConversionSupported = isCumulativeAttemptedCreditConversionSupported;
            IsCumulativeAttemptedCreditsSupported = isCumulativeAttemptedCreditsSupported;
            IsCumulativeAttemptedCreditTypeDescriptorSupported = isCumulativeAttemptedCreditTypeDescriptorSupported;
            IsCumulativeEarnedCreditConversionSupported = isCumulativeEarnedCreditConversionSupported;
            IsCumulativeEarnedCreditsSupported = isCumulativeEarnedCreditsSupported;
            IsCumulativeEarnedCreditTypeDescriptorSupported = isCumulativeEarnedCreditTypeDescriptorSupported;
            IsCumulativeGradePointAverageSupported = isCumulativeGradePointAverageSupported;
            IsCumulativeGradePointsEarnedSupported = isCumulativeGradePointsEarnedSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsGradeValueQualifierSupported = isGradeValueQualifierSupported;
            IsProjectedGraduationDateSupported = isProjectedGraduationDateSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsSessionAttemptedCreditConversionSupported = isSessionAttemptedCreditConversionSupported;
            IsSessionAttemptedCreditsSupported = isSessionAttemptedCreditsSupported;
            IsSessionAttemptedCreditTypeDescriptorSupported = isSessionAttemptedCreditTypeDescriptorSupported;
            IsSessionEarnedCreditConversionSupported = isSessionEarnedCreditConversionSupported;
            IsSessionEarnedCreditsSupported = isSessionEarnedCreditsSupported;
            IsSessionEarnedCreditTypeDescriptorSupported = isSessionEarnedCreditTypeDescriptorSupported;
            IsSessionGradePointAverageSupported = isSessionGradePointAverageSupported;
            IsSessionGradePointsEarnedSupported = isSessionGradePointsEarnedSupported;
            IsStudentAcademicRecordAcademicHonorsSupported = isStudentAcademicRecordAcademicHonorsSupported;
            IsStudentAcademicRecordClassRankingSupported = isStudentAcademicRecordClassRankingSupported;
            IsStudentAcademicRecordDiplomasSupported = isStudentAcademicRecordDiplomasSupported;
            IsStudentAcademicRecordGradePointAveragesSupported = isStudentAcademicRecordGradePointAveragesSupported;
            IsStudentAcademicRecordRecognitionsSupported = isStudentAcademicRecordRecognitionsSupported;
            IsStudentAcademicRecordReportCardsSupported = isStudentAcademicRecordReportCardsSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentAcademicRecordClassRankingCreatable = isStudentAcademicRecordClassRankingCreatable;
            IsStudentAcademicRecordAcademicHonorsItemCreatable = isStudentAcademicRecordAcademicHonorsItemCreatable;
            IsStudentAcademicRecordAcademicHonorIncluded = isStudentAcademicRecordAcademicHonorIncluded;
            IsStudentAcademicRecordDiplomasItemCreatable = isStudentAcademicRecordDiplomasItemCreatable;
            IsStudentAcademicRecordDiplomaIncluded = isStudentAcademicRecordDiplomaIncluded;
            IsStudentAcademicRecordGradePointAveragesItemCreatable = isStudentAcademicRecordGradePointAveragesItemCreatable;
            IsStudentAcademicRecordGradePointAverageIncluded = isStudentAcademicRecordGradePointAverageIncluded;
            IsStudentAcademicRecordRecognitionsItemCreatable = isStudentAcademicRecordRecognitionsItemCreatable;
            IsStudentAcademicRecordRecognitionIncluded = isStudentAcademicRecordRecognitionIncluded;
            IsStudentAcademicRecordReportCardsItemCreatable = isStudentAcademicRecordReportCardsItemCreatable;
            IsStudentAcademicRecordReportCardIncluded = isStudentAcademicRecordReportCardIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCumulativeAttemptedCreditConversionSupported { get; }
        public bool IsCumulativeAttemptedCreditsSupported { get; }
        public bool IsCumulativeAttemptedCreditTypeDescriptorSupported { get; }
        public bool IsCumulativeEarnedCreditConversionSupported { get; }
        public bool IsCumulativeEarnedCreditsSupported { get; }
        public bool IsCumulativeEarnedCreditTypeDescriptorSupported { get; }
        public bool IsCumulativeGradePointAverageSupported { get; }
        public bool IsCumulativeGradePointsEarnedSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsGradeValueQualifierSupported { get; }
        public bool IsProjectedGraduationDateSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsSessionAttemptedCreditConversionSupported { get; }
        public bool IsSessionAttemptedCreditsSupported { get; }
        public bool IsSessionAttemptedCreditTypeDescriptorSupported { get; }
        public bool IsSessionEarnedCreditConversionSupported { get; }
        public bool IsSessionEarnedCreditsSupported { get; }
        public bool IsSessionEarnedCreditTypeDescriptorSupported { get; }
        public bool IsSessionGradePointAverageSupported { get; }
        public bool IsSessionGradePointsEarnedSupported { get; }
        public bool IsStudentAcademicRecordAcademicHonorsSupported { get; }
        public bool IsStudentAcademicRecordClassRankingSupported { get; }
        public bool IsStudentAcademicRecordDiplomasSupported { get; }
        public bool IsStudentAcademicRecordGradePointAveragesSupported { get; }
        public bool IsStudentAcademicRecordRecognitionsSupported { get; }
        public bool IsStudentAcademicRecordReportCardsSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentAcademicRecordClassRankingCreatable { get; }
        public bool IsStudentAcademicRecordAcademicHonorsItemCreatable { get; }
        public Func<IStudentAcademicRecordAcademicHonor, bool> IsStudentAcademicRecordAcademicHonorIncluded { get; }
        public bool IsStudentAcademicRecordDiplomasItemCreatable { get; }
        public Func<IStudentAcademicRecordDiploma, bool> IsStudentAcademicRecordDiplomaIncluded { get; }
        public bool IsStudentAcademicRecordGradePointAveragesItemCreatable { get; }
        public Func<IStudentAcademicRecordGradePointAverage, bool> IsStudentAcademicRecordGradePointAverageIncluded { get; }
        public bool IsStudentAcademicRecordRecognitionsItemCreatable { get; }
        public Func<IStudentAcademicRecordRecognition, bool> IsStudentAcademicRecordRecognitionIncluded { get; }
        public bool IsStudentAcademicRecordReportCardsItemCreatable { get; }
        public Func<IStudentAcademicRecordReportCard, bool> IsStudentAcademicRecordReportCardIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CumulativeAttemptedCreditConversion":
                    return IsCumulativeAttemptedCreditConversionSupported;
                case "CumulativeAttemptedCredits":
                    return IsCumulativeAttemptedCreditsSupported;
                case "CumulativeAttemptedCreditTypeDescriptor":
                    return IsCumulativeAttemptedCreditTypeDescriptorSupported;
                case "CumulativeEarnedCreditConversion":
                    return IsCumulativeEarnedCreditConversionSupported;
                case "CumulativeEarnedCredits":
                    return IsCumulativeEarnedCreditsSupported;
                case "CumulativeEarnedCreditTypeDescriptor":
                    return IsCumulativeEarnedCreditTypeDescriptorSupported;
                case "CumulativeGradePointAverage":
                    return IsCumulativeGradePointAverageSupported;
                case "CumulativeGradePointsEarned":
                    return IsCumulativeGradePointsEarnedSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "GradeValueQualifier":
                    return IsGradeValueQualifierSupported;
                case "ProjectedGraduationDate":
                    return IsProjectedGraduationDateSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "SessionAttemptedCreditConversion":
                    return IsSessionAttemptedCreditConversionSupported;
                case "SessionAttemptedCredits":
                    return IsSessionAttemptedCreditsSupported;
                case "SessionAttemptedCreditTypeDescriptor":
                    return IsSessionAttemptedCreditTypeDescriptorSupported;
                case "SessionEarnedCreditConversion":
                    return IsSessionEarnedCreditConversionSupported;
                case "SessionEarnedCredits":
                    return IsSessionEarnedCreditsSupported;
                case "SessionEarnedCreditTypeDescriptor":
                    return IsSessionEarnedCreditTypeDescriptorSupported;
                case "SessionGradePointAverage":
                    return IsSessionGradePointAverageSupported;
                case "SessionGradePointsEarned":
                    return IsSessionGradePointsEarnedSupported;
                case "StudentAcademicRecordAcademicHonors":
                    return IsStudentAcademicRecordAcademicHonorsSupported;
                case "StudentAcademicRecordClassRanking":
                    return IsStudentAcademicRecordClassRankingSupported;
                case "StudentAcademicRecordDiplomas":
                    return IsStudentAcademicRecordDiplomasSupported;
                case "StudentAcademicRecordGradePointAverages":
                    return IsStudentAcademicRecordGradePointAveragesSupported;
                case "StudentAcademicRecordRecognitions":
                    return IsStudentAcademicRecordRecognitionsSupported;
                case "StudentAcademicRecordReportCards":
                    return IsStudentAcademicRecordReportCardsSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "SchoolYear":
                    return true;
                case "StudentUniqueId":
                    return true;
                case "TermDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentAcademicRecordClassRanking":
                    return IsStudentAcademicRecordClassRankingCreatable;
                case "StudentAcademicRecordAcademicHonors":
                    return IsStudentAcademicRecordAcademicHonorsItemCreatable;
                case "StudentAcademicRecordDiplomas":
                    return IsStudentAcademicRecordDiplomasItemCreatable;
                case "StudentAcademicRecordGradePointAverages":
                    return IsStudentAcademicRecordGradePointAveragesItemCreatable;
                case "StudentAcademicRecordRecognitions":
                    return IsStudentAcademicRecordRecognitionsItemCreatable;
                case "StudentAcademicRecordReportCards":
                    return IsStudentAcademicRecordReportCardsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecordAcademicHonor model.
    /// </summary>
    public interface IStudentAcademicRecordAcademicHonor : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAcademicRecord StudentAcademicRecord { get; set; }
        
        string AcademicHonorCategoryDescriptor { get; set; }
        
        string HonorDescription { get; set; }

        // Non-PK properties
        string AchievementCategoryDescriptor { get; set; }
        string AchievementCategorySystem { get; set; }
        string AchievementTitle { get; set; }
        string Criteria { get; set; }
        string CriteriaURL { get; set; }
        string EvidenceStatement { get; set; }
        DateTime? HonorAwardDate { get; set; }
        DateTime? HonorAwardExpiresDate { get; set; }
        string ImageURL { get; set; }
        string IssuerName { get; set; }
        string IssuerOriginURL { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordAcademicHonorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordAcademicHonorMappingContract(
            bool isAchievementCategoryDescriptorSupported,
            bool isAchievementCategorySystemSupported,
            bool isAchievementTitleSupported,
            bool isCriteriaSupported,
            bool isCriteriaURLSupported,
            bool isEvidenceStatementSupported,
            bool isHonorAwardDateSupported,
            bool isHonorAwardExpiresDateSupported,
            bool isImageURLSupported,
            bool isIssuerNameSupported,
            bool isIssuerOriginURLSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAchievementCategoryDescriptorSupported = isAchievementCategoryDescriptorSupported;
            IsAchievementCategorySystemSupported = isAchievementCategorySystemSupported;
            IsAchievementTitleSupported = isAchievementTitleSupported;
            IsCriteriaSupported = isCriteriaSupported;
            IsCriteriaURLSupported = isCriteriaURLSupported;
            IsEvidenceStatementSupported = isEvidenceStatementSupported;
            IsHonorAwardDateSupported = isHonorAwardDateSupported;
            IsHonorAwardExpiresDateSupported = isHonorAwardExpiresDateSupported;
            IsImageURLSupported = isImageURLSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            IsIssuerOriginURLSupported = isIssuerOriginURLSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAchievementCategoryDescriptorSupported { get; }
        public bool IsAchievementCategorySystemSupported { get; }
        public bool IsAchievementTitleSupported { get; }
        public bool IsCriteriaSupported { get; }
        public bool IsCriteriaURLSupported { get; }
        public bool IsEvidenceStatementSupported { get; }
        public bool IsHonorAwardDateSupported { get; }
        public bool IsHonorAwardExpiresDateSupported { get; }
        public bool IsImageURLSupported { get; }
        public bool IsIssuerNameSupported { get; }
        public bool IsIssuerOriginURLSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AchievementCategoryDescriptor":
                    return IsAchievementCategoryDescriptorSupported;
                case "AchievementCategorySystem":
                    return IsAchievementCategorySystemSupported;
                case "AchievementTitle":
                    return IsAchievementTitleSupported;
                case "Criteria":
                    return IsCriteriaSupported;
                case "CriteriaURL":
                    return IsCriteriaURLSupported;
                case "EvidenceStatement":
                    return IsEvidenceStatementSupported;
                case "HonorAwardDate":
                    return IsHonorAwardDateSupported;
                case "HonorAwardExpiresDate":
                    return IsHonorAwardExpiresDateSupported;
                case "ImageURL":
                    return IsImageURLSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                case "IssuerOriginURL":
                    return IsIssuerOriginURLSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AcademicHonorCategoryDescriptor":
                    return true;
                case "HonorDescription":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecordClassRanking model.
    /// </summary>
    public interface IStudentAcademicRecordClassRanking : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAcademicRecord StudentAcademicRecord { get; set; }

        // Non-PK properties
        int ClassRank { get; set; }
        DateTime? ClassRankingDate { get; set; }
        int? PercentageRanking { get; set; }
        int TotalNumberInClass { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordClassRankingMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordClassRankingMappingContract(
            bool isClassRankSupported,
            bool isClassRankingDateSupported,
            bool isPercentageRankingSupported,
            bool isTotalNumberInClassSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsClassRankSupported = isClassRankSupported;
            IsClassRankingDateSupported = isClassRankingDateSupported;
            IsPercentageRankingSupported = isPercentageRankingSupported;
            IsTotalNumberInClassSupported = isTotalNumberInClassSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsClassRankSupported { get; }
        public bool IsClassRankingDateSupported { get; }
        public bool IsPercentageRankingSupported { get; }
        public bool IsTotalNumberInClassSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ClassRank":
                    return IsClassRankSupported;
                case "ClassRankingDate":
                    return IsClassRankingDateSupported;
                case "PercentageRanking":
                    return IsPercentageRankingSupported;
                case "TotalNumberInClass":
                    return IsTotalNumberInClassSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecordDiploma model.
    /// </summary>
    public interface IStudentAcademicRecordDiploma : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAcademicRecord StudentAcademicRecord { get; set; }
        
        DateTime DiplomaAwardDate { get; set; }
        
        string DiplomaTypeDescriptor { get; set; }

        // Non-PK properties
        string AchievementCategoryDescriptor { get; set; }
        string AchievementCategorySystem { get; set; }
        string AchievementTitle { get; set; }
        string Criteria { get; set; }
        string CriteriaURL { get; set; }
        bool? CTECompleter { get; set; }
        DateTime? DiplomaAwardExpiresDate { get; set; }
        string DiplomaDescription { get; set; }
        string DiplomaLevelDescriptor { get; set; }
        string EvidenceStatement { get; set; }
        string ImageURL { get; set; }
        string IssuerName { get; set; }
        string IssuerOriginURL { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordDiplomaMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordDiplomaMappingContract(
            bool isAchievementCategoryDescriptorSupported,
            bool isAchievementCategorySystemSupported,
            bool isAchievementTitleSupported,
            bool isCriteriaSupported,
            bool isCriteriaURLSupported,
            bool isCTECompleterSupported,
            bool isDiplomaAwardExpiresDateSupported,
            bool isDiplomaDescriptionSupported,
            bool isDiplomaLevelDescriptorSupported,
            bool isEvidenceStatementSupported,
            bool isImageURLSupported,
            bool isIssuerNameSupported,
            bool isIssuerOriginURLSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAchievementCategoryDescriptorSupported = isAchievementCategoryDescriptorSupported;
            IsAchievementCategorySystemSupported = isAchievementCategorySystemSupported;
            IsAchievementTitleSupported = isAchievementTitleSupported;
            IsCriteriaSupported = isCriteriaSupported;
            IsCriteriaURLSupported = isCriteriaURLSupported;
            IsCTECompleterSupported = isCTECompleterSupported;
            IsDiplomaAwardExpiresDateSupported = isDiplomaAwardExpiresDateSupported;
            IsDiplomaDescriptionSupported = isDiplomaDescriptionSupported;
            IsDiplomaLevelDescriptorSupported = isDiplomaLevelDescriptorSupported;
            IsEvidenceStatementSupported = isEvidenceStatementSupported;
            IsImageURLSupported = isImageURLSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            IsIssuerOriginURLSupported = isIssuerOriginURLSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAchievementCategoryDescriptorSupported { get; }
        public bool IsAchievementCategorySystemSupported { get; }
        public bool IsAchievementTitleSupported { get; }
        public bool IsCriteriaSupported { get; }
        public bool IsCriteriaURLSupported { get; }
        public bool IsCTECompleterSupported { get; }
        public bool IsDiplomaAwardExpiresDateSupported { get; }
        public bool IsDiplomaDescriptionSupported { get; }
        public bool IsDiplomaLevelDescriptorSupported { get; }
        public bool IsEvidenceStatementSupported { get; }
        public bool IsImageURLSupported { get; }
        public bool IsIssuerNameSupported { get; }
        public bool IsIssuerOriginURLSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AchievementCategoryDescriptor":
                    return IsAchievementCategoryDescriptorSupported;
                case "AchievementCategorySystem":
                    return IsAchievementCategorySystemSupported;
                case "AchievementTitle":
                    return IsAchievementTitleSupported;
                case "Criteria":
                    return IsCriteriaSupported;
                case "CriteriaURL":
                    return IsCriteriaURLSupported;
                case "CTECompleter":
                    return IsCTECompleterSupported;
                case "DiplomaAwardExpiresDate":
                    return IsDiplomaAwardExpiresDateSupported;
                case "DiplomaDescription":
                    return IsDiplomaDescriptionSupported;
                case "DiplomaLevelDescriptor":
                    return IsDiplomaLevelDescriptorSupported;
                case "EvidenceStatement":
                    return IsEvidenceStatementSupported;
                case "ImageURL":
                    return IsImageURLSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                case "IssuerOriginURL":
                    return IsIssuerOriginURLSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiplomaAwardDate":
                    return true;
                case "DiplomaTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecordGradePointAverage model.
    /// </summary>
    public interface IStudentAcademicRecordGradePointAverage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAcademicRecord StudentAcademicRecord { get; set; }
        
        string GradePointAverageTypeDescriptor { get; set; }

        // Non-PK properties
        decimal GradePointAverageValue { get; set; }
        bool? IsCumulative { get; set; }
        decimal? MaxGradePointAverageValue { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordGradePointAverageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordGradePointAverageMappingContract(
            bool isGradePointAverageValueSupported,
            bool isIsCumulativeSupported,
            bool isMaxGradePointAverageValueSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGradePointAverageValueSupported = isGradePointAverageValueSupported;
            IsIsCumulativeSupported = isIsCumulativeSupported;
            IsMaxGradePointAverageValueSupported = isMaxGradePointAverageValueSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGradePointAverageValueSupported { get; }
        public bool IsIsCumulativeSupported { get; }
        public bool IsMaxGradePointAverageValueSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GradePointAverageValue":
                    return IsGradePointAverageValueSupported;
                case "IsCumulative":
                    return IsIsCumulativeSupported;
                case "MaxGradePointAverageValue":
                    return IsMaxGradePointAverageValueSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradePointAverageTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecordRecognition model.
    /// </summary>
    public interface IStudentAcademicRecordRecognition : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAcademicRecord StudentAcademicRecord { get; set; }
        
        string RecognitionTypeDescriptor { get; set; }

        // Non-PK properties
        string AchievementCategoryDescriptor { get; set; }
        string AchievementCategorySystem { get; set; }
        string AchievementTitle { get; set; }
        string Criteria { get; set; }
        string CriteriaURL { get; set; }
        string EvidenceStatement { get; set; }
        string ImageURL { get; set; }
        string IssuerName { get; set; }
        string IssuerOriginURL { get; set; }
        DateTime? RecognitionAwardDate { get; set; }
        DateTime? RecognitionAwardExpiresDate { get; set; }
        string RecognitionDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordRecognitionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordRecognitionMappingContract(
            bool isAchievementCategoryDescriptorSupported,
            bool isAchievementCategorySystemSupported,
            bool isAchievementTitleSupported,
            bool isCriteriaSupported,
            bool isCriteriaURLSupported,
            bool isEvidenceStatementSupported,
            bool isImageURLSupported,
            bool isIssuerNameSupported,
            bool isIssuerOriginURLSupported,
            bool isRecognitionAwardDateSupported,
            bool isRecognitionAwardExpiresDateSupported,
            bool isRecognitionDescriptionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAchievementCategoryDescriptorSupported = isAchievementCategoryDescriptorSupported;
            IsAchievementCategorySystemSupported = isAchievementCategorySystemSupported;
            IsAchievementTitleSupported = isAchievementTitleSupported;
            IsCriteriaSupported = isCriteriaSupported;
            IsCriteriaURLSupported = isCriteriaURLSupported;
            IsEvidenceStatementSupported = isEvidenceStatementSupported;
            IsImageURLSupported = isImageURLSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            IsIssuerOriginURLSupported = isIssuerOriginURLSupported;
            IsRecognitionAwardDateSupported = isRecognitionAwardDateSupported;
            IsRecognitionAwardExpiresDateSupported = isRecognitionAwardExpiresDateSupported;
            IsRecognitionDescriptionSupported = isRecognitionDescriptionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAchievementCategoryDescriptorSupported { get; }
        public bool IsAchievementCategorySystemSupported { get; }
        public bool IsAchievementTitleSupported { get; }
        public bool IsCriteriaSupported { get; }
        public bool IsCriteriaURLSupported { get; }
        public bool IsEvidenceStatementSupported { get; }
        public bool IsImageURLSupported { get; }
        public bool IsIssuerNameSupported { get; }
        public bool IsIssuerOriginURLSupported { get; }
        public bool IsRecognitionAwardDateSupported { get; }
        public bool IsRecognitionAwardExpiresDateSupported { get; }
        public bool IsRecognitionDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AchievementCategoryDescriptor":
                    return IsAchievementCategoryDescriptorSupported;
                case "AchievementCategorySystem":
                    return IsAchievementCategorySystemSupported;
                case "AchievementTitle":
                    return IsAchievementTitleSupported;
                case "Criteria":
                    return IsCriteriaSupported;
                case "CriteriaURL":
                    return IsCriteriaURLSupported;
                case "EvidenceStatement":
                    return IsEvidenceStatementSupported;
                case "ImageURL":
                    return IsImageURLSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                case "IssuerOriginURL":
                    return IsIssuerOriginURLSupported;
                case "RecognitionAwardDate":
                    return IsRecognitionAwardDateSupported;
                case "RecognitionAwardExpiresDate":
                    return IsRecognitionAwardExpiresDateSupported;
                case "RecognitionDescription":
                    return IsRecognitionDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RecognitionTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAcademicRecordReportCard model.
    /// </summary>
    public interface IStudentAcademicRecordReportCard : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAcademicRecord StudentAcademicRecord { get; set; }
        
        string GradingPeriodDescriptor { get; set; }
        
        int GradingPeriodSchoolId { get; set; }
        
        short GradingPeriodSchoolYear { get; set; }
        
        int GradingPeriodSequence { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ReportCardResourceId { get; set; }
        string ReportCardDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAcademicRecordReportCardMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAcademicRecordReportCardMappingContract(
            bool isReportCardReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsReportCardReferenceSupported = isReportCardReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsReportCardReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ReportCardReference":
                    return IsReportCardReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradingPeriodDescriptor":
                    return true;
                case "GradingPeriodSchoolId":
                    return true;
                case "GradingPeriodSchoolYear":
                    return true;
                case "GradingPeriodSequence":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessment model.
    /// </summary>
    public interface IStudentAssessment : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AssessmentIdentifier { get; set; }
        
        string Namespace { get; set; }
        
        string StudentAssessmentIdentifier { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        DateTime? AdministrationDate { get; set; }
        DateTime? AdministrationEndDate { get; set; }
        string AdministrationEnvironmentDescriptor { get; set; }
        string AdministrationLanguageDescriptor { get; set; }
        int? AssessedMinutes { get; set; }
        string EventCircumstanceDescriptor { get; set; }
        string EventDescription { get; set; }
        string PlatformTypeDescriptor { get; set; }
        string ReasonNotTestedDescriptor { get; set; }
        int? ReportedSchoolId { get; set; }
        string ReportedSchoolIdentifier { get; set; }
        string RetestIndicatorDescriptor { get; set; }
        short? SchoolYear { get; set; }
        string SerialNumber { get; set; }
        string WhenAssessedGradeLevelDescriptor { get; set; }

        // One-to-one relationships

        IStudentAssessmentPeriod StudentAssessmentPeriod { get; set; }

        // Lists
        ICollection<IStudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; }
        ICollection<IStudentAssessmentItem> StudentAssessmentItems { get; set; }
        ICollection<IStudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; }
        ICollection<IStudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; }
        ICollection<IStudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; }

        // Resource reference data
        Guid? AssessmentResourceId { get; set; }
        string AssessmentDiscriminator { get; set; }
        Guid? ReportedSchoolResourceId { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentMappingContract(
            bool isAdministrationDateSupported,
            bool isAdministrationEndDateSupported,
            bool isAdministrationEnvironmentDescriptorSupported,
            bool isAdministrationLanguageDescriptorSupported,
            bool isAssessedMinutesSupported,
            bool isAssessmentReferenceSupported,
            bool isEventCircumstanceDescriptorSupported,
            bool isEventDescriptionSupported,
            bool isPlatformTypeDescriptorSupported,
            bool isReasonNotTestedDescriptorSupported,
            bool isReportedSchoolIdSupported,
            bool isReportedSchoolIdentifierSupported,
            bool isReportedSchoolReferenceSupported,
            bool isRetestIndicatorDescriptorSupported,
            bool isSchoolYearSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isSerialNumberSupported,
            bool isStudentAssessmentAccommodationsSupported,
            bool isStudentAssessmentItemsSupported,
            bool isStudentAssessmentPerformanceLevelsSupported,
            bool isStudentAssessmentPeriodSupported,
            bool isStudentAssessmentScoreResultsSupported,
            bool isStudentAssessmentStudentObjectiveAssessmentsSupported,
            bool isStudentReferenceSupported,
            bool isWhenAssessedGradeLevelDescriptorSupported,
            bool isStudentAssessmentPeriodCreatable,
            bool isStudentAssessmentAccommodationsItemCreatable,
            Func<IStudentAssessmentAccommodation, bool> isStudentAssessmentAccommodationIncluded,
            bool isStudentAssessmentItemsItemCreatable,
            Func<IStudentAssessmentItem, bool> isStudentAssessmentItemIncluded,
            bool isStudentAssessmentPerformanceLevelsItemCreatable,
            Func<IStudentAssessmentPerformanceLevel, bool> isStudentAssessmentPerformanceLevelIncluded,
            bool isStudentAssessmentScoreResultsItemCreatable,
            Func<IStudentAssessmentScoreResult, bool> isStudentAssessmentScoreResultIncluded,
            bool isStudentAssessmentStudentObjectiveAssessmentsItemCreatable,
            Func<IStudentAssessmentStudentObjectiveAssessment, bool> isStudentAssessmentStudentObjectiveAssessmentIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAdministrationDateSupported = isAdministrationDateSupported;
            IsAdministrationEndDateSupported = isAdministrationEndDateSupported;
            IsAdministrationEnvironmentDescriptorSupported = isAdministrationEnvironmentDescriptorSupported;
            IsAdministrationLanguageDescriptorSupported = isAdministrationLanguageDescriptorSupported;
            IsAssessedMinutesSupported = isAssessedMinutesSupported;
            IsAssessmentReferenceSupported = isAssessmentReferenceSupported;
            IsEventCircumstanceDescriptorSupported = isEventCircumstanceDescriptorSupported;
            IsEventDescriptionSupported = isEventDescriptionSupported;
            IsPlatformTypeDescriptorSupported = isPlatformTypeDescriptorSupported;
            IsReasonNotTestedDescriptorSupported = isReasonNotTestedDescriptorSupported;
            IsReportedSchoolIdSupported = isReportedSchoolIdSupported;
            IsReportedSchoolIdentifierSupported = isReportedSchoolIdentifierSupported;
            IsReportedSchoolReferenceSupported = isReportedSchoolReferenceSupported;
            IsRetestIndicatorDescriptorSupported = isRetestIndicatorDescriptorSupported;
            IsSchoolYearSupported = isSchoolYearSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsSerialNumberSupported = isSerialNumberSupported;
            IsStudentAssessmentAccommodationsSupported = isStudentAssessmentAccommodationsSupported;
            IsStudentAssessmentItemsSupported = isStudentAssessmentItemsSupported;
            IsStudentAssessmentPerformanceLevelsSupported = isStudentAssessmentPerformanceLevelsSupported;
            IsStudentAssessmentPeriodSupported = isStudentAssessmentPeriodSupported;
            IsStudentAssessmentScoreResultsSupported = isStudentAssessmentScoreResultsSupported;
            IsStudentAssessmentStudentObjectiveAssessmentsSupported = isStudentAssessmentStudentObjectiveAssessmentsSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsWhenAssessedGradeLevelDescriptorSupported = isWhenAssessedGradeLevelDescriptorSupported;
            IsStudentAssessmentPeriodCreatable = isStudentAssessmentPeriodCreatable;
            IsStudentAssessmentAccommodationsItemCreatable = isStudentAssessmentAccommodationsItemCreatable;
            IsStudentAssessmentAccommodationIncluded = isStudentAssessmentAccommodationIncluded;
            IsStudentAssessmentItemsItemCreatable = isStudentAssessmentItemsItemCreatable;
            IsStudentAssessmentItemIncluded = isStudentAssessmentItemIncluded;
            IsStudentAssessmentPerformanceLevelsItemCreatable = isStudentAssessmentPerformanceLevelsItemCreatable;
            IsStudentAssessmentPerformanceLevelIncluded = isStudentAssessmentPerformanceLevelIncluded;
            IsStudentAssessmentScoreResultsItemCreatable = isStudentAssessmentScoreResultsItemCreatable;
            IsStudentAssessmentScoreResultIncluded = isStudentAssessmentScoreResultIncluded;
            IsStudentAssessmentStudentObjectiveAssessmentsItemCreatable = isStudentAssessmentStudentObjectiveAssessmentsItemCreatable;
            IsStudentAssessmentStudentObjectiveAssessmentIncluded = isStudentAssessmentStudentObjectiveAssessmentIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAdministrationDateSupported { get; }
        public bool IsAdministrationEndDateSupported { get; }
        public bool IsAdministrationEnvironmentDescriptorSupported { get; }
        public bool IsAdministrationLanguageDescriptorSupported { get; }
        public bool IsAssessedMinutesSupported { get; }
        public bool IsAssessmentReferenceSupported { get; }
        public bool IsEventCircumstanceDescriptorSupported { get; }
        public bool IsEventDescriptionSupported { get; }
        public bool IsPlatformTypeDescriptorSupported { get; }
        public bool IsReasonNotTestedDescriptorSupported { get; }
        public bool IsReportedSchoolIdSupported { get; }
        public bool IsReportedSchoolIdentifierSupported { get; }
        public bool IsReportedSchoolReferenceSupported { get; }
        public bool IsRetestIndicatorDescriptorSupported { get; }
        public bool IsSchoolYearSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsSerialNumberSupported { get; }
        public bool IsStudentAssessmentAccommodationsSupported { get; }
        public bool IsStudentAssessmentItemsSupported { get; }
        public bool IsStudentAssessmentPerformanceLevelsSupported { get; }
        public bool IsStudentAssessmentPeriodSupported { get; }
        public bool IsStudentAssessmentScoreResultsSupported { get; }
        public bool IsStudentAssessmentStudentObjectiveAssessmentsSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsWhenAssessedGradeLevelDescriptorSupported { get; }
        public bool IsStudentAssessmentPeriodCreatable { get; }
        public bool IsStudentAssessmentAccommodationsItemCreatable { get; }
        public Func<IStudentAssessmentAccommodation, bool> IsStudentAssessmentAccommodationIncluded { get; }
        public bool IsStudentAssessmentItemsItemCreatable { get; }
        public Func<IStudentAssessmentItem, bool> IsStudentAssessmentItemIncluded { get; }
        public bool IsStudentAssessmentPerformanceLevelsItemCreatable { get; }
        public Func<IStudentAssessmentPerformanceLevel, bool> IsStudentAssessmentPerformanceLevelIncluded { get; }
        public bool IsStudentAssessmentScoreResultsItemCreatable { get; }
        public Func<IStudentAssessmentScoreResult, bool> IsStudentAssessmentScoreResultIncluded { get; }
        public bool IsStudentAssessmentStudentObjectiveAssessmentsItemCreatable { get; }
        public Func<IStudentAssessmentStudentObjectiveAssessment, bool> IsStudentAssessmentStudentObjectiveAssessmentIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AdministrationDate":
                    return IsAdministrationDateSupported;
                case "AdministrationEndDate":
                    return IsAdministrationEndDateSupported;
                case "AdministrationEnvironmentDescriptor":
                    return IsAdministrationEnvironmentDescriptorSupported;
                case "AdministrationLanguageDescriptor":
                    return IsAdministrationLanguageDescriptorSupported;
                case "AssessedMinutes":
                    return IsAssessedMinutesSupported;
                case "AssessmentReference":
                    return IsAssessmentReferenceSupported;
                case "EventCircumstanceDescriptor":
                    return IsEventCircumstanceDescriptorSupported;
                case "EventDescription":
                    return IsEventDescriptionSupported;
                case "PlatformTypeDescriptor":
                    return IsPlatformTypeDescriptorSupported;
                case "ReasonNotTestedDescriptor":
                    return IsReasonNotTestedDescriptorSupported;
                case "ReportedSchoolId":
                    return IsReportedSchoolIdSupported;
                case "ReportedSchoolIdentifier":
                    return IsReportedSchoolIdentifierSupported;
                case "ReportedSchoolReference":
                    return IsReportedSchoolReferenceSupported;
                case "RetestIndicatorDescriptor":
                    return IsRetestIndicatorDescriptorSupported;
                case "SchoolYear":
                    return IsSchoolYearSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "SerialNumber":
                    return IsSerialNumberSupported;
                case "StudentAssessmentAccommodations":
                    return IsStudentAssessmentAccommodationsSupported;
                case "StudentAssessmentItems":
                    return IsStudentAssessmentItemsSupported;
                case "StudentAssessmentPerformanceLevels":
                    return IsStudentAssessmentPerformanceLevelsSupported;
                case "StudentAssessmentPeriod":
                    return IsStudentAssessmentPeriodSupported;
                case "StudentAssessmentScoreResults":
                    return IsStudentAssessmentScoreResultsSupported;
                case "StudentAssessmentStudentObjectiveAssessments":
                    return IsStudentAssessmentStudentObjectiveAssessmentsSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "WhenAssessedGradeLevelDescriptor":
                    return IsWhenAssessedGradeLevelDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "Namespace":
                    return true;
                case "StudentAssessmentIdentifier":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentAssessmentPeriod":
                    return IsStudentAssessmentPeriodCreatable;
                case "StudentAssessmentAccommodations":
                    return IsStudentAssessmentAccommodationsItemCreatable;
                case "StudentAssessmentItems":
                    return IsStudentAssessmentItemsItemCreatable;
                case "StudentAssessmentPerformanceLevels":
                    return IsStudentAssessmentPerformanceLevelsItemCreatable;
                case "StudentAssessmentScoreResults":
                    return IsStudentAssessmentScoreResultsItemCreatable;
                case "StudentAssessmentStudentObjectiveAssessments":
                    return IsStudentAssessmentStudentObjectiveAssessmentsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentAccommodation model.
    /// </summary>
    public interface IStudentAssessmentAccommodation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessment StudentAssessment { get; set; }
        
        string AccommodationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentAccommodationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentAccommodationMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AccommodationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentEducationOrganizationAssociation model.
    /// </summary>
    public interface IStudentAssessmentEducationOrganizationAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AssessmentIdentifier { get; set; }
        
        string EducationOrganizationAssociationTypeDescriptor { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string Namespace { get; set; }
        
        string StudentAssessmentIdentifier { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        short? SchoolYear { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
        Guid? StudentAssessmentResourceId { get; set; }
        string StudentAssessmentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentEducationOrganizationAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentEducationOrganizationAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isSchoolYearSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isStudentAssessmentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsSchoolYearSupported = isSchoolYearSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsStudentAssessmentReferenceSupported = isStudentAssessmentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsSchoolYearSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsStudentAssessmentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "SchoolYear":
                    return IsSchoolYearSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "StudentAssessmentReference":
                    return IsStudentAssessmentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentIdentifier":
                    return true;
                case "EducationOrganizationAssociationTypeDescriptor":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "Namespace":
                    return true;
                case "StudentAssessmentIdentifier":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentItem model.
    /// </summary>
    public interface IStudentAssessmentItem : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessment StudentAssessment { get; set; }
        
        string IdentificationCode { get; set; }

        // Non-PK properties
        string AssessmentItemResultDescriptor { get; set; }
        string AssessmentResponse { get; set; }
        string DescriptiveFeedback { get; set; }
        int? ItemNumber { get; set; }
        decimal? RawScoreResult { get; set; }
        string ResponseIndicatorDescriptor { get; set; }
        string TimeAssessed { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? AssessmentItemResourceId { get; set; }
        string AssessmentItemDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentItemMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentItemMappingContract(
            bool isAssessmentItemReferenceSupported,
            bool isAssessmentItemResultDescriptorSupported,
            bool isAssessmentResponseSupported,
            bool isDescriptiveFeedbackSupported,
            bool isItemNumberSupported,
            bool isRawScoreResultSupported,
            bool isResponseIndicatorDescriptorSupported,
            bool isTimeAssessedSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentItemReferenceSupported = isAssessmentItemReferenceSupported;
            IsAssessmentItemResultDescriptorSupported = isAssessmentItemResultDescriptorSupported;
            IsAssessmentResponseSupported = isAssessmentResponseSupported;
            IsDescriptiveFeedbackSupported = isDescriptiveFeedbackSupported;
            IsItemNumberSupported = isItemNumberSupported;
            IsRawScoreResultSupported = isRawScoreResultSupported;
            IsResponseIndicatorDescriptorSupported = isResponseIndicatorDescriptorSupported;
            IsTimeAssessedSupported = isTimeAssessedSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentItemReferenceSupported { get; }
        public bool IsAssessmentItemResultDescriptorSupported { get; }
        public bool IsAssessmentResponseSupported { get; }
        public bool IsDescriptiveFeedbackSupported { get; }
        public bool IsItemNumberSupported { get; }
        public bool IsRawScoreResultSupported { get; }
        public bool IsResponseIndicatorDescriptorSupported { get; }
        public bool IsTimeAssessedSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentItemReference":
                    return IsAssessmentItemReferenceSupported;
                case "AssessmentItemResultDescriptor":
                    return IsAssessmentItemResultDescriptorSupported;
                case "AssessmentResponse":
                    return IsAssessmentResponseSupported;
                case "DescriptiveFeedback":
                    return IsDescriptiveFeedbackSupported;
                case "ItemNumber":
                    return IsItemNumberSupported;
                case "RawScoreResult":
                    return IsRawScoreResultSupported;
                case "ResponseIndicatorDescriptor":
                    return IsResponseIndicatorDescriptorSupported;
                case "TimeAssessed":
                    return IsTimeAssessedSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentPerformanceLevel model.
    /// </summary>
    public interface IStudentAssessmentPerformanceLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessment StudentAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }
        
        string PerformanceLevelDescriptor { get; set; }

        // Non-PK properties
        string PerformanceLevelIndicatorName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentPerformanceLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentPerformanceLevelMappingContract(
            bool isPerformanceLevelIndicatorNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPerformanceLevelIndicatorNameSupported = isPerformanceLevelIndicatorNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPerformanceLevelIndicatorNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PerformanceLevelIndicatorName":
                    return IsPerformanceLevelIndicatorNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                case "PerformanceLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentPeriod model.
    /// </summary>
    public interface IStudentAssessmentPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessment StudentAssessment { get; set; }

        // Non-PK properties
        string AssessmentPeriodDescriptor { get; set; }
        DateTime? BeginDate { get; set; }
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentPeriodMappingContract(
            bool isAssessmentPeriodDescriptorSupported,
            bool isBeginDateSupported,
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssessmentPeriodDescriptorSupported = isAssessmentPeriodDescriptorSupported;
            IsBeginDateSupported = isBeginDateSupported;
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssessmentPeriodDescriptorSupported { get; }
        public bool IsBeginDateSupported { get; }
        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssessmentPeriodDescriptor":
                    return IsAssessmentPeriodDescriptorSupported;
                case "BeginDate":
                    return IsBeginDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentScoreResult model.
    /// </summary>
    public interface IStudentAssessmentScoreResult : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessment StudentAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }

        // Non-PK properties
        string Result { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentScoreResultMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentScoreResultMappingContract(
            bool isResultSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsResultSupported = isResultSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsResultSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Result":
                    return IsResultSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentStudentObjectiveAssessment model.
    /// </summary>
    public interface IStudentAssessmentStudentObjectiveAssessment : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessment StudentAssessment { get; set; }
        
        string IdentificationCode { get; set; }

        // Non-PK properties
        DateTime? AdministrationDate { get; set; }
        DateTime? AdministrationEndDate { get; set; }
        int? AssessedMinutes { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; }
        ICollection<IStudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; }

        // Resource reference data
        Guid? ObjectiveAssessmentResourceId { get; set; }
        string ObjectiveAssessmentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentStudentObjectiveAssessmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentStudentObjectiveAssessmentMappingContract(
            bool isAdministrationDateSupported,
            bool isAdministrationEndDateSupported,
            bool isAssessedMinutesSupported,
            bool isObjectiveAssessmentReferenceSupported,
            bool isStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported,
            bool isStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported,
            bool isStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsItemCreatable,
            Func<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, bool> isStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded,
            bool isStudentAssessmentStudentObjectiveAssessmentScoreResultsItemCreatable,
            Func<IStudentAssessmentStudentObjectiveAssessmentScoreResult, bool> isStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAdministrationDateSupported = isAdministrationDateSupported;
            IsAdministrationEndDateSupported = isAdministrationEndDateSupported;
            IsAssessedMinutesSupported = isAssessedMinutesSupported;
            IsObjectiveAssessmentReferenceSupported = isObjectiveAssessmentReferenceSupported;
            IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported = isStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported;
            IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported = isStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported;
            IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsItemCreatable = isStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsItemCreatable;
            IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded = isStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded;
            IsStudentAssessmentStudentObjectiveAssessmentScoreResultsItemCreatable = isStudentAssessmentStudentObjectiveAssessmentScoreResultsItemCreatable;
            IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded = isStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAdministrationDateSupported { get; }
        public bool IsAdministrationEndDateSupported { get; }
        public bool IsAssessedMinutesSupported { get; }
        public bool IsObjectiveAssessmentReferenceSupported { get; }
        public bool IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported { get; }
        public bool IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported { get; }
        public bool IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsItemCreatable { get; }
        public Func<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, bool> IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded { get; }
        public bool IsStudentAssessmentStudentObjectiveAssessmentScoreResultsItemCreatable { get; }
        public Func<IStudentAssessmentStudentObjectiveAssessmentScoreResult, bool> IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AdministrationDate":
                    return IsAdministrationDateSupported;
                case "AdministrationEndDate":
                    return IsAdministrationEndDateSupported;
                case "AssessedMinutes":
                    return IsAssessedMinutesSupported;
                case "ObjectiveAssessmentReference":
                    return IsObjectiveAssessmentReferenceSupported;
                case "StudentAssessmentStudentObjectiveAssessmentPerformanceLevels":
                    return IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported;
                case "StudentAssessmentStudentObjectiveAssessmentScoreResults":
                    return IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationCode":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentAssessmentStudentObjectiveAssessmentPerformanceLevels":
                    return IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsItemCreatable;
                case "StudentAssessmentStudentObjectiveAssessmentScoreResults":
                    return IsStudentAssessmentStudentObjectiveAssessmentScoreResultsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel model.
    /// </summary>
    public interface IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }
        
        string PerformanceLevelDescriptor { get; set; }

        // Non-PK properties
        string PerformanceLevelIndicatorName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentStudentObjectiveAssessmentPerformanceLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevelMappingContract(
            bool isPerformanceLevelIndicatorNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPerformanceLevelIndicatorNameSupported = isPerformanceLevelIndicatorNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPerformanceLevelIndicatorNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PerformanceLevelIndicatorName":
                    return IsPerformanceLevelIndicatorNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                case "PerformanceLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentAssessmentStudentObjectiveAssessmentScoreResult model.
    /// </summary>
    public interface IStudentAssessmentStudentObjectiveAssessmentScoreResult : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment { get; set; }
        
        string AssessmentReportingMethodDescriptor { get; set; }

        // Non-PK properties
        string Result { get; set; }
        string ResultDatatypeTypeDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentAssessmentStudentObjectiveAssessmentScoreResultMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentAssessmentStudentObjectiveAssessmentScoreResultMappingContract(
            bool isResultSupported,
            bool isResultDatatypeTypeDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsResultSupported = isResultSupported;
            IsResultDatatypeTypeDescriptorSupported = isResultDatatypeTypeDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsResultSupported { get; }
        public bool IsResultDatatypeTypeDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Result":
                    return IsResultSupported;
                case "ResultDatatypeTypeDescriptor":
                    return IsResultDatatypeTypeDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssessmentReportingMethodDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCharacteristicDescriptor model.
    /// </summary>
    public interface IStudentCharacteristicDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StudentCharacteristicDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCharacteristicDescriptorMappingContract : IMappingContract
    {
        public StudentCharacteristicDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StudentCharacteristicDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCohortAssociation model.
    /// </summary>
    public interface IStudentCohortAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        string CohortIdentifier { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentCohortAssociationSection> StudentCohortAssociationSections { get; set; }

        // Resource reference data
        Guid? CohortResourceId { get; set; }
        string CohortDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCohortAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCohortAssociationMappingContract(
            bool isCohortReferenceSupported,
            bool isEndDateSupported,
            bool isStudentCohortAssociationSectionsSupported,
            bool isStudentReferenceSupported,
            bool isStudentCohortAssociationSectionsItemCreatable,
            Func<IStudentCohortAssociationSection, bool> isStudentCohortAssociationSectionIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCohortReferenceSupported = isCohortReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsStudentCohortAssociationSectionsSupported = isStudentCohortAssociationSectionsSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentCohortAssociationSectionsItemCreatable = isStudentCohortAssociationSectionsItemCreatable;
            IsStudentCohortAssociationSectionIncluded = isStudentCohortAssociationSectionIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCohortReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsStudentCohortAssociationSectionsSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentCohortAssociationSectionsItemCreatable { get; }
        public Func<IStudentCohortAssociationSection, bool> IsStudentCohortAssociationSectionIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CohortReference":
                    return IsCohortReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "StudentCohortAssociationSections":
                    return IsStudentCohortAssociationSectionsSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "CohortIdentifier":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentCohortAssociationSections":
                    return IsStudentCohortAssociationSectionsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCohortAssociationSection model.
    /// </summary>
    public interface IStudentCohortAssociationSection : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentCohortAssociation StudentCohortAssociation { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCohortAssociationSectionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCohortAssociationSectionMappingContract(
            bool isSectionReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsSectionReferenceSupported = isSectionReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsSectionReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "SectionReference":
                    return IsSectionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCompetencyObjective model.
    /// </summary>
    public interface IStudentCompetencyObjective : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string GradingPeriodDescriptor { get; set; }
        
        int GradingPeriodSchoolId { get; set; }
        
        short GradingPeriodSchoolYear { get; set; }
        
        int GradingPeriodSequence { get; set; }
        
        string Objective { get; set; }
        
        int ObjectiveEducationOrganizationId { get; set; }
        
        string ObjectiveGradeLevelDescriptor { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string CompetencyLevelDescriptor { get; set; }
        string DiagnosticStatement { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentCompetencyObjectiveGeneralStudentProgramAssociation> StudentCompetencyObjectiveGeneralStudentProgramAssociations { get; set; }
        ICollection<IStudentCompetencyObjectiveStudentSectionAssociation> StudentCompetencyObjectiveStudentSectionAssociations { get; set; }

        // Resource reference data
        Guid? GradingPeriodResourceId { get; set; }
        string GradingPeriodDiscriminator { get; set; }
        Guid? ObjectiveCompetencyObjectiveResourceId { get; set; }
        string ObjectiveCompetencyObjectiveDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCompetencyObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCompetencyObjectiveMappingContract(
            bool isCompetencyLevelDescriptorSupported,
            bool isDiagnosticStatementSupported,
            bool isGradingPeriodReferenceSupported,
            bool isObjectiveCompetencyObjectiveReferenceSupported,
            bool isStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported,
            bool isStudentCompetencyObjectiveStudentSectionAssociationsSupported,
            bool isStudentReferenceSupported,
            bool isStudentCompetencyObjectiveGeneralStudentProgramAssociationsItemCreatable,
            Func<IStudentCompetencyObjectiveGeneralStudentProgramAssociation, bool> isStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded,
            bool isStudentCompetencyObjectiveStudentSectionAssociationsItemCreatable,
            Func<IStudentCompetencyObjectiveStudentSectionAssociation, bool> isStudentCompetencyObjectiveStudentSectionAssociationIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCompetencyLevelDescriptorSupported = isCompetencyLevelDescriptorSupported;
            IsDiagnosticStatementSupported = isDiagnosticStatementSupported;
            IsGradingPeriodReferenceSupported = isGradingPeriodReferenceSupported;
            IsObjectiveCompetencyObjectiveReferenceSupported = isObjectiveCompetencyObjectiveReferenceSupported;
            IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported = isStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported;
            IsStudentCompetencyObjectiveStudentSectionAssociationsSupported = isStudentCompetencyObjectiveStudentSectionAssociationsSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsItemCreatable = isStudentCompetencyObjectiveGeneralStudentProgramAssociationsItemCreatable;
            IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded = isStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded;
            IsStudentCompetencyObjectiveStudentSectionAssociationsItemCreatable = isStudentCompetencyObjectiveStudentSectionAssociationsItemCreatable;
            IsStudentCompetencyObjectiveStudentSectionAssociationIncluded = isStudentCompetencyObjectiveStudentSectionAssociationIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCompetencyLevelDescriptorSupported { get; }
        public bool IsDiagnosticStatementSupported { get; }
        public bool IsGradingPeriodReferenceSupported { get; }
        public bool IsObjectiveCompetencyObjectiveReferenceSupported { get; }
        public bool IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported { get; }
        public bool IsStudentCompetencyObjectiveStudentSectionAssociationsSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsItemCreatable { get; }
        public Func<IStudentCompetencyObjectiveGeneralStudentProgramAssociation, bool> IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded { get; }
        public bool IsStudentCompetencyObjectiveStudentSectionAssociationsItemCreatable { get; }
        public Func<IStudentCompetencyObjectiveStudentSectionAssociation, bool> IsStudentCompetencyObjectiveStudentSectionAssociationIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CompetencyLevelDescriptor":
                    return IsCompetencyLevelDescriptorSupported;
                case "DiagnosticStatement":
                    return IsDiagnosticStatementSupported;
                case "GradingPeriodReference":
                    return IsGradingPeriodReferenceSupported;
                case "ObjectiveCompetencyObjectiveReference":
                    return IsObjectiveCompetencyObjectiveReferenceSupported;
                case "StudentCompetencyObjectiveGeneralStudentProgramAssociations":
                    return IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported;
                case "StudentCompetencyObjectiveStudentSectionAssociations":
                    return IsStudentCompetencyObjectiveStudentSectionAssociationsSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradingPeriodDescriptor":
                    return true;
                case "GradingPeriodSchoolId":
                    return true;
                case "GradingPeriodSchoolYear":
                    return true;
                case "GradingPeriodSequence":
                    return true;
                case "Objective":
                    return true;
                case "ObjectiveEducationOrganizationId":
                    return true;
                case "ObjectiveGradeLevelDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentCompetencyObjectiveGeneralStudentProgramAssociations":
                    return IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsItemCreatable;
                case "StudentCompetencyObjectiveStudentSectionAssociations":
                    return IsStudentCompetencyObjectiveStudentSectionAssociationsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCompetencyObjectiveGeneralStudentProgramAssociation model.
    /// </summary>
    public interface IStudentCompetencyObjectiveGeneralStudentProgramAssociation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentCompetencyObjective StudentCompetencyObjective { get; set; }
        
        DateTime BeginDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int ProgramEducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? GeneralStudentProgramAssociationResourceId { get; set; }
        string GeneralStudentProgramAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCompetencyObjectiveGeneralStudentProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCompetencyObjectiveGeneralStudentProgramAssociationMappingContract(
            bool isGeneralStudentProgramAssociationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGeneralStudentProgramAssociationReferenceSupported = isGeneralStudentProgramAssociationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGeneralStudentProgramAssociationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationReference":
                    return IsGeneralStudentProgramAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCompetencyObjectiveStudentSectionAssociation model.
    /// </summary>
    public interface IStudentCompetencyObjectiveStudentSectionAssociation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentCompetencyObjective StudentCompetencyObjective { get; set; }
        
        DateTime BeginDate { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StudentSectionAssociationResourceId { get; set; }
        string StudentSectionAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCompetencyObjectiveStudentSectionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCompetencyObjectiveStudentSectionAssociationMappingContract(
            bool isStudentSectionAssociationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentSectionAssociationReferenceSupported = isStudentSectionAssociationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentSectionAssociationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentSectionAssociationReference":
                    return IsStudentSectionAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCTEProgramAssociation model.
    /// </summary>
    public interface IStudentCTEProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        bool? NonTraditionalGenderStatus { get; set; }
        bool? PrivateCTEProgram { get; set; }
        string TechnicalSkillsAssessmentDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentCTEProgramAssociationCTEProgram> StudentCTEProgramAssociationCTEPrograms { get; set; }
        ICollection<IStudentCTEProgramAssociationCTEProgramService> StudentCTEProgramAssociationCTEProgramServices { get; set; }
        ICollection<IStudentCTEProgramAssociationService> StudentCTEProgramAssociationServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCTEProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCTEProgramAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isNonTraditionalGenderStatusSupported,
            bool isPrivateCTEProgramSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentCTEProgramAssociationCTEProgramsSupported,
            bool isStudentCTEProgramAssociationCTEProgramServicesSupported,
            bool isStudentCTEProgramAssociationServicesSupported,
            bool isStudentReferenceSupported,
            bool isTechnicalSkillsAssessmentDescriptorSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentCTEProgramAssociationCTEProgramsItemCreatable,
            Func<IStudentCTEProgramAssociationCTEProgram, bool> isStudentCTEProgramAssociationCTEProgramIncluded,
            bool isStudentCTEProgramAssociationCTEProgramServicesItemCreatable,
            Func<IStudentCTEProgramAssociationCTEProgramService, bool> isStudentCTEProgramAssociationCTEProgramServiceIncluded,
            bool isStudentCTEProgramAssociationServicesItemCreatable,
            Func<IStudentCTEProgramAssociationService, bool> isStudentCTEProgramAssociationServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsNonTraditionalGenderStatusSupported = isNonTraditionalGenderStatusSupported;
            IsPrivateCTEProgramSupported = isPrivateCTEProgramSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentCTEProgramAssociationCTEProgramsSupported = isStudentCTEProgramAssociationCTEProgramsSupported;
            IsStudentCTEProgramAssociationCTEProgramServicesSupported = isStudentCTEProgramAssociationCTEProgramServicesSupported;
            IsStudentCTEProgramAssociationServicesSupported = isStudentCTEProgramAssociationServicesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsTechnicalSkillsAssessmentDescriptorSupported = isTechnicalSkillsAssessmentDescriptorSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentCTEProgramAssociationCTEProgramsItemCreatable = isStudentCTEProgramAssociationCTEProgramsItemCreatable;
            IsStudentCTEProgramAssociationCTEProgramIncluded = isStudentCTEProgramAssociationCTEProgramIncluded;
            IsStudentCTEProgramAssociationCTEProgramServicesItemCreatable = isStudentCTEProgramAssociationCTEProgramServicesItemCreatable;
            IsStudentCTEProgramAssociationCTEProgramServiceIncluded = isStudentCTEProgramAssociationCTEProgramServiceIncluded;
            IsStudentCTEProgramAssociationServicesItemCreatable = isStudentCTEProgramAssociationServicesItemCreatable;
            IsStudentCTEProgramAssociationServiceIncluded = isStudentCTEProgramAssociationServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsNonTraditionalGenderStatusSupported { get; }
        public bool IsPrivateCTEProgramSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentCTEProgramAssociationCTEProgramsSupported { get; }
        public bool IsStudentCTEProgramAssociationCTEProgramServicesSupported { get; }
        public bool IsStudentCTEProgramAssociationServicesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsTechnicalSkillsAssessmentDescriptorSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentCTEProgramAssociationCTEProgramsItemCreatable { get; }
        public Func<IStudentCTEProgramAssociationCTEProgram, bool> IsStudentCTEProgramAssociationCTEProgramIncluded { get; }
        public bool IsStudentCTEProgramAssociationCTEProgramServicesItemCreatable { get; }
        public Func<IStudentCTEProgramAssociationCTEProgramService, bool> IsStudentCTEProgramAssociationCTEProgramServiceIncluded { get; }
        public bool IsStudentCTEProgramAssociationServicesItemCreatable { get; }
        public Func<IStudentCTEProgramAssociationService, bool> IsStudentCTEProgramAssociationServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "NonTraditionalGenderStatus":
                    return IsNonTraditionalGenderStatusSupported;
                case "PrivateCTEProgram":
                    return IsPrivateCTEProgramSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentCTEProgramAssociationCTEPrograms":
                    return IsStudentCTEProgramAssociationCTEProgramsSupported;
                case "StudentCTEProgramAssociationCTEProgramServices":
                    return IsStudentCTEProgramAssociationCTEProgramServicesSupported;
                case "StudentCTEProgramAssociationServices":
                    return IsStudentCTEProgramAssociationServicesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "TechnicalSkillsAssessmentDescriptor":
                    return IsTechnicalSkillsAssessmentDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentCTEProgramAssociationCTEPrograms":
                    return IsStudentCTEProgramAssociationCTEProgramsItemCreatable;
                case "StudentCTEProgramAssociationCTEProgramServices":
                    return IsStudentCTEProgramAssociationCTEProgramServicesItemCreatable;
                case "StudentCTEProgramAssociationServices":
                    return IsStudentCTEProgramAssociationServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCTEProgramAssociationCTEProgram model.
    /// </summary>
    public interface IStudentCTEProgramAssociationCTEProgram : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentCTEProgramAssociation StudentCTEProgramAssociation { get; set; }
        
        string CareerPathwayDescriptor { get; set; }

        // Non-PK properties
        string CIPCode { get; set; }
        bool? CTEProgramCompletionIndicator { get; set; }
        bool? PrimaryCTEProgramIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCTEProgramAssociationCTEProgramMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCTEProgramAssociationCTEProgramMappingContract(
            bool isCIPCodeSupported,
            bool isCTEProgramCompletionIndicatorSupported,
            bool isPrimaryCTEProgramIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCIPCodeSupported = isCIPCodeSupported;
            IsCTEProgramCompletionIndicatorSupported = isCTEProgramCompletionIndicatorSupported;
            IsPrimaryCTEProgramIndicatorSupported = isPrimaryCTEProgramIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCIPCodeSupported { get; }
        public bool IsCTEProgramCompletionIndicatorSupported { get; }
        public bool IsPrimaryCTEProgramIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CIPCode":
                    return IsCIPCodeSupported;
                case "CTEProgramCompletionIndicator":
                    return IsCTEProgramCompletionIndicatorSupported;
                case "PrimaryCTEProgramIndicator":
                    return IsPrimaryCTEProgramIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CareerPathwayDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCTEProgramAssociationCTEProgramService model.
    /// </summary>
    public interface IStudentCTEProgramAssociationCTEProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentCTEProgramAssociation StudentCTEProgramAssociation { get; set; }
        
        string CTEProgramServiceDescriptor { get; set; }

        // Non-PK properties
        string CIPCode { get; set; }
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCTEProgramAssociationCTEProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCTEProgramAssociationCTEProgramServiceMappingContract(
            bool isCIPCodeSupported,
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCIPCodeSupported = isCIPCodeSupported;
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCIPCodeSupported { get; }
        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CIPCode":
                    return IsCIPCodeSupported;
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CTEProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentCTEProgramAssociationService model.
    /// </summary>
    public interface IStudentCTEProgramAssociationService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentCTEProgramAssociation StudentCTEProgramAssociation { get; set; }
        
        string ServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentCTEProgramAssociationServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentCTEProgramAssociationServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentDisciplineIncidentAssociation model.
    /// </summary>
    public interface IStudentDisciplineIncidentAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string StudentParticipationCodeDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; }

        // Resource reference data
        Guid? DisciplineIncidentResourceId { get; set; }
        string DisciplineIncidentDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentDisciplineIncidentAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentDisciplineIncidentAssociationMappingContract(
            bool isDisciplineIncidentReferenceSupported,
            bool isStudentDisciplineIncidentAssociationBehaviorsSupported,
            bool isStudentParticipationCodeDescriptorSupported,
            bool isStudentReferenceSupported,
            bool isStudentDisciplineIncidentAssociationBehaviorsItemCreatable,
            Func<IStudentDisciplineIncidentAssociationBehavior, bool> isStudentDisciplineIncidentAssociationBehaviorIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDisciplineIncidentReferenceSupported = isDisciplineIncidentReferenceSupported;
            IsStudentDisciplineIncidentAssociationBehaviorsSupported = isStudentDisciplineIncidentAssociationBehaviorsSupported;
            IsStudentParticipationCodeDescriptorSupported = isStudentParticipationCodeDescriptorSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentDisciplineIncidentAssociationBehaviorsItemCreatable = isStudentDisciplineIncidentAssociationBehaviorsItemCreatable;
            IsStudentDisciplineIncidentAssociationBehaviorIncluded = isStudentDisciplineIncidentAssociationBehaviorIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDisciplineIncidentReferenceSupported { get; }
        public bool IsStudentDisciplineIncidentAssociationBehaviorsSupported { get; }
        public bool IsStudentParticipationCodeDescriptorSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentDisciplineIncidentAssociationBehaviorsItemCreatable { get; }
        public Func<IStudentDisciplineIncidentAssociationBehavior, bool> IsStudentDisciplineIncidentAssociationBehaviorIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DisciplineIncidentReference":
                    return IsDisciplineIncidentReferenceSupported;
                case "StudentDisciplineIncidentAssociationBehaviors":
                    return IsStudentDisciplineIncidentAssociationBehaviorsSupported;
                case "StudentParticipationCodeDescriptor":
                    return IsStudentParticipationCodeDescriptorSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentDisciplineIncidentAssociationBehaviors":
                    return IsStudentDisciplineIncidentAssociationBehaviorsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentDisciplineIncidentAssociationBehavior model.
    /// </summary>
    public interface IStudentDisciplineIncidentAssociationBehavior : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentDisciplineIncidentAssociation StudentDisciplineIncidentAssociation { get; set; }
        
        string BehaviorDescriptor { get; set; }

        // Non-PK properties
        string BehaviorDetailedDescription { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentDisciplineIncidentAssociationBehaviorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentDisciplineIncidentAssociationBehaviorMappingContract(
            bool isBehaviorDetailedDescriptionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBehaviorDetailedDescriptionSupported = isBehaviorDetailedDescriptionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBehaviorDetailedDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BehaviorDetailedDescription":
                    return IsBehaviorDetailedDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BehaviorDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentDisciplineIncidentBehaviorAssociation model.
    /// </summary>
    public interface IStudentDisciplineIncidentBehaviorAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string BehaviorDescriptor { get; set; }
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string BehaviorDetailedDescription { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode> StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes { get; set; }

        // Resource reference data
        Guid? DisciplineIncidentResourceId { get; set; }
        string DisciplineIncidentDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentDisciplineIncidentBehaviorAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentDisciplineIncidentBehaviorAssociationMappingContract(
            bool isBehaviorDetailedDescriptionSupported,
            bool isDisciplineIncidentReferenceSupported,
            bool isStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported,
            bool isStudentReferenceSupported,
            bool isStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesItemCreatable,
            Func<IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode, bool> isStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBehaviorDetailedDescriptionSupported = isBehaviorDetailedDescriptionSupported;
            IsDisciplineIncidentReferenceSupported = isDisciplineIncidentReferenceSupported;
            IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported = isStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesItemCreatable = isStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesItemCreatable;
            IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeIncluded = isStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBehaviorDetailedDescriptionSupported { get; }
        public bool IsDisciplineIncidentReferenceSupported { get; }
        public bool IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesItemCreatable { get; }
        public Func<IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode, bool> IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BehaviorDetailedDescription":
                    return IsBehaviorDetailedDescriptionSupported;
                case "DisciplineIncidentReference":
                    return IsDisciplineIncidentReferenceSupported;
                case "StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes":
                    return IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BehaviorDescriptor":
                    return true;
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes":
                    return IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode model.
    /// </summary>
    public interface IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentDisciplineIncidentBehaviorAssociation StudentDisciplineIncidentBehaviorAssociation { get; set; }
        
        string DisciplineIncidentParticipationCodeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineIncidentParticipationCodeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentDisciplineIncidentNonOffenderAssociation model.
    /// </summary>
    public interface IStudentDisciplineIncidentNonOffenderAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string IncidentIdentifier { get; set; }
        
        int SchoolId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode> StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes { get; set; }

        // Resource reference data
        Guid? DisciplineIncidentResourceId { get; set; }
        string DisciplineIncidentDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentDisciplineIncidentNonOffenderAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentDisciplineIncidentNonOffenderAssociationMappingContract(
            bool isDisciplineIncidentReferenceSupported,
            bool isStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported,
            bool isStudentReferenceSupported,
            bool isStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesItemCreatable,
            Func<IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode, bool> isStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDisciplineIncidentReferenceSupported = isDisciplineIncidentReferenceSupported;
            IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported = isStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesItemCreatable = isStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesItemCreatable;
            IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeIncluded = isStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDisciplineIncidentReferenceSupported { get; }
        public bool IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesItemCreatable { get; }
        public Func<IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode, bool> IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DisciplineIncidentReference":
                    return IsDisciplineIncidentReferenceSupported;
                case "StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes":
                    return IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IncidentIdentifier":
                    return true;
                case "SchoolId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes":
                    return IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode model.
    /// </summary>
    public interface IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentDisciplineIncidentNonOffenderAssociation StudentDisciplineIncidentNonOffenderAssociation { get; set; }
        
        string DisciplineIncidentParticipationCodeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisciplineIncidentParticipationCodeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociation model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string BarrierToInternetAccessInResidenceDescriptor { get; set; }
        bool? HispanicLatinoEthnicity { get; set; }
        bool? InternetAccessInResidence { get; set; }
        string InternetAccessTypeInResidenceDescriptor { get; set; }
        string InternetPerformanceInResidenceDescriptor { get; set; }
        string LimitedEnglishProficiencyDescriptor { get; set; }
        string LoginId { get; set; }
        string OldEthnicityDescriptor { get; set; }
        string PrimaryLearningDeviceAccessDescriptor { get; set; }
        string PrimaryLearningDeviceAwayFromSchoolDescriptor { get; set; }
        string PrimaryLearningDeviceProviderDescriptor { get; set; }
        string ProfileThumbnail { get; set; }
        string SexDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; }
        ICollection<IStudentEducationOrganizationAssociationAncestryEthnicOrigin> StudentEducationOrganizationAssociationAncestryEthnicOrigins { get; set; }
        ICollection<IStudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; }
        ICollection<IStudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; }
        ICollection<IStudentEducationOrganizationAssociationElectronicMail> StudentEducationOrganizationAssociationElectronicMails { get; set; }
        ICollection<IStudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; }
        ICollection<IStudentEducationOrganizationAssociationLanguage> StudentEducationOrganizationAssociationLanguages { get; set; }
        ICollection<IStudentEducationOrganizationAssociationProgramParticipation> StudentEducationOrganizationAssociationProgramParticipations { get; set; }
        ICollection<IStudentEducationOrganizationAssociationRace> StudentEducationOrganizationAssociationRaces { get; set; }
        ICollection<IStudentEducationOrganizationAssociationStudentCharacteristic> StudentEducationOrganizationAssociationStudentCharacteristics { get; set; }
        ICollection<IStudentEducationOrganizationAssociationStudentIdentificationCode> StudentEducationOrganizationAssociationStudentIdentificationCodes { get; set; }
        ICollection<IStudentEducationOrganizationAssociationStudentIndicator> StudentEducationOrganizationAssociationStudentIndicators { get; set; }
        ICollection<IStudentEducationOrganizationAssociationTelephone> StudentEducationOrganizationAssociationTelephones { get; set; }
        ICollection<IStudentEducationOrganizationAssociationTribalAffiliation> StudentEducationOrganizationAssociationTribalAffiliations { get; set; }

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationMappingContract(
            bool isBarrierToInternetAccessInResidenceDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isHispanicLatinoEthnicitySupported,
            bool isInternetAccessInResidenceSupported,
            bool isInternetAccessTypeInResidenceDescriptorSupported,
            bool isInternetPerformanceInResidenceDescriptorSupported,
            bool isLimitedEnglishProficiencyDescriptorSupported,
            bool isLoginIdSupported,
            bool isOldEthnicityDescriptorSupported,
            bool isPrimaryLearningDeviceAccessDescriptorSupported,
            bool isPrimaryLearningDeviceAwayFromSchoolDescriptorSupported,
            bool isPrimaryLearningDeviceProviderDescriptorSupported,
            bool isProfileThumbnailSupported,
            bool isSexDescriptorSupported,
            bool isStudentEducationOrganizationAssociationAddressesSupported,
            bool isStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported,
            bool isStudentEducationOrganizationAssociationCohortYearsSupported,
            bool isStudentEducationOrganizationAssociationDisabilitiesSupported,
            bool isStudentEducationOrganizationAssociationElectronicMailsSupported,
            bool isStudentEducationOrganizationAssociationInternationalAddressesSupported,
            bool isStudentEducationOrganizationAssociationLanguagesSupported,
            bool isStudentEducationOrganizationAssociationProgramParticipationsSupported,
            bool isStudentEducationOrganizationAssociationRacesSupported,
            bool isStudentEducationOrganizationAssociationStudentCharacteristicsSupported,
            bool isStudentEducationOrganizationAssociationStudentIdentificationCodesSupported,
            bool isStudentEducationOrganizationAssociationStudentIndicatorsSupported,
            bool isStudentEducationOrganizationAssociationTelephonesSupported,
            bool isStudentEducationOrganizationAssociationTribalAffiliationsSupported,
            bool isStudentReferenceSupported,
            bool isStudentEducationOrganizationAssociationAddressesItemCreatable,
            Func<IStudentEducationOrganizationAssociationAddress, bool> isStudentEducationOrganizationAssociationAddressIncluded,
            bool isStudentEducationOrganizationAssociationAncestryEthnicOriginsItemCreatable,
            Func<IStudentEducationOrganizationAssociationAncestryEthnicOrigin, bool> isStudentEducationOrganizationAssociationAncestryEthnicOriginIncluded,
            bool isStudentEducationOrganizationAssociationCohortYearsItemCreatable,
            Func<IStudentEducationOrganizationAssociationCohortYear, bool> isStudentEducationOrganizationAssociationCohortYearIncluded,
            bool isStudentEducationOrganizationAssociationDisabilitiesItemCreatable,
            Func<IStudentEducationOrganizationAssociationDisability, bool> isStudentEducationOrganizationAssociationDisabilityIncluded,
            bool isStudentEducationOrganizationAssociationElectronicMailsItemCreatable,
            Func<IStudentEducationOrganizationAssociationElectronicMail, bool> isStudentEducationOrganizationAssociationElectronicMailIncluded,
            bool isStudentEducationOrganizationAssociationInternationalAddressesItemCreatable,
            Func<IStudentEducationOrganizationAssociationInternationalAddress, bool> isStudentEducationOrganizationAssociationInternationalAddressIncluded,
            bool isStudentEducationOrganizationAssociationLanguagesItemCreatable,
            Func<IStudentEducationOrganizationAssociationLanguage, bool> isStudentEducationOrganizationAssociationLanguageIncluded,
            bool isStudentEducationOrganizationAssociationProgramParticipationsItemCreatable,
            Func<IStudentEducationOrganizationAssociationProgramParticipation, bool> isStudentEducationOrganizationAssociationProgramParticipationIncluded,
            bool isStudentEducationOrganizationAssociationRacesItemCreatable,
            Func<IStudentEducationOrganizationAssociationRace, bool> isStudentEducationOrganizationAssociationRaceIncluded,
            bool isStudentEducationOrganizationAssociationStudentCharacteristicsItemCreatable,
            Func<IStudentEducationOrganizationAssociationStudentCharacteristic, bool> isStudentEducationOrganizationAssociationStudentCharacteristicIncluded,
            bool isStudentEducationOrganizationAssociationStudentIdentificationCodesItemCreatable,
            Func<IStudentEducationOrganizationAssociationStudentIdentificationCode, bool> isStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded,
            bool isStudentEducationOrganizationAssociationStudentIndicatorsItemCreatable,
            Func<IStudentEducationOrganizationAssociationStudentIndicator, bool> isStudentEducationOrganizationAssociationStudentIndicatorIncluded,
            bool isStudentEducationOrganizationAssociationTelephonesItemCreatable,
            Func<IStudentEducationOrganizationAssociationTelephone, bool> isStudentEducationOrganizationAssociationTelephoneIncluded,
            bool isStudentEducationOrganizationAssociationTribalAffiliationsItemCreatable,
            Func<IStudentEducationOrganizationAssociationTribalAffiliation, bool> isStudentEducationOrganizationAssociationTribalAffiliationIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBarrierToInternetAccessInResidenceDescriptorSupported = isBarrierToInternetAccessInResidenceDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsHispanicLatinoEthnicitySupported = isHispanicLatinoEthnicitySupported;
            IsInternetAccessInResidenceSupported = isInternetAccessInResidenceSupported;
            IsInternetAccessTypeInResidenceDescriptorSupported = isInternetAccessTypeInResidenceDescriptorSupported;
            IsInternetPerformanceInResidenceDescriptorSupported = isInternetPerformanceInResidenceDescriptorSupported;
            IsLimitedEnglishProficiencyDescriptorSupported = isLimitedEnglishProficiencyDescriptorSupported;
            IsLoginIdSupported = isLoginIdSupported;
            IsOldEthnicityDescriptorSupported = isOldEthnicityDescriptorSupported;
            IsPrimaryLearningDeviceAccessDescriptorSupported = isPrimaryLearningDeviceAccessDescriptorSupported;
            IsPrimaryLearningDeviceAwayFromSchoolDescriptorSupported = isPrimaryLearningDeviceAwayFromSchoolDescriptorSupported;
            IsPrimaryLearningDeviceProviderDescriptorSupported = isPrimaryLearningDeviceProviderDescriptorSupported;
            IsProfileThumbnailSupported = isProfileThumbnailSupported;
            IsSexDescriptorSupported = isSexDescriptorSupported;
            IsStudentEducationOrganizationAssociationAddressesSupported = isStudentEducationOrganizationAssociationAddressesSupported;
            IsStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported = isStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported;
            IsStudentEducationOrganizationAssociationCohortYearsSupported = isStudentEducationOrganizationAssociationCohortYearsSupported;
            IsStudentEducationOrganizationAssociationDisabilitiesSupported = isStudentEducationOrganizationAssociationDisabilitiesSupported;
            IsStudentEducationOrganizationAssociationElectronicMailsSupported = isStudentEducationOrganizationAssociationElectronicMailsSupported;
            IsStudentEducationOrganizationAssociationInternationalAddressesSupported = isStudentEducationOrganizationAssociationInternationalAddressesSupported;
            IsStudentEducationOrganizationAssociationLanguagesSupported = isStudentEducationOrganizationAssociationLanguagesSupported;
            IsStudentEducationOrganizationAssociationProgramParticipationsSupported = isStudentEducationOrganizationAssociationProgramParticipationsSupported;
            IsStudentEducationOrganizationAssociationRacesSupported = isStudentEducationOrganizationAssociationRacesSupported;
            IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported = isStudentEducationOrganizationAssociationStudentCharacteristicsSupported;
            IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported = isStudentEducationOrganizationAssociationStudentIdentificationCodesSupported;
            IsStudentEducationOrganizationAssociationStudentIndicatorsSupported = isStudentEducationOrganizationAssociationStudentIndicatorsSupported;
            IsStudentEducationOrganizationAssociationTelephonesSupported = isStudentEducationOrganizationAssociationTelephonesSupported;
            IsStudentEducationOrganizationAssociationTribalAffiliationsSupported = isStudentEducationOrganizationAssociationTribalAffiliationsSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentEducationOrganizationAssociationAddressesItemCreatable = isStudentEducationOrganizationAssociationAddressesItemCreatable;
            IsStudentEducationOrganizationAssociationAddressIncluded = isStudentEducationOrganizationAssociationAddressIncluded;
            IsStudentEducationOrganizationAssociationAncestryEthnicOriginsItemCreatable = isStudentEducationOrganizationAssociationAncestryEthnicOriginsItemCreatable;
            IsStudentEducationOrganizationAssociationAncestryEthnicOriginIncluded = isStudentEducationOrganizationAssociationAncestryEthnicOriginIncluded;
            IsStudentEducationOrganizationAssociationCohortYearsItemCreatable = isStudentEducationOrganizationAssociationCohortYearsItemCreatable;
            IsStudentEducationOrganizationAssociationCohortYearIncluded = isStudentEducationOrganizationAssociationCohortYearIncluded;
            IsStudentEducationOrganizationAssociationDisabilitiesItemCreatable = isStudentEducationOrganizationAssociationDisabilitiesItemCreatable;
            IsStudentEducationOrganizationAssociationDisabilityIncluded = isStudentEducationOrganizationAssociationDisabilityIncluded;
            IsStudentEducationOrganizationAssociationElectronicMailsItemCreatable = isStudentEducationOrganizationAssociationElectronicMailsItemCreatable;
            IsStudentEducationOrganizationAssociationElectronicMailIncluded = isStudentEducationOrganizationAssociationElectronicMailIncluded;
            IsStudentEducationOrganizationAssociationInternationalAddressesItemCreatable = isStudentEducationOrganizationAssociationInternationalAddressesItemCreatable;
            IsStudentEducationOrganizationAssociationInternationalAddressIncluded = isStudentEducationOrganizationAssociationInternationalAddressIncluded;
            IsStudentEducationOrganizationAssociationLanguagesItemCreatable = isStudentEducationOrganizationAssociationLanguagesItemCreatable;
            IsStudentEducationOrganizationAssociationLanguageIncluded = isStudentEducationOrganizationAssociationLanguageIncluded;
            IsStudentEducationOrganizationAssociationProgramParticipationsItemCreatable = isStudentEducationOrganizationAssociationProgramParticipationsItemCreatable;
            IsStudentEducationOrganizationAssociationProgramParticipationIncluded = isStudentEducationOrganizationAssociationProgramParticipationIncluded;
            IsStudentEducationOrganizationAssociationRacesItemCreatable = isStudentEducationOrganizationAssociationRacesItemCreatable;
            IsStudentEducationOrganizationAssociationRaceIncluded = isStudentEducationOrganizationAssociationRaceIncluded;
            IsStudentEducationOrganizationAssociationStudentCharacteristicsItemCreatable = isStudentEducationOrganizationAssociationStudentCharacteristicsItemCreatable;
            IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded = isStudentEducationOrganizationAssociationStudentCharacteristicIncluded;
            IsStudentEducationOrganizationAssociationStudentIdentificationCodesItemCreatable = isStudentEducationOrganizationAssociationStudentIdentificationCodesItemCreatable;
            IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded = isStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded;
            IsStudentEducationOrganizationAssociationStudentIndicatorsItemCreatable = isStudentEducationOrganizationAssociationStudentIndicatorsItemCreatable;
            IsStudentEducationOrganizationAssociationStudentIndicatorIncluded = isStudentEducationOrganizationAssociationStudentIndicatorIncluded;
            IsStudentEducationOrganizationAssociationTelephonesItemCreatable = isStudentEducationOrganizationAssociationTelephonesItemCreatable;
            IsStudentEducationOrganizationAssociationTelephoneIncluded = isStudentEducationOrganizationAssociationTelephoneIncluded;
            IsStudentEducationOrganizationAssociationTribalAffiliationsItemCreatable = isStudentEducationOrganizationAssociationTribalAffiliationsItemCreatable;
            IsStudentEducationOrganizationAssociationTribalAffiliationIncluded = isStudentEducationOrganizationAssociationTribalAffiliationIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBarrierToInternetAccessInResidenceDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsHispanicLatinoEthnicitySupported { get; }
        public bool IsInternetAccessInResidenceSupported { get; }
        public bool IsInternetAccessTypeInResidenceDescriptorSupported { get; }
        public bool IsInternetPerformanceInResidenceDescriptorSupported { get; }
        public bool IsLimitedEnglishProficiencyDescriptorSupported { get; }
        public bool IsLoginIdSupported { get; }
        public bool IsOldEthnicityDescriptorSupported { get; }
        public bool IsPrimaryLearningDeviceAccessDescriptorSupported { get; }
        public bool IsPrimaryLearningDeviceAwayFromSchoolDescriptorSupported { get; }
        public bool IsPrimaryLearningDeviceProviderDescriptorSupported { get; }
        public bool IsProfileThumbnailSupported { get; }
        public bool IsSexDescriptorSupported { get; }
        public bool IsStudentEducationOrganizationAssociationAddressesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationCohortYearsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationDisabilitiesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationElectronicMailsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationInternationalAddressesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationLanguagesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationProgramParticipationsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationRacesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentIndicatorsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationTelephonesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationTribalAffiliationsSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentEducationOrganizationAssociationAddressesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationAddress, bool> IsStudentEducationOrganizationAssociationAddressIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationAncestryEthnicOriginsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationAncestryEthnicOrigin, bool> IsStudentEducationOrganizationAssociationAncestryEthnicOriginIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationCohortYearsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationCohortYear, bool> IsStudentEducationOrganizationAssociationCohortYearIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationDisabilitiesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationDisability, bool> IsStudentEducationOrganizationAssociationDisabilityIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationElectronicMailsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationElectronicMail, bool> IsStudentEducationOrganizationAssociationElectronicMailIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationInternationalAddressesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationInternationalAddress, bool> IsStudentEducationOrganizationAssociationInternationalAddressIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationLanguagesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationLanguage, bool> IsStudentEducationOrganizationAssociationLanguageIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationProgramParticipationsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationProgramParticipation, bool> IsStudentEducationOrganizationAssociationProgramParticipationIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationRacesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationRace, bool> IsStudentEducationOrganizationAssociationRaceIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationStudentCharacteristicsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationStudentCharacteristic, bool> IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationStudentIdentificationCodesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationStudentIdentificationCode, bool> IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationStudentIndicatorsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationStudentIndicator, bool> IsStudentEducationOrganizationAssociationStudentIndicatorIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationTelephonesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationTelephone, bool> IsStudentEducationOrganizationAssociationTelephoneIncluded { get; }
        public bool IsStudentEducationOrganizationAssociationTribalAffiliationsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationTribalAffiliation, bool> IsStudentEducationOrganizationAssociationTribalAffiliationIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BarrierToInternetAccessInResidenceDescriptor":
                    return IsBarrierToInternetAccessInResidenceDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "HispanicLatinoEthnicity":
                    return IsHispanicLatinoEthnicitySupported;
                case "InternetAccessInResidence":
                    return IsInternetAccessInResidenceSupported;
                case "InternetAccessTypeInResidenceDescriptor":
                    return IsInternetAccessTypeInResidenceDescriptorSupported;
                case "InternetPerformanceInResidenceDescriptor":
                    return IsInternetPerformanceInResidenceDescriptorSupported;
                case "LimitedEnglishProficiencyDescriptor":
                    return IsLimitedEnglishProficiencyDescriptorSupported;
                case "LoginId":
                    return IsLoginIdSupported;
                case "OldEthnicityDescriptor":
                    return IsOldEthnicityDescriptorSupported;
                case "PrimaryLearningDeviceAccessDescriptor":
                    return IsPrimaryLearningDeviceAccessDescriptorSupported;
                case "PrimaryLearningDeviceAwayFromSchoolDescriptor":
                    return IsPrimaryLearningDeviceAwayFromSchoolDescriptorSupported;
                case "PrimaryLearningDeviceProviderDescriptor":
                    return IsPrimaryLearningDeviceProviderDescriptorSupported;
                case "ProfileThumbnail":
                    return IsProfileThumbnailSupported;
                case "SexDescriptor":
                    return IsSexDescriptorSupported;
                case "StudentEducationOrganizationAssociationAddresses":
                    return IsStudentEducationOrganizationAssociationAddressesSupported;
                case "StudentEducationOrganizationAssociationAncestryEthnicOrigins":
                    return IsStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported;
                case "StudentEducationOrganizationAssociationCohortYears":
                    return IsStudentEducationOrganizationAssociationCohortYearsSupported;
                case "StudentEducationOrganizationAssociationDisabilities":
                    return IsStudentEducationOrganizationAssociationDisabilitiesSupported;
                case "StudentEducationOrganizationAssociationElectronicMails":
                    return IsStudentEducationOrganizationAssociationElectronicMailsSupported;
                case "StudentEducationOrganizationAssociationInternationalAddresses":
                    return IsStudentEducationOrganizationAssociationInternationalAddressesSupported;
                case "StudentEducationOrganizationAssociationLanguages":
                    return IsStudentEducationOrganizationAssociationLanguagesSupported;
                case "StudentEducationOrganizationAssociationProgramParticipations":
                    return IsStudentEducationOrganizationAssociationProgramParticipationsSupported;
                case "StudentEducationOrganizationAssociationRaces":
                    return IsStudentEducationOrganizationAssociationRacesSupported;
                case "StudentEducationOrganizationAssociationStudentCharacteristics":
                    return IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported;
                case "StudentEducationOrganizationAssociationStudentIdentificationCodes":
                    return IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported;
                case "StudentEducationOrganizationAssociationStudentIndicators":
                    return IsStudentEducationOrganizationAssociationStudentIndicatorsSupported;
                case "StudentEducationOrganizationAssociationTelephones":
                    return IsStudentEducationOrganizationAssociationTelephonesSupported;
                case "StudentEducationOrganizationAssociationTribalAffiliations":
                    return IsStudentEducationOrganizationAssociationTribalAffiliationsSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationAddresses":
                    return IsStudentEducationOrganizationAssociationAddressesItemCreatable;
                case "StudentEducationOrganizationAssociationAncestryEthnicOrigins":
                    return IsStudentEducationOrganizationAssociationAncestryEthnicOriginsItemCreatable;
                case "StudentEducationOrganizationAssociationCohortYears":
                    return IsStudentEducationOrganizationAssociationCohortYearsItemCreatable;
                case "StudentEducationOrganizationAssociationDisabilities":
                    return IsStudentEducationOrganizationAssociationDisabilitiesItemCreatable;
                case "StudentEducationOrganizationAssociationElectronicMails":
                    return IsStudentEducationOrganizationAssociationElectronicMailsItemCreatable;
                case "StudentEducationOrganizationAssociationInternationalAddresses":
                    return IsStudentEducationOrganizationAssociationInternationalAddressesItemCreatable;
                case "StudentEducationOrganizationAssociationLanguages":
                    return IsStudentEducationOrganizationAssociationLanguagesItemCreatable;
                case "StudentEducationOrganizationAssociationProgramParticipations":
                    return IsStudentEducationOrganizationAssociationProgramParticipationsItemCreatable;
                case "StudentEducationOrganizationAssociationRaces":
                    return IsStudentEducationOrganizationAssociationRacesItemCreatable;
                case "StudentEducationOrganizationAssociationStudentCharacteristics":
                    return IsStudentEducationOrganizationAssociationStudentCharacteristicsItemCreatable;
                case "StudentEducationOrganizationAssociationStudentIdentificationCodes":
                    return IsStudentEducationOrganizationAssociationStudentIdentificationCodesItemCreatable;
                case "StudentEducationOrganizationAssociationStudentIndicators":
                    return IsStudentEducationOrganizationAssociationStudentIndicatorsItemCreatable;
                case "StudentEducationOrganizationAssociationTelephones":
                    return IsStudentEducationOrganizationAssociationTelephonesItemCreatable;
                case "StudentEducationOrganizationAssociationTribalAffiliations":
                    return IsStudentEducationOrganizationAssociationTribalAffiliationsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationAddress model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string AddressTypeDescriptor { get; set; }
        
        string City { get; set; }
        
        string PostalCode { get; set; }
        
        string StateAbbreviationDescriptor { get; set; }
        
        string StreetNumberName { get; set; }

        // Non-PK properties
        string ApartmentRoomSuiteNumber { get; set; }
        string BuildingSiteNumber { get; set; }
        string CongressionalDistrict { get; set; }
        string CountyFIPSCode { get; set; }
        bool? DoNotPublishIndicator { get; set; }
        string Latitude { get; set; }
        string LocaleDescriptor { get; set; }
        string Longitude { get; set; }
        string NameOfCounty { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationAddressPeriod> StudentEducationOrganizationAssociationAddressPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationAddressMappingContract(
            bool isApartmentRoomSuiteNumberSupported,
            bool isBuildingSiteNumberSupported,
            bool isCongressionalDistrictSupported,
            bool isCountyFIPSCodeSupported,
            bool isDoNotPublishIndicatorSupported,
            bool isLatitudeSupported,
            bool isLocaleDescriptorSupported,
            bool isLongitudeSupported,
            bool isNameOfCountySupported,
            bool isStudentEducationOrganizationAssociationAddressPeriodsSupported,
            bool isStudentEducationOrganizationAssociationAddressPeriodsItemCreatable,
            Func<IStudentEducationOrganizationAssociationAddressPeriod, bool> isStudentEducationOrganizationAssociationAddressPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsApartmentRoomSuiteNumberSupported = isApartmentRoomSuiteNumberSupported;
            IsBuildingSiteNumberSupported = isBuildingSiteNumberSupported;
            IsCongressionalDistrictSupported = isCongressionalDistrictSupported;
            IsCountyFIPSCodeSupported = isCountyFIPSCodeSupported;
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLocaleDescriptorSupported = isLocaleDescriptorSupported;
            IsLongitudeSupported = isLongitudeSupported;
            IsNameOfCountySupported = isNameOfCountySupported;
            IsStudentEducationOrganizationAssociationAddressPeriodsSupported = isStudentEducationOrganizationAssociationAddressPeriodsSupported;
            IsStudentEducationOrganizationAssociationAddressPeriodsItemCreatable = isStudentEducationOrganizationAssociationAddressPeriodsItemCreatable;
            IsStudentEducationOrganizationAssociationAddressPeriodIncluded = isStudentEducationOrganizationAssociationAddressPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsApartmentRoomSuiteNumberSupported { get; }
        public bool IsBuildingSiteNumberSupported { get; }
        public bool IsCongressionalDistrictSupported { get; }
        public bool IsCountyFIPSCodeSupported { get; }
        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLocaleDescriptorSupported { get; }
        public bool IsLongitudeSupported { get; }
        public bool IsNameOfCountySupported { get; }
        public bool IsStudentEducationOrganizationAssociationAddressPeriodsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationAddressPeriodsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationAddressPeriod, bool> IsStudentEducationOrganizationAssociationAddressPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ApartmentRoomSuiteNumber":
                    return IsApartmentRoomSuiteNumberSupported;
                case "BuildingSiteNumber":
                    return IsBuildingSiteNumberSupported;
                case "CongressionalDistrict":
                    return IsCongressionalDistrictSupported;
                case "CountyFIPSCode":
                    return IsCountyFIPSCodeSupported;
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "LocaleDescriptor":
                    return IsLocaleDescriptorSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                case "NameOfCounty":
                    return IsNameOfCountySupported;
                case "StudentEducationOrganizationAssociationAddressPeriods":
                    return IsStudentEducationOrganizationAssociationAddressPeriodsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                case "City":
                    return true;
                case "PostalCode":
                    return true;
                case "StateAbbreviationDescriptor":
                    return true;
                case "StreetNumberName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationAddressPeriods":
                    return IsStudentEducationOrganizationAssociationAddressPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationAddressPeriod model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationAddressPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociationAddress StudentEducationOrganizationAssociationAddress { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationAddressPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationAddressPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationAncestryEthnicOrigin model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationAncestryEthnicOrigin : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string AncestryEthnicOriginDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationAncestryEthnicOriginMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationAncestryEthnicOriginMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AncestryEthnicOriginDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationCohortYear model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationCohortYear : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string CohortYearTypeDescriptor { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        string TermDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationCohortYearMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationCohortYearMappingContract(
            bool isSchoolYearTypeReferenceSupported,
            bool isTermDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsTermDescriptorSupported = isTermDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsTermDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "TermDescriptor":
                    return IsTermDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CohortYearTypeDescriptor":
                    return true;
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationDisability model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationDisability : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string DisabilityDescriptor { get; set; }

        // Non-PK properties
        string DisabilityDeterminationSourceTypeDescriptor { get; set; }
        string DisabilityDiagnosis { get; set; }
        int? OrderOfDisability { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationDisabilityDesignation> StudentEducationOrganizationAssociationDisabilityDesignations { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationDisabilityMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationDisabilityMappingContract(
            bool isDisabilityDeterminationSourceTypeDescriptorSupported,
            bool isDisabilityDiagnosisSupported,
            bool isOrderOfDisabilitySupported,
            bool isStudentEducationOrganizationAssociationDisabilityDesignationsSupported,
            bool isStudentEducationOrganizationAssociationDisabilityDesignationsItemCreatable,
            Func<IStudentEducationOrganizationAssociationDisabilityDesignation, bool> isStudentEducationOrganizationAssociationDisabilityDesignationIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDisabilityDeterminationSourceTypeDescriptorSupported = isDisabilityDeterminationSourceTypeDescriptorSupported;
            IsDisabilityDiagnosisSupported = isDisabilityDiagnosisSupported;
            IsOrderOfDisabilitySupported = isOrderOfDisabilitySupported;
            IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported = isStudentEducationOrganizationAssociationDisabilityDesignationsSupported;
            IsStudentEducationOrganizationAssociationDisabilityDesignationsItemCreatable = isStudentEducationOrganizationAssociationDisabilityDesignationsItemCreatable;
            IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded = isStudentEducationOrganizationAssociationDisabilityDesignationIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; }
        public bool IsDisabilityDiagnosisSupported { get; }
        public bool IsOrderOfDisabilitySupported { get; }
        public bool IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationDisabilityDesignationsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationDisabilityDesignation, bool> IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DisabilityDeterminationSourceTypeDescriptor":
                    return IsDisabilityDeterminationSourceTypeDescriptorSupported;
                case "DisabilityDiagnosis":
                    return IsDisabilityDiagnosisSupported;
                case "OrderOfDisability":
                    return IsOrderOfDisabilitySupported;
                case "StudentEducationOrganizationAssociationDisabilityDesignations":
                    return IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationDisabilityDesignations":
                    return IsStudentEducationOrganizationAssociationDisabilityDesignationsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationDisabilityDesignation model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationDisabilityDesignation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociationDisability StudentEducationOrganizationAssociationDisability { get; set; }
        
        string DisabilityDesignationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationDisabilityDesignationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationDisabilityDesignationMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDesignationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationElectronicMail model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationElectronicMail : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string ElectronicMailAddress { get; set; }
        
        string ElectronicMailTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        bool? PrimaryEmailAddressIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationElectronicMailMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationElectronicMailMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isPrimaryEmailAddressIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsPrimaryEmailAddressIndicatorSupported = isPrimaryEmailAddressIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsPrimaryEmailAddressIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "PrimaryEmailAddressIndicator":
                    return IsPrimaryEmailAddressIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ElectronicMailAddress":
                    return true;
                case "ElectronicMailTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationInternationalAddress model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationInternationalAddress : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string AddressTypeDescriptor { get; set; }

        // Non-PK properties
        string AddressLine1 { get; set; }
        string AddressLine2 { get; set; }
        string AddressLine3 { get; set; }
        string AddressLine4 { get; set; }
        DateTime? BeginDate { get; set; }
        string CountryDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        string Latitude { get; set; }
        string Longitude { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationInternationalAddressMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationInternationalAddressMappingContract(
            bool isAddressLine1Supported,
            bool isAddressLine2Supported,
            bool isAddressLine3Supported,
            bool isAddressLine4Supported,
            bool isBeginDateSupported,
            bool isCountryDescriptorSupported,
            bool isEndDateSupported,
            bool isLatitudeSupported,
            bool isLongitudeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAddressLine1Supported = isAddressLine1Supported;
            IsAddressLine2Supported = isAddressLine2Supported;
            IsAddressLine3Supported = isAddressLine3Supported;
            IsAddressLine4Supported = isAddressLine4Supported;
            IsBeginDateSupported = isBeginDateSupported;
            IsCountryDescriptorSupported = isCountryDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsLatitudeSupported = isLatitudeSupported;
            IsLongitudeSupported = isLongitudeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAddressLine1Supported { get; }
        public bool IsAddressLine2Supported { get; }
        public bool IsAddressLine3Supported { get; }
        public bool IsAddressLine4Supported { get; }
        public bool IsBeginDateSupported { get; }
        public bool IsCountryDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsLatitudeSupported { get; }
        public bool IsLongitudeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AddressLine1":
                    return IsAddressLine1Supported;
                case "AddressLine2":
                    return IsAddressLine2Supported;
                case "AddressLine3":
                    return IsAddressLine3Supported;
                case "AddressLine4":
                    return IsAddressLine4Supported;
                case "BeginDate":
                    return IsBeginDateSupported;
                case "CountryDescriptor":
                    return IsCountryDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "Latitude":
                    return IsLatitudeSupported;
                case "Longitude":
                    return IsLongitudeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AddressTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationLanguage model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationLanguage : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string LanguageDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationLanguageUse> StudentEducationOrganizationAssociationLanguageUses { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationLanguageMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationLanguageMappingContract(
            bool isStudentEducationOrganizationAssociationLanguageUsesSupported,
            bool isStudentEducationOrganizationAssociationLanguageUsesItemCreatable,
            Func<IStudentEducationOrganizationAssociationLanguageUse, bool> isStudentEducationOrganizationAssociationLanguageUseIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentEducationOrganizationAssociationLanguageUsesSupported = isStudentEducationOrganizationAssociationLanguageUsesSupported;
            IsStudentEducationOrganizationAssociationLanguageUsesItemCreatable = isStudentEducationOrganizationAssociationLanguageUsesItemCreatable;
            IsStudentEducationOrganizationAssociationLanguageUseIncluded = isStudentEducationOrganizationAssociationLanguageUseIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentEducationOrganizationAssociationLanguageUsesSupported { get; }
        public bool IsStudentEducationOrganizationAssociationLanguageUsesItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationLanguageUse, bool> IsStudentEducationOrganizationAssociationLanguageUseIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationLanguageUses":
                    return IsStudentEducationOrganizationAssociationLanguageUsesSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationLanguageUses":
                    return IsStudentEducationOrganizationAssociationLanguageUsesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationLanguageUse model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationLanguageUse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociationLanguage StudentEducationOrganizationAssociationLanguage { get; set; }
        
        string LanguageUseDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationLanguageUseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationLanguageUseMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageUseDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationProgramParticipation model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationProgramParticipation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties
        DateTime? BeginDate { get; set; }
        string DesignatedBy { get; set; }
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationProgramParticipationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationProgramParticipationMappingContract(
            bool isBeginDateSupported,
            bool isDesignatedBySupported,
            bool isEndDateSupported,
            bool isStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported,
            bool isStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsItemCreatable,
            Func<IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic, bool> isStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsBeginDateSupported = isBeginDateSupported;
            IsDesignatedBySupported = isDesignatedBySupported;
            IsEndDateSupported = isEndDateSupported;
            IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported = isStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported;
            IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsItemCreatable = isStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsItemCreatable;
            IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded = isStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsBeginDateSupported { get; }
        public bool IsDesignatedBySupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic, bool> IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "BeginDate":
                    return IsBeginDateSupported;
                case "DesignatedBy":
                    return IsDesignatedBySupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics":
                    return IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics":
                    return IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociationProgramParticipation StudentEducationOrganizationAssociationProgramParticipation { get; set; }
        
        string ProgramCharacteristicDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ProgramCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationRace model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationRace : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string RaceDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationRaceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationRaceMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "RaceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationStudentCharacteristic model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentCharacteristic : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string StudentCharacteristicDescriptor { get; set; }

        // Non-PK properties
        string DesignatedBy { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationStudentCharacteristicPeriod> StudentEducationOrganizationAssociationStudentCharacteristicPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationStudentCharacteristicMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationStudentCharacteristicMappingContract(
            bool isDesignatedBySupported,
            bool isStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported,
            bool isStudentEducationOrganizationAssociationStudentCharacteristicPeriodsItemCreatable,
            Func<IStudentEducationOrganizationAssociationStudentCharacteristicPeriod, bool> isStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDesignatedBySupported = isDesignatedBySupported;
            IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported = isStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported;
            IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsItemCreatable = isStudentEducationOrganizationAssociationStudentCharacteristicPeriodsItemCreatable;
            IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded = isStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDesignatedBySupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationStudentCharacteristicPeriod, bool> IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DesignatedBy":
                    return IsDesignatedBySupported;
                case "StudentEducationOrganizationAssociationStudentCharacteristicPeriods":
                    return IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StudentCharacteristicDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationStudentCharacteristicPeriods":
                    return IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationStudentCharacteristicPeriod model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentCharacteristicPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociationStudentCharacteristic StudentEducationOrganizationAssociationStudentCharacteristic { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationStudentCharacteristicPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationStudentCharacteristicPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationStudentIdentificationCode model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentIdentificationCode : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string AssigningOrganizationIdentificationCode { get; set; }
        
        string StudentIdentificationSystemDescriptor { get; set; }

        // Non-PK properties
        string IdentificationCode { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationStudentIdentificationCodeMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationStudentIdentificationCodeMappingContract(
            bool isIdentificationCodeSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsIdentificationCodeSupported = isIdentificationCodeSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsIdentificationCodeSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "IdentificationCode":
                    return IsIdentificationCodeSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AssigningOrganizationIdentificationCode":
                    return true;
                case "StudentIdentificationSystemDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationStudentIndicator model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentIndicator : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string IndicatorName { get; set; }

        // Non-PK properties
        string DesignatedBy { get; set; }
        string Indicator { get; set; }
        string IndicatorGroup { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentEducationOrganizationAssociationStudentIndicatorPeriod> StudentEducationOrganizationAssociationStudentIndicatorPeriods { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationStudentIndicatorMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationStudentIndicatorMappingContract(
            bool isDesignatedBySupported,
            bool isIndicatorSupported,
            bool isIndicatorGroupSupported,
            bool isStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported,
            bool isStudentEducationOrganizationAssociationStudentIndicatorPeriodsItemCreatable,
            Func<IStudentEducationOrganizationAssociationStudentIndicatorPeriod, bool> isStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDesignatedBySupported = isDesignatedBySupported;
            IsIndicatorSupported = isIndicatorSupported;
            IsIndicatorGroupSupported = isIndicatorGroupSupported;
            IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported = isStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported;
            IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsItemCreatable = isStudentEducationOrganizationAssociationStudentIndicatorPeriodsItemCreatable;
            IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded = isStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDesignatedBySupported { get; }
        public bool IsIndicatorSupported { get; }
        public bool IsIndicatorGroupSupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported { get; }
        public bool IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsItemCreatable { get; }
        public Func<IStudentEducationOrganizationAssociationStudentIndicatorPeriod, bool> IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DesignatedBy":
                    return IsDesignatedBySupported;
                case "Indicator":
                    return IsIndicatorSupported;
                case "IndicatorGroup":
                    return IsIndicatorGroupSupported;
                case "StudentEducationOrganizationAssociationStudentIndicatorPeriods":
                    return IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IndicatorName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentEducationOrganizationAssociationStudentIndicatorPeriods":
                    return IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationStudentIndicatorPeriod model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentIndicatorPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociationStudentIndicator StudentEducationOrganizationAssociationStudentIndicator { get; set; }
        
        DateTime BeginDate { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationStudentIndicatorPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationStudentIndicatorPeriodMappingContract(
            bool isEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEndDateSupported = isEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EndDate":
                    return IsEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationTelephone model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationTelephone : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string TelephoneNumber { get; set; }
        
        string TelephoneNumberTypeDescriptor { get; set; }

        // Non-PK properties
        bool? DoNotPublishIndicator { get; set; }
        int? OrderOfPriority { get; set; }
        bool? TextMessageCapabilityIndicator { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationTelephoneMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationTelephoneMappingContract(
            bool isDoNotPublishIndicatorSupported,
            bool isOrderOfPrioritySupported,
            bool isTextMessageCapabilityIndicatorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDoNotPublishIndicatorSupported = isDoNotPublishIndicatorSupported;
            IsOrderOfPrioritySupported = isOrderOfPrioritySupported;
            IsTextMessageCapabilityIndicatorSupported = isTextMessageCapabilityIndicatorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDoNotPublishIndicatorSupported { get; }
        public bool IsOrderOfPrioritySupported { get; }
        public bool IsTextMessageCapabilityIndicatorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DoNotPublishIndicator":
                    return IsDoNotPublishIndicatorSupported;
                case "OrderOfPriority":
                    return IsOrderOfPrioritySupported;
                case "TextMessageCapabilityIndicator":
                    return IsTextMessageCapabilityIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TelephoneNumber":
                    return true;
                case "TelephoneNumberTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationAssociationTribalAffiliation model.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationTribalAffiliation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; }
        
        string TribalAffiliationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationAssociationTribalAffiliationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationAssociationTribalAffiliationMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TribalAffiliationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentEducationOrganizationResponsibilityAssociation model.
    /// </summary>
    public interface IStudentEducationOrganizationResponsibilityAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string ResponsibilityDescriptor { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        DateTime? EndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentEducationOrganizationResponsibilityAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentEducationOrganizationResponsibilityAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isStudentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsStudentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ResponsibilityDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentGradebookEntry model.
    /// </summary>
    public interface IStudentGradebookEntry : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string GradebookEntryIdentifier { get; set; }
        
        string Namespace { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string AssignmentLateStatusDescriptor { get; set; }
        string CompetencyLevelDescriptor { get; set; }
        DateTime? DateFulfilled { get; set; }
        string DiagnosticStatement { get; set; }
        string LetterGradeEarned { get; set; }
        decimal? NumericGradeEarned { get; set; }
        decimal? PointsEarned { get; set; }
        string SubmissionStatusDescriptor { get; set; }
        TimeSpan? TimeFulfilled { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? GradebookEntryResourceId { get; set; }
        string GradebookEntryDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentGradebookEntryMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentGradebookEntryMappingContract(
            bool isAssignmentLateStatusDescriptorSupported,
            bool isCompetencyLevelDescriptorSupported,
            bool isDateFulfilledSupported,
            bool isDiagnosticStatementSupported,
            bool isGradebookEntryReferenceSupported,
            bool isLetterGradeEarnedSupported,
            bool isNumericGradeEarnedSupported,
            bool isPointsEarnedSupported,
            bool isStudentReferenceSupported,
            bool isSubmissionStatusDescriptorSupported,
            bool isTimeFulfilledSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAssignmentLateStatusDescriptorSupported = isAssignmentLateStatusDescriptorSupported;
            IsCompetencyLevelDescriptorSupported = isCompetencyLevelDescriptorSupported;
            IsDateFulfilledSupported = isDateFulfilledSupported;
            IsDiagnosticStatementSupported = isDiagnosticStatementSupported;
            IsGradebookEntryReferenceSupported = isGradebookEntryReferenceSupported;
            IsLetterGradeEarnedSupported = isLetterGradeEarnedSupported;
            IsNumericGradeEarnedSupported = isNumericGradeEarnedSupported;
            IsPointsEarnedSupported = isPointsEarnedSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsSubmissionStatusDescriptorSupported = isSubmissionStatusDescriptorSupported;
            IsTimeFulfilledSupported = isTimeFulfilledSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAssignmentLateStatusDescriptorSupported { get; }
        public bool IsCompetencyLevelDescriptorSupported { get; }
        public bool IsDateFulfilledSupported { get; }
        public bool IsDiagnosticStatementSupported { get; }
        public bool IsGradebookEntryReferenceSupported { get; }
        public bool IsLetterGradeEarnedSupported { get; }
        public bool IsNumericGradeEarnedSupported { get; }
        public bool IsPointsEarnedSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsSubmissionStatusDescriptorSupported { get; }
        public bool IsTimeFulfilledSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AssignmentLateStatusDescriptor":
                    return IsAssignmentLateStatusDescriptorSupported;
                case "CompetencyLevelDescriptor":
                    return IsCompetencyLevelDescriptorSupported;
                case "DateFulfilled":
                    return IsDateFulfilledSupported;
                case "DiagnosticStatement":
                    return IsDiagnosticStatementSupported;
                case "GradebookEntryReference":
                    return IsGradebookEntryReferenceSupported;
                case "LetterGradeEarned":
                    return IsLetterGradeEarnedSupported;
                case "NumericGradeEarned":
                    return IsNumericGradeEarnedSupported;
                case "PointsEarned":
                    return IsPointsEarnedSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "SubmissionStatusDescriptor":
                    return IsSubmissionStatusDescriptorSupported;
                case "TimeFulfilled":
                    return IsTimeFulfilledSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradebookEntryIdentifier":
                    return true;
                case "Namespace":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentHomelessProgramAssociation model.
    /// </summary>
    public interface IStudentHomelessProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        bool? AwaitingFosterCare { get; set; }
        string HomelessPrimaryNighttimeResidenceDescriptor { get; set; }
        bool? HomelessUnaccompaniedYouth { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentHomelessProgramAssociationHomelessProgramService> StudentHomelessProgramAssociationHomelessProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentHomelessProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentHomelessProgramAssociationMappingContract(
            bool isAwaitingFosterCareSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isHomelessPrimaryNighttimeResidenceDescriptorSupported,
            bool isHomelessUnaccompaniedYouthSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentHomelessProgramAssociationHomelessProgramServicesSupported,
            bool isStudentReferenceSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentHomelessProgramAssociationHomelessProgramServicesItemCreatable,
            Func<IStudentHomelessProgramAssociationHomelessProgramService, bool> isStudentHomelessProgramAssociationHomelessProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAwaitingFosterCareSupported = isAwaitingFosterCareSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsHomelessPrimaryNighttimeResidenceDescriptorSupported = isHomelessPrimaryNighttimeResidenceDescriptorSupported;
            IsHomelessUnaccompaniedYouthSupported = isHomelessUnaccompaniedYouthSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentHomelessProgramAssociationHomelessProgramServicesSupported = isStudentHomelessProgramAssociationHomelessProgramServicesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentHomelessProgramAssociationHomelessProgramServicesItemCreatable = isStudentHomelessProgramAssociationHomelessProgramServicesItemCreatable;
            IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded = isStudentHomelessProgramAssociationHomelessProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAwaitingFosterCareSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsHomelessPrimaryNighttimeResidenceDescriptorSupported { get; }
        public bool IsHomelessUnaccompaniedYouthSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentHomelessProgramAssociationHomelessProgramServicesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentHomelessProgramAssociationHomelessProgramServicesItemCreatable { get; }
        public Func<IStudentHomelessProgramAssociationHomelessProgramService, bool> IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AwaitingFosterCare":
                    return IsAwaitingFosterCareSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "HomelessPrimaryNighttimeResidenceDescriptor":
                    return IsHomelessPrimaryNighttimeResidenceDescriptorSupported;
                case "HomelessUnaccompaniedYouth":
                    return IsHomelessUnaccompaniedYouthSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentHomelessProgramAssociationHomelessProgramServices":
                    return IsStudentHomelessProgramAssociationHomelessProgramServicesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentHomelessProgramAssociationHomelessProgramServices":
                    return IsStudentHomelessProgramAssociationHomelessProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentHomelessProgramAssociationHomelessProgramService model.
    /// </summary>
    public interface IStudentHomelessProgramAssociationHomelessProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentHomelessProgramAssociation StudentHomelessProgramAssociation { get; set; }
        
        string HomelessProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentHomelessProgramAssociationHomelessProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentHomelessProgramAssociationHomelessProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "HomelessProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentIdentificationDocument model.
    /// </summary>
    public interface IStudentIdentificationDocument : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudent Student { get; set; }
        
        string IdentificationDocumentUseDescriptor { get; set; }
        
        string PersonalInformationVerificationDescriptor { get; set; }

        // Non-PK properties
        DateTime? DocumentExpirationDate { get; set; }
        string DocumentTitle { get; set; }
        string IssuerCountryDescriptor { get; set; }
        string IssuerDocumentIdentificationCode { get; set; }
        string IssuerName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentIdentificationDocumentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentIdentificationDocumentMappingContract(
            bool isDocumentExpirationDateSupported,
            bool isDocumentTitleSupported,
            bool isIssuerCountryDescriptorSupported,
            bool isIssuerDocumentIdentificationCodeSupported,
            bool isIssuerNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDocumentExpirationDateSupported = isDocumentExpirationDateSupported;
            IsDocumentTitleSupported = isDocumentTitleSupported;
            IsIssuerCountryDescriptorSupported = isIssuerCountryDescriptorSupported;
            IsIssuerDocumentIdentificationCodeSupported = isIssuerDocumentIdentificationCodeSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDocumentExpirationDateSupported { get; }
        public bool IsDocumentTitleSupported { get; }
        public bool IsIssuerCountryDescriptorSupported { get; }
        public bool IsIssuerDocumentIdentificationCodeSupported { get; }
        public bool IsIssuerNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DocumentExpirationDate":
                    return IsDocumentExpirationDateSupported;
                case "DocumentTitle":
                    return IsDocumentTitleSupported;
                case "IssuerCountryDescriptor":
                    return IsIssuerCountryDescriptorSupported;
                case "IssuerDocumentIdentificationCode":
                    return IsIssuerDocumentIdentificationCodeSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationDocumentUseDescriptor":
                    return true;
                case "PersonalInformationVerificationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentIdentificationSystemDescriptor model.
    /// </summary>
    public interface IStudentIdentificationSystemDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StudentIdentificationSystemDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentIdentificationSystemDescriptorMappingContract : IMappingContract
    {
        public StudentIdentificationSystemDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StudentIdentificationSystemDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentInterventionAssociation model.
    /// </summary>
    public interface IStudentInterventionAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string InterventionIdentificationCode { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        int? CohortEducationOrganizationId { get; set; }
        string CohortIdentifier { get; set; }
        string DiagnosticStatement { get; set; }
        int? Dosage { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; }

        // Resource reference data
        Guid? CohortResourceId { get; set; }
        string CohortDiscriminator { get; set; }
        Guid? InterventionResourceId { get; set; }
        string InterventionDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentInterventionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentInterventionAssociationMappingContract(
            bool isCohortEducationOrganizationIdSupported,
            bool isCohortIdentifierSupported,
            bool isCohortReferenceSupported,
            bool isDiagnosticStatementSupported,
            bool isDosageSupported,
            bool isInterventionReferenceSupported,
            bool isStudentInterventionAssociationInterventionEffectivenessesSupported,
            bool isStudentReferenceSupported,
            bool isStudentInterventionAssociationInterventionEffectivenessesItemCreatable,
            Func<IStudentInterventionAssociationInterventionEffectiveness, bool> isStudentInterventionAssociationInterventionEffectivenessIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCohortEducationOrganizationIdSupported = isCohortEducationOrganizationIdSupported;
            IsCohortIdentifierSupported = isCohortIdentifierSupported;
            IsCohortReferenceSupported = isCohortReferenceSupported;
            IsDiagnosticStatementSupported = isDiagnosticStatementSupported;
            IsDosageSupported = isDosageSupported;
            IsInterventionReferenceSupported = isInterventionReferenceSupported;
            IsStudentInterventionAssociationInterventionEffectivenessesSupported = isStudentInterventionAssociationInterventionEffectivenessesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentInterventionAssociationInterventionEffectivenessesItemCreatable = isStudentInterventionAssociationInterventionEffectivenessesItemCreatable;
            IsStudentInterventionAssociationInterventionEffectivenessIncluded = isStudentInterventionAssociationInterventionEffectivenessIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCohortEducationOrganizationIdSupported { get; }
        public bool IsCohortIdentifierSupported { get; }
        public bool IsCohortReferenceSupported { get; }
        public bool IsDiagnosticStatementSupported { get; }
        public bool IsDosageSupported { get; }
        public bool IsInterventionReferenceSupported { get; }
        public bool IsStudentInterventionAssociationInterventionEffectivenessesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentInterventionAssociationInterventionEffectivenessesItemCreatable { get; }
        public Func<IStudentInterventionAssociationInterventionEffectiveness, bool> IsStudentInterventionAssociationInterventionEffectivenessIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CohortEducationOrganizationId":
                    return IsCohortEducationOrganizationIdSupported;
                case "CohortIdentifier":
                    return IsCohortIdentifierSupported;
                case "CohortReference":
                    return IsCohortReferenceSupported;
                case "DiagnosticStatement":
                    return IsDiagnosticStatementSupported;
                case "Dosage":
                    return IsDosageSupported;
                case "InterventionReference":
                    return IsInterventionReferenceSupported;
                case "StudentInterventionAssociationInterventionEffectivenesses":
                    return IsStudentInterventionAssociationInterventionEffectivenessesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "InterventionIdentificationCode":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentInterventionAssociationInterventionEffectivenesses":
                    return IsStudentInterventionAssociationInterventionEffectivenessesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentInterventionAssociationInterventionEffectiveness model.
    /// </summary>
    public interface IStudentInterventionAssociationInterventionEffectiveness : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentInterventionAssociation StudentInterventionAssociation { get; set; }
        
        string DiagnosisDescriptor { get; set; }
        
        string GradeLevelDescriptor { get; set; }
        
        string PopulationServedDescriptor { get; set; }

        // Non-PK properties
        int? ImprovementIndex { get; set; }
        string InterventionEffectivenessRatingDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentInterventionAssociationInterventionEffectivenessMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentInterventionAssociationInterventionEffectivenessMappingContract(
            bool isImprovementIndexSupported,
            bool isInterventionEffectivenessRatingDescriptorSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsImprovementIndexSupported = isImprovementIndexSupported;
            IsInterventionEffectivenessRatingDescriptorSupported = isInterventionEffectivenessRatingDescriptorSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsImprovementIndexSupported { get; }
        public bool IsInterventionEffectivenessRatingDescriptorSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ImprovementIndex":
                    return IsImprovementIndexSupported;
                case "InterventionEffectivenessRatingDescriptor":
                    return IsInterventionEffectivenessRatingDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DiagnosisDescriptor":
                    return true;
                case "GradeLevelDescriptor":
                    return true;
                case "PopulationServedDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentInterventionAttendanceEvent model.
    /// </summary>
    public interface IStudentInterventionAttendanceEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AttendanceEventCategoryDescriptor { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        DateTime EventDate { get; set; }
        
        string InterventionIdentificationCode { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string AttendanceEventReason { get; set; }
        string EducationalEnvironmentDescriptor { get; set; }
        decimal? EventDuration { get; set; }
        int? InterventionDuration { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? InterventionResourceId { get; set; }
        string InterventionDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentInterventionAttendanceEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentInterventionAttendanceEventMappingContract(
            bool isAttendanceEventReasonSupported,
            bool isEducationalEnvironmentDescriptorSupported,
            bool isEventDurationSupported,
            bool isInterventionDurationSupported,
            bool isInterventionReferenceSupported,
            bool isStudentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAttendanceEventReasonSupported = isAttendanceEventReasonSupported;
            IsEducationalEnvironmentDescriptorSupported = isEducationalEnvironmentDescriptorSupported;
            IsEventDurationSupported = isEventDurationSupported;
            IsInterventionDurationSupported = isInterventionDurationSupported;
            IsInterventionReferenceSupported = isInterventionReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAttendanceEventReasonSupported { get; }
        public bool IsEducationalEnvironmentDescriptorSupported { get; }
        public bool IsEventDurationSupported { get; }
        public bool IsInterventionDurationSupported { get; }
        public bool IsInterventionReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AttendanceEventReason":
                    return IsAttendanceEventReasonSupported;
                case "EducationalEnvironmentDescriptor":
                    return IsEducationalEnvironmentDescriptorSupported;
                case "EventDuration":
                    return IsEventDurationSupported;
                case "InterventionDuration":
                    return IsInterventionDurationSupported;
                case "InterventionReference":
                    return IsInterventionReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AttendanceEventCategoryDescriptor":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "EventDate":
                    return true;
                case "InterventionIdentificationCode":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentLanguageInstructionProgramAssociation model.
    /// </summary>
    public interface IStudentLanguageInstructionProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        int? Dosage { get; set; }
        bool? EnglishLearnerParticipation { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; }
        ICollection<IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentLanguageInstructionProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentLanguageInstructionProgramAssociationMappingContract(
            bool isDosageSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isEnglishLearnerParticipationSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported,
            bool isStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported,
            bool isStudentReferenceSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsItemCreatable,
            Func<IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, bool> isStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded,
            bool isStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesItemCreatable,
            Func<IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, bool> isStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDosageSupported = isDosageSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsEnglishLearnerParticipationSupported = isEnglishLearnerParticipationSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported = isStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported;
            IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported = isStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsItemCreatable = isStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsItemCreatable;
            IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded = isStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded;
            IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesItemCreatable = isStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesItemCreatable;
            IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded = isStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDosageSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsEnglishLearnerParticipationSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported { get; }
        public bool IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsItemCreatable { get; }
        public Func<IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, bool> IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded { get; }
        public bool IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesItemCreatable { get; }
        public Func<IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, bool> IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Dosage":
                    return IsDosageSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "EnglishLearnerParticipation":
                    return IsEnglishLearnerParticipationSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments":
                    return IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported;
                case "StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices":
                    return IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments":
                    return IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsItemCreatable;
                case "StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices":
                    return IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment model.
    /// </summary>
    public interface IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentLanguageInstructionProgramAssociation StudentLanguageInstructionProgramAssociation { get; set; }
        
        short SchoolYear { get; set; }

        // Non-PK properties
        string MonitoredDescriptor { get; set; }
        string ParticipationDescriptor { get; set; }
        string ProficiencyDescriptor { get; set; }
        string ProgressDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolYearTypeResourceId { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentMappingContract(
            bool isMonitoredDescriptorSupported,
            bool isParticipationDescriptorSupported,
            bool isProficiencyDescriptorSupported,
            bool isProgressDescriptorSupported,
            bool isSchoolYearTypeReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMonitoredDescriptorSupported = isMonitoredDescriptorSupported;
            IsParticipationDescriptorSupported = isParticipationDescriptorSupported;
            IsProficiencyDescriptorSupported = isProficiencyDescriptorSupported;
            IsProgressDescriptorSupported = isProgressDescriptorSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMonitoredDescriptorSupported { get; }
        public bool IsParticipationDescriptorSupported { get; }
        public bool IsProficiencyDescriptorSupported { get; }
        public bool IsProgressDescriptorSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MonitoredDescriptor":
                    return IsMonitoredDescriptorSupported;
                case "ParticipationDescriptor":
                    return IsParticipationDescriptorSupported;
                case "ProficiencyDescriptor":
                    return IsProficiencyDescriptorSupported;
                case "ProgressDescriptor":
                    return IsProgressDescriptorSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService model.
    /// </summary>
    public interface IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentLanguageInstructionProgramAssociation StudentLanguageInstructionProgramAssociation { get; set; }
        
        string LanguageInstructionProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LanguageInstructionProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentLearningObjective model.
    /// </summary>
    public interface IStudentLearningObjective : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string GradingPeriodDescriptor { get; set; }
        
        int GradingPeriodSchoolId { get; set; }
        
        short GradingPeriodSchoolYear { get; set; }
        
        int GradingPeriodSequence { get; set; }
        
        string LearningObjectiveId { get; set; }
        
        string Namespace { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string CompetencyLevelDescriptor { get; set; }
        string DiagnosticStatement { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentLearningObjectiveGeneralStudentProgramAssociation> StudentLearningObjectiveGeneralStudentProgramAssociations { get; set; }
        ICollection<IStudentLearningObjectiveStudentSectionAssociation> StudentLearningObjectiveStudentSectionAssociations { get; set; }

        // Resource reference data
        Guid? GradingPeriodResourceId { get; set; }
        string GradingPeriodDiscriminator { get; set; }
        Guid? LearningObjectiveResourceId { get; set; }
        string LearningObjectiveDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentLearningObjectiveMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentLearningObjectiveMappingContract(
            bool isCompetencyLevelDescriptorSupported,
            bool isDiagnosticStatementSupported,
            bool isGradingPeriodReferenceSupported,
            bool isLearningObjectiveReferenceSupported,
            bool isStudentLearningObjectiveGeneralStudentProgramAssociationsSupported,
            bool isStudentLearningObjectiveStudentSectionAssociationsSupported,
            bool isStudentReferenceSupported,
            bool isStudentLearningObjectiveGeneralStudentProgramAssociationsItemCreatable,
            Func<IStudentLearningObjectiveGeneralStudentProgramAssociation, bool> isStudentLearningObjectiveGeneralStudentProgramAssociationIncluded,
            bool isStudentLearningObjectiveStudentSectionAssociationsItemCreatable,
            Func<IStudentLearningObjectiveStudentSectionAssociation, bool> isStudentLearningObjectiveStudentSectionAssociationIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCompetencyLevelDescriptorSupported = isCompetencyLevelDescriptorSupported;
            IsDiagnosticStatementSupported = isDiagnosticStatementSupported;
            IsGradingPeriodReferenceSupported = isGradingPeriodReferenceSupported;
            IsLearningObjectiveReferenceSupported = isLearningObjectiveReferenceSupported;
            IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported = isStudentLearningObjectiveGeneralStudentProgramAssociationsSupported;
            IsStudentLearningObjectiveStudentSectionAssociationsSupported = isStudentLearningObjectiveStudentSectionAssociationsSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentLearningObjectiveGeneralStudentProgramAssociationsItemCreatable = isStudentLearningObjectiveGeneralStudentProgramAssociationsItemCreatable;
            IsStudentLearningObjectiveGeneralStudentProgramAssociationIncluded = isStudentLearningObjectiveGeneralStudentProgramAssociationIncluded;
            IsStudentLearningObjectiveStudentSectionAssociationsItemCreatable = isStudentLearningObjectiveStudentSectionAssociationsItemCreatable;
            IsStudentLearningObjectiveStudentSectionAssociationIncluded = isStudentLearningObjectiveStudentSectionAssociationIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCompetencyLevelDescriptorSupported { get; }
        public bool IsDiagnosticStatementSupported { get; }
        public bool IsGradingPeriodReferenceSupported { get; }
        public bool IsLearningObjectiveReferenceSupported { get; }
        public bool IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported { get; }
        public bool IsStudentLearningObjectiveStudentSectionAssociationsSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentLearningObjectiveGeneralStudentProgramAssociationsItemCreatable { get; }
        public Func<IStudentLearningObjectiveGeneralStudentProgramAssociation, bool> IsStudentLearningObjectiveGeneralStudentProgramAssociationIncluded { get; }
        public bool IsStudentLearningObjectiveStudentSectionAssociationsItemCreatable { get; }
        public Func<IStudentLearningObjectiveStudentSectionAssociation, bool> IsStudentLearningObjectiveStudentSectionAssociationIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CompetencyLevelDescriptor":
                    return IsCompetencyLevelDescriptorSupported;
                case "DiagnosticStatement":
                    return IsDiagnosticStatementSupported;
                case "GradingPeriodReference":
                    return IsGradingPeriodReferenceSupported;
                case "LearningObjectiveReference":
                    return IsLearningObjectiveReferenceSupported;
                case "StudentLearningObjectiveGeneralStudentProgramAssociations":
                    return IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported;
                case "StudentLearningObjectiveStudentSectionAssociations":
                    return IsStudentLearningObjectiveStudentSectionAssociationsSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "GradingPeriodDescriptor":
                    return true;
                case "GradingPeriodSchoolId":
                    return true;
                case "GradingPeriodSchoolYear":
                    return true;
                case "GradingPeriodSequence":
                    return true;
                case "LearningObjectiveId":
                    return true;
                case "Namespace":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentLearningObjectiveGeneralStudentProgramAssociations":
                    return IsStudentLearningObjectiveGeneralStudentProgramAssociationsItemCreatable;
                case "StudentLearningObjectiveStudentSectionAssociations":
                    return IsStudentLearningObjectiveStudentSectionAssociationsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentLearningObjectiveGeneralStudentProgramAssociation model.
    /// </summary>
    public interface IStudentLearningObjectiveGeneralStudentProgramAssociation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentLearningObjective StudentLearningObjective { get; set; }
        
        DateTime BeginDate { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        int ProgramEducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? GeneralStudentProgramAssociationResourceId { get; set; }
        string GeneralStudentProgramAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentLearningObjectiveGeneralStudentProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentLearningObjectiveGeneralStudentProgramAssociationMappingContract(
            bool isGeneralStudentProgramAssociationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsGeneralStudentProgramAssociationReferenceSupported = isGeneralStudentProgramAssociationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsGeneralStudentProgramAssociationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationReference":
                    return IsGeneralStudentProgramAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentLearningObjectiveStudentSectionAssociation model.
    /// </summary>
    public interface IStudentLearningObjectiveStudentSectionAssociation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentLearningObjective StudentLearningObjective { get; set; }
        
        DateTime BeginDate { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StudentSectionAssociationResourceId { get; set; }
        string StudentSectionAssociationDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentLearningObjectiveStudentSectionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentLearningObjectiveStudentSectionAssociationMappingContract(
            bool isStudentSectionAssociationReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStudentSectionAssociationReferenceSupported = isStudentSectionAssociationReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStudentSectionAssociationReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StudentSectionAssociationReference":
                    return IsStudentSectionAssociationReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentMigrantEducationProgramAssociation model.
    /// </summary>
    public interface IStudentMigrantEducationProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        string ContinuationOfServicesReasonDescriptor { get; set; }
        DateTime? EligibilityExpirationDate { get; set; }
        DateTime LastQualifyingMove { get; set; }
        bool PriorityForServices { get; set; }
        DateTime? QualifyingArrivalDate { get; set; }
        DateTime? StateResidencyDate { get; set; }
        DateTime? USInitialEntry { get; set; }
        DateTime? USInitialSchoolEntry { get; set; }
        DateTime? USMostRecentEntry { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentMigrantEducationProgramAssociationMigrantEducationProgramService> StudentMigrantEducationProgramAssociationMigrantEducationProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentMigrantEducationProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentMigrantEducationProgramAssociationMappingContract(
            bool isContinuationOfServicesReasonDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEligibilityExpirationDateSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isLastQualifyingMoveSupported,
            bool isPriorityForServicesSupported,
            bool isProgramReferenceSupported,
            bool isQualifyingArrivalDateSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStateResidencyDateSupported,
            bool isStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported,
            bool isStudentReferenceSupported,
            bool isUSInitialEntrySupported,
            bool isUSInitialSchoolEntrySupported,
            bool isUSMostRecentEntrySupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesItemCreatable,
            Func<IStudentMigrantEducationProgramAssociationMigrantEducationProgramService, bool> isStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsContinuationOfServicesReasonDescriptorSupported = isContinuationOfServicesReasonDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEligibilityExpirationDateSupported = isEligibilityExpirationDateSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsLastQualifyingMoveSupported = isLastQualifyingMoveSupported;
            IsPriorityForServicesSupported = isPriorityForServicesSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsQualifyingArrivalDateSupported = isQualifyingArrivalDateSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStateResidencyDateSupported = isStateResidencyDateSupported;
            IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported = isStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsUSInitialEntrySupported = isUSInitialEntrySupported;
            IsUSInitialSchoolEntrySupported = isUSInitialSchoolEntrySupported;
            IsUSMostRecentEntrySupported = isUSMostRecentEntrySupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesItemCreatable = isStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesItemCreatable;
            IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded = isStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsContinuationOfServicesReasonDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEligibilityExpirationDateSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsLastQualifyingMoveSupported { get; }
        public bool IsPriorityForServicesSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsQualifyingArrivalDateSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStateResidencyDateSupported { get; }
        public bool IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsUSInitialEntrySupported { get; }
        public bool IsUSInitialSchoolEntrySupported { get; }
        public bool IsUSMostRecentEntrySupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesItemCreatable { get; }
        public Func<IStudentMigrantEducationProgramAssociationMigrantEducationProgramService, bool> IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ContinuationOfServicesReasonDescriptor":
                    return IsContinuationOfServicesReasonDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EligibilityExpirationDate":
                    return IsEligibilityExpirationDateSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "LastQualifyingMove":
                    return IsLastQualifyingMoveSupported;
                case "PriorityForServices":
                    return IsPriorityForServicesSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "QualifyingArrivalDate":
                    return IsQualifyingArrivalDateSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StateResidencyDate":
                    return IsStateResidencyDateSupported;
                case "StudentMigrantEducationProgramAssociationMigrantEducationProgramServices":
                    return IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "USInitialEntry":
                    return IsUSInitialEntrySupported;
                case "USInitialSchoolEntry":
                    return IsUSInitialSchoolEntrySupported;
                case "USMostRecentEntry":
                    return IsUSMostRecentEntrySupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentMigrantEducationProgramAssociationMigrantEducationProgramServices":
                    return IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentMigrantEducationProgramAssociationMigrantEducationProgramService model.
    /// </summary>
    public interface IStudentMigrantEducationProgramAssociationMigrantEducationProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentMigrantEducationProgramAssociation StudentMigrantEducationProgramAssociation { get; set; }
        
        string MigrantEducationProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MigrantEducationProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentNeglectedOrDelinquentProgramAssociation model.
    /// </summary>
    public interface IStudentNeglectedOrDelinquentProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        string ELAProgressLevelDescriptor { get; set; }
        string MathematicsProgressLevelDescriptor { get; set; }
        string NeglectedOrDelinquentProgramDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentNeglectedOrDelinquentProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentNeglectedOrDelinquentProgramAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isELAProgressLevelDescriptorSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isMathematicsProgressLevelDescriptorSupported,
            bool isNeglectedOrDelinquentProgramDescriptorSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported,
            bool isStudentReferenceSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesItemCreatable,
            Func<IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService, bool> isStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsELAProgressLevelDescriptorSupported = isELAProgressLevelDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsMathematicsProgressLevelDescriptorSupported = isMathematicsProgressLevelDescriptorSupported;
            IsNeglectedOrDelinquentProgramDescriptorSupported = isNeglectedOrDelinquentProgramDescriptorSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported = isStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesItemCreatable = isStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesItemCreatable;
            IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded = isStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsELAProgressLevelDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsMathematicsProgressLevelDescriptorSupported { get; }
        public bool IsNeglectedOrDelinquentProgramDescriptorSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesItemCreatable { get; }
        public Func<IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService, bool> IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "ELAProgressLevelDescriptor":
                    return IsELAProgressLevelDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "MathematicsProgressLevelDescriptor":
                    return IsMathematicsProgressLevelDescriptorSupported;
                case "NeglectedOrDelinquentProgramDescriptor":
                    return IsNeglectedOrDelinquentProgramDescriptorSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices":
                    return IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices":
                    return IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService model.
    /// </summary>
    public interface IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentNeglectedOrDelinquentProgramAssociation StudentNeglectedOrDelinquentProgramAssociation { get; set; }
        
        string NeglectedOrDelinquentProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "NeglectedOrDelinquentProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentOtherName model.
    /// </summary>
    public interface IStudentOtherName : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudent Student { get; set; }
        
        string OtherNameTypeDescriptor { get; set; }

        // Non-PK properties
        string FirstName { get; set; }
        string GenerationCodeSuffix { get; set; }
        string LastSurname { get; set; }
        string MiddleName { get; set; }
        string PersonalTitlePrefix { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentOtherNameMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentOtherNameMappingContract(
            bool isFirstNameSupported,
            bool isGenerationCodeSuffixSupported,
            bool isLastSurnameSupported,
            bool isMiddleNameSupported,
            bool isPersonalTitlePrefixSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsFirstNameSupported = isFirstNameSupported;
            IsGenerationCodeSuffixSupported = isGenerationCodeSuffixSupported;
            IsLastSurnameSupported = isLastSurnameSupported;
            IsMiddleNameSupported = isMiddleNameSupported;
            IsPersonalTitlePrefixSupported = isPersonalTitlePrefixSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsFirstNameSupported { get; }
        public bool IsGenerationCodeSuffixSupported { get; }
        public bool IsLastSurnameSupported { get; }
        public bool IsMiddleNameSupported { get; }
        public bool IsPersonalTitlePrefixSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "FirstName":
                    return IsFirstNameSupported;
                case "GenerationCodeSuffix":
                    return IsGenerationCodeSuffixSupported;
                case "LastSurname":
                    return IsLastSurnameSupported;
                case "MiddleName":
                    return IsMiddleNameSupported;
                case "PersonalTitlePrefix":
                    return IsPersonalTitlePrefixSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "OtherNameTypeDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentParentAssociation model.
    /// </summary>
    public interface IStudentParentAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string ParentUniqueId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        int? ContactPriority { get; set; }
        string ContactRestrictions { get; set; }
        bool? EmergencyContactStatus { get; set; }
        bool? LegalGuardian { get; set; }
        bool? LivesWith { get; set; }
        bool? PrimaryContactStatus { get; set; }
        string RelationDescriptor { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ParentResourceId { get; set; }
        string ParentDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentParentAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentParentAssociationMappingContract(
            bool isContactPrioritySupported,
            bool isContactRestrictionsSupported,
            bool isEmergencyContactStatusSupported,
            bool isLegalGuardianSupported,
            bool isLivesWithSupported,
            bool isParentReferenceSupported,
            bool isPrimaryContactStatusSupported,
            bool isRelationDescriptorSupported,
            bool isStudentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsContactPrioritySupported = isContactPrioritySupported;
            IsContactRestrictionsSupported = isContactRestrictionsSupported;
            IsEmergencyContactStatusSupported = isEmergencyContactStatusSupported;
            IsLegalGuardianSupported = isLegalGuardianSupported;
            IsLivesWithSupported = isLivesWithSupported;
            IsParentReferenceSupported = isParentReferenceSupported;
            IsPrimaryContactStatusSupported = isPrimaryContactStatusSupported;
            IsRelationDescriptorSupported = isRelationDescriptorSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsContactPrioritySupported { get; }
        public bool IsContactRestrictionsSupported { get; }
        public bool IsEmergencyContactStatusSupported { get; }
        public bool IsLegalGuardianSupported { get; }
        public bool IsLivesWithSupported { get; }
        public bool IsParentReferenceSupported { get; }
        public bool IsPrimaryContactStatusSupported { get; }
        public bool IsRelationDescriptorSupported { get; }
        public bool IsStudentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ContactPriority":
                    return IsContactPrioritySupported;
                case "ContactRestrictions":
                    return IsContactRestrictionsSupported;
                case "EmergencyContactStatus":
                    return IsEmergencyContactStatusSupported;
                case "LegalGuardian":
                    return IsLegalGuardianSupported;
                case "LivesWith":
                    return IsLivesWithSupported;
                case "ParentReference":
                    return IsParentReferenceSupported;
                case "PrimaryContactStatus":
                    return IsPrimaryContactStatusSupported;
                case "RelationDescriptor":
                    return IsRelationDescriptorSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ParentUniqueId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentParticipationCodeDescriptor model.
    /// </summary>
    public interface IStudentParticipationCodeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int StudentParticipationCodeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentParticipationCodeDescriptorMappingContract : IMappingContract
    {
        public StudentParticipationCodeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StudentParticipationCodeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentPersonalIdentificationDocument model.
    /// </summary>
    public interface IStudentPersonalIdentificationDocument : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudent Student { get; set; }
        
        string IdentificationDocumentUseDescriptor { get; set; }
        
        string PersonalInformationVerificationDescriptor { get; set; }

        // Non-PK properties
        DateTime? DocumentExpirationDate { get; set; }
        string DocumentTitle { get; set; }
        string IssuerCountryDescriptor { get; set; }
        string IssuerDocumentIdentificationCode { get; set; }
        string IssuerName { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentPersonalIdentificationDocumentMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentPersonalIdentificationDocumentMappingContract(
            bool isDocumentExpirationDateSupported,
            bool isDocumentTitleSupported,
            bool isIssuerCountryDescriptorSupported,
            bool isIssuerDocumentIdentificationCodeSupported,
            bool isIssuerNameSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDocumentExpirationDateSupported = isDocumentExpirationDateSupported;
            IsDocumentTitleSupported = isDocumentTitleSupported;
            IsIssuerCountryDescriptorSupported = isIssuerCountryDescriptorSupported;
            IsIssuerDocumentIdentificationCodeSupported = isIssuerDocumentIdentificationCodeSupported;
            IsIssuerNameSupported = isIssuerNameSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDocumentExpirationDateSupported { get; }
        public bool IsDocumentTitleSupported { get; }
        public bool IsIssuerCountryDescriptorSupported { get; }
        public bool IsIssuerDocumentIdentificationCodeSupported { get; }
        public bool IsIssuerNameSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DocumentExpirationDate":
                    return IsDocumentExpirationDateSupported;
                case "DocumentTitle":
                    return IsDocumentTitleSupported;
                case "IssuerCountryDescriptor":
                    return IsIssuerCountryDescriptorSupported;
                case "IssuerDocumentIdentificationCode":
                    return IsIssuerDocumentIdentificationCodeSupported;
                case "IssuerName":
                    return IsIssuerNameSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "IdentificationDocumentUseDescriptor":
                    return true;
                case "PersonalInformationVerificationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentProgramAssociation model.
    /// </summary>
    public interface IStudentProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties

        // One-to-one relationships

        // Lists
        ICollection<IStudentProgramAssociationService> StudentProgramAssociationServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentProgramAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentProgramAssociationServicesSupported,
            bool isStudentReferenceSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentProgramAssociationServicesItemCreatable,
            Func<IStudentProgramAssociationService, bool> isStudentProgramAssociationServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentProgramAssociationServicesSupported = isStudentProgramAssociationServicesSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentProgramAssociationServicesItemCreatable = isStudentProgramAssociationServicesItemCreatable;
            IsStudentProgramAssociationServiceIncluded = isStudentProgramAssociationServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentProgramAssociationServicesSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentProgramAssociationServicesItemCreatable { get; }
        public Func<IStudentProgramAssociationService, bool> IsStudentProgramAssociationServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentProgramAssociationServices":
                    return IsStudentProgramAssociationServicesSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentProgramAssociationServices":
                    return IsStudentProgramAssociationServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentProgramAssociationService model.
    /// </summary>
    public interface IStudentProgramAssociationService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentProgramAssociation StudentProgramAssociation { get; set; }
        
        string ServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentProgramAssociationServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentProgramAssociationServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentProgramAttendanceEvent model.
    /// </summary>
    public interface IStudentProgramAttendanceEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AttendanceEventCategoryDescriptor { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        DateTime EventDate { get; set; }
        
        int ProgramEducationOrganizationId { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string AttendanceEventReason { get; set; }
        string EducationalEnvironmentDescriptor { get; set; }
        decimal? EventDuration { get; set; }
        int? ProgramAttendanceDuration { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentProgramAttendanceEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentProgramAttendanceEventMappingContract(
            bool isAttendanceEventReasonSupported,
            bool isEducationalEnvironmentDescriptorSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEventDurationSupported,
            bool isProgramAttendanceDurationSupported,
            bool isProgramReferenceSupported,
            bool isStudentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAttendanceEventReasonSupported = isAttendanceEventReasonSupported;
            IsEducationalEnvironmentDescriptorSupported = isEducationalEnvironmentDescriptorSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEventDurationSupported = isEventDurationSupported;
            IsProgramAttendanceDurationSupported = isProgramAttendanceDurationSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAttendanceEventReasonSupported { get; }
        public bool IsEducationalEnvironmentDescriptorSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEventDurationSupported { get; }
        public bool IsProgramAttendanceDurationSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AttendanceEventReason":
                    return IsAttendanceEventReasonSupported;
                case "EducationalEnvironmentDescriptor":
                    return IsEducationalEnvironmentDescriptorSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EventDuration":
                    return IsEventDurationSupported;
                case "ProgramAttendanceDuration":
                    return IsProgramAttendanceDurationSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AttendanceEventCategoryDescriptor":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "EventDate":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSchoolAssociation model.
    /// </summary>
    public interface IStudentSchoolAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime EntryDate { get; set; }
        
        int SchoolId { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string CalendarCode { get; set; }
        short? ClassOfSchoolYear { get; set; }
        int? EducationOrganizationId { get; set; }
        bool? EmployedWhileEnrolled { get; set; }
        string EntryGradeLevelDescriptor { get; set; }
        string EntryGradeLevelReasonDescriptor { get; set; }
        string EntryTypeDescriptor { get; set; }
        DateTime? ExitWithdrawDate { get; set; }
        string ExitWithdrawTypeDescriptor { get; set; }
        decimal? FullTimeEquivalency { get; set; }
        string GraduationPlanTypeDescriptor { get; set; }
        short? GraduationSchoolYear { get; set; }
        bool? PrimarySchool { get; set; }
        bool? RepeatGradeIndicator { get; set; }
        string ResidencyStatusDescriptor { get; set; }
        bool? SchoolChoiceTransfer { get; set; }
        short? SchoolYear { get; set; }
        bool? TermCompletionIndicator { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentSchoolAssociationAlternativeGraduationPlan> StudentSchoolAssociationAlternativeGraduationPlans { get; set; }
        ICollection<IStudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; }

        // Resource reference data
        Guid? CalendarResourceId { get; set; }
        string CalendarDiscriminator { get; set; }
        Guid? ClassOfSchoolYearTypeResourceId { get; set; }
        Guid? GraduationPlanResourceId { get; set; }
        string GraduationPlanDiscriminator { get; set; }
        Guid? SchoolResourceId { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSchoolAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSchoolAssociationMappingContract(
            bool isCalendarCodeSupported,
            bool isCalendarReferenceSupported,
            bool isClassOfSchoolYearSupported,
            bool isClassOfSchoolYearTypeReferenceSupported,
            bool isEducationOrganizationIdSupported,
            bool isEmployedWhileEnrolledSupported,
            bool isEntryGradeLevelDescriptorSupported,
            bool isEntryGradeLevelReasonDescriptorSupported,
            bool isEntryTypeDescriptorSupported,
            bool isExitWithdrawDateSupported,
            bool isExitWithdrawTypeDescriptorSupported,
            bool isFullTimeEquivalencySupported,
            bool isGraduationPlanReferenceSupported,
            bool isGraduationPlanTypeDescriptorSupported,
            bool isGraduationSchoolYearSupported,
            bool isPrimarySchoolSupported,
            bool isRepeatGradeIndicatorSupported,
            bool isResidencyStatusDescriptorSupported,
            bool isSchoolChoiceTransferSupported,
            bool isSchoolReferenceSupported,
            bool isSchoolYearSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isStudentReferenceSupported,
            bool isStudentSchoolAssociationAlternativeGraduationPlansSupported,
            bool isStudentSchoolAssociationEducationPlansSupported,
            bool isTermCompletionIndicatorSupported,
            bool isStudentSchoolAssociationAlternativeGraduationPlansItemCreatable,
            Func<IStudentSchoolAssociationAlternativeGraduationPlan, bool> isStudentSchoolAssociationAlternativeGraduationPlanIncluded,
            bool isStudentSchoolAssociationEducationPlansItemCreatable,
            Func<IStudentSchoolAssociationEducationPlan, bool> isStudentSchoolAssociationEducationPlanIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCalendarCodeSupported = isCalendarCodeSupported;
            IsCalendarReferenceSupported = isCalendarReferenceSupported;
            IsClassOfSchoolYearSupported = isClassOfSchoolYearSupported;
            IsClassOfSchoolYearTypeReferenceSupported = isClassOfSchoolYearTypeReferenceSupported;
            IsEducationOrganizationIdSupported = isEducationOrganizationIdSupported;
            IsEmployedWhileEnrolledSupported = isEmployedWhileEnrolledSupported;
            IsEntryGradeLevelDescriptorSupported = isEntryGradeLevelDescriptorSupported;
            IsEntryGradeLevelReasonDescriptorSupported = isEntryGradeLevelReasonDescriptorSupported;
            IsEntryTypeDescriptorSupported = isEntryTypeDescriptorSupported;
            IsExitWithdrawDateSupported = isExitWithdrawDateSupported;
            IsExitWithdrawTypeDescriptorSupported = isExitWithdrawTypeDescriptorSupported;
            IsFullTimeEquivalencySupported = isFullTimeEquivalencySupported;
            IsGraduationPlanReferenceSupported = isGraduationPlanReferenceSupported;
            IsGraduationPlanTypeDescriptorSupported = isGraduationPlanTypeDescriptorSupported;
            IsGraduationSchoolYearSupported = isGraduationSchoolYearSupported;
            IsPrimarySchoolSupported = isPrimarySchoolSupported;
            IsRepeatGradeIndicatorSupported = isRepeatGradeIndicatorSupported;
            IsResidencyStatusDescriptorSupported = isResidencyStatusDescriptorSupported;
            IsSchoolChoiceTransferSupported = isSchoolChoiceTransferSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSchoolYearSupported = isSchoolYearSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentSchoolAssociationAlternativeGraduationPlansSupported = isStudentSchoolAssociationAlternativeGraduationPlansSupported;
            IsStudentSchoolAssociationEducationPlansSupported = isStudentSchoolAssociationEducationPlansSupported;
            IsTermCompletionIndicatorSupported = isTermCompletionIndicatorSupported;
            IsStudentSchoolAssociationAlternativeGraduationPlansItemCreatable = isStudentSchoolAssociationAlternativeGraduationPlansItemCreatable;
            IsStudentSchoolAssociationAlternativeGraduationPlanIncluded = isStudentSchoolAssociationAlternativeGraduationPlanIncluded;
            IsStudentSchoolAssociationEducationPlansItemCreatable = isStudentSchoolAssociationEducationPlansItemCreatable;
            IsStudentSchoolAssociationEducationPlanIncluded = isStudentSchoolAssociationEducationPlanIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCalendarCodeSupported { get; }
        public bool IsCalendarReferenceSupported { get; }
        public bool IsClassOfSchoolYearSupported { get; }
        public bool IsClassOfSchoolYearTypeReferenceSupported { get; }
        public bool IsEducationOrganizationIdSupported { get; }
        public bool IsEmployedWhileEnrolledSupported { get; }
        public bool IsEntryGradeLevelDescriptorSupported { get; }
        public bool IsEntryGradeLevelReasonDescriptorSupported { get; }
        public bool IsEntryTypeDescriptorSupported { get; }
        public bool IsExitWithdrawDateSupported { get; }
        public bool IsExitWithdrawTypeDescriptorSupported { get; }
        public bool IsFullTimeEquivalencySupported { get; }
        public bool IsGraduationPlanReferenceSupported { get; }
        public bool IsGraduationPlanTypeDescriptorSupported { get; }
        public bool IsGraduationSchoolYearSupported { get; }
        public bool IsPrimarySchoolSupported { get; }
        public bool IsRepeatGradeIndicatorSupported { get; }
        public bool IsResidencyStatusDescriptorSupported { get; }
        public bool IsSchoolChoiceTransferSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSchoolYearSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentSchoolAssociationAlternativeGraduationPlansSupported { get; }
        public bool IsStudentSchoolAssociationEducationPlansSupported { get; }
        public bool IsTermCompletionIndicatorSupported { get; }
        public bool IsStudentSchoolAssociationAlternativeGraduationPlansItemCreatable { get; }
        public Func<IStudentSchoolAssociationAlternativeGraduationPlan, bool> IsStudentSchoolAssociationAlternativeGraduationPlanIncluded { get; }
        public bool IsStudentSchoolAssociationEducationPlansItemCreatable { get; }
        public Func<IStudentSchoolAssociationEducationPlan, bool> IsStudentSchoolAssociationEducationPlanIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CalendarCode":
                    return IsCalendarCodeSupported;
                case "CalendarReference":
                    return IsCalendarReferenceSupported;
                case "ClassOfSchoolYear":
                    return IsClassOfSchoolYearSupported;
                case "ClassOfSchoolYearTypeReference":
                    return IsClassOfSchoolYearTypeReferenceSupported;
                case "EducationOrganizationId":
                    return IsEducationOrganizationIdSupported;
                case "EmployedWhileEnrolled":
                    return IsEmployedWhileEnrolledSupported;
                case "EntryGradeLevelDescriptor":
                    return IsEntryGradeLevelDescriptorSupported;
                case "EntryGradeLevelReasonDescriptor":
                    return IsEntryGradeLevelReasonDescriptorSupported;
                case "EntryTypeDescriptor":
                    return IsEntryTypeDescriptorSupported;
                case "ExitWithdrawDate":
                    return IsExitWithdrawDateSupported;
                case "ExitWithdrawTypeDescriptor":
                    return IsExitWithdrawTypeDescriptorSupported;
                case "FullTimeEquivalency":
                    return IsFullTimeEquivalencySupported;
                case "GraduationPlanReference":
                    return IsGraduationPlanReferenceSupported;
                case "GraduationPlanTypeDescriptor":
                    return IsGraduationPlanTypeDescriptorSupported;
                case "GraduationSchoolYear":
                    return IsGraduationSchoolYearSupported;
                case "PrimarySchool":
                    return IsPrimarySchoolSupported;
                case "RepeatGradeIndicator":
                    return IsRepeatGradeIndicatorSupported;
                case "ResidencyStatusDescriptor":
                    return IsResidencyStatusDescriptorSupported;
                case "SchoolChoiceTransfer":
                    return IsSchoolChoiceTransferSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SchoolYear":
                    return IsSchoolYearSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "StudentSchoolAssociationAlternativeGraduationPlans":
                    return IsStudentSchoolAssociationAlternativeGraduationPlansSupported;
                case "StudentSchoolAssociationEducationPlans":
                    return IsStudentSchoolAssociationEducationPlansSupported;
                case "TermCompletionIndicator":
                    return IsTermCompletionIndicatorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EntryDate":
                    return true;
                case "SchoolId":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentSchoolAssociationAlternativeGraduationPlans":
                    return IsStudentSchoolAssociationAlternativeGraduationPlansItemCreatable;
                case "StudentSchoolAssociationEducationPlans":
                    return IsStudentSchoolAssociationEducationPlansItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSchoolAssociationAlternativeGraduationPlan model.
    /// </summary>
    public interface IStudentSchoolAssociationAlternativeGraduationPlan : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSchoolAssociation StudentSchoolAssociation { get; set; }
        
        int AlternativeEducationOrganizationId { get; set; }
        
        string AlternativeGraduationPlanTypeDescriptor { get; set; }
        
        short AlternativeGraduationSchoolYear { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? AlternativeGraduationPlanResourceId { get; set; }
        string AlternativeGraduationPlanDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSchoolAssociationAlternativeGraduationPlanMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSchoolAssociationAlternativeGraduationPlanMappingContract(
            bool isAlternativeGraduationPlanReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAlternativeGraduationPlanReferenceSupported = isAlternativeGraduationPlanReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAlternativeGraduationPlanReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AlternativeGraduationPlanReference":
                    return IsAlternativeGraduationPlanReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AlternativeEducationOrganizationId":
                    return true;
                case "AlternativeGraduationPlanTypeDescriptor":
                    return true;
                case "AlternativeGraduationSchoolYear":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSchoolAssociationEducationPlan model.
    /// </summary>
    public interface IStudentSchoolAssociationEducationPlan : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSchoolAssociation StudentSchoolAssociation { get; set; }
        
        string EducationPlanDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSchoolAssociationEducationPlanMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSchoolAssociationEducationPlanMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationPlanDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSchoolAttendanceEvent model.
    /// </summary>
    public interface IStudentSchoolAttendanceEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AttendanceEventCategoryDescriptor { get; set; }
        
        DateTime EventDate { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SessionName { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        TimeSpan? ArrivalTime { get; set; }
        string AttendanceEventReason { get; set; }
        TimeSpan? DepartureTime { get; set; }
        string EducationalEnvironmentDescriptor { get; set; }
        decimal? EventDuration { get; set; }
        int? SchoolAttendanceDuration { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SchoolResourceId { get; set; }
        Guid? SessionResourceId { get; set; }
        string SessionDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSchoolAttendanceEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSchoolAttendanceEventMappingContract(
            bool isArrivalTimeSupported,
            bool isAttendanceEventReasonSupported,
            bool isDepartureTimeSupported,
            bool isEducationalEnvironmentDescriptorSupported,
            bool isEventDurationSupported,
            bool isSchoolAttendanceDurationSupported,
            bool isSchoolReferenceSupported,
            bool isSessionReferenceSupported,
            bool isStudentReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsArrivalTimeSupported = isArrivalTimeSupported;
            IsAttendanceEventReasonSupported = isAttendanceEventReasonSupported;
            IsDepartureTimeSupported = isDepartureTimeSupported;
            IsEducationalEnvironmentDescriptorSupported = isEducationalEnvironmentDescriptorSupported;
            IsEventDurationSupported = isEventDurationSupported;
            IsSchoolAttendanceDurationSupported = isSchoolAttendanceDurationSupported;
            IsSchoolReferenceSupported = isSchoolReferenceSupported;
            IsSessionReferenceSupported = isSessionReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsArrivalTimeSupported { get; }
        public bool IsAttendanceEventReasonSupported { get; }
        public bool IsDepartureTimeSupported { get; }
        public bool IsEducationalEnvironmentDescriptorSupported { get; }
        public bool IsEventDurationSupported { get; }
        public bool IsSchoolAttendanceDurationSupported { get; }
        public bool IsSchoolReferenceSupported { get; }
        public bool IsSessionReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ArrivalTime":
                    return IsArrivalTimeSupported;
                case "AttendanceEventReason":
                    return IsAttendanceEventReasonSupported;
                case "DepartureTime":
                    return IsDepartureTimeSupported;
                case "EducationalEnvironmentDescriptor":
                    return IsEducationalEnvironmentDescriptorSupported;
                case "EventDuration":
                    return IsEventDurationSupported;
                case "SchoolAttendanceDuration":
                    return IsSchoolAttendanceDurationSupported;
                case "SchoolReference":
                    return IsSchoolReferenceSupported;
                case "SessionReference":
                    return IsSessionReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AttendanceEventCategoryDescriptor":
                    return true;
                case "EventDate":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SessionName":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSchoolFoodServiceProgramAssociation model.
    /// </summary>
    public interface IStudentSchoolFoodServiceProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        bool? DirectCertification { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSchoolFoodServiceProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSchoolFoodServiceProgramAssociationMappingContract(
            bool isDirectCertificationSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentReferenceSupported,
            bool isStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesItemCreatable,
            Func<IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService, bool> isStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDirectCertificationSupported = isDirectCertificationSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported = isStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesItemCreatable = isStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesItemCreatable;
            IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded = isStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDirectCertificationSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesItemCreatable { get; }
        public Func<IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService, bool> IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DirectCertification":
                    return IsDirectCertificationSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices":
                    return IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices":
                    return IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService model.
    /// </summary>
    public interface IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSchoolFoodServiceProgramAssociation StudentSchoolFoodServiceProgramAssociation { get; set; }
        
        string SchoolFoodServiceProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SchoolFoodServiceProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSectionAssociation model.
    /// </summary>
    public interface IStudentSectionAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        DateTime BeginDate { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        string AttemptStatusDescriptor { get; set; }
        DateTime? EndDate { get; set; }
        bool? HomeroomIndicator { get; set; }
        string RepeatIdentifierDescriptor { get; set; }
        bool? TeacherStudentDataLinkExclusion { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSectionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSectionAssociationMappingContract(
            bool isAttemptStatusDescriptorSupported,
            bool isEndDateSupported,
            bool isHomeroomIndicatorSupported,
            bool isRepeatIdentifierDescriptorSupported,
            bool isSectionReferenceSupported,
            bool isStudentReferenceSupported,
            bool isTeacherStudentDataLinkExclusionSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsAttemptStatusDescriptorSupported = isAttemptStatusDescriptorSupported;
            IsEndDateSupported = isEndDateSupported;
            IsHomeroomIndicatorSupported = isHomeroomIndicatorSupported;
            IsRepeatIdentifierDescriptorSupported = isRepeatIdentifierDescriptorSupported;
            IsSectionReferenceSupported = isSectionReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsTeacherStudentDataLinkExclusionSupported = isTeacherStudentDataLinkExclusionSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsAttemptStatusDescriptorSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsHomeroomIndicatorSupported { get; }
        public bool IsRepeatIdentifierDescriptorSupported { get; }
        public bool IsSectionReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsTeacherStudentDataLinkExclusionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "AttemptStatusDescriptor":
                    return IsAttemptStatusDescriptorSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "HomeroomIndicator":
                    return IsHomeroomIndicatorSupported;
                case "RepeatIdentifierDescriptor":
                    return IsRepeatIdentifierDescriptorSupported;
                case "SectionReference":
                    return IsSectionReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "TeacherStudentDataLinkExclusion":
                    return IsTeacherStudentDataLinkExclusionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSectionAttendanceEvent model.
    /// </summary>
    public interface IStudentSectionAttendanceEvent : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string AttendanceEventCategoryDescriptor { get; set; }
        
        DateTime EventDate { get; set; }
        
        string LocalCourseCode { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }
        
        string StudentUniqueId { get; set; }

        // Non-PK properties
        TimeSpan? ArrivalTime { get; set; }
        string AttendanceEventReason { get; set; }
        TimeSpan? DepartureTime { get; set; }
        string EducationalEnvironmentDescriptor { get; set; }
        decimal? EventDuration { get; set; }
        int? SectionAttendanceDuration { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentSectionAttendanceEventClassPeriod> StudentSectionAttendanceEventClassPeriods { get; set; }

        // Resource reference data
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSectionAttendanceEventMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSectionAttendanceEventMappingContract(
            bool isArrivalTimeSupported,
            bool isAttendanceEventReasonSupported,
            bool isDepartureTimeSupported,
            bool isEducationalEnvironmentDescriptorSupported,
            bool isEventDurationSupported,
            bool isSectionAttendanceDurationSupported,
            bool isSectionReferenceSupported,
            bool isStudentReferenceSupported,
            bool isStudentSectionAttendanceEventClassPeriodsSupported,
            bool isStudentSectionAttendanceEventClassPeriodsItemCreatable,
            Func<IStudentSectionAttendanceEventClassPeriod, bool> isStudentSectionAttendanceEventClassPeriodIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsArrivalTimeSupported = isArrivalTimeSupported;
            IsAttendanceEventReasonSupported = isAttendanceEventReasonSupported;
            IsDepartureTimeSupported = isDepartureTimeSupported;
            IsEducationalEnvironmentDescriptorSupported = isEducationalEnvironmentDescriptorSupported;
            IsEventDurationSupported = isEventDurationSupported;
            IsSectionAttendanceDurationSupported = isSectionAttendanceDurationSupported;
            IsSectionReferenceSupported = isSectionReferenceSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentSectionAttendanceEventClassPeriodsSupported = isStudentSectionAttendanceEventClassPeriodsSupported;
            IsStudentSectionAttendanceEventClassPeriodsItemCreatable = isStudentSectionAttendanceEventClassPeriodsItemCreatable;
            IsStudentSectionAttendanceEventClassPeriodIncluded = isStudentSectionAttendanceEventClassPeriodIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsArrivalTimeSupported { get; }
        public bool IsAttendanceEventReasonSupported { get; }
        public bool IsDepartureTimeSupported { get; }
        public bool IsEducationalEnvironmentDescriptorSupported { get; }
        public bool IsEventDurationSupported { get; }
        public bool IsSectionAttendanceDurationSupported { get; }
        public bool IsSectionReferenceSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentSectionAttendanceEventClassPeriodsSupported { get; }
        public bool IsStudentSectionAttendanceEventClassPeriodsItemCreatable { get; }
        public Func<IStudentSectionAttendanceEventClassPeriod, bool> IsStudentSectionAttendanceEventClassPeriodIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ArrivalTime":
                    return IsArrivalTimeSupported;
                case "AttendanceEventReason":
                    return IsAttendanceEventReasonSupported;
                case "DepartureTime":
                    return IsDepartureTimeSupported;
                case "EducationalEnvironmentDescriptor":
                    return IsEducationalEnvironmentDescriptorSupported;
                case "EventDuration":
                    return IsEventDurationSupported;
                case "SectionAttendanceDuration":
                    return IsSectionAttendanceDurationSupported;
                case "SectionReference":
                    return IsSectionReferenceSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "StudentSectionAttendanceEventClassPeriods":
                    return IsStudentSectionAttendanceEventClassPeriodsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "AttendanceEventCategoryDescriptor":
                    return true;
                case "EventDate":
                    return true;
                case "LocalCourseCode":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentSectionAttendanceEventClassPeriods":
                    return IsStudentSectionAttendanceEventClassPeriodsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSectionAttendanceEventClassPeriod model.
    /// </summary>
    public interface IStudentSectionAttendanceEventClassPeriod : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSectionAttendanceEvent StudentSectionAttendanceEvent { get; set; }
        
        string ClassPeriodName { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ClassPeriodResourceId { get; set; }
        string ClassPeriodDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSectionAttendanceEventClassPeriodMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSectionAttendanceEventClassPeriodMappingContract(
            bool isClassPeriodReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsClassPeriodReferenceSupported = isClassPeriodReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsClassPeriodReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ClassPeriodReference":
                    return IsClassPeriodReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ClassPeriodName":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSpecialEducationProgramAssociation model.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        bool? IdeaEligibility { get; set; }
        DateTime? IEPBeginDate { get; set; }
        DateTime? IEPEndDate { get; set; }
        DateTime? IEPReviewDate { get; set; }
        DateTime? LastEvaluationDate { get; set; }
        bool? MedicallyFragile { get; set; }
        bool? MultiplyDisabled { get; set; }
        decimal? SchoolHoursPerWeek { get; set; }
        decimal? SpecialEducationHoursPerWeek { get; set; }
        string SpecialEducationSettingDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; }
        ICollection<IStudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; }
        ICollection<IStudentSpecialEducationProgramAssociationSpecialEducationProgramService> StudentSpecialEducationProgramAssociationSpecialEducationProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSpecialEducationProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSpecialEducationProgramAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isIdeaEligibilitySupported,
            bool isIEPBeginDateSupported,
            bool isIEPEndDateSupported,
            bool isIEPReviewDateSupported,
            bool isLastEvaluationDateSupported,
            bool isMedicallyFragileSupported,
            bool isMultiplyDisabledSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isSchoolHoursPerWeekSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isSpecialEducationHoursPerWeekSupported,
            bool isSpecialEducationSettingDescriptorSupported,
            bool isStudentReferenceSupported,
            bool isStudentSpecialEducationProgramAssociationDisabilitiesSupported,
            bool isStudentSpecialEducationProgramAssociationServiceProvidersSupported,
            bool isStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentSpecialEducationProgramAssociationDisabilitiesItemCreatable,
            Func<IStudentSpecialEducationProgramAssociationDisability, bool> isStudentSpecialEducationProgramAssociationDisabilityIncluded,
            bool isStudentSpecialEducationProgramAssociationServiceProvidersItemCreatable,
            Func<IStudentSpecialEducationProgramAssociationServiceProvider, bool> isStudentSpecialEducationProgramAssociationServiceProviderIncluded,
            bool isStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesItemCreatable,
            Func<IStudentSpecialEducationProgramAssociationSpecialEducationProgramService, bool> isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsIdeaEligibilitySupported = isIdeaEligibilitySupported;
            IsIEPBeginDateSupported = isIEPBeginDateSupported;
            IsIEPEndDateSupported = isIEPEndDateSupported;
            IsIEPReviewDateSupported = isIEPReviewDateSupported;
            IsLastEvaluationDateSupported = isLastEvaluationDateSupported;
            IsMedicallyFragileSupported = isMedicallyFragileSupported;
            IsMultiplyDisabledSupported = isMultiplyDisabledSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsSchoolHoursPerWeekSupported = isSchoolHoursPerWeekSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsSpecialEducationHoursPerWeekSupported = isSpecialEducationHoursPerWeekSupported;
            IsSpecialEducationSettingDescriptorSupported = isSpecialEducationSettingDescriptorSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentSpecialEducationProgramAssociationDisabilitiesSupported = isStudentSpecialEducationProgramAssociationDisabilitiesSupported;
            IsStudentSpecialEducationProgramAssociationServiceProvidersSupported = isStudentSpecialEducationProgramAssociationServiceProvidersSupported;
            IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported = isStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentSpecialEducationProgramAssociationDisabilitiesItemCreatable = isStudentSpecialEducationProgramAssociationDisabilitiesItemCreatable;
            IsStudentSpecialEducationProgramAssociationDisabilityIncluded = isStudentSpecialEducationProgramAssociationDisabilityIncluded;
            IsStudentSpecialEducationProgramAssociationServiceProvidersItemCreatable = isStudentSpecialEducationProgramAssociationServiceProvidersItemCreatable;
            IsStudentSpecialEducationProgramAssociationServiceProviderIncluded = isStudentSpecialEducationProgramAssociationServiceProviderIncluded;
            IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesItemCreatable = isStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesItemCreatable;
            IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded = isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsIdeaEligibilitySupported { get; }
        public bool IsIEPBeginDateSupported { get; }
        public bool IsIEPEndDateSupported { get; }
        public bool IsIEPReviewDateSupported { get; }
        public bool IsLastEvaluationDateSupported { get; }
        public bool IsMedicallyFragileSupported { get; }
        public bool IsMultiplyDisabledSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsSchoolHoursPerWeekSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsSpecialEducationHoursPerWeekSupported { get; }
        public bool IsSpecialEducationSettingDescriptorSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationDisabilitiesSupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationServiceProvidersSupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentSpecialEducationProgramAssociationDisabilitiesItemCreatable { get; }
        public Func<IStudentSpecialEducationProgramAssociationDisability, bool> IsStudentSpecialEducationProgramAssociationDisabilityIncluded { get; }
        public bool IsStudentSpecialEducationProgramAssociationServiceProvidersItemCreatable { get; }
        public Func<IStudentSpecialEducationProgramAssociationServiceProvider, bool> IsStudentSpecialEducationProgramAssociationServiceProviderIncluded { get; }
        public bool IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesItemCreatable { get; }
        public Func<IStudentSpecialEducationProgramAssociationSpecialEducationProgramService, bool> IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "IdeaEligibility":
                    return IsIdeaEligibilitySupported;
                case "IEPBeginDate":
                    return IsIEPBeginDateSupported;
                case "IEPEndDate":
                    return IsIEPEndDateSupported;
                case "IEPReviewDate":
                    return IsIEPReviewDateSupported;
                case "LastEvaluationDate":
                    return IsLastEvaluationDateSupported;
                case "MedicallyFragile":
                    return IsMedicallyFragileSupported;
                case "MultiplyDisabled":
                    return IsMultiplyDisabledSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "SchoolHoursPerWeek":
                    return IsSchoolHoursPerWeekSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "SpecialEducationHoursPerWeek":
                    return IsSpecialEducationHoursPerWeekSupported;
                case "SpecialEducationSettingDescriptor":
                    return IsSpecialEducationSettingDescriptorSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "StudentSpecialEducationProgramAssociationDisabilities":
                    return IsStudentSpecialEducationProgramAssociationDisabilitiesSupported;
                case "StudentSpecialEducationProgramAssociationServiceProviders":
                    return IsStudentSpecialEducationProgramAssociationServiceProvidersSupported;
                case "StudentSpecialEducationProgramAssociationSpecialEducationProgramServices":
                    return IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentSpecialEducationProgramAssociationDisabilities":
                    return IsStudentSpecialEducationProgramAssociationDisabilitiesItemCreatable;
                case "StudentSpecialEducationProgramAssociationServiceProviders":
                    return IsStudentSpecialEducationProgramAssociationServiceProvidersItemCreatable;
                case "StudentSpecialEducationProgramAssociationSpecialEducationProgramServices":
                    return IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSpecialEducationProgramAssociationDisability model.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationDisability : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; }
        
        string DisabilityDescriptor { get; set; }

        // Non-PK properties
        string DisabilityDeterminationSourceTypeDescriptor { get; set; }
        string DisabilityDiagnosis { get; set; }
        int? OrderOfDisability { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentSpecialEducationProgramAssociationDisabilityDesignation> StudentSpecialEducationProgramAssociationDisabilityDesignations { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSpecialEducationProgramAssociationDisabilityMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSpecialEducationProgramAssociationDisabilityMappingContract(
            bool isDisabilityDeterminationSourceTypeDescriptorSupported,
            bool isDisabilityDiagnosisSupported,
            bool isOrderOfDisabilitySupported,
            bool isStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported,
            bool isStudentSpecialEducationProgramAssociationDisabilityDesignationsItemCreatable,
            Func<IStudentSpecialEducationProgramAssociationDisabilityDesignation, bool> isStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsDisabilityDeterminationSourceTypeDescriptorSupported = isDisabilityDeterminationSourceTypeDescriptorSupported;
            IsDisabilityDiagnosisSupported = isDisabilityDiagnosisSupported;
            IsOrderOfDisabilitySupported = isOrderOfDisabilitySupported;
            IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported = isStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported;
            IsStudentSpecialEducationProgramAssociationDisabilityDesignationsItemCreatable = isStudentSpecialEducationProgramAssociationDisabilityDesignationsItemCreatable;
            IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded = isStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; }
        public bool IsDisabilityDiagnosisSupported { get; }
        public bool IsOrderOfDisabilitySupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationDisabilityDesignationsItemCreatable { get; }
        public Func<IStudentSpecialEducationProgramAssociationDisabilityDesignation, bool> IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "DisabilityDeterminationSourceTypeDescriptor":
                    return IsDisabilityDeterminationSourceTypeDescriptorSupported;
                case "DisabilityDiagnosis":
                    return IsDisabilityDiagnosisSupported;
                case "OrderOfDisability":
                    return IsOrderOfDisabilitySupported;
                case "StudentSpecialEducationProgramAssociationDisabilityDesignations":
                    return IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentSpecialEducationProgramAssociationDisabilityDesignations":
                    return IsStudentSpecialEducationProgramAssociationDisabilityDesignationsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSpecialEducationProgramAssociationDisabilityDesignation model.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationDisabilityDesignation : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSpecialEducationProgramAssociationDisability StudentSpecialEducationProgramAssociationDisability { get; set; }
        
        string DisabilityDesignationDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSpecialEducationProgramAssociationDisabilityDesignationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSpecialEducationProgramAssociationDisabilityDesignationMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "DisabilityDesignationDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSpecialEducationProgramAssociationServiceProvider model.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationServiceProvider : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        bool? PrimaryProvider { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSpecialEducationProgramAssociationServiceProviderMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSpecialEducationProgramAssociationServiceProviderMappingContract(
            bool isPrimaryProviderSupported,
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryProviderSupported = isPrimaryProviderSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryProviderSupported { get; }
        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryProvider":
                    return IsPrimaryProviderSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSpecialEducationProgramAssociationSpecialEducationProgramService model.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationSpecialEducationProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; }
        
        string SpecialEducationProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider> StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            bool isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported,
            bool isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersItemCreatable,
            Func<IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider, bool> isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported = isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported;
            IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersItemCreatable = isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersItemCreatable;
            IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded = isStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported { get; }
        public bool IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersItemCreatable { get; }
        public Func<IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider, bool> IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                case "StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders":
                    return IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SpecialEducationProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders":
                    return IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider model.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentSpecialEducationProgramAssociationSpecialEducationProgramService StudentSpecialEducationProgramAssociationSpecialEducationProgramService { get; set; }
        
        string StaffUniqueId { get; set; }

        // Non-PK properties
        bool? PrimaryProvider { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderMappingContract(
            bool isPrimaryProviderSupported,
            bool isStaffReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryProviderSupported = isPrimaryProviderSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryProviderSupported { get; }
        public bool IsStaffReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryProvider":
                    return IsPrimaryProviderSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "StaffUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentTitleIPartAProgramAssociation model.
    /// </summary>
    public interface IStudentTitleIPartAProgramAssociation : EdFi.IGeneralStudentProgramAssociation, ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties

        // Non-PK properties
        string TitleIPartAParticipantDescriptor { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<IStudentTitleIPartAProgramAssociationService> StudentTitleIPartAProgramAssociationServices { get; set; }
        ICollection<IStudentTitleIPartAProgramAssociationTitleIPartAProgramService> StudentTitleIPartAProgramAssociationTitleIPartAProgramServices { get; set; }

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentTitleIPartAProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentTitleIPartAProgramAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isEndDateSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusSupported,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesSupported,
            bool isProgramReferenceSupported,
            bool isReasonExitedDescriptorSupported,
            bool isServedOutsideOfRegularSessionSupported,
            bool isStudentReferenceSupported,
            bool isStudentTitleIPartAProgramAssociationServicesSupported,
            bool isStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported,
            bool isTitleIPartAParticipantDescriptorSupported,
            bool isGeneralStudentProgramAssociationParticipationStatusCreatable,
            bool isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable,
            Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> isGeneralStudentProgramAssociationProgramParticipationStatusIncluded,
            bool isStudentTitleIPartAProgramAssociationServicesItemCreatable,
            Func<IStudentTitleIPartAProgramAssociationService, bool> isStudentTitleIPartAProgramAssociationServiceIncluded,
            bool isStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesItemCreatable,
            Func<IStudentTitleIPartAProgramAssociationTitleIPartAProgramService, bool> isStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsEndDateSupported = isEndDateSupported;
            IsGeneralStudentProgramAssociationParticipationStatusSupported = isGeneralStudentProgramAssociationParticipationStatusSupported;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported = isGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsReasonExitedDescriptorSupported = isReasonExitedDescriptorSupported;
            IsServedOutsideOfRegularSessionSupported = isServedOutsideOfRegularSessionSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentTitleIPartAProgramAssociationServicesSupported = isStudentTitleIPartAProgramAssociationServicesSupported;
            IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported = isStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported;
            IsTitleIPartAParticipantDescriptorSupported = isTitleIPartAParticipantDescriptorSupported;
            IsGeneralStudentProgramAssociationParticipationStatusCreatable = isGeneralStudentProgramAssociationParticipationStatusCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable = isGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
            IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded = isGeneralStudentProgramAssociationProgramParticipationStatusIncluded;
            IsStudentTitleIPartAProgramAssociationServicesItemCreatable = isStudentTitleIPartAProgramAssociationServicesItemCreatable;
            IsStudentTitleIPartAProgramAssociationServiceIncluded = isStudentTitleIPartAProgramAssociationServiceIncluded;
            IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesItemCreatable = isStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesItemCreatable;
            IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded = isStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsEndDateSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported { get; }
        public bool IsProgramReferenceSupported { get; }
        public bool IsReasonExitedDescriptorSupported { get; }
        public bool IsServedOutsideOfRegularSessionSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentTitleIPartAProgramAssociationServicesSupported { get; }
        public bool IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported { get; }
        public bool IsTitleIPartAParticipantDescriptorSupported { get; }
        public bool IsGeneralStudentProgramAssociationParticipationStatusCreatable { get; }
        public bool IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable { get; }
        public Func<IGeneralStudentProgramAssociationProgramParticipationStatus, bool> IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded { get; }
        public bool IsStudentTitleIPartAProgramAssociationServicesItemCreatable { get; }
        public Func<IStudentTitleIPartAProgramAssociationService, bool> IsStudentTitleIPartAProgramAssociationServiceIncluded { get; }
        public bool IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesItemCreatable { get; }
        public Func<IStudentTitleIPartAProgramAssociationTitleIPartAProgramService, bool> IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "EndDate":
                    return IsEndDateSupported;
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusSupported;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported;
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "ReasonExitedDescriptor":
                    return IsReasonExitedDescriptorSupported;
                case "ServedOutsideOfRegularSession":
                    return IsServedOutsideOfRegularSessionSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "StudentTitleIPartAProgramAssociationServices":
                    return IsStudentTitleIPartAProgramAssociationServicesSupported;
                case "StudentTitleIPartAProgramAssociationTitleIPartAProgramServices":
                    return IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported;
                case "TitleIPartAParticipantDescriptor":
                    return IsTitleIPartAParticipantDescriptorSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "BeginDate":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "ProgramEducationOrganizationId":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "StudentUniqueId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "GeneralStudentProgramAssociationParticipationStatus":
                    return IsGeneralStudentProgramAssociationParticipationStatusCreatable;
                case "GeneralStudentProgramAssociationProgramParticipationStatuses":
                    return IsGeneralStudentProgramAssociationProgramParticipationStatusesItemCreatable;
                case "StudentTitleIPartAProgramAssociationServices":
                    return IsStudentTitleIPartAProgramAssociationServicesItemCreatable;
                case "StudentTitleIPartAProgramAssociationTitleIPartAProgramServices":
                    return IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentTitleIPartAProgramAssociationService model.
    /// </summary>
    public interface IStudentTitleIPartAProgramAssociationService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentTitleIPartAProgramAssociation StudentTitleIPartAProgramAssociation { get; set; }
        
        string ServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentTitleIPartAProgramAssociationServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentTitleIPartAProgramAssociationServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "ServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentTitleIPartAProgramAssociationTitleIPartAProgramService model.
    /// </summary>
    public interface IStudentTitleIPartAProgramAssociationTitleIPartAProgramService : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudentTitleIPartAProgramAssociation StudentTitleIPartAProgramAssociation { get; set; }
        
        string TitleIPartAProgramServiceDescriptor { get; set; }

        // Non-PK properties
        bool? PrimaryIndicator { get; set; }
        DateTime? ServiceBeginDate { get; set; }
        DateTime? ServiceEndDate { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentTitleIPartAProgramAssociationTitleIPartAProgramServiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentTitleIPartAProgramAssociationTitleIPartAProgramServiceMappingContract(
            bool isPrimaryIndicatorSupported,
            bool isServiceBeginDateSupported,
            bool isServiceEndDateSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsPrimaryIndicatorSupported = isPrimaryIndicatorSupported;
            IsServiceBeginDateSupported = isServiceBeginDateSupported;
            IsServiceEndDateSupported = isServiceEndDateSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsPrimaryIndicatorSupported { get; }
        public bool IsServiceBeginDateSupported { get; }
        public bool IsServiceEndDateSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "PrimaryIndicator":
                    return IsPrimaryIndicatorSupported;
                case "ServiceBeginDate":
                    return IsServiceBeginDateSupported;
                case "ServiceEndDate":
                    return IsServiceEndDateSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TitleIPartAProgramServiceDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the StudentVisa model.
    /// </summary>
    public interface IStudentVisa : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        IStudent Student { get; set; }
        
        string VisaDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class StudentVisaMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public StudentVisaMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "VisaDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SubmissionStatusDescriptor model.
    /// </summary>
    public interface ISubmissionStatusDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SubmissionStatusDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SubmissionStatusDescriptorMappingContract : IMappingContract
    {
        public SubmissionStatusDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SubmissionStatusDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the Survey model.
    /// </summary>
    public interface ISurvey : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }

        // Non-PK properties
        int? EducationOrganizationId { get; set; }
        int? NumberAdministered { get; set; }
        int? SchoolId { get; set; }
        short SchoolYear { get; set; }
        string SessionName { get; set; }
        string SurveyCategoryDescriptor { get; set; }
        string SurveyTitle { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? SchoolYearTypeResourceId { get; set; }
        Guid? SessionResourceId { get; set; }
        string SessionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyMappingContract(
            bool isEducationOrganizationIdSupported,
            bool isEducationOrganizationReferenceSupported,
            bool isNumberAdministeredSupported,
            bool isSchoolIdSupported,
            bool isSchoolYearSupported,
            bool isSchoolYearTypeReferenceSupported,
            bool isSessionNameSupported,
            bool isSessionReferenceSupported,
            bool isSurveyCategoryDescriptorSupported,
            bool isSurveyTitleSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationIdSupported = isEducationOrganizationIdSupported;
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsNumberAdministeredSupported = isNumberAdministeredSupported;
            IsSchoolIdSupported = isSchoolIdSupported;
            IsSchoolYearSupported = isSchoolYearSupported;
            IsSchoolYearTypeReferenceSupported = isSchoolYearTypeReferenceSupported;
            IsSessionNameSupported = isSessionNameSupported;
            IsSessionReferenceSupported = isSessionReferenceSupported;
            IsSurveyCategoryDescriptorSupported = isSurveyCategoryDescriptorSupported;
            IsSurveyTitleSupported = isSurveyTitleSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationIdSupported { get; }
        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsNumberAdministeredSupported { get; }
        public bool IsSchoolIdSupported { get; }
        public bool IsSchoolYearSupported { get; }
        public bool IsSchoolYearTypeReferenceSupported { get; }
        public bool IsSessionNameSupported { get; }
        public bool IsSessionReferenceSupported { get; }
        public bool IsSurveyCategoryDescriptorSupported { get; }
        public bool IsSurveyTitleSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationId":
                    return IsEducationOrganizationIdSupported;
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "NumberAdministered":
                    return IsNumberAdministeredSupported;
                case "SchoolId":
                    return IsSchoolIdSupported;
                case "SchoolYear":
                    return IsSchoolYearSupported;
                case "SchoolYearTypeReference":
                    return IsSchoolYearTypeReferenceSupported;
                case "SessionName":
                    return IsSessionNameSupported;
                case "SessionReference":
                    return IsSessionReferenceSupported;
                case "SurveyCategoryDescriptor":
                    return IsSurveyCategoryDescriptorSupported;
                case "SurveyTitle":
                    return IsSurveyTitleSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyCategoryDescriptor model.
    /// </summary>
    public interface ISurveyCategoryDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SurveyCategoryDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyCategoryDescriptorMappingContract : IMappingContract
    {
        public SurveyCategoryDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SurveyCategoryDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyCourseAssociation model.
    /// </summary>
    public interface ISurveyCourseAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string CourseCode { get; set; }
        
        int EducationOrganizationId { get; set; }
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? CourseResourceId { get; set; }
        string CourseDiscriminator { get; set; }
        Guid? SurveyResourceId { get; set; }
        string SurveyDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyCourseAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyCourseAssociationMappingContract(
            bool isCourseReferenceSupported,
            bool isSurveyReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCourseReferenceSupported = isCourseReferenceSupported;
            IsSurveyReferenceSupported = isSurveyReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCourseReferenceSupported { get; }
        public bool IsSurveyReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CourseReference":
                    return IsCourseReferenceSupported;
                case "SurveyReference":
                    return IsSurveyReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "CourseCode":
                    return true;
                case "EducationOrganizationId":
                    return true;
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyLevelDescriptor model.
    /// </summary>
    public interface ISurveyLevelDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int SurveyLevelDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyLevelDescriptorMappingContract : IMappingContract
    {
        public SurveyLevelDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SurveyLevelDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyProgramAssociation model.
    /// </summary>
    public interface ISurveyProgramAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string Namespace { get; set; }
        
        string ProgramName { get; set; }
        
        string ProgramTypeDescriptor { get; set; }
        
        string SurveyIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? ProgramResourceId { get; set; }
        string ProgramDiscriminator { get; set; }
        Guid? SurveyResourceId { get; set; }
        string SurveyDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyProgramAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyProgramAssociationMappingContract(
            bool isProgramReferenceSupported,
            bool isSurveyReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsProgramReferenceSupported = isProgramReferenceSupported;
            IsSurveyReferenceSupported = isSurveyReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsProgramReferenceSupported { get; }
        public bool IsSurveyReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ProgramReference":
                    return IsProgramReferenceSupported;
                case "SurveyReference":
                    return IsSurveyReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "Namespace":
                    return true;
                case "ProgramName":
                    return true;
                case "ProgramTypeDescriptor":
                    return true;
                case "SurveyIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyQuestion model.
    /// </summary>
    public interface ISurveyQuestion : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string QuestionCode { get; set; }
        
        string SurveyIdentifier { get; set; }

        // Non-PK properties
        string QuestionFormDescriptor { get; set; }
        string QuestionText { get; set; }
        string SurveySectionTitle { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISurveyQuestionMatrix> SurveyQuestionMatrices { get; set; }
        ICollection<ISurveyQuestionResponseChoice> SurveyQuestionResponseChoices { get; set; }

        // Resource reference data
        Guid? SurveyResourceId { get; set; }
        string SurveyDiscriminator { get; set; }
        Guid? SurveySectionResourceId { get; set; }
        string SurveySectionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyQuestionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyQuestionMappingContract(
            bool isQuestionFormDescriptorSupported,
            bool isQuestionTextSupported,
            bool isSurveyQuestionMatricesSupported,
            bool isSurveyQuestionResponseChoicesSupported,
            bool isSurveyReferenceSupported,
            bool isSurveySectionReferenceSupported,
            bool isSurveySectionTitleSupported,
            bool isSurveyQuestionMatricesItemCreatable,
            Func<ISurveyQuestionMatrix, bool> isSurveyQuestionMatrixIncluded,
            bool isSurveyQuestionResponseChoicesItemCreatable,
            Func<ISurveyQuestionResponseChoice, bool> isSurveyQuestionResponseChoiceIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsQuestionFormDescriptorSupported = isQuestionFormDescriptorSupported;
            IsQuestionTextSupported = isQuestionTextSupported;
            IsSurveyQuestionMatricesSupported = isSurveyQuestionMatricesSupported;
            IsSurveyQuestionResponseChoicesSupported = isSurveyQuestionResponseChoicesSupported;
            IsSurveyReferenceSupported = isSurveyReferenceSupported;
            IsSurveySectionReferenceSupported = isSurveySectionReferenceSupported;
            IsSurveySectionTitleSupported = isSurveySectionTitleSupported;
            IsSurveyQuestionMatricesItemCreatable = isSurveyQuestionMatricesItemCreatable;
            IsSurveyQuestionMatrixIncluded = isSurveyQuestionMatrixIncluded;
            IsSurveyQuestionResponseChoicesItemCreatable = isSurveyQuestionResponseChoicesItemCreatable;
            IsSurveyQuestionResponseChoiceIncluded = isSurveyQuestionResponseChoiceIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsQuestionFormDescriptorSupported { get; }
        public bool IsQuestionTextSupported { get; }
        public bool IsSurveyQuestionMatricesSupported { get; }
        public bool IsSurveyQuestionResponseChoicesSupported { get; }
        public bool IsSurveyReferenceSupported { get; }
        public bool IsSurveySectionReferenceSupported { get; }
        public bool IsSurveySectionTitleSupported { get; }
        public bool IsSurveyQuestionMatricesItemCreatable { get; }
        public Func<ISurveyQuestionMatrix, bool> IsSurveyQuestionMatrixIncluded { get; }
        public bool IsSurveyQuestionResponseChoicesItemCreatable { get; }
        public Func<ISurveyQuestionResponseChoice, bool> IsSurveyQuestionResponseChoiceIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "QuestionFormDescriptor":
                    return IsQuestionFormDescriptorSupported;
                case "QuestionText":
                    return IsQuestionTextSupported;
                case "SurveyQuestionMatrices":
                    return IsSurveyQuestionMatricesSupported;
                case "SurveyQuestionResponseChoices":
                    return IsSurveyQuestionResponseChoicesSupported;
                case "SurveyReference":
                    return IsSurveyReferenceSupported;
                case "SurveySectionReference":
                    return IsSurveySectionReferenceSupported;
                case "SurveySectionTitle":
                    return IsSurveySectionTitleSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "QuestionCode":
                    return true;
                case "SurveyIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "SurveyQuestionMatrices":
                    return IsSurveyQuestionMatricesItemCreatable;
                case "SurveyQuestionResponseChoices":
                    return IsSurveyQuestionResponseChoicesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyQuestionMatrix model.
    /// </summary>
    public interface ISurveyQuestionMatrix : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISurveyQuestion SurveyQuestion { get; set; }
        
        string MatrixElement { get; set; }

        // Non-PK properties
        int? MaxRawScore { get; set; }
        int? MinRawScore { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyQuestionMatrixMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyQuestionMatrixMappingContract(
            bool isMaxRawScoreSupported,
            bool isMinRawScoreSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaxRawScoreSupported = isMaxRawScoreSupported;
            IsMinRawScoreSupported = isMinRawScoreSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaxRawScoreSupported { get; }
        public bool IsMinRawScoreSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaxRawScore":
                    return IsMaxRawScoreSupported;
                case "MinRawScore":
                    return IsMinRawScoreSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MatrixElement":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyQuestionResponse model.
    /// </summary>
    public interface ISurveyQuestionResponse : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string QuestionCode { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }

        // Non-PK properties
        string Comment { get; set; }
        bool? NoResponse { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISurveyQuestionResponseSurveyQuestionMatrixElementResponse> SurveyQuestionResponseSurveyQuestionMatrixElementResponses { get; set; }
        ICollection<ISurveyQuestionResponseValue> SurveyQuestionResponseValues { get; set; }

        // Resource reference data
        Guid? SurveyQuestionResourceId { get; set; }
        string SurveyQuestionDiscriminator { get; set; }
        Guid? SurveyResponseResourceId { get; set; }
        string SurveyResponseDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyQuestionResponseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyQuestionResponseMappingContract(
            bool isCommentSupported,
            bool isNoResponseSupported,
            bool isSurveyQuestionReferenceSupported,
            bool isSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported,
            bool isSurveyQuestionResponseValuesSupported,
            bool isSurveyResponseReferenceSupported,
            bool isSurveyQuestionResponseSurveyQuestionMatrixElementResponsesItemCreatable,
            Func<ISurveyQuestionResponseSurveyQuestionMatrixElementResponse, bool> isSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded,
            bool isSurveyQuestionResponseValuesItemCreatable,
            Func<ISurveyQuestionResponseValue, bool> isSurveyQuestionResponseValueIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsCommentSupported = isCommentSupported;
            IsNoResponseSupported = isNoResponseSupported;
            IsSurveyQuestionReferenceSupported = isSurveyQuestionReferenceSupported;
            IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported = isSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported;
            IsSurveyQuestionResponseValuesSupported = isSurveyQuestionResponseValuesSupported;
            IsSurveyResponseReferenceSupported = isSurveyResponseReferenceSupported;
            IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesItemCreatable = isSurveyQuestionResponseSurveyQuestionMatrixElementResponsesItemCreatable;
            IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded = isSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded;
            IsSurveyQuestionResponseValuesItemCreatable = isSurveyQuestionResponseValuesItemCreatable;
            IsSurveyQuestionResponseValueIncluded = isSurveyQuestionResponseValueIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsCommentSupported { get; }
        public bool IsNoResponseSupported { get; }
        public bool IsSurveyQuestionReferenceSupported { get; }
        public bool IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported { get; }
        public bool IsSurveyQuestionResponseValuesSupported { get; }
        public bool IsSurveyResponseReferenceSupported { get; }
        public bool IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesItemCreatable { get; }
        public Func<ISurveyQuestionResponseSurveyQuestionMatrixElementResponse, bool> IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded { get; }
        public bool IsSurveyQuestionResponseValuesItemCreatable { get; }
        public Func<ISurveyQuestionResponseValue, bool> IsSurveyQuestionResponseValueIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "Comment":
                    return IsCommentSupported;
                case "NoResponse":
                    return IsNoResponseSupported;
                case "SurveyQuestionReference":
                    return IsSurveyQuestionReferenceSupported;
                case "SurveyQuestionResponseSurveyQuestionMatrixElementResponses":
                    return IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported;
                case "SurveyQuestionResponseValues":
                    return IsSurveyQuestionResponseValuesSupported;
                case "SurveyResponseReference":
                    return IsSurveyResponseReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "QuestionCode":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "SurveyQuestionResponseSurveyQuestionMatrixElementResponses":
                    return IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesItemCreatable;
                case "SurveyQuestionResponseValues":
                    return IsSurveyQuestionResponseValuesItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyQuestionResponseChoice model.
    /// </summary>
    public interface ISurveyQuestionResponseChoice : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISurveyQuestion SurveyQuestion { get; set; }
        
        int SortOrder { get; set; }

        // Non-PK properties
        int? NumericValue { get; set; }
        string TextValue { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyQuestionResponseChoiceMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyQuestionResponseChoiceMappingContract(
            bool isNumericValueSupported,
            bool isTextValueSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsNumericValueSupported = isNumericValueSupported;
            IsTextValueSupported = isTextValueSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsNumericValueSupported { get; }
        public bool IsTextValueSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "NumericValue":
                    return IsNumericValueSupported;
                case "TextValue":
                    return IsTextValueSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SortOrder":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyQuestionResponseSurveyQuestionMatrixElementResponse model.
    /// </summary>
    public interface ISurveyQuestionResponseSurveyQuestionMatrixElementResponse : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISurveyQuestionResponse SurveyQuestionResponse { get; set; }
        
        string MatrixElement { get; set; }

        // Non-PK properties
        int? MaxNumericResponse { get; set; }
        int? MinNumericResponse { get; set; }
        bool? NoResponse { get; set; }
        int? NumericResponse { get; set; }
        string TextResponse { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyQuestionResponseSurveyQuestionMatrixElementResponseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyQuestionResponseSurveyQuestionMatrixElementResponseMappingContract(
            bool isMaxNumericResponseSupported,
            bool isMinNumericResponseSupported,
            bool isNoResponseSupported,
            bool isNumericResponseSupported,
            bool isTextResponseSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsMaxNumericResponseSupported = isMaxNumericResponseSupported;
            IsMinNumericResponseSupported = isMinNumericResponseSupported;
            IsNoResponseSupported = isNoResponseSupported;
            IsNumericResponseSupported = isNumericResponseSupported;
            IsTextResponseSupported = isTextResponseSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsMaxNumericResponseSupported { get; }
        public bool IsMinNumericResponseSupported { get; }
        public bool IsNoResponseSupported { get; }
        public bool IsNumericResponseSupported { get; }
        public bool IsTextResponseSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "MaxNumericResponse":
                    return IsMaxNumericResponseSupported;
                case "MinNumericResponse":
                    return IsMinNumericResponseSupported;
                case "NoResponse":
                    return IsNoResponseSupported;
                case "NumericResponse":
                    return IsNumericResponseSupported;
                case "TextResponse":
                    return IsTextResponseSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "MatrixElement":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyQuestionResponseValue model.
    /// </summary>
    public interface ISurveyQuestionResponseValue : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISurveyQuestionResponse SurveyQuestionResponse { get; set; }
        
        int SurveyQuestionResponseValueIdentifier { get; set; }

        // Non-PK properties
        int? NumericResponse { get; set; }
        string TextResponse { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyQuestionResponseValueMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyQuestionResponseValueMappingContract(
            bool isNumericResponseSupported,
            bool isTextResponseSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsNumericResponseSupported = isNumericResponseSupported;
            IsTextResponseSupported = isTextResponseSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsNumericResponseSupported { get; }
        public bool IsTextResponseSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "NumericResponse":
                    return IsNumericResponseSupported;
                case "TextResponse":
                    return IsTextResponseSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SurveyQuestionResponseValueIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyResponse model.
    /// </summary>
    public interface ISurveyResponse : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }

        // Non-PK properties
        string ElectronicMailAddress { get; set; }
        string FullName { get; set; }
        string Location { get; set; }
        string ParentUniqueId { get; set; }
        DateTime ResponseDate { get; set; }
        int? ResponseTime { get; set; }
        string StaffUniqueId { get; set; }
        string StudentUniqueId { get; set; }

        // One-to-one relationships

        // Lists
        ICollection<ISurveyResponseSurveyLevel> SurveyResponseSurveyLevels { get; set; }

        // Resource reference data
        Guid? ParentResourceId { get; set; }
        string ParentDiscriminator { get; set; }
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
        Guid? StudentResourceId { get; set; }
        string StudentDiscriminator { get; set; }
        Guid? SurveyResourceId { get; set; }
        string SurveyDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyResponseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyResponseMappingContract(
            bool isElectronicMailAddressSupported,
            bool isFullNameSupported,
            bool isLocationSupported,
            bool isParentReferenceSupported,
            bool isParentUniqueIdSupported,
            bool isResponseDateSupported,
            bool isResponseTimeSupported,
            bool isStaffReferenceSupported,
            bool isStaffUniqueIdSupported,
            bool isStudentReferenceSupported,
            bool isStudentUniqueIdSupported,
            bool isSurveyReferenceSupported,
            bool isSurveyResponseSurveyLevelsSupported,
            bool isSurveyResponseSurveyLevelsItemCreatable,
            Func<ISurveyResponseSurveyLevel, bool> isSurveyResponseSurveyLevelIncluded,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsElectronicMailAddressSupported = isElectronicMailAddressSupported;
            IsFullNameSupported = isFullNameSupported;
            IsLocationSupported = isLocationSupported;
            IsParentReferenceSupported = isParentReferenceSupported;
            IsParentUniqueIdSupported = isParentUniqueIdSupported;
            IsResponseDateSupported = isResponseDateSupported;
            IsResponseTimeSupported = isResponseTimeSupported;
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsStaffUniqueIdSupported = isStaffUniqueIdSupported;
            IsStudentReferenceSupported = isStudentReferenceSupported;
            IsStudentUniqueIdSupported = isStudentUniqueIdSupported;
            IsSurveyReferenceSupported = isSurveyReferenceSupported;
            IsSurveyResponseSurveyLevelsSupported = isSurveyResponseSurveyLevelsSupported;
            IsSurveyResponseSurveyLevelsItemCreatable = isSurveyResponseSurveyLevelsItemCreatable;
            IsSurveyResponseSurveyLevelIncluded = isSurveyResponseSurveyLevelIncluded;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsElectronicMailAddressSupported { get; }
        public bool IsFullNameSupported { get; }
        public bool IsLocationSupported { get; }
        public bool IsParentReferenceSupported { get; }
        public bool IsParentUniqueIdSupported { get; }
        public bool IsResponseDateSupported { get; }
        public bool IsResponseTimeSupported { get; }
        public bool IsStaffReferenceSupported { get; }
        public bool IsStaffUniqueIdSupported { get; }
        public bool IsStudentReferenceSupported { get; }
        public bool IsStudentUniqueIdSupported { get; }
        public bool IsSurveyReferenceSupported { get; }
        public bool IsSurveyResponseSurveyLevelsSupported { get; }
        public bool IsSurveyResponseSurveyLevelsItemCreatable { get; }
        public Func<ISurveyResponseSurveyLevel, bool> IsSurveyResponseSurveyLevelIncluded { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "ElectronicMailAddress":
                    return IsElectronicMailAddressSupported;
                case "FullName":
                    return IsFullNameSupported;
                case "Location":
                    return IsLocationSupported;
                case "ParentReference":
                    return IsParentReferenceSupported;
                case "ParentUniqueId":
                    return IsParentUniqueIdSupported;
                case "ResponseDate":
                    return IsResponseDateSupported;
                case "ResponseTime":
                    return IsResponseTimeSupported;
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "StaffUniqueId":
                    return IsStaffUniqueIdSupported;
                case "StudentReference":
                    return IsStudentReferenceSupported;
                case "StudentUniqueId":
                    return IsStudentUniqueIdSupported;
                case "SurveyReference":
                    return IsSurveyReferenceSupported;
                case "SurveyResponseSurveyLevels":
                    return IsSurveyResponseSurveyLevelsSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName)
        {
            switch (memberName)
            {
                case "SurveyResponseSurveyLevels":
                    return IsSurveyResponseSurveyLevelsItemCreatable;
                default:
                    throw new Exception($"Unknown child item '{memberName}'.");
            }
        }

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyResponseEducationOrganizationTargetAssociation model.
    /// </summary>
    public interface ISurveyResponseEducationOrganizationTargetAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? SurveyResponseResourceId { get; set; }
        string SurveyResponseDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyResponseEducationOrganizationTargetAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyResponseEducationOrganizationTargetAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isSurveyResponseReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsSurveyResponseReferenceSupported = isSurveyResponseReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsSurveyResponseReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "SurveyResponseReference":
                    return IsSurveyResponseReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyResponseStaffTargetAssociation model.
    /// </summary>
    public interface ISurveyResponseStaffTargetAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string StaffUniqueId { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
        Guid? SurveyResponseResourceId { get; set; }
        string SurveyResponseDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyResponseStaffTargetAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyResponseStaffTargetAssociationMappingContract(
            bool isStaffReferenceSupported,
            bool isSurveyResponseReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsSurveyResponseReferenceSupported = isSurveyResponseReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStaffReferenceSupported { get; }
        public bool IsSurveyResponseReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "SurveyResponseReference":
                    return IsSurveyResponseReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "StaffUniqueId":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveyResponseSurveyLevel model.
    /// </summary>
    public interface ISurveyResponseSurveyLevel : ISynchronizable, IMappable, IHasExtensions, IGetByExample
    {
        // Primary Key properties
        ISurveyResponse SurveyResponse { get; set; }
        
        string SurveyLevelDescriptor { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveyResponseSurveyLevelMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveyResponseSurveyLevelMappingContract(
            IReadOnlyList<string> supportedExtensions
            )
        {
            SupportedExtensions = supportedExtensions;
        }


        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "SurveyLevelDescriptor":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveySection model.
    /// </summary>
    public interface ISurveySection : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveySectionTitle { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SurveyResourceId { get; set; }
        string SurveyDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveySectionMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveySectionMappingContract(
            bool isSurveyReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsSurveyReferenceSupported = isSurveyReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsSurveyReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "SurveyReference":
                    return IsSurveyReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveySectionTitle":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveySectionAssociation model.
    /// </summary>
    public interface ISurveySectionAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string LocalCourseCode { get; set; }
        
        string Namespace { get; set; }
        
        int SchoolId { get; set; }
        
        short SchoolYear { get; set; }
        
        string SectionIdentifier { get; set; }
        
        string SessionName { get; set; }
        
        string SurveyIdentifier { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SectionResourceId { get; set; }
        string SectionDiscriminator { get; set; }
        Guid? SurveyResourceId { get; set; }
        string SurveyDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveySectionAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveySectionAssociationMappingContract(
            bool isSectionReferenceSupported,
            bool isSurveyReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsSectionReferenceSupported = isSectionReferenceSupported;
            IsSurveyReferenceSupported = isSurveyReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsSectionReferenceSupported { get; }
        public bool IsSurveyReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "SectionReference":
                    return IsSectionReferenceSupported;
                case "SurveyReference":
                    return IsSurveyReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "LocalCourseCode":
                    return true;
                case "Namespace":
                    return true;
                case "SchoolId":
                    return true;
                case "SchoolYear":
                    return true;
                case "SectionIdentifier":
                    return true;
                case "SessionName":
                    return true;
                case "SurveyIdentifier":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveySectionResponse model.
    /// </summary>
    public interface ISurveySectionResponse : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }
        
        string SurveySectionTitle { get; set; }

        // Non-PK properties
        decimal? SectionRating { get; set; }

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? SurveyResponseResourceId { get; set; }
        string SurveyResponseDiscriminator { get; set; }
        Guid? SurveySectionResourceId { get; set; }
        string SurveySectionDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveySectionResponseMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveySectionResponseMappingContract(
            bool isSectionRatingSupported,
            bool isSurveyResponseReferenceSupported,
            bool isSurveySectionReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsSectionRatingSupported = isSectionRatingSupported;
            IsSurveyResponseReferenceSupported = isSurveyResponseReferenceSupported;
            IsSurveySectionReferenceSupported = isSurveySectionReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsSectionRatingSupported { get; }
        public bool IsSurveyResponseReferenceSupported { get; }
        public bool IsSurveySectionReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "SectionRating":
                    return IsSectionRatingSupported;
                case "SurveyResponseReference":
                    return IsSurveyResponseReferenceSupported;
                case "SurveySectionReference":
                    return IsSurveySectionReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                case "SurveySectionTitle":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveySectionResponseEducationOrganizationTargetAssociation model.
    /// </summary>
    public interface ISurveySectionResponseEducationOrganizationTargetAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        int EducationOrganizationId { get; set; }
        
        string Namespace { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }
        
        string SurveySectionTitle { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? EducationOrganizationResourceId { get; set; }
        string EducationOrganizationDiscriminator { get; set; }
        Guid? SurveySectionResponseResourceId { get; set; }
        string SurveySectionResponseDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveySectionResponseEducationOrganizationTargetAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveySectionResponseEducationOrganizationTargetAssociationMappingContract(
            bool isEducationOrganizationReferenceSupported,
            bool isSurveySectionResponseReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsEducationOrganizationReferenceSupported = isEducationOrganizationReferenceSupported;
            IsSurveySectionResponseReferenceSupported = isSurveySectionResponseReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsEducationOrganizationReferenceSupported { get; }
        public bool IsSurveySectionResponseReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "EducationOrganizationReference":
                    return IsEducationOrganizationReferenceSupported;
                case "SurveySectionResponseReference":
                    return IsSurveySectionResponseReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "EducationOrganizationId":
                    return true;
                case "Namespace":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                case "SurveySectionTitle":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the SurveySectionResponseStaffTargetAssociation model.
    /// </summary>
    public interface ISurveySectionResponseStaffTargetAssociation : ISynchronizable, IMappable, IHasExtensions, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        
        string Namespace { get; set; }
        
        string StaffUniqueId { get; set; }
        
        string SurveyIdentifier { get; set; }
        
        string SurveyResponseIdentifier { get; set; }
        
        string SurveySectionTitle { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
        Guid? StaffResourceId { get; set; }
        string StaffDiscriminator { get; set; }
        Guid? SurveySectionResponseResourceId { get; set; }
        string SurveySectionResponseDiscriminator { get; set; }
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class SurveySectionResponseStaffTargetAssociationMappingContract : IMappingContract, IExtensionsMappingContract
    {
        public SurveySectionResponseStaffTargetAssociationMappingContract(
            bool isStaffReferenceSupported,
            bool isSurveySectionResponseReferenceSupported,
            IReadOnlyList<string> supportedExtensions
            )
        {
            IsStaffReferenceSupported = isStaffReferenceSupported;
            IsSurveySectionResponseReferenceSupported = isSurveySectionResponseReferenceSupported;
            SupportedExtensions = supportedExtensions;
        }

        public bool IsStaffReferenceSupported { get; }
        public bool IsSurveySectionResponseReferenceSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "StaffReference":
                    return IsStaffReferenceSupported;
                case "SurveySectionResponseReference":
                    return IsSurveySectionResponseReferenceSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "Namespace":
                    return true;
                case "StaffUniqueId":
                    return true;
                case "SurveyIdentifier":
                    return true;
                case "SurveyResponseIdentifier":
                    return true;
                case "SurveySectionTitle":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

        public IReadOnlyList<string> SupportedExtensions { get; }

        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TeachingCredentialBasisDescriptor model.
    /// </summary>
    public interface ITeachingCredentialBasisDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TeachingCredentialBasisDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TeachingCredentialBasisDescriptorMappingContract : IMappingContract
    {
        public TeachingCredentialBasisDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TeachingCredentialBasisDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TeachingCredentialDescriptor model.
    /// </summary>
    public interface ITeachingCredentialDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TeachingCredentialDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TeachingCredentialDescriptorMappingContract : IMappingContract
    {
        public TeachingCredentialDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TeachingCredentialDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TechnicalSkillsAssessmentDescriptor model.
    /// </summary>
    public interface ITechnicalSkillsAssessmentDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TechnicalSkillsAssessmentDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TechnicalSkillsAssessmentDescriptorMappingContract : IMappingContract
    {
        public TechnicalSkillsAssessmentDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TechnicalSkillsAssessmentDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TelephoneNumberTypeDescriptor model.
    /// </summary>
    public interface ITelephoneNumberTypeDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TelephoneNumberTypeDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TelephoneNumberTypeDescriptorMappingContract : IMappingContract
    {
        public TelephoneNumberTypeDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TelephoneNumberTypeDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TermDescriptor model.
    /// </summary>
    public interface ITermDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TermDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TermDescriptorMappingContract : IMappingContract
    {
        public TermDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TermDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TitleIPartAParticipantDescriptor model.
    /// </summary>
    public interface ITitleIPartAParticipantDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TitleIPartAParticipantDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TitleIPartAParticipantDescriptorMappingContract : IMappingContract
    {
        public TitleIPartAParticipantDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TitleIPartAParticipantDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TitleIPartAProgramServiceDescriptor model.
    /// </summary>
    public interface ITitleIPartAProgramServiceDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TitleIPartAProgramServiceDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TitleIPartAProgramServiceDescriptorMappingContract : IMappingContract
    {
        public TitleIPartAProgramServiceDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TitleIPartAProgramServiceDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TitleIPartASchoolDesignationDescriptor model.
    /// </summary>
    public interface ITitleIPartASchoolDesignationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TitleIPartASchoolDesignationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TitleIPartASchoolDesignationDescriptorMappingContract : IMappingContract
    {
        public TitleIPartASchoolDesignationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TitleIPartASchoolDesignationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the TribalAffiliationDescriptor model.
    /// </summary>
    public interface ITribalAffiliationDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int TribalAffiliationDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class TribalAffiliationDescriptorMappingContract : IMappingContract
    {
        public TribalAffiliationDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "TribalAffiliationDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the VisaDescriptor model.
    /// </summary>
    public interface IVisaDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int VisaDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class VisaDescriptorMappingContract : IMappingContract
    {
        public VisaDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "VisaDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }

    /// <summary>
    /// Defines available properties and methods for the abstraction of the WeaponDescriptor model.
    /// </summary>
    public interface IWeaponDescriptor : EdFi.IDescriptor, ISynchronizable, IMappable, IHasIdentifier, IGetByExample
    {
        // Primary Key properties
        [AutoIncrement]
        int WeaponDescriptorId { get; set; }

        // Non-PK properties

        // One-to-one relationships

        // Lists

        // Resource reference data
    }

    /// <summary>
    /// Defines a mapping contract appropriate for a particular context when data is either being mapped or synchronized
    /// between entities/resources during API request processing.
    /// </summary>
    public class WeaponDescriptorMappingContract : IMappingContract
    {
        public WeaponDescriptorMappingContract(
            bool isCodeValueSupported,
            bool isDescriptionSupported,
            bool isEffectiveBeginDateSupported,
            bool isEffectiveEndDateSupported,
            bool isNamespaceSupported,
            bool isShortDescriptionSupported
            )
        {
            IsCodeValueSupported = isCodeValueSupported;
            IsDescriptionSupported = isDescriptionSupported;
            IsEffectiveBeginDateSupported = isEffectiveBeginDateSupported;
            IsEffectiveEndDateSupported = isEffectiveEndDateSupported;
            IsNamespaceSupported = isNamespaceSupported;
            IsShortDescriptionSupported = isShortDescriptionSupported;
        }

        public bool IsCodeValueSupported { get; }
        public bool IsDescriptionSupported { get; }
        public bool IsEffectiveBeginDateSupported { get; }
        public bool IsEffectiveEndDateSupported { get; }
        public bool IsNamespaceSupported { get; }
        public bool IsShortDescriptionSupported { get; }

        bool IMappingContract.IsMemberSupported(string memberName)
        {
            switch (memberName)
            {
                case "CodeValue":
                    return IsCodeValueSupported;
                case "Description":
                    return IsDescriptionSupported;
                case "EffectiveBeginDate":
                    return IsEffectiveBeginDateSupported;
                case "EffectiveEndDate":
                    return IsEffectiveEndDateSupported;
                case "Namespace":
                    return IsNamespaceSupported;
                case "ShortDescription":
                    return IsShortDescriptionSupported;
                // Additional inspection support for identifying properties (which are implicitly supported by Profiles) for use during validation
                case "WeaponDescriptorId":
                    return true;
                default:
                    throw new Exception($"Unknown member '{memberName}'.");
            }
        }

        bool IMappingContract.IsItemCreatable(string memberName) => throw new Exception($"Unknown child item member '{memberName}'.");

    }
}
