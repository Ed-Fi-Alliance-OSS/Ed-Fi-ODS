using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;
using EdFi.Common.Extensions;
using EdFi.Ods.Api.Models;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Models.Domain;
using EdFi.Ods.Common.Serialization;
using EdFi.Ods.Api.Attributes;
using EdFi.Ods.Common.Adapters;
using EdFi.Ods.Common.Attributes;
using EdFi.Ods.Common.Dependencies;
using EdFi.Ods.Common.Models;
using EdFi.Ods.Common.Models.Resource;
using EdFi.Ods.Common.Validation;
using EdFi.Ods.Entities.Common.EdFi;
using EdFi.Ods.Entities.Common.TPDM;
using Newtonsoft.Json;
using FluentValidation.Results;

// Aggregate: AccreditationStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.AccreditationStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.AccreditationStatusDescriptor table of the AccreditationStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class AccreditationStatusDescriptor : Entities.Common.TPDM.IAccreditationStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the AccreditationStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="accreditationStatusDescriptorId"), NaturalKeyMember]
        public int AccreditationStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AccreditationStatusDescriptorId; }
            set { AccreditationStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IAccreditationStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IAccreditationStatusDescriptor).AccreditationStatusDescriptorId.Equals(compareTo.AccreditationStatusDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IAccreditationStatusDescriptor).AccreditationStatusDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.AccreditationStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IAccreditationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.AccreditationStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IAccreditationStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class AccreditationStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<AccreditationStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<AccreditationStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.AidTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.AidTypeDescriptor table of the AidTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class AidTypeDescriptor : Entities.Common.TPDM.IAidTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the AidTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="aidTypeDescriptorId"), NaturalKeyMember]
        public int AidTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return AidTypeDescriptorId; }
            set { AidTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IAidTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IAidTypeDescriptor).AidTypeDescriptorId.Equals(compareTo.AidTypeDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IAidTypeDescriptor).AidTypeDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.AidTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IAidTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.AidTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IAidTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class AidTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<AidTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<AidTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Candidate

namespace EdFi.Ods.Api.Common.Models.Resources.Candidate.TPDM
{
    /// <summary>
    /// Represents a reference to the Candidate resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateReference
    {
        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return CandidateIdentifier != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Candidate",
                Href = $"/tpdm/candidates/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Candidate table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Candidate : Entities.Common.TPDM.ICandidate, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Candidate()
        {
            CandidateAddresses = new List<CandidateAddress>();
            CandidateDisabilities = new List<CandidateDisability>();
            CandidateElectronicMails = new List<CandidateElectronicMail>();
            CandidateLanguages = new List<CandidateLanguage>();
            CandidateOtherNames = new List<CandidateOtherName>();
            CandidatePersonalIdentificationDocuments = new List<CandidatePersonalIdentificationDocument>();
            CandidateRaces = new List<CandidateRace>();
            CandidateTelephones = new List<CandidateTelephone>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Candidate resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a candidate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidate;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidate).CandidateIdentifier.Equals(compareTo.CandidateIdentifier))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidate).CandidateIdentifier);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthCity")]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthCountryDescriptor")]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthInternationalProvince")]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person's sex at birth.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthSexDescriptor")]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthStateAbbreviationDescriptor")]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateEnteredUS")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="displacementStatus")]
        public string DisplacementStatus { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="economicDisadvantaged")]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="englishLanguageExamDescriptor")]
        public string EnglishLanguageExamDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstGenerationStudent")]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender of the candidate.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="genderDescriptor")]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="limitedEnglishProficiencyDescriptor")]
        public string LimitedEnglishProficiencyDescriptor { get; set; }

        /// <summary>
        /// The individual's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multipleBirthStatus")]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidate.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// The first name the individual prefers, if different from their legal first name
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="preferredFirstName")]
        public string PreferredFirstName { get; set; }

        /// <summary>
        /// The last name the individual prefers, if different from their legal last name
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="preferredLastSurname")]
        public string PreferredLastSurname { get; set; }

        /// <summary>
        /// The sex of the candidate.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (Candidate.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICandidate.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateAddress> _candidateAddresses;
        private ICollection<Entities.Common.TPDM.ICandidateAddress> _candidateAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<CandidateAddress> CandidateAddresses
        {
            get { return _candidateAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateAddress>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateAddress)e.Item).Candidate = this);
                _candidateAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateAddress, CandidateAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateAddress)e.Item).Candidate = this;
                _candidateAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAddress> Entities.Common.TPDM.ICandidate.CandidateAddresses
        {
            get { return _candidateAddressesCovariant; }
            set { CandidateAddresses = new List<CandidateAddress>(value.Cast<CandidateAddress>()); }
        }

        private ICollection<CandidateDisability> _candidateDisabilities;
        private ICollection<Entities.Common.TPDM.ICandidateDisability> _candidateDisabilitiesCovariant;

        [DataMember(Name="disabilities"), NoDuplicateMembers]
        public ICollection<CandidateDisability> CandidateDisabilities
        {
            get { return _candidateDisabilities; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateDisability>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateDisability)e.Item).Candidate = this);
                _candidateDisabilities = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateDisability, CandidateDisability>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateDisability)e.Item).Candidate = this;
                _candidateDisabilitiesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDisability> Entities.Common.TPDM.ICandidate.CandidateDisabilities
        {
            get { return _candidateDisabilitiesCovariant; }
            set { CandidateDisabilities = new List<CandidateDisability>(value.Cast<CandidateDisability>()); }
        }

        private ICollection<CandidateElectronicMail> _candidateElectronicMails;
        private ICollection<Entities.Common.TPDM.ICandidateElectronicMail> _candidateElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<CandidateElectronicMail> CandidateElectronicMails
        {
            get { return _candidateElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateElectronicMail>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateElectronicMail)e.Item).Candidate = this);
                _candidateElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateElectronicMail, CandidateElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateElectronicMail)e.Item).Candidate = this;
                _candidateElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateElectronicMail> Entities.Common.TPDM.ICandidate.CandidateElectronicMails
        {
            get { return _candidateElectronicMailsCovariant; }
            set { CandidateElectronicMails = new List<CandidateElectronicMail>(value.Cast<CandidateElectronicMail>()); }
        }

        private ICollection<CandidateLanguage> _candidateLanguages;
        private ICollection<Entities.Common.TPDM.ICandidateLanguage> _candidateLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<CandidateLanguage> CandidateLanguages
        {
            get { return _candidateLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateLanguage>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateLanguage)e.Item).Candidate = this);
                _candidateLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateLanguage, CandidateLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateLanguage)e.Item).Candidate = this;
                _candidateLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateLanguage> Entities.Common.TPDM.ICandidate.CandidateLanguages
        {
            get { return _candidateLanguagesCovariant; }
            set { CandidateLanguages = new List<CandidateLanguage>(value.Cast<CandidateLanguage>()); }
        }

        private ICollection<CandidateOtherName> _candidateOtherNames;
        private ICollection<Entities.Common.TPDM.ICandidateOtherName> _candidateOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<CandidateOtherName> CandidateOtherNames
        {
            get { return _candidateOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateOtherName>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateOtherName)e.Item).Candidate = this);
                _candidateOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateOtherName, CandidateOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateOtherName)e.Item).Candidate = this;
                _candidateOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateOtherName> Entities.Common.TPDM.ICandidate.CandidateOtherNames
        {
            get { return _candidateOtherNamesCovariant; }
            set { CandidateOtherNames = new List<CandidateOtherName>(value.Cast<CandidateOtherName>()); }
        }

        private ICollection<CandidatePersonalIdentificationDocument> _candidatePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument> _candidatePersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<CandidatePersonalIdentificationDocument> CandidatePersonalIdentificationDocuments
        {
            get { return _candidatePersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidatePersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)e.Item).Candidate = this);
                _candidatePersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, CandidatePersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)e.Item).Candidate = this;
                _candidatePersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument> Entities.Common.TPDM.ICandidate.CandidatePersonalIdentificationDocuments
        {
            get { return _candidatePersonalIdentificationDocumentsCovariant; }
            set { CandidatePersonalIdentificationDocuments = new List<CandidatePersonalIdentificationDocument>(value.Cast<CandidatePersonalIdentificationDocument>()); }
        }

        private ICollection<CandidateRace> _candidateRaces;
        private ICollection<Entities.Common.TPDM.ICandidateRace> _candidateRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<CandidateRace> CandidateRaces
        {
            get { return _candidateRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateRace>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateRace)e.Item).Candidate = this);
                _candidateRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateRace, CandidateRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateRace)e.Item).Candidate = this;
                _candidateRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateRace> Entities.Common.TPDM.ICandidate.CandidateRaces
        {
            get { return _candidateRacesCovariant; }
            set { CandidateRaces = new List<CandidateRace>(value.Cast<CandidateRace>()); }
        }

        private ICollection<CandidateTelephone> _candidateTelephones;
        private ICollection<Entities.Common.TPDM.ICandidateTelephone> _candidateTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<CandidateTelephone> CandidateTelephones
        {
            get { return _candidateTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateTelephone>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateTelephone)e.Item).Candidate = this);
                _candidateTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateTelephone, CandidateTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateTelephone)e.Item).Candidate = this;
                _candidateTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateTelephone> Entities.Common.TPDM.ICandidate.CandidateTelephones
        {
            get { return _candidateTelephonesCovariant; }
            set { CandidateTelephones = new List<CandidateTelephone>(value.Cast<CandidateTelephone>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateAddresses != null) foreach (var item in _candidateAddresses)
            {
                item.Candidate = this;
            }

            if (_candidateDisabilities != null) foreach (var item in _candidateDisabilities)
            {
                item.Candidate = this;
            }

            if (_candidateElectronicMails != null) foreach (var item in _candidateElectronicMails)
            {
                item.Candidate = this;
            }

            if (_candidateLanguages != null) foreach (var item in _candidateLanguages)
            {
                item.Candidate = this;
            }

            if (_candidateOtherNames != null) foreach (var item in _candidateOtherNames)
            {
                item.Candidate = this;
            }

            if (_candidatePersonalIdentificationDocuments != null) foreach (var item in _candidatePersonalIdentificationDocuments)
            {
                item.Candidate = this;
            }

            if (_candidateRaces != null) foreach (var item in _candidateRaces)
            {
                item.Candidate = this;
            }

            if (_candidateTelephones != null) foreach (var item in _candidateTelephones)
            {
                item.Candidate = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidate)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateMapper.MapTo(this, (Entities.Common.TPDM.ICandidate)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidate.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidate.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidatePutPostRequestValidator : FluentValidation.AbstractValidator<Candidate>
    {
        private static readonly FullName _fullName_tpdm_Candidate = new FullName("tpdm", "Candidate");

        protected override bool PreValidate(FluentValidation.ValidationContext<Candidate> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.CandidateMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.CandidateMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_Candidate));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsCandidateAddressIncluded != null)
                {
                    var hasInvalidCandidateAddressesItems = instance.CandidateAddresses.Any(x => !mappingContract.Value.IsCandidateAddressIncluded(x));
        
                    if (hasInvalidCandidateAddressesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateAddress", $"A supplied 'CandidateAddress' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateDisabilityIncluded != null)
                {
                    var hasInvalidCandidateDisabilitiesItems = instance.CandidateDisabilities.Any(x => !mappingContract.Value.IsCandidateDisabilityIncluded(x));
        
                    if (hasInvalidCandidateDisabilitiesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateDisability", $"A supplied 'CandidateDisability' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateElectronicMailIncluded != null)
                {
                    var hasInvalidCandidateElectronicMailsItems = instance.CandidateElectronicMails.Any(x => !mappingContract.Value.IsCandidateElectronicMailIncluded(x));
        
                    if (hasInvalidCandidateElectronicMailsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateElectronicMail", $"A supplied 'CandidateElectronicMail' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateLanguageIncluded != null)
                {
                    var hasInvalidCandidateLanguagesItems = instance.CandidateLanguages.Any(x => !mappingContract.Value.IsCandidateLanguageIncluded(x));
        
                    if (hasInvalidCandidateLanguagesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateLanguage", $"A supplied 'CandidateLanguage' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateOtherNameIncluded != null)
                {
                    var hasInvalidCandidateOtherNamesItems = instance.CandidateOtherNames.Any(x => !mappingContract.Value.IsCandidateOtherNameIncluded(x));
        
                    if (hasInvalidCandidateOtherNamesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateOtherName", $"A supplied 'CandidateOtherName' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidatePersonalIdentificationDocumentIncluded != null)
                {
                    var hasInvalidCandidatePersonalIdentificationDocumentsItems = instance.CandidatePersonalIdentificationDocuments.Any(x => !mappingContract.Value.IsCandidatePersonalIdentificationDocumentIncluded(x));
        
                    if (hasInvalidCandidatePersonalIdentificationDocumentsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidatePersonalIdentificationDocument", $"A supplied 'CandidatePersonalIdentificationDocument' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateRaceIncluded != null)
                {
                    var hasInvalidCandidateRacesItems = instance.CandidateRaces.Any(x => !mappingContract.Value.IsCandidateRaceIncluded(x));
        
                    if (hasInvalidCandidateRacesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateRace", $"A supplied 'CandidateRace' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateTelephoneIncluded != null)
                {
                    var hasInvalidCandidateTelephonesItems = instance.CandidateTelephones.Any(x => !mappingContract.Value.IsCandidateTelephoneIncluded(x));
        
                    if (hasInvalidCandidateTelephonesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateTelephone", $"A supplied 'CandidateTelephone' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateAddressesValidator = new CandidateAddressPutPostRequestValidator();

            foreach (var item in instance.CandidateAddresses)
            {
                var validationResult = candidateAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateDisabilitiesValidator = new CandidateDisabilityPutPostRequestValidator();

            foreach (var item in instance.CandidateDisabilities)
            {
                var validationResult = candidateDisabilitiesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateElectronicMailsValidator = new CandidateElectronicMailPutPostRequestValidator();

            foreach (var item in instance.CandidateElectronicMails)
            {
                var validationResult = candidateElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateLanguagesValidator = new CandidateLanguagePutPostRequestValidator();

            foreach (var item in instance.CandidateLanguages)
            {
                var validationResult = candidateLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateOtherNamesValidator = new CandidateOtherNamePutPostRequestValidator();

            foreach (var item in instance.CandidateOtherNames)
            {
                var validationResult = candidateOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidatePersonalIdentificationDocumentsValidator = new CandidatePersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.CandidatePersonalIdentificationDocuments)
            {
                var validationResult = candidatePersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateRacesValidator = new CandidateRacePutPostRequestValidator();

            foreach (var item in instance.CandidateRaces)
            {
                var validationResult = candidateRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateTelephonesValidator = new CandidateTelephonePutPostRequestValidator();

            foreach (var item in instance.CandidateTelephones)
            {
                var validationResult = candidateTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateAddress table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateAddress : Entities.Common.TPDM.ICandidateAddress
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateAddress()
        {
            CandidateAddressPeriods = new List<CandidateAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateAddress.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateAddress;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateAddress).City.Equals(compareTo.City))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateAddress).PostalCode.Equals(compareTo.PostalCode))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateAddress).StreetNumberName.Equals(compareTo.StreetNumberName))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateAddress).AddressTypeDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateAddress).City);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateAddress).PostalCode);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateAddress).StateAbbreviationDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateAddress).StreetNumberName);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                       'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateAddressPeriod> _candidateAddressPeriods;
        private ICollection<Entities.Common.TPDM.ICandidateAddressPeriod> _candidateAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<CandidateAddressPeriod> CandidateAddressPeriods
        {
            get { return _candidateAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateAddressPeriod>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateAddressPeriod)e.Item).CandidateAddress = this);
                _candidateAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateAddressPeriod, CandidateAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateAddressPeriod)e.Item).CandidateAddress = this;
                _candidateAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAddressPeriod> Entities.Common.TPDM.ICandidateAddress.CandidateAddressPeriods
        {
            get { return _candidateAddressPeriodsCovariant; }
            set { CandidateAddressPeriods = new List<CandidateAddressPeriod>(value.Cast<CandidateAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateAddressPeriods != null) foreach (var item in _candidateAddressPeriods)
            {
                item.CandidateAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateAddressMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateAddressMapper.MapTo(this, (Entities.Common.TPDM.ICandidateAddress)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateAddressPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateAddress>
    {
        private static readonly FullName _fullName_tpdm_CandidateAddress = new FullName("tpdm", "CandidateAddress");

        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.CandidateAddressMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.CandidateAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_CandidateAddress));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsCandidateAddressPeriodIncluded != null)
                {
                    var hasInvalidCandidateAddressPeriodsItems = instance.CandidateAddressPeriods.Any(x => !mappingContract.Value.IsCandidateAddressPeriodIncluded(x));
        
                    if (hasInvalidCandidateAddressPeriodsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateAddressPeriod", $"A supplied 'CandidateAddressPeriod' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateAddressPeriodsValidator = new CandidateAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.CandidateAddressPeriods)
            {
                var validationResult = candidateAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateAddressPeriod table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateAddressPeriod : Entities.Common.TPDM.ICandidateAddressPeriod
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateAddress _candidateAddress;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateAddress Entities.Common.TPDM.ICandidateAddressPeriod.CandidateAddress
        {
            get { return _candidateAddress; }
            set { SetCandidateAddress(value); }
        }

        internal Entities.Common.TPDM.ICandidateAddress CandidateAddress
        {
            set { SetCandidateAddress(value); }
        }

        private void SetCandidateAddress(Entities.Common.TPDM.ICandidateAddress value)
        {
            _candidateAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateAddressPeriod;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateAddress == null || !_candidateAddress.Equals(compareTo.CandidateAddress))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateAddressPeriod).BeginDate.Equals(compareTo.BeginDate))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidateAddress != null)
                hash.Add(_candidateAddress);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateAddressPeriod).BeginDate);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateAddressPeriodMapper.MapTo(this, (Entities.Common.TPDM.ICandidateAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateDisability table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateDisability : Entities.Common.TPDM.ICandidateDisability
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateDisability()
        {
            CandidateDisabilityDesignations = new List<CandidateDisabilityDesignation>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateDisability.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// A disability category that describes a individual's impairment.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDescriptor"), NaturalKeyMember]
        public string DisabilityDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateDisability;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateDisability).DisabilityDescriptor.Equals(compareTo.DisabilityDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateDisability).DisabilityDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDeterminationSourceTypeDescriptor")]
        public string DisabilityDeterminationSourceTypeDescriptor { get; set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="disabilityDiagnosis")]
        public string DisabilityDiagnosis { get; set; }

        /// <summary>
        /// The order by severity of individual's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfDisability")]
        public int? OrderOfDisability { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateDisabilityDesignation> _candidateDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.ICandidateDisabilityDesignation> _candidateDisabilityDesignationsCovariant;

        [DataMember(Name="designations"), NoDuplicateMembers]
        public ICollection<CandidateDisabilityDesignation> CandidateDisabilityDesignations
        {
            get { return _candidateDisabilityDesignations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateDisabilityDesignation>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateDisabilityDesignation)e.Item).CandidateDisability = this);
                _candidateDisabilityDesignations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateDisabilityDesignation, CandidateDisabilityDesignation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateDisabilityDesignation)e.Item).CandidateDisability = this;
                _candidateDisabilityDesignationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDisabilityDesignation> Entities.Common.TPDM.ICandidateDisability.CandidateDisabilityDesignations
        {
            get { return _candidateDisabilityDesignationsCovariant; }
            set { CandidateDisabilityDesignations = new List<CandidateDisabilityDesignation>(value.Cast<CandidateDisabilityDesignation>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateDisabilityDesignations != null) foreach (var item in _candidateDisabilityDesignations)
            {
                item.CandidateDisability = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateDisabilityMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateDisability)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateDisabilityMapper.MapTo(this, (Entities.Common.TPDM.ICandidateDisability)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateDisability>
    {
        private static readonly FullName _fullName_tpdm_CandidateDisability = new FullName("tpdm", "CandidateDisability");

        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateDisability> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.CandidateDisabilityMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.CandidateDisabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_CandidateDisability));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsCandidateDisabilityDesignationIncluded != null)
                {
                    var hasInvalidCandidateDisabilityDesignationsItems = instance.CandidateDisabilityDesignations.Any(x => !mappingContract.Value.IsCandidateDisabilityDesignationIncluded(x));
        
                    if (hasInvalidCandidateDisabilityDesignationsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateDisabilityDesignation", $"A supplied 'CandidateDisabilityDesignation' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateDisabilityDesignationsValidator = new CandidateDisabilityDesignationPutPostRequestValidator();

            foreach (var item in instance.CandidateDisabilityDesignations)
            {
                var validationResult = candidateDisabilityDesignationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateDisabilityDesignation table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityDesignation : Entities.Common.TPDM.ICandidateDisabilityDesignation
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateDisability _candidateDisability;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateDisability Entities.Common.TPDM.ICandidateDisabilityDesignation.CandidateDisability
        {
            get { return _candidateDisability; }
            set { SetCandidateDisability(value); }
        }

        internal Entities.Common.TPDM.ICandidateDisability CandidateDisability
        {
            set { SetCandidateDisability(value); }
        }

        private void SetCandidateDisability(Entities.Common.TPDM.ICandidateDisability value)
        {
            _candidateDisability = value;
        }

        /// <summary>
        /// Whether the disability is IDEA, Section 504, or other disability designation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="disabilityDesignationDescriptor"), NaturalKeyMember]
        public string DisabilityDesignationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateDisabilityDesignation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateDisability == null || !_candidateDisability.Equals(compareTo.CandidateDisability))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateDisabilityDesignation).DisabilityDesignationDescriptor.Equals(compareTo.DisabilityDesignationDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidateDisability != null)
                hash.Add(_candidateDisability);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateDisabilityDesignation).DisabilityDesignationDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateDisabilityDesignationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateDisabilityDesignationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateDisabilityDesignation)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityDesignationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateDisabilityDesignation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateDisabilityDesignation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateElectronicMail table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateElectronicMail : Entities.Common.TPDM.ICandidateElectronicMail
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateElectronicMail.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateElectronicMail;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailAddress);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateElectronicMail).ElectronicMailTypeDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateElectronicMailMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateElectronicMailMapper.MapTo(this, (Entities.Common.TPDM.ICandidateElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateLanguage table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateLanguage : Entities.Common.TPDM.ICandidateLanguage
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateLanguage()
        {
            CandidateLanguageUses = new List<CandidateLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateLanguage.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateLanguage;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateLanguage).LanguageDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateLanguageUse> _candidateLanguageUses;
        private ICollection<Entities.Common.TPDM.ICandidateLanguageUse> _candidateLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<CandidateLanguageUse> CandidateLanguageUses
        {
            get { return _candidateLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateLanguageUse>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateLanguageUse)e.Item).CandidateLanguage = this);
                _candidateLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateLanguageUse, CandidateLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateLanguageUse)e.Item).CandidateLanguage = this;
                _candidateLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateLanguageUse> Entities.Common.TPDM.ICandidateLanguage.CandidateLanguageUses
        {
            get { return _candidateLanguageUsesCovariant; }
            set { CandidateLanguageUses = new List<CandidateLanguageUse>(value.Cast<CandidateLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateLanguageUses != null) foreach (var item in _candidateLanguageUses)
            {
                item.CandidateLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateLanguageMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateLanguageMapper.MapTo(this, (Entities.Common.TPDM.ICandidateLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateLanguage>
    {
        private static readonly FullName _fullName_tpdm_CandidateLanguage = new FullName("tpdm", "CandidateLanguage");

        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.CandidateLanguageMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.CandidateLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_CandidateLanguage));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsCandidateLanguageUseIncluded != null)
                {
                    var hasInvalidCandidateLanguageUsesItems = instance.CandidateLanguageUses.Any(x => !mappingContract.Value.IsCandidateLanguageUseIncluded(x));
        
                    if (hasInvalidCandidateLanguageUsesItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateLanguageUse", $"A supplied 'CandidateLanguageUse' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateLanguageUsesValidator = new CandidateLanguageUsePutPostRequestValidator();

            foreach (var item in instance.CandidateLanguageUses)
            {
                var validationResult = candidateLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateLanguageUse table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateLanguageUse : Entities.Common.TPDM.ICandidateLanguageUse
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateLanguage _candidateLanguage;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateLanguage Entities.Common.TPDM.ICandidateLanguageUse.CandidateLanguage
        {
            get { return _candidateLanguage; }
            set { SetCandidateLanguage(value); }
        }

        internal Entities.Common.TPDM.ICandidateLanguage CandidateLanguage
        {
            set { SetCandidateLanguage(value); }
        }

        private void SetCandidateLanguage(Entities.Common.TPDM.ICandidateLanguage value)
        {
            _candidateLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateLanguageUse;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateLanguage == null || !_candidateLanguage.Equals(compareTo.CandidateLanguage))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidateLanguage != null)
                hash.Add(_candidateLanguage);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateLanguageUse).LanguageUseDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateLanguageUseMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateLanguageUseMapper.MapTo(this, (Entities.Common.TPDM.ICandidateLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateOtherName table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateOtherName : Entities.Common.TPDM.ICandidateOtherName
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateOtherName.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The types of alternate names for an individual.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateOtherName;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateOtherName).OtherNameTypeDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateOtherNameMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateOtherNameMapper.MapTo(this, (Entities.Common.TPDM.ICandidateOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidatePersonalIdentificationDocument table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidatePersonalIdentificationDocument : Entities.Common.TPDM.ICandidatePersonalIdentificationDocument
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidatePersonalIdentificationDocument.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).IdentificationDocumentUseDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidatePersonalIdentificationDocument).PersonalInformationVerificationDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidatePersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidatePersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidatePersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<CandidatePersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidatePersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateRace table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateRace : Entities.Common.TPDM.ICandidateRace
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateRace.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateRace;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateRace).RaceDescriptor.Equals(compareTo.RaceDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateRace).RaceDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateRaceMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateRaceMapper.MapTo(this, (Entities.Common.TPDM.ICandidateRace)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateRacePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateTelephone table of the Candidate aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateTelephone : Entities.Common.TPDM.ICandidateTelephone
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidate _candidate;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidate Entities.Common.TPDM.ICandidateTelephone.Candidate
        {
            get { return _candidate; }
            set { SetCandidate(value); }
        }

        internal Entities.Common.TPDM.ICandidate Candidate
        {
            set { SetCandidate(value); }
        }

        private void SetCandidate(Entities.Common.TPDM.ICandidate value)
        {
            _candidate = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateTelephone;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidate == null || !_candidate.Equals(compareTo.Candidate))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidate != null)
                hash.Add(_candidate);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumber);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateTelephone).TelephoneNumberTypeDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateTelephoneMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateTelephoneMapper.MapTo(this, (Entities.Common.TPDM.ICandidateTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<CandidateTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CandidateEducatorPreparationProgramAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.CandidateEducatorPreparationProgramAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the CandidateEducatorPreparationProgramAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationReference
    {
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="candidateIdentifier"), NaturalKeyMember]
        public string CandidateIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return BeginDate != default(DateTime) && CandidateIdentifier != default(string) && EducationOrganizationId != default(long) && ProgramName != default(string) && ProgramTypeDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "CandidateEducatorPreparationProgramAssociation",
                Href = $"/tpdm/candidateEducatorPreparationProgramAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociation table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociation : Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CandidateEducatorPreparationProgramAssociation()
        {
            CandidateEducatorPreparationProgramAssociationCohortYears = new List<CandidateEducatorPreparationProgramAssociationCohortYear>();
            CandidateEducatorPreparationProgramAssociationDegreeSpecializations = new List<CandidateEducatorPreparationProgramAssociationDegreeSpecialization>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CandidateEducatorPreparationProgramAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _candidateReferenceExplicitlyAssigned;
        private Candidate.TPDM.CandidateReference _candidateReference;
        private Candidate.TPDM.CandidateReference ImplicitCandidateReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_candidateReference == null && !_candidateReferenceExplicitlyAssigned)
                    _candidateReference = new Candidate.TPDM.CandidateReference();

                return _candidateReference;
            }
        }

        [DataMember(Name="candidateReference")][NaturalKeyMember]
        public Candidate.TPDM.CandidateReference CandidateReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCandidateReference != null
                    && (_candidateReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCandidateReference.IsReferenceFullyDefined()))
                    return ImplicitCandidateReference;

                return null;
            }
            set
            {
                _candidateReferenceExplicitlyAssigned = true;
                _candidateReference = value;
            }
        }
        private bool _educatorPreparationProgramReferenceExplicitlyAssigned;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference _educatorPreparationProgramReference;
        private EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference ImplicitEducatorPreparationProgramReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educatorPreparationProgramReference == null && !_educatorPreparationProgramReferenceExplicitlyAssigned)
                    _educatorPreparationProgramReference = new EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference();

                return _educatorPreparationProgramReference;
            }
        }

        [DataMember(Name="educatorPreparationProgramReference")][NaturalKeyMember]
        public EducatorPreparationProgram.TPDM.EducatorPreparationProgramReference EducatorPreparationProgramReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_educatorPreparationProgramReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference;

                return null;
            }
            set
            {
                _educatorPreparationProgramReferenceExplicitlyAssigned = true;
                _educatorPreparationProgramReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The begin date for the association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a candidate.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateIdentifier
        {
            get
            {
                if (ImplicitCandidateReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCandidateReference.IsReferenceFullyDefined()))
                    return ImplicitCandidateReference.CandidateIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Candidate
                _candidateReferenceExplicitlyAssigned = false;
                ImplicitCandidateReference.CandidateIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.ProgramName
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramName;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducatorPreparationProgram
                _educatorPreparationProgramReferenceExplicitlyAssigned = false;
                ImplicitEducatorPreparationProgramReference.ProgramName = value;
            }
        }

        /// <summary>
        /// The type of program.
        /// </summary>

        // IS in a reference (CandidateEducatorPreparationProgramAssociation.ProgramTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.ProgramTypeDescriptor
        {
            get
            {
                if (ImplicitEducatorPreparationProgramReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducatorPreparationProgramReference.IsReferenceFullyDefined()))
                    return ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEducatorPreparationProgramReference.ProgramTypeDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).BeginDate.Equals(compareTo.BeginDate))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).CandidateIdentifier.Equals(compareTo.CandidateIdentifier))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramName.Equals(compareTo.ProgramName))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramTypeDescriptor.Equals(compareTo.ProgramTypeDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).BeginDate);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).CandidateIdentifier);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).EducationOrganizationId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramName);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation).ProgramTypeDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The end date for the association.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The program pathway the candidate is following; for example: Residency, Internship, Traditional
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="eppProgramPathwayDescriptor")]
        public string EPPProgramPathwayDescriptor { get; set; }

        /// <summary>
        /// Reason exited for the association.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="reasonExitedDescriptor")]
        public string ReasonExitedDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CandidateEducatorPreparationProgramAssociationCohortYear> _candidateEducatorPreparationProgramAssociationCohortYears;
        private ICollection<Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear> _candidateEducatorPreparationProgramAssociationCohortYearsCovariant;

        [DataMember(Name="cohortYears"), NoDuplicateMembers]
        public ICollection<CandidateEducatorPreparationProgramAssociationCohortYear> CandidateEducatorPreparationProgramAssociationCohortYears
        {
            get { return _candidateEducatorPreparationProgramAssociationCohortYears; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateEducatorPreparationProgramAssociationCohortYear>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear)e.Item).CandidateEducatorPreparationProgramAssociation = this);
                _candidateEducatorPreparationProgramAssociationCohortYears = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear, CandidateEducatorPreparationProgramAssociationCohortYear>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear)e.Item).CandidateEducatorPreparationProgramAssociation = this;
                _candidateEducatorPreparationProgramAssociationCohortYearsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear> Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateEducatorPreparationProgramAssociationCohortYears
        {
            get { return _candidateEducatorPreparationProgramAssociationCohortYearsCovariant; }
            set { CandidateEducatorPreparationProgramAssociationCohortYears = new List<CandidateEducatorPreparationProgramAssociationCohortYear>(value.Cast<CandidateEducatorPreparationProgramAssociationCohortYear>()); }
        }

        private ICollection<CandidateEducatorPreparationProgramAssociationDegreeSpecialization> _candidateEducatorPreparationProgramAssociationDegreeSpecializations;
        private ICollection<Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization> _candidateEducatorPreparationProgramAssociationDegreeSpecializationsCovariant;

        [DataMember(Name="degreeSpecializations"), NoDuplicateMembers]
        public ICollection<CandidateEducatorPreparationProgramAssociationDegreeSpecialization> CandidateEducatorPreparationProgramAssociationDegreeSpecializations
        {
            get { return _candidateEducatorPreparationProgramAssociationDegreeSpecializations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CandidateEducatorPreparationProgramAssociationDegreeSpecialization>(value,
                    (s, e) => ((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization)e.Item).CandidateEducatorPreparationProgramAssociation = this);
                _candidateEducatorPreparationProgramAssociationDegreeSpecializations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization, CandidateEducatorPreparationProgramAssociationDegreeSpecialization>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization)e.Item).CandidateEducatorPreparationProgramAssociation = this;
                _candidateEducatorPreparationProgramAssociationDegreeSpecializationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization> Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateEducatorPreparationProgramAssociationDegreeSpecializations
        {
            get { return _candidateEducatorPreparationProgramAssociationDegreeSpecializationsCovariant; }
            set { CandidateEducatorPreparationProgramAssociationDegreeSpecializations = new List<CandidateEducatorPreparationProgramAssociationDegreeSpecialization>(value.Cast<CandidateEducatorPreparationProgramAssociationDegreeSpecialization>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_candidateEducatorPreparationProgramAssociationCohortYears != null) foreach (var item in _candidateEducatorPreparationProgramAssociationCohortYears)
            {
                item.CandidateEducatorPreparationProgramAssociation = this;
            }

            if (_candidateEducatorPreparationProgramAssociationDegreeSpecializations != null) foreach (var item in _candidateEducatorPreparationProgramAssociationDegreeSpecializations)
            {
                item.CandidateEducatorPreparationProgramAssociation = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateResourceId
        {
            get { return null; }
            set { ImplicitCandidateReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCandidateReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducatorPreparationProgramResourceId
        {
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducatorPreparationProgramDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducatorPreparationProgramReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEducatorPreparationProgramAssociation>
    {
        private static readonly FullName _fullName_tpdm_CandidateEducatorPreparationProgramAssociation = new FullName("tpdm", "CandidateEducatorPreparationProgramAssociation");

        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEducatorPreparationProgramAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_CandidateEducatorPreparationProgramAssociation));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsCandidateEducatorPreparationProgramAssociationCohortYearIncluded != null)
                {
                    var hasInvalidCandidateEducatorPreparationProgramAssociationCohortYearsItems = instance.CandidateEducatorPreparationProgramAssociationCohortYears.Any(x => !mappingContract.Value.IsCandidateEducatorPreparationProgramAssociationCohortYearIncluded(x));
        
                    if (hasInvalidCandidateEducatorPreparationProgramAssociationCohortYearsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateEducatorPreparationProgramAssociationCohortYear", $"A supplied 'CandidateEducatorPreparationProgramAssociationCohortYear' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsCandidateEducatorPreparationProgramAssociationDegreeSpecializationIncluded != null)
                {
                    var hasInvalidCandidateEducatorPreparationProgramAssociationDegreeSpecializationsItems = instance.CandidateEducatorPreparationProgramAssociationDegreeSpecializations.Any(x => !mappingContract.Value.IsCandidateEducatorPreparationProgramAssociationDegreeSpecializationIncluded(x));
        
                    if (hasInvalidCandidateEducatorPreparationProgramAssociationDegreeSpecializationsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CandidateEducatorPreparationProgramAssociationDegreeSpecialization", $"A supplied 'CandidateEducatorPreparationProgramAssociationDegreeSpecialization' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var candidateEducatorPreparationProgramAssociationCohortYearsValidator = new CandidateEducatorPreparationProgramAssociationCohortYearPutPostRequestValidator();

            foreach (var item in instance.CandidateEducatorPreparationProgramAssociationCohortYears)
            {
                var validationResult = candidateEducatorPreparationProgramAssociationCohortYearsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var candidateEducatorPreparationProgramAssociationDegreeSpecializationsValidator = new CandidateEducatorPreparationProgramAssociationDegreeSpecializationPutPostRequestValidator();

            foreach (var item in instance.CandidateEducatorPreparationProgramAssociationDegreeSpecializations)
            {
                var validationResult = candidateEducatorPreparationProgramAssociationDegreeSpecializationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociationCohortYear table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCohortYear : Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.EdFi.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.EdFi.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.EdFi.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.EdFi.SchoolYearTypeReference SchoolYearTypeReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set
            {
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation _candidateEducatorPreparationProgramAssociation;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear.CandidateEducatorPreparationProgramAssociation
        {
            get { return _candidateEducatorPreparationProgramAssociation; }
            set { SetCandidateEducatorPreparationProgramAssociation(value); }
        }

        internal Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation CandidateEducatorPreparationProgramAssociation
        {
            set { SetCandidateEducatorPreparationProgramAssociation(value); }
        }

        private void SetCandidateEducatorPreparationProgramAssociation(Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation value)
        {
            _candidateEducatorPreparationProgramAssociation = value;
        }

        /// <summary>
        /// The type of cohort year (9th grade, graduation).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="cohortYearTypeDescriptor"), NaturalKeyMember]
        public string CohortYearTypeDescriptor { get; set; }

        /// <summary>
        /// The school year associated with the cohort; for example, the intended school year of graduation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateEducatorPreparationProgramAssociation == null || !_candidateEducatorPreparationProgramAssociation.Equals(compareTo.CandidateEducatorPreparationProgramAssociation))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear).CohortYearTypeDescriptor.Equals(compareTo.CohortYearTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidateEducatorPreparationProgramAssociation != null)
                hash.Add(_candidateEducatorPreparationProgramAssociation);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear).CohortYearTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear).SchoolYear);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The term associated with the cohort year; for example, the intended term of graduation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor")]
        public string TermDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationCohortYearMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationCohortYearMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCohortYear.SchoolYearTypeResourceId
        {
            get { return null; }
            set { ImplicitSchoolYearTypeReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCohortYearPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEducatorPreparationProgramAssociationCohortYear>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEducatorPreparationProgramAssociationCohortYear> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociationDegreeSpecialization table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationDegreeSpecialization : Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation _candidateEducatorPreparationProgramAssociation;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization.CandidateEducatorPreparationProgramAssociation
        {
            get { return _candidateEducatorPreparationProgramAssociation; }
            set { SetCandidateEducatorPreparationProgramAssociation(value); }
        }

        internal Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation CandidateEducatorPreparationProgramAssociation
        {
            set { SetCandidateEducatorPreparationProgramAssociation(value); }
        }

        private void SetCandidateEducatorPreparationProgramAssociation(Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation value)
        {
            _candidateEducatorPreparationProgramAssociation = value;
        }

        /// <summary>
        /// The major area for a degree or area of specialization for a certificate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="majorSpecialization"), NaturalKeyMember]
        public string MajorSpecialization { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_candidateEducatorPreparationProgramAssociation == null || !_candidateEducatorPreparationProgramAssociation.Equals(compareTo.CandidateEducatorPreparationProgramAssociation))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization).MajorSpecialization.Equals(compareTo.MajorSpecialization))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_candidateEducatorPreparationProgramAssociation != null)
                hash.Add(_candidateEducatorPreparationProgramAssociation);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization).MajorSpecialization);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the Teacher Candidate exited the declared specialization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The minor area for a degree or area of specialization for a certificate.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minorSpecialization")]
        public string MinorSpecialization { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationDegreeSpecializationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CandidateEducatorPreparationProgramAssociationDegreeSpecializationMapper.MapTo(this, (Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationDegreeSpecialization)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationDegreeSpecializationPutPostRequestValidator : FluentValidation.AbstractValidator<CandidateEducatorPreparationProgramAssociationDegreeSpecialization>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CandidateEducatorPreparationProgramAssociationDegreeSpecialization> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CertificationRouteDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CertificationRouteDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CertificationRouteDescriptor table of the CertificationRouteDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CertificationRouteDescriptor : Entities.Common.TPDM.ICertificationRouteDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CertificationRouteDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationRouteDescriptorId"), NaturalKeyMember]
        public int CertificationRouteDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CertificationRouteDescriptorId; }
            set { CertificationRouteDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICertificationRouteDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.ICertificationRouteDescriptor).CertificationRouteDescriptorId.Equals(compareTo.CertificationRouteDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.ICertificationRouteDescriptor).CertificationRouteDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CertificationRouteDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICertificationRouteDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CertificationRouteDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICertificationRouteDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CertificationRouteDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CertificationRouteDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CertificationRouteDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CoteachingStyleObservedDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CoteachingStyleObservedDescriptor table of the CoteachingStyleObservedDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CoteachingStyleObservedDescriptor : Entities.Common.TPDM.ICoteachingStyleObservedDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CoteachingStyleObservedDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="coteachingStyleObservedDescriptorId"), NaturalKeyMember]
        public int CoteachingStyleObservedDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CoteachingStyleObservedDescriptorId; }
            set { CoteachingStyleObservedDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor).CoteachingStyleObservedDescriptorId.Equals(compareTo.CoteachingStyleObservedDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.ICoteachingStyleObservedDescriptor).CoteachingStyleObservedDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CoteachingStyleObservedDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICoteachingStyleObservedDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CoteachingStyleObservedDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICoteachingStyleObservedDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CoteachingStyleObservedDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CoteachingStyleObservedDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CoteachingStyleObservedDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Credential

namespace EdFi.Ods.Api.Common.Models.Resources.Credential.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CredentialExtension table of the Credential aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialExtension : Entities.Common.TPDM.ICredentialExtension, IChildEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public CredentialExtension()
        {
            CredentialStudentAcademicRecords = new List<CredentialStudentAcademicRecord>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ICredential _credential;

        [IgnoreDataMember]
        Entities.Common.EdFi.ICredential Entities.Common.TPDM.ICredentialExtension.Credential
        {
            get { return _credential; }
            set { SetCredential(value); }
        }

        internal Entities.Common.EdFi.ICredential Credential
        {
            set { SetCredential(value); }
        }

        private void SetCredential(Entities.Common.EdFi.ICredential value)
        {
            _credential = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICredentialExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_credential == null || !_credential.Equals(compareTo.Credential))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_credential != null)
                hash.Add(_credential);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Indicator that the credential was granted under the authority of a national Board Certification.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="boardCertificationIndicator")]
        public bool? BoardCertificationIndicator { get; set; }

        /// <summary>
        /// The process, program, or pathway used to obtain certification.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="certificationRouteDescriptor")]
        public string CertificationRouteDescriptor { get; set; }

        /// <summary>
        /// The title of the certification obtained by the educator.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="certificationTitle")]
        public string CertificationTitle { get; set; }

        /// <summary>
        /// The month, day, and year on which the credential status was effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialStatusDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? CredentialStatusDate { get; set; }

        /// <summary>
        /// The current status of the credential (e.g., active, suspended, etc.).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="credentialStatusDescriptor")]
        public string CredentialStatusDescriptor { get; set; }

        /// <summary>
        /// The specific roles or positions within an organization that the credential is intended to authorize (e.g., Principal, Reading Specialist), typically associated with service and administrative certifications.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="educatorRoleDescriptor")]
        public string EducatorRoleDescriptor { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialExtension.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (Credential.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICredentialExtension.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<CredentialStudentAcademicRecord> _credentialStudentAcademicRecords;
        private ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> _credentialStudentAcademicRecordsCovariant;

        [DataMember(Name="studentAcademicRecords"), NoDuplicateMembers]
        public ICollection<CredentialStudentAcademicRecord> CredentialStudentAcademicRecords
        {
            get { return _credentialStudentAcademicRecords; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<CredentialStudentAcademicRecord>(value,
                    (s, e) => ((Entities.Common.TPDM.ICredentialStudentAcademicRecord)e.Item).CredentialExtension = this);
                _credentialStudentAcademicRecords = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.ICredentialStudentAcademicRecord, CredentialStudentAcademicRecord>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.ICredentialStudentAcademicRecord)e.Item).CredentialExtension = this;
                _credentialStudentAcademicRecordsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> Entities.Common.TPDM.ICredentialExtension.CredentialStudentAcademicRecords
        {
            get { return _credentialStudentAcademicRecordsCovariant; }
            set { CredentialStudentAcademicRecords = new List<CredentialStudentAcademicRecord>(value.Cast<CredentialStudentAcademicRecord>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_credentialStudentAcademicRecords != null) foreach (var item in _credentialStudentAcademicRecords)
            {
                item.CredentialExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialExtensionMapper.MapTo(this, (Entities.Common.TPDM.ICredentialExtension)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICredentialExtension.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICredentialExtension.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------

        void IChildEntity.SetParent(object value)
        {
            Credential = (ICredential)value;
        }
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialExtension>
    {
        private static readonly FullName _fullName_tpdm_CredentialExtension = new FullName("tpdm", "CredentialExtension");

        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.CredentialExtensionMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.CredentialExtensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_CredentialExtension));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsCredentialStudentAcademicRecordIncluded != null)
                {
                    var hasInvalidCredentialStudentAcademicRecordsItems = instance.CredentialStudentAcademicRecords.Any(x => !mappingContract.Value.IsCredentialStudentAcademicRecordIncluded(x));
        
                    if (hasInvalidCredentialStudentAcademicRecordsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("CredentialStudentAcademicRecord", $"A supplied 'CredentialStudentAcademicRecord' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var credentialStudentAcademicRecordsValidator = new CredentialStudentAcademicRecordPutPostRequestValidator();

            foreach (var item in instance.CredentialStudentAcademicRecords)
            {
                var validationResult = credentialStudentAcademicRecordsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.CredentialStudentAcademicRecord table of the Credential aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialStudentAcademicRecord : Entities.Common.TPDM.ICredentialStudentAcademicRecord
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _studentAcademicRecordReferenceExplicitlyAssigned;
        private StudentAcademicRecord.EdFi.StudentAcademicRecordReference _studentAcademicRecordReference;
        private StudentAcademicRecord.EdFi.StudentAcademicRecordReference ImplicitStudentAcademicRecordReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentAcademicRecordReference == null && !_studentAcademicRecordReferenceExplicitlyAssigned)
                    _studentAcademicRecordReference = new StudentAcademicRecord.EdFi.StudentAcademicRecordReference();

                return _studentAcademicRecordReference;
            }
        }

        [DataMember(Name="studentAcademicRecordReference")][NaturalKeyMember]
        public StudentAcademicRecord.EdFi.StudentAcademicRecordReference StudentAcademicRecordReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitStudentAcademicRecordReference != null
                    && (_studentAcademicRecordReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference;

                return null;
            }
            set
            {
                _studentAcademicRecordReferenceExplicitlyAssigned = true;
                _studentAcademicRecordReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.ICredentialExtension _credentialExtension;

        [IgnoreDataMember]
        Entities.Common.TPDM.ICredentialExtension Entities.Common.TPDM.ICredentialStudentAcademicRecord.CredentialExtension
        {
            get { return _credentialExtension; }
            set { SetCredentialExtension(value); }
        }

        internal Entities.Common.TPDM.ICredentialExtension CredentialExtension
        {
            set { SetCredentialExtension(value); }
        }

        private void SetCredentialExtension(Entities.Common.TPDM.ICredentialExtension value)
        {
            _credentialExtension = value;
        }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.ICredentialStudentAcademicRecord.EducationOrganizationId
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.ICredentialStudentAcademicRecord.SchoolYear
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // StudentAcademicRecord
                _studentAcademicRecordReferenceExplicitlyAssigned = false;
                ImplicitStudentAcademicRecordReference.StudentUniqueId = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (CredentialStudentAcademicRecord.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.TermDescriptor
        {
            get
            {
                if (ImplicitStudentAcademicRecordReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentAcademicRecordReference.IsReferenceFullyDefined()))
                    return ImplicitStudentAcademicRecordReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitStudentAcademicRecordReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICredentialStudentAcademicRecord;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_credentialExtension == null || !_credentialExtension.Equals(compareTo.CredentialExtension))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).StudentUniqueId.Equals(compareTo.StudentUniqueId))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_credentialExtension != null)
                hash.Add(_credentialExtension);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).EducationOrganizationId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).SchoolYear);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).StudentUniqueId);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.ICredentialStudentAcademicRecord).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialStudentAcademicRecordMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialStudentAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialStudentAcademicRecordMapper.MapTo(this, (Entities.Common.TPDM.ICredentialStudentAcademicRecord)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordResourceId
        {
            get { return null; }
            set { ImplicitStudentAcademicRecordReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitStudentAcademicRecordReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialStudentAcademicRecordPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialStudentAcademicRecord>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialStudentAcademicRecord> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: CredentialStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.CredentialStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.CredentialStatusDescriptor table of the CredentialStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class CredentialStatusDescriptor : Entities.Common.TPDM.ICredentialStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the CredentialStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="credentialStatusDescriptorId"), NaturalKeyMember]
        public int CredentialStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return CredentialStatusDescriptorId; }
            set { CredentialStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ICredentialStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.ICredentialStatusDescriptor).CredentialStatusDescriptorId.Equals(compareTo.CredentialStatusDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.ICredentialStatusDescriptor).CredentialStatusDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.CredentialStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.ICredentialStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.CredentialStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.ICredentialStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class CredentialStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<CredentialStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<CredentialStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EducatorPreparationProgram

namespace EdFi.Ods.Api.Common.Models.Resources.EducatorPreparationProgram.TPDM
{
    /// <summary>
    /// Represents a reference to the EducatorPreparationProgram resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && ProgramName != default(string) && ProgramTypeDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EducatorPreparationProgram",
                Href = $"/tpdm/educatorPreparationPrograms/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgram table of the EducatorPreparationProgram aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgram : Entities.Common.TPDM.IEducatorPreparationProgram, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EducatorPreparationProgram()
        {
            EducatorPreparationProgramGradeLevels = new List<EducatorPreparationProgramGradeLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducatorPreparationProgram resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name of the Educator Preparation Program.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programName"), NaturalKeyMember]
        public string ProgramName { get; set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="programTypeDescriptor"), NaturalKeyMember]
        public string ProgramTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEducatorPreparationProgram;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEducatorPreparationProgram).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramName.Equals(compareTo.ProgramName))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramTypeDescriptor.Equals(compareTo.ProgramTypeDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEducatorPreparationProgram).EducationOrganizationId);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramName);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEducatorPreparationProgram).ProgramTypeDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The current accreditation status of the Educator Preparation Program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="accreditationStatusDescriptor")]
        public string AccreditationStatusDescriptor { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="programId")]
        public string ProgramId { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EducatorPreparationProgramGradeLevel> _educatorPreparationProgramGradeLevels;
        private ICollection<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel> _educatorPreparationProgramGradeLevelsCovariant;

        [DataMember(Name="gradeLevels"), NoDuplicateMembers]
        public ICollection<EducatorPreparationProgramGradeLevel> EducatorPreparationProgramGradeLevels
        {
            get { return _educatorPreparationProgramGradeLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EducatorPreparationProgramGradeLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)e.Item).EducatorPreparationProgram = this);
                _educatorPreparationProgramGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, EducatorPreparationProgramGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)e.Item).EducatorPreparationProgram = this;
                _educatorPreparationProgramGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel> Entities.Common.TPDM.IEducatorPreparationProgram.EducatorPreparationProgramGradeLevels
        {
            get { return _educatorPreparationProgramGradeLevelsCovariant; }
            set { EducatorPreparationProgramGradeLevels = new List<EducatorPreparationProgramGradeLevel>(value.Cast<EducatorPreparationProgramGradeLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_educatorPreparationProgramGradeLevels != null) foreach (var item in _educatorPreparationProgramGradeLevels)
            {
                item.EducatorPreparationProgram = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorPreparationProgramMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorPreparationProgramMapper.MapTo(this, (Entities.Common.TPDM.IEducatorPreparationProgram)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorPreparationProgram>
    {
        private static readonly FullName _fullName_tpdm_EducatorPreparationProgram = new FullName("tpdm", "EducatorPreparationProgram");

        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorPreparationProgram> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EducatorPreparationProgramMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EducatorPreparationProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_EducatorPreparationProgram));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEducatorPreparationProgramGradeLevelIncluded != null)
                {
                    var hasInvalidEducatorPreparationProgramGradeLevelsItems = instance.EducatorPreparationProgramGradeLevels.Any(x => !mappingContract.Value.IsEducatorPreparationProgramGradeLevelIncluded(x));
        
                    if (hasInvalidEducatorPreparationProgramGradeLevelsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EducatorPreparationProgramGradeLevel", $"A supplied 'EducatorPreparationProgramGradeLevel' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var educatorPreparationProgramGradeLevelsValidator = new EducatorPreparationProgramGradeLevelPutPostRequestValidator();

            foreach (var item in instance.EducatorPreparationProgramGradeLevels)
            {
                var validationResult = educatorPreparationProgramGradeLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgramGradeLevel table of the EducatorPreparationProgram aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramGradeLevel : Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEducatorPreparationProgram _educatorPreparationProgram;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEducatorPreparationProgram Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel.EducatorPreparationProgram
        {
            get { return _educatorPreparationProgram; }
            set { SetEducatorPreparationProgram(value); }
        }

        internal Entities.Common.TPDM.IEducatorPreparationProgram EducatorPreparationProgram
        {
            set { SetEducatorPreparationProgram(value); }
        }

        private void SetEducatorPreparationProgram(Entities.Common.TPDM.IEducatorPreparationProgram value)
        {
            _educatorPreparationProgram = value;
        }

        /// <summary>
        /// The grade levels served at the EPP Program.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_educatorPreparationProgram == null || !_educatorPreparationProgram.Equals(compareTo.EducatorPreparationProgram))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_educatorPreparationProgram != null)
                hash.Add(_educatorPreparationProgram);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel).GradeLevelDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorPreparationProgramGradeLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorPreparationProgramGradeLevelMapper.MapTo(this, (Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramGradeLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorPreparationProgramGradeLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorPreparationProgramGradeLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EducatorRoleDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EducatorRoleDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EducatorRoleDescriptor table of the EducatorRoleDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EducatorRoleDescriptor : Entities.Common.TPDM.IEducatorRoleDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EducatorRoleDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="educatorRoleDescriptorId"), NaturalKeyMember]
        public int EducatorRoleDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EducatorRoleDescriptorId; }
            set { EducatorRoleDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEducatorRoleDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEducatorRoleDescriptor).EducatorRoleDescriptorId.Equals(compareTo.EducatorRoleDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEducatorRoleDescriptor).EducatorRoleDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EducatorRoleDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEducatorRoleDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EducatorRoleDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEducatorRoleDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EducatorRoleDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EducatorRoleDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EducatorRoleDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EnglishLanguageExamDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EnglishLanguageExamDescriptor table of the EnglishLanguageExamDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EnglishLanguageExamDescriptor : Entities.Common.TPDM.IEnglishLanguageExamDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EnglishLanguageExamDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="englishLanguageExamDescriptorId"), NaturalKeyMember]
        public int EnglishLanguageExamDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EnglishLanguageExamDescriptorId; }
            set { EnglishLanguageExamDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEnglishLanguageExamDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEnglishLanguageExamDescriptor).EnglishLanguageExamDescriptorId.Equals(compareTo.EnglishLanguageExamDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEnglishLanguageExamDescriptor).EnglishLanguageExamDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EnglishLanguageExamDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEnglishLanguageExamDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EnglishLanguageExamDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEnglishLanguageExamDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EnglishLanguageExamDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EnglishLanguageExamDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EnglishLanguageExamDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EPPProgramPathwayDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EPPProgramPathwayDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EPPProgramPathwayDescriptor table of the EPPProgramPathwayDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EPPProgramPathwayDescriptor : Entities.Common.TPDM.IEPPProgramPathwayDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EPPProgramPathwayDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="eppProgramPathwayDescriptorId"), NaturalKeyMember]
        public int EPPProgramPathwayDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EPPProgramPathwayDescriptorId; }
            set { EPPProgramPathwayDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEPPProgramPathwayDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEPPProgramPathwayDescriptor).EPPProgramPathwayDescriptorId.Equals(compareTo.EPPProgramPathwayDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEPPProgramPathwayDescriptor).EPPProgramPathwayDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EPPProgramPathwayDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEPPProgramPathwayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EPPProgramPathwayDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEPPProgramPathwayDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EPPProgramPathwayDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EPPProgramPathwayDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EPPProgramPathwayDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Evaluation

namespace EdFi.Ods.Api.Common.Models.Resources.Evaluation.TPDM
{
    /// <summary>
    /// Represents a reference to the Evaluation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Evaluation",
                Href = $"/tpdm/evaluations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.Evaluation table of the Evaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Evaluation : Entities.Common.TPDM.IEvaluation, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Evaluation()
        {
            EvaluationRatingLevels = new List<EvaluationRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Evaluation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _performanceEvaluationReferenceExplicitlyAssigned;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference _performanceEvaluationReference;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference ImplicitPerformanceEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_performanceEvaluationReference == null && !_performanceEvaluationReferenceExplicitlyAssigned)
                    _performanceEvaluationReference = new PerformanceEvaluation.TPDM.PerformanceEvaluationReference();

                return _performanceEvaluationReference;
            }
        }

        [DataMember(Name="performanceEvaluationReference")][NaturalKeyMember]
        public PerformanceEvaluation.TPDM.PerformanceEvaluationReference PerformanceEvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPerformanceEvaluationReference != null
                    && (_performanceEvaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference;

                return null;
            }
            set
            {
                _performanceEvaluationReferenceExplicitlyAssigned = true;
                _performanceEvaluationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEvaluation.EducationOrganizationId
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (Evaluation.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluation.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (Evaluation.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluation.SchoolYear
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (Evaluation.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluation.TermDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluation).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluation).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluation).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluation).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluation).EducationOrganizationId);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluation).EvaluationPeriodDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluation).EvaluationTitle);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluation).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluation).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluation).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The long description of the Evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationDescription")]
        public string EvaluationDescription { get; set; }

        /// <summary>
        /// The type of the evaluation (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationTypeDescriptor")]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interRaterReliabilityScore")]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation. If omitted, assumed to be 0.0.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationRatingLevel> _evaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> _evaluationRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<EvaluationRatingLevel> EvaluationRatingLevels
        {
            get { return _evaluationRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationRatingLevel)e.Item).Evaluation = this);
                _evaluationRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationRatingLevel, EvaluationRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationRatingLevel)e.Item).Evaluation = this;
                _evaluationRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> Entities.Common.TPDM.IEvaluation.EvaluationRatingLevels
        {
            get { return _evaluationRatingLevelsCovariant; }
            set { EvaluationRatingLevels = new List<EvaluationRatingLevel>(value.Cast<EvaluationRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationRatingLevels != null) foreach (var item in _evaluationRatingLevels)
            {
                item.Evaluation = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationMapper.MapTo(this, (Entities.Common.TPDM.IEvaluation)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluation.PerformanceEvaluationResourceId
        {
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationPutPostRequestValidator : FluentValidation.AbstractValidator<Evaluation>
    {
        private static readonly FullName _fullName_tpdm_Evaluation = new FullName("tpdm", "Evaluation");

        protected override bool PreValidate(FluentValidation.ValidationContext<Evaluation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EvaluationMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EvaluationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_Evaluation));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEvaluationRatingLevelIncluded != null)
                {
                    var hasInvalidEvaluationRatingLevelsItems = instance.EvaluationRatingLevels.Any(x => !mappingContract.Value.IsEvaluationRatingLevelIncluded(x));
        
                    if (hasInvalidEvaluationRatingLevelsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationRatingLevel", $"A supplied 'EvaluationRatingLevel' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var evaluationRatingLevelsValidator = new EvaluationRatingLevelPutPostRequestValidator();

            foreach (var item in instance.EvaluationRatingLevels)
            {
                var validationResult = evaluationRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevel table of the Evaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevel : Entities.Common.TPDM.IEvaluationRatingLevel
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluation _evaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluation Entities.Common.TPDM.IEvaluationRatingLevel.Evaluation
        {
            get { return _evaluation; }
            set { SetEvaluation(value); }
        }

        internal Entities.Common.TPDM.IEvaluation Evaluation
        {
            set { SetEvaluation(value); }
        }

        private void SetEvaluation(Entities.Common.TPDM.IEvaluation value)
        {
            _evaluation = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluation == null || !_evaluation.Equals(compareTo.Evaluation))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluation != null)
                hash.Add(_evaluation);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationRatingLevel).EvaluationRatingLevelDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationElement

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationElement.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationElement resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationElement",
                Href = $"/tpdm/evaluationElements/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationElement table of the EvaluationElement aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElement : Entities.Common.TPDM.IEvaluationElement, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationElement()
        {
            EvaluationElementRatingLevels = new List<EvaluationElementRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationElement resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationObjectiveReferenceExplicitlyAssigned;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference _evaluationObjectiveReference;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference ImplicitEvaluationObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationObjectiveReference == null && !_evaluationObjectiveReferenceExplicitlyAssigned)
                    _evaluationObjectiveReference = new EvaluationObjective.TPDM.EvaluationObjectiveReference();

                return _evaluationObjectiveReference;
            }
        }

        [DataMember(Name="evaluationObjectiveReference")][NaturalKeyMember]
        public EvaluationObjective.TPDM.EvaluationObjectiveReference EvaluationObjectiveReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationObjectiveReference != null
                    && (_evaluationObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference;

                return null;
            }
            set
            {
                _evaluationObjectiveReferenceExplicitlyAssigned = true;
                _evaluationObjectiveReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEvaluationElement.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (EvaluationElement.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationElement.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationElement.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationElement.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElement.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElement;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationElement).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElement).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).EducationOrganizationId);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationElement).EvaluationElementTitle);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).EvaluationObjectiveTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).EvaluationTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElement).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The type of the evaluation (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationTypeDescriptor")]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation element. If omitted, assumed to be 0.0.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }

        /// <summary>
        /// The sort order of this Evaluation Element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sortOrder")]
        public int? SortOrder { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationElementRatingLevel> _evaluationElementRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> _evaluationElementRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<EvaluationElementRatingLevel> EvaluationElementRatingLevels
        {
            get { return _evaluationElementRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationElementRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingLevel)e.Item).EvaluationElement = this);
                _evaluationElementRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationElementRatingLevel, EvaluationElementRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingLevel)e.Item).EvaluationElement = this;
                _evaluationElementRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> Entities.Common.TPDM.IEvaluationElement.EvaluationElementRatingLevels
        {
            get { return _evaluationElementRatingLevelsCovariant; }
            set { EvaluationElementRatingLevels = new List<EvaluationElementRatingLevel>(value.Cast<EvaluationElementRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationElementRatingLevels != null) foreach (var item in _evaluationElementRatingLevels)
            {
                item.EvaluationElement = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElement)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElement)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveResourceId
        {
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElement>
    {
        private static readonly FullName _fullName_tpdm_EvaluationElement = new FullName("tpdm", "EvaluationElement");

        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElement> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EvaluationElementMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EvaluationElementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_EvaluationElement));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEvaluationElementRatingLevelIncluded != null)
                {
                    var hasInvalidEvaluationElementRatingLevelsItems = instance.EvaluationElementRatingLevels.Any(x => !mappingContract.Value.IsEvaluationElementRatingLevelIncluded(x));
        
                    if (hasInvalidEvaluationElementRatingLevelsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationElementRatingLevel", $"A supplied 'EvaluationElementRatingLevel' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var evaluationElementRatingLevelsValidator = new EvaluationElementRatingLevelPutPostRequestValidator();

            foreach (var item in instance.EvaluationElementRatingLevels)
            {
                var validationResult = evaluationElementRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevel table of the EvaluationElement aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevel : Entities.Common.TPDM.IEvaluationElementRatingLevel
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationElement _evaluationElement;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationElement Entities.Common.TPDM.IEvaluationElementRatingLevel.EvaluationElement
        {
            get { return _evaluationElement; }
            set { SetEvaluationElement(value); }
        }

        internal Entities.Common.TPDM.IEvaluationElement EvaluationElement
        {
            set { SetEvaluationElement(value); }
        }

        private void SetEvaluationElement(Entities.Common.TPDM.IEvaluationElement value)
        {
            _evaluationElement = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationElement == null || !_evaluationElement.Equals(compareTo.EvaluationElement))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationElementRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationElement != null)
                hash.Add(_evaluationElement);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationElementRatingLevel).EvaluationRatingLevelDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationElementRating

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationElementRating.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationElementRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationDate != default(DateTime) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationElementRating",
                Href = $"/tpdm/evaluationElementRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRating table of the EvaluationElementRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRating : Entities.Common.TPDM.IEvaluationElementRating, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationElementRating()
        {
            EvaluationElementRatingResults = new List<EvaluationElementRatingResult>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationElementRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")][NaturalKeyMember]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        private bool _evaluationObjectiveRatingReferenceExplicitlyAssigned;
        private EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference _evaluationObjectiveRatingReference;
        private EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference ImplicitEvaluationObjectiveRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationObjectiveRatingReference == null && !_evaluationObjectiveRatingReferenceExplicitlyAssigned)
                    _evaluationObjectiveRatingReference = new EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference();

                return _evaluationObjectiveRatingReference;
            }
        }

        [DataMember(Name="evaluationObjectiveRatingReference")][NaturalKeyMember]
        public EvaluationObjectiveRating.TPDM.EvaluationObjectiveRatingReference EvaluationObjectiveRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_evaluationObjectiveRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference;

                return null;
            }
            set
            {
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = true;
                _evaluationObjectiveRatingReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEvaluationElementRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IEvaluationElementRating.EvaluationDate
        {
            get
            {
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference.EvaluationDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EvaluationDate = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (EvaluationElementRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
                ImplicitEvaluationObjectiveRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationElementRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitEvaluationObjectiveRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.PersonId
        {
            get
            {
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationElementRating.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value;

                // EvaluationObjectiveRating
                _evaluationObjectiveRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveRatingReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationElementRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationElementRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationElementRating.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
                ImplicitEvaluationObjectiveRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).PersonId.Equals(compareTo.PersonId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).EducationOrganizationId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationDate);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationElementTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationObjectiveTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).EvaluationTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).PersonId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).SourceSystemDescriptor);


            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRating).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Area identified for person to refine or improve as part of the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="areaOfRefinement")]
        public string AreaOfRefinement { get; set; }

        /// <summary>
        /// Area identified for reinforcement or positive feedback as part of the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="areaOfReinforcement")]
        public string AreaOfReinforcement { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationElementRatingLevelDescriptor")]
        public string EvaluationElementRatingLevelDescriptor { get; set; }

        /// <summary>
        /// Feedback provided to the evaluated person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="feedback")]
        public string Feedback { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationElementRatingResult> _evaluationElementRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> _evaluationElementRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<EvaluationElementRatingResult> EvaluationElementRatingResults
        {
            get { return _evaluationElementRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationElementRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingResult)e.Item).EvaluationElementRating = this);
                _evaluationElementRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationElementRatingResult, EvaluationElementRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationElementRatingResult)e.Item).EvaluationElementRating = this;
                _evaluationElementRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementRatingResults
        {
            get { return _evaluationElementRatingResultsCovariant; }
            set { EvaluationElementRatingResults = new List<EvaluationElementRatingResult>(value.Cast<EvaluationElementRatingResult>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationElementRatingResults != null) foreach (var item in _evaluationElementRatingResults)
            {
                item.EvaluationElementRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRating)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingResourceId
        {
            get { return null; }
            set { ImplicitEvaluationObjectiveRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationObjectiveRatingReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRating>
    {
        private static readonly FullName _fullName_tpdm_EvaluationElementRating = new FullName("tpdm", "EvaluationElementRating");

        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EvaluationElementRatingMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EvaluationElementRatingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_EvaluationElementRating));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEvaluationElementRatingResultIncluded != null)
                {
                    var hasInvalidEvaluationElementRatingResultsItems = instance.EvaluationElementRatingResults.Any(x => !mappingContract.Value.IsEvaluationElementRatingResultIncluded(x));
        
                    if (hasInvalidEvaluationElementRatingResultsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationElementRatingResult", $"A supplied 'EvaluationElementRatingResult' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, long>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EducationOrganizationId;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.educationOrganizationId", instance.EvaluationElementReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EducationOrganizationId;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.educationOrganizationId", instance.EvaluationObjectiveRatingReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationObjectiveTitle = GetEvaluationObjectiveTitleSources();

            if (!sourcesForEvaluationObjectiveTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("EvaluationObjectiveTitle",
                    $"Supplied values for unified key property 'evaluationObjectiveTitle' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEvaluationObjectiveTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationObjectiveTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EvaluationObjectiveTitle;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.evaluationObjectiveTitle", instance.EvaluationElementReference.EvaluationObjectiveTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EvaluationObjectiveTitle;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.evaluationObjectiveTitle", instance.EvaluationObjectiveRatingReference.EvaluationObjectiveTitle);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.evaluationPeriodDescriptor", instance.EvaluationElementReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.evaluationPeriodDescriptor", instance.EvaluationObjectiveRatingReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForEvaluationTitle = GetEvaluationTitleSources();

            if (!sourcesForEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("EvaluationTitle",
                    $"Supplied values for unified key property 'evaluationTitle' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.EvaluationTitle;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.evaluationTitle", instance.EvaluationElementReference.EvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.EvaluationTitle;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.evaluationTitle", instance.EvaluationObjectiveRatingReference.EvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.performanceEvaluationTitle", instance.EvaluationElementReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.performanceEvaluationTitle", instance.EvaluationObjectiveRatingReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.performanceEvaluationTypeDescriptor", instance.EvaluationElementReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.performanceEvaluationTypeDescriptor", instance.EvaluationObjectiveRatingReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.SchoolYear;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.schoolYear", instance.EvaluationElementReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.SchoolYear;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.schoolYear", instance.EvaluationObjectiveRatingReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'EvaluationElementRating' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationElementReference = instance.EvaluationElementReference?.TermDescriptor;

                if (valueFromEvaluationElementReference != null)
                {
                    yield return Tuple.Create("evaluationElementReference.termDescriptor", instance.EvaluationElementReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationObjectiveRatingReference = instance.EvaluationObjectiveRatingReference?.TermDescriptor;

                if (valueFromEvaluationObjectiveRatingReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveRatingReference.termDescriptor", instance.EvaluationObjectiveRatingReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators
            var evaluationElementRatingResultsValidator = new EvaluationElementRatingResultPutPostRequestValidator();

            foreach (var item in instance.EvaluationElementRatingResults)
            {
                var validationResult = evaluationElementRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingResult table of the EvaluationElementRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    [NoUnsuppliedRequiredMembersWithMeaningfulDefaults]
    public class EvaluationElementRatingResult : Entities.Common.TPDM.IEvaluationElementRatingResult, IHasRequiredMembersWithMeaningfulDefaultValues
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationElementRating _evaluationElementRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationElementRating Entities.Common.TPDM.IEvaluationElementRatingResult.EvaluationElementRating
        {
            get { return _evaluationElementRating; }
            set { SetEvaluationElementRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationElementRating EvaluationElementRating
        {
            set { SetEvaluationElementRating(value); }
        }

        private void SetEvaluationElementRating(Entities.Common.TPDM.IEvaluationElementRating value)
        {
            _evaluationElementRating = value;
        }
        
        private bool _ratingExplicitlyAssigned = false;
        private decimal _rating;

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating 
        { 
            get => _rating;
            set 
            { 
                _rating = value;
                _ratingExplicitlyAssigned = true; 
            }
        }


        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationElementRating == null || !_evaluationElementRating.Equals(compareTo.EvaluationElementRating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationElementRatingResult).Rating.Equals(compareTo.Rating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationElementRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationElementRating != null)
                hash.Add(_evaluationElementRating);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationElementRatingResult).Rating);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationElementRatingResult).RatingResultTitle);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        IEnumerable<string> IHasRequiredMembersWithMeaningfulDefaultValues.GetUnassignedMemberNames()
        {
            if (!_ratingExplicitlyAssigned)
            {
                yield return "Rating";
            }
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationElementRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationElementRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevelDescriptor table of the EvaluationElementRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelDescriptor : Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationElementRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationElementRatingLevelDescriptorId"), NaturalKeyMember]
        public int EvaluationElementRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationElementRatingLevelDescriptorId; }
            set { EvaluationElementRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor).EvaluationElementRatingLevelDescriptorId.Equals(compareTo.EvaluationElementRatingLevelDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor).EvaluationElementRatingLevelDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationElementRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationElementRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationElementRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationElementRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationObjective

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationObjective.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationObjective resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationObjective",
                Href = $"/tpdm/evaluationObjectives/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjective table of the EvaluationObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjective : Entities.Common.TPDM.IEvaluationObjective, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationObjective()
        {
            EvaluationObjectiveRatingLevels = new List<EvaluationObjectiveRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationObjective resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationReferenceExplicitlyAssigned;
        private Evaluation.TPDM.EvaluationReference _evaluationReference;
        private Evaluation.TPDM.EvaluationReference ImplicitEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationReference == null && !_evaluationReferenceExplicitlyAssigned)
                    _evaluationReference = new Evaluation.TPDM.EvaluationReference();

                return _evaluationReference;
            }
        }

        [DataMember(Name="evaluationReference")][NaturalKeyMember]
        public Evaluation.TPDM.EvaluationReference EvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationReference != null
                    && (_evaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference;

                return null;
            }
            set
            {
                _evaluationReferenceExplicitlyAssigned = true;
                _evaluationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEvaluationObjective.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (EvaluationObjective.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationObjective.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationObjective.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationObjective.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjective.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjective;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjective).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).EducationOrganizationId);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationObjectiveTitle);


            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).EvaluationTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjective).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The long description of the Evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationObjectiveDescription")]
        public string EvaluationObjectiveDescription { get; set; }

        /// <summary>
        /// The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationTypeDescriptor")]
        public string EvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }

        /// <summary>
        /// The sort order of this Evaluation Objective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="sortOrder")]
        public int? SortOrder { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<EvaluationObjectiveRatingLevel> EvaluationObjectiveRatingLevels
        {
            get { return _evaluationObjectiveRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationObjectiveRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)e.Item).EvaluationObjective = this);
                _evaluationObjectiveRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, EvaluationObjectiveRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)e.Item).EvaluationObjective = this;
                _evaluationObjectiveRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> Entities.Common.TPDM.IEvaluationObjective.EvaluationObjectiveRatingLevels
        {
            get { return _evaluationObjectiveRatingLevelsCovariant; }
            set { EvaluationObjectiveRatingLevels = new List<EvaluationObjectiveRatingLevel>(value.Cast<EvaluationObjectiveRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationObjectiveRatingLevels != null) foreach (var item in _evaluationObjectiveRatingLevels)
            {
                item.EvaluationObjective = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjective)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjective)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationObjective.EvaluationResourceId
        {
            get { return null; }
            set { ImplicitEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationObjective.EvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectivePutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjective>
    {
        private static readonly FullName _fullName_tpdm_EvaluationObjective = new FullName("tpdm", "EvaluationObjective");

        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjective> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EvaluationObjectiveMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EvaluationObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_EvaluationObjective));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEvaluationObjectiveRatingLevelIncluded != null)
                {
                    var hasInvalidEvaluationObjectiveRatingLevelsItems = instance.EvaluationObjectiveRatingLevels.Any(x => !mappingContract.Value.IsEvaluationObjectiveRatingLevelIncluded(x));
        
                    if (hasInvalidEvaluationObjectiveRatingLevelsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationObjectiveRatingLevel", $"A supplied 'EvaluationObjectiveRatingLevel' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var evaluationObjectiveRatingLevelsValidator = new EvaluationObjectiveRatingLevelPutPostRequestValidator();

            foreach (var item in instance.EvaluationObjectiveRatingLevels)
            {
                var validationResult = evaluationObjectiveRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingLevel table of the EvaluationObjective aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingLevel : Entities.Common.TPDM.IEvaluationObjectiveRatingLevel
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationObjective _evaluationObjective;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationObjective Entities.Common.TPDM.IEvaluationObjectiveRatingLevel.EvaluationObjective
        {
            get { return _evaluationObjective; }
            set { SetEvaluationObjective(value); }
        }

        internal Entities.Common.TPDM.IEvaluationObjective EvaluationObjective
        {
            set { SetEvaluationObjective(value); }
        }

        private void SetEvaluationObjective(Entities.Common.TPDM.IEvaluationObjective value)
        {
            _evaluationObjective = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationObjective == null || !_evaluationObjective.Equals(compareTo.EvaluationObjective))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationObjective != null)
                hash.Add(_evaluationObjective);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRatingLevel).EvaluationRatingLevelDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjectiveRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjectiveRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationObjectiveRating

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationObjectiveRating.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationObjectiveRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationDate != default(DateTime) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationObjectiveRating",
                Href = $"/tpdm/evaluationObjectiveRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRating table of the EvaluationObjectiveRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRating : Entities.Common.TPDM.IEvaluationObjectiveRating, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationObjectiveRating()
        {
            EvaluationObjectiveRatingResults = new List<EvaluationObjectiveRatingResult>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationObjectiveRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationObjectiveReferenceExplicitlyAssigned;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference _evaluationObjectiveReference;
        private EvaluationObjective.TPDM.EvaluationObjectiveReference ImplicitEvaluationObjectiveReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationObjectiveReference == null && !_evaluationObjectiveReferenceExplicitlyAssigned)
                    _evaluationObjectiveReference = new EvaluationObjective.TPDM.EvaluationObjectiveReference();

                return _evaluationObjectiveReference;
            }
        }

        [DataMember(Name="evaluationObjectiveReference")][NaturalKeyMember]
        public EvaluationObjective.TPDM.EvaluationObjectiveReference EvaluationObjectiveReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationObjectiveReference != null
                    && (_evaluationObjectiveReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference;

                return null;
            }
            set
            {
                _evaluationObjectiveReferenceExplicitlyAssigned = true;
                _evaluationObjectiveReference = value;
            }
        }
        private bool _evaluationRatingReferenceExplicitlyAssigned;
        private EvaluationRating.TPDM.EvaluationRatingReference _evaluationRatingReference;
        private EvaluationRating.TPDM.EvaluationRatingReference ImplicitEvaluationRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationRatingReference == null && !_evaluationRatingReferenceExplicitlyAssigned)
                    _evaluationRatingReference = new EvaluationRating.TPDM.EvaluationRatingReference();

                return _evaluationRatingReference;
            }
        }

        [DataMember(Name="evaluationRatingReference")][NaturalKeyMember]
        public EvaluationRating.TPDM.EvaluationRatingReference EvaluationRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationRatingReference != null
                    && (_evaluationRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference;

                return null;
            }
            set
            {
                _evaluationRatingReferenceExplicitlyAssigned = true;
                _evaluationRatingReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEvaluationObjectiveRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EducationOrganizationId = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        DateTime Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationDate
        {
            get
            {
                if (ImplicitEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference.EvaluationDate;

                return default(DateTime);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.EvaluationDate = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.EvaluationPeriodDescriptor = value;
                ImplicitEvaluationRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.EvaluationTitle = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTitle = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitEvaluationRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.PersonId
        {
            get
            {
                if (ImplicitEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationObjectiveRating.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationObjective
                _evaluationObjectiveReferenceExplicitlyAssigned = false;
                ImplicitEvaluationObjectiveReference.SchoolYear = value;

                // EvaluationRating
                _evaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitEvaluationRatingReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationObjectiveRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationObjectiveRating.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationObjectiveReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationObjectiveReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationObjectiveReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationObjectiveReference.TermDescriptor = value;
                ImplicitEvaluationRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjectiveRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).PersonId.Equals(compareTo.PersonId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationObjectiveRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EducationOrganizationId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationDate);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationObjectiveTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).EvaluationTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).PersonId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).SourceSystemDescriptor);


            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRating).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="objectiveRatingLevelDescriptor")]
        public string ObjectiveRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationObjectiveRatingResult> _evaluationObjectiveRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> _evaluationObjectiveRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<EvaluationObjectiveRatingResult> EvaluationObjectiveRatingResults
        {
            get { return _evaluationObjectiveRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationObjectiveRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingResult)e.Item).EvaluationObjectiveRating = this);
                _evaluationObjectiveRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, EvaluationObjectiveRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationObjectiveRatingResult)e.Item).EvaluationObjectiveRating = this;
                _evaluationObjectiveRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveRatingResults
        {
            get { return _evaluationObjectiveRatingResultsCovariant; }
            set { EvaluationObjectiveRatingResults = new List<EvaluationObjectiveRatingResult>(value.Cast<EvaluationObjectiveRatingResult>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationObjectiveRatingResults != null) foreach (var item in _evaluationObjectiveRatingResults)
            {
                item.EvaluationObjectiveRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveRatingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRating)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveResourceId
        {
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationObjectiveReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingResourceId
        {
            get { return null; }
            set { ImplicitEvaluationRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationRatingReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjectiveRating>
    {
        private static readonly FullName _fullName_tpdm_EvaluationObjectiveRating = new FullName("tpdm", "EvaluationObjectiveRating");

        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjectiveRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EvaluationObjectiveRatingMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EvaluationObjectiveRatingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_EvaluationObjectiveRating));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEvaluationObjectiveRatingResultIncluded != null)
                {
                    var hasInvalidEvaluationObjectiveRatingResultsItems = instance.EvaluationObjectiveRatingResults.Any(x => !mappingContract.Value.IsEvaluationObjectiveRatingResultIncluded(x));
        
                    if (hasInvalidEvaluationObjectiveRatingResultsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationObjectiveRatingResult", $"A supplied 'EvaluationObjectiveRatingResult' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, long>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.EducationOrganizationId;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.educationOrganizationId", instance.EvaluationObjectiveReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.EducationOrganizationId;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.educationOrganizationId", instance.EvaluationRatingReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.evaluationPeriodDescriptor", instance.EvaluationObjectiveReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.evaluationPeriodDescriptor", instance.EvaluationRatingReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForEvaluationTitle = GetEvaluationTitleSources();

            if (!sourcesForEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("EvaluationTitle",
                    $"Supplied values for unified key property 'evaluationTitle' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.EvaluationTitle;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.evaluationTitle", instance.EvaluationObjectiveReference.EvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.EvaluationTitle;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.evaluationTitle", instance.EvaluationRatingReference.EvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.performanceEvaluationTitle", instance.EvaluationObjectiveReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.performanceEvaluationTitle", instance.EvaluationRatingReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.performanceEvaluationTypeDescriptor", instance.EvaluationObjectiveReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.performanceEvaluationTypeDescriptor", instance.EvaluationRatingReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.SchoolYear;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.schoolYear", instance.EvaluationObjectiveReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.SchoolYear;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.schoolYear", instance.EvaluationRatingReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'EvaluationObjectiveRating' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationObjectiveReference = instance.EvaluationObjectiveReference?.TermDescriptor;

                if (valueFromEvaluationObjectiveReference != null)
                {
                    yield return Tuple.Create("evaluationObjectiveReference.termDescriptor", instance.EvaluationObjectiveReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromEvaluationRatingReference = instance.EvaluationRatingReference?.TermDescriptor;

                if (valueFromEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("evaluationRatingReference.termDescriptor", instance.EvaluationRatingReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators
            var evaluationObjectiveRatingResultsValidator = new EvaluationObjectiveRatingResultPutPostRequestValidator();

            foreach (var item in instance.EvaluationObjectiveRatingResults)
            {
                var validationResult = evaluationObjectiveRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingResult table of the EvaluationObjectiveRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    [NoUnsuppliedRequiredMembersWithMeaningfulDefaults]
    public class EvaluationObjectiveRatingResult : Entities.Common.TPDM.IEvaluationObjectiveRatingResult, IHasRequiredMembersWithMeaningfulDefaultValues
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationObjectiveRating _evaluationObjectiveRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationObjectiveRating Entities.Common.TPDM.IEvaluationObjectiveRatingResult.EvaluationObjectiveRating
        {
            get { return _evaluationObjectiveRating; }
            set { SetEvaluationObjectiveRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationObjectiveRating EvaluationObjectiveRating
        {
            set { SetEvaluationObjectiveRating(value); }
        }

        private void SetEvaluationObjectiveRating(Entities.Common.TPDM.IEvaluationObjectiveRating value)
        {
            _evaluationObjectiveRating = value;
        }
        
        private bool _ratingExplicitlyAssigned = false;
        private decimal _rating;

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating 
        { 
            get => _rating;
            set 
            { 
                _rating = value;
                _ratingExplicitlyAssigned = true; 
            }
        }


        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationObjectiveRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationObjectiveRating == null || !_evaluationObjectiveRating.Equals(compareTo.EvaluationObjectiveRating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).Rating.Equals(compareTo.Rating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationObjectiveRating != null)
                hash.Add(_evaluationObjectiveRating);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).Rating);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationObjectiveRatingResult).RatingResultTitle);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        IEnumerable<string> IHasRequiredMembersWithMeaningfulDefaultValues.GetUnassignedMemberNames()
        {
            if (!_ratingExplicitlyAssigned)
            {
                yield return "Rating";
            }
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationObjectiveRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationObjectiveRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationObjectiveRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationObjectiveRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationObjectiveRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationPeriodDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationPeriodDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationPeriodDescriptor table of the EvaluationPeriodDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationPeriodDescriptor : Entities.Common.TPDM.IEvaluationPeriodDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationPeriodDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationPeriodDescriptorId"), NaturalKeyMember]
        public int EvaluationPeriodDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationPeriodDescriptorId; }
            set { EvaluationPeriodDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationPeriodDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEvaluationPeriodDescriptor).EvaluationPeriodDescriptorId.Equals(compareTo.EvaluationPeriodDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationPeriodDescriptor).EvaluationPeriodDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationPeriodDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationPeriodDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationPeriodDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationPeriodDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationPeriodDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationPeriodDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationPeriodDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationRating

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationRating.TPDM
{
    /// <summary>
    /// Represents a reference to the EvaluationRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationDate != default(DateTime) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "EvaluationRating",
                Href = $"/tpdm/evaluationRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.EvaluationRating table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRating : Entities.Common.TPDM.IEvaluationRating, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public EvaluationRating()
        {
            EvaluationRatingResults = new List<EvaluationRatingResult>();
            EvaluationRatingReviewers = new List<EvaluationRatingReviewer>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationReferenceExplicitlyAssigned;
        private Evaluation.TPDM.EvaluationReference _evaluationReference;
        private Evaluation.TPDM.EvaluationReference ImplicitEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationReference == null && !_evaluationReferenceExplicitlyAssigned)
                    _evaluationReference = new Evaluation.TPDM.EvaluationReference();

                return _evaluationReference;
            }
        }

        [DataMember(Name="evaluationReference")][NaturalKeyMember]
        public Evaluation.TPDM.EvaluationReference EvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationReference != null
                    && (_evaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference;

                return null;
            }
            set
            {
                _evaluationReferenceExplicitlyAssigned = true;
                _evaluationReference = value;
            }
        }
        private bool _performanceEvaluationRatingReferenceExplicitlyAssigned;
        private PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference _performanceEvaluationRatingReference;
        private PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference ImplicitPerformanceEvaluationRatingReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_performanceEvaluationRatingReference == null && !_performanceEvaluationRatingReferenceExplicitlyAssigned)
                    _performanceEvaluationRatingReference = new PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference();

                return _performanceEvaluationRatingReference;
            }
        }

        [DataMember(Name="performanceEvaluationRatingReference")][NaturalKeyMember]
        public PerformanceEvaluationRating.TPDM.PerformanceEvaluationRatingReference PerformanceEvaluationRatingReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPerformanceEvaluationRatingReference != null
                    && (_performanceEvaluationRatingReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationRatingReference;

                return null;
            }
            set
            {
                _performanceEvaluationRatingReferenceExplicitlyAssigned = true;
                _performanceEvaluationRatingReference = value;
            }
        }
        private bool _sectionReferenceExplicitlyAssigned;
        private Section.EdFi.SectionReference _sectionReference;
        private Section.EdFi.SectionReference ImplicitSectionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_sectionReference == null && !_sectionReferenceExplicitlyAssigned)
                    _sectionReference = new Section.EdFi.SectionReference();

                return _sectionReference;
            }
        }

        [DataMember(Name="sectionReference")]
        public Section.EdFi.SectionReference SectionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSectionReference != null
                    && (_sectionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    return ImplicitSectionReference;

                return null;
            }
            set
            {
                _sectionReferenceExplicitlyAssigned = true;
                _sectionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IEvaluationRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EducationOrganizationId = value;

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The date for the person's evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationDate"), NaturalKeyMember]
        public DateTime EvaluationDate { get; set; }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (EvaluationRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.EvaluationPeriodDescriptor = value;
                ImplicitPerformanceEvaluationRatingReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.PerformanceEvaluationTitle = value;

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (EvaluationRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
                ImplicitPerformanceEvaluationRatingReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.PersonId
        {
            get
            {
                if (ImplicitPerformanceEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationRatingReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IEvaluationRating.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Evaluation
                _evaluationReferenceExplicitlyAssigned = false;
                ImplicitEvaluationReference.SchoolYear = value;

                // PerformanceEvaluationRating
                _performanceEvaluationRatingReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationRatingReference.SchoolYear = value;

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationRatingReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationRatingReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationRatingReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationRatingReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (EvaluationRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationReference.TermDescriptor = value;
                ImplicitPerformanceEvaluationRatingReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationRating).EvaluationDate.Equals(compareTo.EvaluationDate))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).PersonId.Equals(compareTo.PersonId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IEvaluationRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).EducationOrganizationId);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationRating).EvaluationDate);


            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).EvaluationTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).PersonId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).SourceSystemDescriptor);


            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRating).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor")]
        public string EvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The Status of the poerformance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingStatusDescriptor")]
        public string EvaluationRatingStatusDescriptor { get; set; }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.LocalCourseCode
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.LocalCourseCode;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.LocalCourseCode = value;
            }
        }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long? Entities.Common.TPDM.IEvaluationRating.SchoolId
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.SchoolId;
                    }

                return default(long?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SchoolId = value.GetValueOrDefault();
            }
        }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.SectionIdentifier
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.SectionIdentifier;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SectionIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier for the calendar for the academic session.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRating.SessionName
        {
            get
            {
                if (ImplicitSectionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSectionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitSectionReference.SessionName;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Section
                _sectionReferenceExplicitlyAssigned = false;
                ImplicitSectionReference.SessionName = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<EvaluationRatingResult> _evaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingResult> _evaluationRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<EvaluationRatingResult> EvaluationRatingResults
        {
            get { return _evaluationRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationRatingResult)e.Item).EvaluationRating = this);
                _evaluationRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationRatingResult, EvaluationRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationRatingResult)e.Item).EvaluationRating = this;
                _evaluationRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingResult> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingResults
        {
            get { return _evaluationRatingResultsCovariant; }
            set { EvaluationRatingResults = new List<EvaluationRatingResult>(value.Cast<EvaluationRatingResult>()); }
        }

        private ICollection<EvaluationRatingReviewer> _evaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> _evaluationRatingReviewersCovariant;

        [DataMember(Name="reviewers"), NoDuplicateMembers]
        public ICollection<EvaluationRatingReviewer> EvaluationRatingReviewers
        {
            get { return _evaluationRatingReviewers; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<EvaluationRatingReviewer>(value,
                    (s, e) => ((Entities.Common.TPDM.IEvaluationRatingReviewer)e.Item).EvaluationRating = this);
                _evaluationRatingReviewers = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IEvaluationRatingReviewer, EvaluationRatingReviewer>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IEvaluationRatingReviewer)e.Item).EvaluationRating = this;
                _evaluationRatingReviewersCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingReviewers
        {
            get { return _evaluationRatingReviewersCovariant; }
            set { EvaluationRatingReviewers = new List<EvaluationRatingReviewer>(value.Cast<EvaluationRatingReviewer>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_evaluationRatingResults != null) foreach (var item in _evaluationRatingResults)
            {
                item.EvaluationRating = this;
            }

            if (_evaluationRatingReviewers != null) foreach (var item in _evaluationRatingReviewers)
            {
                item.EvaluationRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRating)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationRating.EvaluationResourceId
        {
            get { return null; }
            set { ImplicitEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRating.EvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingResourceId
        {
            get { return null; }
            set { ImplicitPerformanceEvaluationRatingReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPerformanceEvaluationRatingReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IEvaluationRating.SectionResourceId
        {
            get { return null; }
            set { ImplicitSectionReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRating.SectionDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSectionReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRating>
    {
        private static readonly FullName _fullName_tpdm_EvaluationRating = new FullName("tpdm", "EvaluationRating");

        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.EvaluationRatingMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.EvaluationRatingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_EvaluationRating));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsEvaluationRatingResultIncluded != null)
                {
                    var hasInvalidEvaluationRatingResultsItems = instance.EvaluationRatingResults.Any(x => !mappingContract.Value.IsEvaluationRatingResultIncluded(x));
        
                    if (hasInvalidEvaluationRatingResultsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationRatingResult", $"A supplied 'EvaluationRatingResult' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsEvaluationRatingReviewerIncluded != null)
                {
                    var hasInvalidEvaluationRatingReviewersItems = instance.EvaluationRatingReviewers.Any(x => !mappingContract.Value.IsEvaluationRatingReviewerIncluded(x));
        
                    if (hasInvalidEvaluationRatingReviewersItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("EvaluationRatingReviewer", $"A supplied 'EvaluationRatingReviewer' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------
            var sourcesForEducationOrganizationId = GetEducationOrganizationIdSources();

            if (!sourcesForEducationOrganizationId.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("EducationOrganizationId",
                    $"Supplied values for unified key property 'educationOrganizationId' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForEducationOrganizationId.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, long>> GetEducationOrganizationIdSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.EducationOrganizationId;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.educationOrganizationId", instance.EvaluationReference.EducationOrganizationId);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.EducationOrganizationId;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.educationOrganizationId", instance.PerformanceEvaluationRatingReference.EducationOrganizationId);
                }

            }
            var sourcesForEvaluationPeriodDescriptor = GetEvaluationPeriodDescriptorSources();

            if (!sourcesForEvaluationPeriodDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("EvaluationPeriodDescriptor",
                    $"Supplied values for unified key property 'evaluationPeriodDescriptor' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForEvaluationPeriodDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetEvaluationPeriodDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.EvaluationPeriodDescriptor;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.evaluationPeriodDescriptor", instance.EvaluationReference.EvaluationPeriodDescriptor);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.EvaluationPeriodDescriptor;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.evaluationPeriodDescriptor", instance.PerformanceEvaluationRatingReference.EvaluationPeriodDescriptor);
                }

            }
            var sourcesForPerformanceEvaluationTitle = GetPerformanceEvaluationTitleSources();

            if (!sourcesForPerformanceEvaluationTitle.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTitle",
                    $"Supplied values for unified key property 'performanceEvaluationTitle' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTitle.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTitleSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.PerformanceEvaluationTitle;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.performanceEvaluationTitle", instance.EvaluationReference.PerformanceEvaluationTitle);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.PerformanceEvaluationTitle;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.performanceEvaluationTitle", instance.PerformanceEvaluationRatingReference.PerformanceEvaluationTitle);
                }

            }
            var sourcesForPerformanceEvaluationTypeDescriptor = GetPerformanceEvaluationTypeDescriptorSources();

            if (!sourcesForPerformanceEvaluationTypeDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("PerformanceEvaluationTypeDescriptor",
                    $"Supplied values for unified key property 'performanceEvaluationTypeDescriptor' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForPerformanceEvaluationTypeDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetPerformanceEvaluationTypeDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.performanceEvaluationTypeDescriptor", instance.EvaluationReference.PerformanceEvaluationTypeDescriptor);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.PerformanceEvaluationTypeDescriptor;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.performanceEvaluationTypeDescriptor", instance.PerformanceEvaluationRatingReference.PerformanceEvaluationTypeDescriptor);
                }

            }
            var sourcesForSchoolYear = GetSchoolYearSources();

            if (!sourcesForSchoolYear.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual())
            {
                failures.Add(new ValidationFailure("SchoolYear",
                    $"Supplied values for unified key property 'schoolYear' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForSchoolYear.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, short>> GetSchoolYearSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.SchoolYear;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.schoolYear", instance.EvaluationReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.SchoolYear;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.schoolYear", instance.PerformanceEvaluationRatingReference.SchoolYear);
                }

                // Obtain value from other references
                var valueFromSectionReference = instance.SectionReference?.SchoolYear;

                if (valueFromSectionReference != null)
                {
                    yield return Tuple.Create("sectionReference.schoolYear", instance.SectionReference.SchoolYear);
                }

            }
            var sourcesForTermDescriptor = GetTermDescriptorSources();

            if (!sourcesForTermDescriptor.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual(GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer))
            {
                failures.Add(new ValidationFailure("TermDescriptor",
                    $"Supplied values for unified key property 'termDescriptor' on 'EvaluationRating' are not consistent: {string.Join(", ", sourcesForTermDescriptor.Select(x => $"{x.Item1} = {x.Item2}"))}"));
            }

            IEnumerable<Tuple<string, string>> GetTermDescriptorSources()
            {
                // Obtain value from other references
                var valueFromEvaluationReference = instance.EvaluationReference?.TermDescriptor;

                if (valueFromEvaluationReference != null)
                {
                    yield return Tuple.Create("evaluationReference.termDescriptor", instance.EvaluationReference.TermDescriptor);
                }

                // Obtain value from other references
                var valueFromPerformanceEvaluationRatingReference = instance.PerformanceEvaluationRatingReference?.TermDescriptor;

                if (valueFromPerformanceEvaluationRatingReference != null)
                {
                    yield return Tuple.Create("performanceEvaluationRatingReference.termDescriptor", instance.PerformanceEvaluationRatingReference.TermDescriptor);
                }

            }

            // Recursively invoke the child collection item validators
            var evaluationRatingResultsValidator = new EvaluationRatingResultPutPostRequestValidator();

            foreach (var item in instance.EvaluationRatingResults)
            {
                var validationResult = evaluationRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var evaluationRatingReviewersValidator = new EvaluationRatingReviewerPutPostRequestValidator();

            foreach (var item in instance.EvaluationRatingReviewers)
            {
                var validationResult = evaluationRatingReviewersValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingResult table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    [NoUnsuppliedRequiredMembersWithMeaningfulDefaults]
    public class EvaluationRatingResult : Entities.Common.TPDM.IEvaluationRatingResult, IHasRequiredMembersWithMeaningfulDefaultValues
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationRating _evaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationRating Entities.Common.TPDM.IEvaluationRatingResult.EvaluationRating
        {
            get { return _evaluationRating; }
            set { SetEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationRating EvaluationRating
        {
            set { SetEvaluationRating(value); }
        }

        private void SetEvaluationRating(Entities.Common.TPDM.IEvaluationRating value)
        {
            _evaluationRating = value;
        }
        
        private bool _ratingExplicitlyAssigned = false;
        private decimal _rating;

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating 
        { 
            get => _rating;
            set 
            { 
                _rating = value;
                _ratingExplicitlyAssigned = true; 
            }
        }


        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationRating == null || !_evaluationRating.Equals(compareTo.EvaluationRating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationRatingResult).Rating.Equals(compareTo.Rating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationRating != null)
                hash.Add(_evaluationRating);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationRatingResult).Rating);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationRatingResult).RatingResultTitle);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        IEnumerable<string> IHasRequiredMembersWithMeaningfulDefaultValues.GetUnassignedMemberNames()
        {
            if (!_ratingExplicitlyAssigned)
            {
                yield return "Rating";
            }
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewer table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewer : Entities.Common.TPDM.IEvaluationRatingReviewer
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _reviewerPersonReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _reviewerPersonReference;
        private Person.EdFi.PersonReference ImplicitReviewerPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_reviewerPersonReference == null && !_reviewerPersonReferenceExplicitlyAssigned)
                    _reviewerPersonReference = new Person.EdFi.PersonReference();

                return _reviewerPersonReference;
            }
        }

        [DataMember(Name="reviewerPersonReference")]
        public Person.EdFi.PersonReference ReviewerPersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitReviewerPersonReference != null
                    && (_reviewerPersonReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    return ImplicitReviewerPersonReference;

                return null;
            }
            set
            {
                _reviewerPersonReferenceExplicitlyAssigned = true;
                _reviewerPersonReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationRating _evaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationRating Entities.Common.TPDM.IEvaluationRatingReviewer.EvaluationRating
        {
            get { return _evaluationRating; }
            set { SetEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IEvaluationRating EvaluationRating
        {
            set { SetEvaluationRating(value); }
        }

        private void SetEvaluationRating(Entities.Common.TPDM.IEvaluationRating value)
        {
            _evaluationRating = value;
        }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName"), NaturalKeyMember]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname"), NaturalKeyMember]
        public string LastSurname { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingReviewer;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationRating == null || !_evaluationRating.Equals(compareTo.EvaluationRating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationRatingReviewer).FirstName.Equals(compareTo.FirstName))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IEvaluationRatingReviewer).LastSurname.Equals(compareTo.LastSurname))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationRating != null)
                hash.Add(_evaluationRating);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationRatingReviewer).FirstName);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IEvaluationRatingReviewer).LastSurname);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonId
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ReviewerPerson
                _reviewerPersonReferenceExplicitlyAssigned = false;
                ImplicitReviewerPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (EvaluationRatingReviewer.ReviewerSourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerSourceSystemDescriptor
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitReviewerPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// receivedTraining
        /// </summary>
        [DataMember(Name = "receivedTraining")]
        public EvaluationRatingReviewerReceivedTraining EvaluationRatingReviewerReceivedTraining { get; set; }

        Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IEvaluationRatingReviewer.EvaluationRatingReviewerReceivedTraining
        {
            get { return EvaluationRatingReviewerReceivedTraining; }
            set { EvaluationRatingReviewerReceivedTraining = (EvaluationRatingReviewerReceivedTraining) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingReviewerMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingReviewerMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewer)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return null; }
            set { ImplicitReviewerPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitReviewerPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingReviewer>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingReviewer> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewerReceivedTraining table of the EvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerReceivedTraining : Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IEvaluationRatingReviewer _evaluationRatingReviewer;

        [IgnoreDataMember]
        Entities.Common.TPDM.IEvaluationRatingReviewer Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining.EvaluationRatingReviewer
        {
            get { return _evaluationRatingReviewer; }
            set { SetEvaluationRatingReviewer(value); }
        }

        internal Entities.Common.TPDM.IEvaluationRatingReviewer EvaluationRatingReviewer
        {
            set { SetEvaluationRatingReviewer(value); }
        }

        private void SetEvaluationRatingReviewer(Entities.Common.TPDM.IEvaluationRatingReviewer value)
        {
            _evaluationRatingReviewer = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_evaluationRatingReviewer == null || !_evaluationRatingReviewer.Equals(compareTo.EvaluationRatingReviewer))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_evaluationRatingReviewer != null)
                hash.Add(_evaluationRatingReviewer);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interRaterReliabilityScore")]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The date on which the person administering the performance meausre received training on how to conduct performance measures.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="receivedTrainingDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ReceivedTrainingDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingReviewerReceivedTrainingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingReviewerReceivedTrainingMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerReceivedTrainingPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingReviewerReceivedTraining>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingReviewerReceivedTraining> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevelDescriptor table of the EvaluationRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelDescriptor : Entities.Common.TPDM.IEvaluationRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptorId"), NaturalKeyMember]
        public int EvaluationRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationRatingLevelDescriptorId; }
            set { EvaluationRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor).EvaluationRatingLevelDescriptorId.Equals(compareTo.EvaluationRatingLevelDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRatingLevelDescriptor).EvaluationRatingLevelDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationRatingStatusDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationRatingStatusDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingStatusDescriptor table of the EvaluationRatingStatusDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingStatusDescriptor : Entities.Common.TPDM.IEvaluationRatingStatusDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationRatingStatusDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationRatingStatusDescriptorId"), NaturalKeyMember]
        public int EvaluationRatingStatusDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationRatingStatusDescriptorId; }
            set { EvaluationRatingStatusDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationRatingStatusDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEvaluationRatingStatusDescriptor).EvaluationRatingStatusDescriptorId.Equals(compareTo.EvaluationRatingStatusDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationRatingStatusDescriptor).EvaluationRatingStatusDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationRatingStatusDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationRatingStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationRatingStatusDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationRatingStatusDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationRatingStatusDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationRatingStatusDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationRatingStatusDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: EvaluationTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.EvaluationTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.EvaluationTypeDescriptor table of the EvaluationTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class EvaluationTypeDescriptor : Entities.Common.TPDM.IEvaluationTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the EvaluationTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evaluationTypeDescriptorId"), NaturalKeyMember]
        public int EvaluationTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return EvaluationTypeDescriptorId; }
            set { EvaluationTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IEvaluationTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IEvaluationTypeDescriptor).EvaluationTypeDescriptorId.Equals(compareTo.EvaluationTypeDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IEvaluationTypeDescriptor).EvaluationTypeDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.EvaluationTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.EvaluationTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IEvaluationTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class EvaluationTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<EvaluationTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<EvaluationTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: FinancialAid

namespace EdFi.Ods.Api.Common.Models.Resources.FinancialAid.TPDM
{
    /// <summary>
    /// Represents a reference to the FinancialAid resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class FinancialAidReference
    {
        [DataMember(Name="aidTypeDescriptor"), NaturalKeyMember]
        public string AidTypeDescriptor { get; set; }

        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return AidTypeDescriptor != default(string) && BeginDate != default(DateTime) && StudentUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "FinancialAid",
                Href = $"/tpdm/financialAids/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.FinancialAid table of the FinancialAid aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class FinancialAid : Entities.Common.TPDM.IFinancialAid, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the FinancialAid resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _studentReferenceExplicitlyAssigned;
        private Student.EdFi.StudentReference _studentReference;
        private Student.EdFi.StudentReference ImplicitStudentReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_studentReference == null && !_studentReferenceExplicitlyAssigned)
                    _studentReference = new Student.EdFi.StudentReference();

                return _studentReference;
            }
        }

        [DataMember(Name="studentReference")][NaturalKeyMember]
        public Student.EdFi.StudentReference StudentReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitStudentReference != null
                    && (_studentReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference;

                return null;
            }
            set
            {
                _studentReferenceExplicitlyAssigned = true;
                _studentReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The classification of financial aid awarded to a person for the academic term/year.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="aidTypeDescriptor"), NaturalKeyMember]
        public string AidTypeDescriptor { get; set; }

        /// <summary>
        /// The date the award was designated.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IFinancialAid.StudentUniqueId
        {
            get
            {
                if (ImplicitStudentReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitStudentReference.IsReferenceFullyDefined()))
                    return ImplicitStudentReference.StudentUniqueId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Student
                _studentReferenceExplicitlyAssigned = false;
                ImplicitStudentReference.StudentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IFinancialAid;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IFinancialAid).AidTypeDescriptor.Equals(compareTo.AidTypeDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IFinancialAid).BeginDate.Equals(compareTo.BeginDate))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IFinancialAid).StudentUniqueId.Equals(compareTo.StudentUniqueId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IFinancialAid).AidTypeDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IFinancialAid).BeginDate);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IFinancialAid).StudentUniqueId);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The amount of financial aid awarded to a person for the term/year.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="aidAmount")]
        public decimal? AidAmount { get; set; }

        /// <summary>
        /// The description of the condition (e.g., placement in a high need school) under which the aid was given.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="aidConditionDescription")]
        public string AidConditionDescription { get; set; }

        /// <summary>
        /// The date the award was removed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicates a person who receives Pell Grant aid.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="pellGrantRecipient")]
        public bool? PellGrantRecipient { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.FinancialAidMapper.SynchronizeTo(this, (Entities.Common.TPDM.IFinancialAid)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.FinancialAidMapper.MapTo(this, (Entities.Common.TPDM.IFinancialAid)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IFinancialAid.StudentResourceId
        {
            get { return null; }
            set { ImplicitStudentReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IFinancialAid.StudentDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitStudentReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class FinancialAidPutPostRequestValidator : FluentValidation.AbstractValidator<FinancialAid>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<FinancialAid> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.GenderDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.GenderDescriptor table of the GenderDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class GenderDescriptor : Entities.Common.TPDM.IGenderDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the GenderDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="genderDescriptorId"), NaturalKeyMember]
        public int GenderDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return GenderDescriptorId; }
            set { GenderDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IGenderDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IGenderDescriptor).GenderDescriptorId.Equals(compareTo.GenderDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IGenderDescriptor).GenderDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.GenderDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IGenderDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.GenderDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IGenderDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class GenderDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<GenderDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<GenderDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: ObjectiveRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.ObjectiveRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.ObjectiveRatingLevelDescriptor table of the ObjectiveRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ObjectiveRatingLevelDescriptor : Entities.Common.TPDM.IObjectiveRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the ObjectiveRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="objectiveRatingLevelDescriptorId"), NaturalKeyMember]
        public int ObjectiveRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return ObjectiveRatingLevelDescriptorId; }
            set { ObjectiveRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor).ObjectiveRatingLevelDescriptorId.Equals(compareTo.ObjectiveRatingLevelDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IObjectiveRatingLevelDescriptor).ObjectiveRatingLevelDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.ObjectiveRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IObjectiveRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.ObjectiveRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IObjectiveRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ObjectiveRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<ObjectiveRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ObjectiveRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluation

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluation.TPDM
{
    /// <summary>
    /// Represents a reference to the PerformanceEvaluation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationPeriodDescriptor != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "PerformanceEvaluation",
                Href = $"/tpdm/performanceEvaluations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluation table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluation : Entities.Common.TPDM.IPerformanceEvaluation, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public PerformanceEvaluation()
        {
            PerformanceEvaluationGradeLevels = new List<PerformanceEvaluationGradeLevel>();
            PerformanceEvaluationRatingLevels = new List<PerformanceEvaluationRatingLevel>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        private bool _schoolYearTypeReferenceExplicitlyAssigned;
        private SchoolYearType.EdFi.SchoolYearTypeReference _schoolYearTypeReference;
        private SchoolYearType.EdFi.SchoolYearTypeReference ImplicitSchoolYearTypeReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_schoolYearTypeReference == null && !_schoolYearTypeReferenceExplicitlyAssigned)
                    _schoolYearTypeReference = new SchoolYearType.EdFi.SchoolYearTypeReference();

                return _schoolYearTypeReference;
            }
        }

        [DataMember(Name="schoolYearTypeReference")][NaturalKeyMember]
        public SchoolYearType.EdFi.SchoolYearTypeReference SchoolYearTypeReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSchoolYearTypeReference != null
                    && (_schoolYearTypeReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference;

                return null;
            }
            set
            {
                _schoolYearTypeReferenceExplicitlyAssigned = true;
                _schoolYearTypeReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IPerformanceEvaluation.SchoolYear
        {
            get
            {
                if (ImplicitSchoolYearTypeReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSchoolYearTypeReference.IsReferenceFullyDefined()))
                    return ImplicitSchoolYearTypeReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SchoolYearType
                _schoolYearTypeReferenceExplicitlyAssigned = false;
                ImplicitSchoolYearTypeReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluation).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluation).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluation).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluation).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluation).EducationOrganizationId);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluation).EvaluationPeriodDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTitle);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluation).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluation).SchoolYear);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluation).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The description of the content or subject area of a performance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="academicSubjectDescriptor")]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The long description of the Performance Evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationDescription")]
        public string PerformanceEvaluationDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<PerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevelsCovariant;

        [DataMember(Name="gradeLevels"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationGradeLevel> PerformanceEvaluationGradeLevels
        {
            get { return _performanceEvaluationGradeLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationGradeLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)e.Item).PerformanceEvaluation = this);
                _performanceEvaluationGradeLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, PerformanceEvaluationGradeLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)e.Item).PerformanceEvaluation = this;
                _performanceEvaluationGradeLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationGradeLevels
        {
            get { return _performanceEvaluationGradeLevelsCovariant; }
            set { PerformanceEvaluationGradeLevels = new List<PerformanceEvaluationGradeLevel>(value.Cast<PerformanceEvaluationGradeLevel>()); }
        }

        private ICollection<PerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevelsCovariant;

        [DataMember(Name="ratingLevels"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationRatingLevel> PerformanceEvaluationRatingLevels
        {
            get { return _performanceEvaluationRatingLevels; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationRatingLevel>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)e.Item).PerformanceEvaluation = this);
                _performanceEvaluationRatingLevels = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, PerformanceEvaluationRatingLevel>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)e.Item).PerformanceEvaluation = this;
                _performanceEvaluationRatingLevelsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationRatingLevels
        {
            get { return _performanceEvaluationRatingLevelsCovariant; }
            set { PerformanceEvaluationRatingLevels = new List<PerformanceEvaluationRatingLevel>(value.Cast<PerformanceEvaluationRatingLevel>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_performanceEvaluationGradeLevels != null) foreach (var item in _performanceEvaluationGradeLevels)
            {
                item.PerformanceEvaluation = this;
            }

            if (_performanceEvaluationRatingLevels != null) foreach (var item in _performanceEvaluationRatingLevels)
            {
                item.PerformanceEvaluation = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluation)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationResourceId
        {
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IPerformanceEvaluation.SchoolYearTypeResourceId
        {
            get { return null; }
            set { ImplicitSchoolYearTypeReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluation>
    {
        private static readonly FullName _fullName_tpdm_PerformanceEvaluation = new FullName("tpdm", "PerformanceEvaluation");

        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.PerformanceEvaluationMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.PerformanceEvaluationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_PerformanceEvaluation));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsPerformanceEvaluationGradeLevelIncluded != null)
                {
                    var hasInvalidPerformanceEvaluationGradeLevelsItems = instance.PerformanceEvaluationGradeLevels.Any(x => !mappingContract.Value.IsPerformanceEvaluationGradeLevelIncluded(x));
        
                    if (hasInvalidPerformanceEvaluationGradeLevelsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("PerformanceEvaluationGradeLevel", $"A supplied 'PerformanceEvaluationGradeLevel' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsPerformanceEvaluationRatingLevelIncluded != null)
                {
                    var hasInvalidPerformanceEvaluationRatingLevelsItems = instance.PerformanceEvaluationRatingLevels.Any(x => !mappingContract.Value.IsPerformanceEvaluationRatingLevelIncluded(x));
        
                    if (hasInvalidPerformanceEvaluationRatingLevelsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("PerformanceEvaluationRatingLevel", $"A supplied 'PerformanceEvaluationRatingLevel' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var performanceEvaluationGradeLevelsValidator = new PerformanceEvaluationGradeLevelPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationGradeLevels)
            {
                var validationResult = performanceEvaluationGradeLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var performanceEvaluationRatingLevelsValidator = new PerformanceEvaluationRatingLevelPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationRatingLevels)
            {
                var validationResult = performanceEvaluationRatingLevelsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationGradeLevel table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationGradeLevel : Entities.Common.TPDM.IPerformanceEvaluationGradeLevel
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluation _performanceEvaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluation Entities.Common.TPDM.IPerformanceEvaluationGradeLevel.PerformanceEvaluation
        {
            get { return _performanceEvaluation; }
            set { SetPerformanceEvaluation(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluation PerformanceEvaluation
        {
            set { SetPerformanceEvaluation(value); }
        }

        private void SetPerformanceEvaluation(Entities.Common.TPDM.IPerformanceEvaluation value)
        {
            _performanceEvaluation = value;
        }

        /// <summary>
        /// The grade levels involved with the performance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="gradeLevelDescriptor"), NaturalKeyMember]
        public string GradeLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluation == null || !_performanceEvaluation.Equals(compareTo.PerformanceEvaluation))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel).GradeLevelDescriptor.Equals(compareTo.GradeLevelDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_performanceEvaluation != null)
                hash.Add(_performanceEvaluation);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationGradeLevel).GradeLevelDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationGradeLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationGradeLevelMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationGradeLevelPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationGradeLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationGradeLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevel table of the PerformanceEvaluation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevel : Entities.Common.TPDM.IPerformanceEvaluationRatingLevel
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluation _performanceEvaluation;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluation Entities.Common.TPDM.IPerformanceEvaluationRatingLevel.PerformanceEvaluation
        {
            get { return _performanceEvaluation; }
            set { SetPerformanceEvaluation(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluation PerformanceEvaluation
        {
            set { SetPerformanceEvaluation(value); }
        }

        private void SetPerformanceEvaluation(Entities.Common.TPDM.IPerformanceEvaluation value)
        {
            _performanceEvaluation = value;
        }

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="evaluationRatingLevelDescriptor"), NaturalKeyMember]
        public string EvaluationRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluation == null || !_performanceEvaluation.Equals(compareTo.PerformanceEvaluation))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel).EvaluationRatingLevelDescriptor.Equals(compareTo.EvaluationRatingLevelDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_performanceEvaluation != null)
                hash.Add(_performanceEvaluation);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevel).EvaluationRatingLevelDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maxRating")]
        public decimal? MaxRating { get; set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minRating")]
        public decimal? MinRating { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingLevelMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingLevelMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingLevel>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingLevel> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluationRating

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluationRating.TPDM
{
    /// <summary>
    /// Represents a reference to the PerformanceEvaluationRating resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationPeriodDescriptor != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && PersonId != default(string) && SchoolYear != default(short) && SourceSystemDescriptor != default(string) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "PerformanceEvaluationRating",
                Href = $"/tpdm/performanceEvaluationRatings/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRating table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRating : Entities.Common.TPDM.IPerformanceEvaluationRating, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public PerformanceEvaluationRating()
        {
            PerformanceEvaluationRatingResults = new List<PerformanceEvaluationRatingResult>();
            PerformanceEvaluationRatingReviewers = new List<PerformanceEvaluationRatingReviewer>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluationRating resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _performanceEvaluationReferenceExplicitlyAssigned;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference _performanceEvaluationReference;
        private PerformanceEvaluation.TPDM.PerformanceEvaluationReference ImplicitPerformanceEvaluationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_performanceEvaluationReference == null && !_performanceEvaluationReferenceExplicitlyAssigned)
                    _performanceEvaluationReference = new PerformanceEvaluation.TPDM.PerformanceEvaluationReference();

                return _performanceEvaluationReference;
            }
        }

        [DataMember(Name="performanceEvaluationReference")][NaturalKeyMember]
        public PerformanceEvaluation.TPDM.PerformanceEvaluationReference PerformanceEvaluationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPerformanceEvaluationReference != null
                    && (_performanceEvaluationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference;

                return null;
            }
            set
            {
                _performanceEvaluationReferenceExplicitlyAssigned = true;
                _performanceEvaluationReference = value;
            }
        }
        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IPerformanceEvaluationRating.EducationOrganizationId
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IPerformanceEvaluationRating.SchoolYear
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PerformanceEvaluation
                _performanceEvaluationReferenceExplicitlyAssigned = false;
                ImplicitPerformanceEvaluationReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRating.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRating.TermDescriptor
        {
            get
            {
                if (ImplicitPerformanceEvaluationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPerformanceEvaluationReference.IsReferenceFullyDefined()))
                    return ImplicitPerformanceEvaluationReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitPerformanceEvaluationReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRating;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).PersonId.Equals(compareTo.PersonId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRating).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).EducationOrganizationId);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PerformanceEvaluationTypeDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).PersonId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).SourceSystemDescriptor);


            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRating).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which the performance evaluation was conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime ActualDate { get; set; }

        /// <summary>
        /// The actual or estimated number of clock minutes during which the performance evaluation was conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualDuration")]
        public int? ActualDuration { get; set; }

        /// <summary>
        /// An indication of the the time at which the performance evaluation was conducted.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="actualTime")][JsonConverter(typeof(UtcTimeConverter))]
        public TimeSpan? ActualTime { get; set; }

        /// <summary>
        /// An indicator of whether the performance evaluation was announced or not.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="announced")]
        public bool? Announced { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// A type of co-teaching observed as part of the performance evaluation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="coteachingStyleObservedDescriptor")]
        public string CoteachingStyleObservedDescriptor { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="performanceEvaluationRatingLevelDescriptor")]
        public string PerformanceEvaluationRatingLevelDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which the performance evaluation was scheduled.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="scheduleDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ScheduleDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<PerformanceEvaluationRatingResult> _performanceEvaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> _performanceEvaluationRatingResultsCovariant;

        [DataMember(Name="results"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationRatingResult> PerformanceEvaluationRatingResults
        {
            get { return _performanceEvaluationRatingResults; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationRatingResult>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingResult)e.Item).PerformanceEvaluationRating = this);
                _performanceEvaluationRatingResults = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, PerformanceEvaluationRatingResult>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingResult)e.Item).PerformanceEvaluationRating = this;
                _performanceEvaluationRatingResultsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingResults
        {
            get { return _performanceEvaluationRatingResultsCovariant; }
            set { PerformanceEvaluationRatingResults = new List<PerformanceEvaluationRatingResult>(value.Cast<PerformanceEvaluationRatingResult>()); }
        }

        private ICollection<PerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewersCovariant;

        [DataMember(Name="reviewers"), NoDuplicateMembers]
        public ICollection<PerformanceEvaluationRatingReviewer> PerformanceEvaluationRatingReviewers
        {
            get { return _performanceEvaluationRatingReviewers; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<PerformanceEvaluationRatingReviewer>(value,
                    (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)e.Item).PerformanceEvaluationRating = this);
                _performanceEvaluationRatingReviewers = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, PerformanceEvaluationRatingReviewer>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)e.Item).PerformanceEvaluationRating = this;
                _performanceEvaluationRatingReviewersCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingReviewers
        {
            get { return _performanceEvaluationRatingReviewersCovariant; }
            set { PerformanceEvaluationRatingReviewers = new List<PerformanceEvaluationRatingReviewer>(value.Cast<PerformanceEvaluationRatingReviewer>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_performanceEvaluationRatingResults != null) foreach (var item in _performanceEvaluationRatingResults)
            {
                item.PerformanceEvaluationRating = this;
            }

            if (_performanceEvaluationRatingReviewers != null) foreach (var item in _performanceEvaluationRatingReviewers)
            {
                item.PerformanceEvaluationRating = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRating)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationResourceId
        {
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPerformanceEvaluationReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluationRating.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRating>
    {
        private static readonly FullName _fullName_tpdm_PerformanceEvaluationRating = new FullName("tpdm", "PerformanceEvaluationRating");

        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRating> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = new Lazy<global::EdFi.Ods.Entities.Common.TPDM.PerformanceEvaluationRatingMappingContract>(() => (global::EdFi.Ods.Entities.Common.TPDM.PerformanceEvaluationRatingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_tpdm_PerformanceEvaluationRating));

            if (mappingContract.Value != null)
            {
                if (mappingContract.Value.IsPerformanceEvaluationRatingResultIncluded != null)
                {
                    var hasInvalidPerformanceEvaluationRatingResultsItems = instance.PerformanceEvaluationRatingResults.Any(x => !mappingContract.Value.IsPerformanceEvaluationRatingResultIncluded(x));
        
                    if (hasInvalidPerformanceEvaluationRatingResultsItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("PerformanceEvaluationRatingResult", $"A supplied 'PerformanceEvaluationRatingResult' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                if (mappingContract.Value.IsPerformanceEvaluationRatingReviewerIncluded != null)
                {
                    var hasInvalidPerformanceEvaluationRatingReviewersItems = instance.PerformanceEvaluationRatingReviewers.Any(x => !mappingContract.Value.IsPerformanceEvaluationRatingReviewerIncluded(x));
        
                    if (hasInvalidPerformanceEvaluationRatingReviewersItems)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("PerformanceEvaluationRatingReviewer", $"A supplied 'PerformanceEvaluationRatingReviewer' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

            }
            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators
            var performanceEvaluationRatingResultsValidator = new PerformanceEvaluationRatingResultPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationRatingResults)
            {
                var validationResult = performanceEvaluationRatingResultsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var performanceEvaluationRatingReviewersValidator = new PerformanceEvaluationRatingReviewerPutPostRequestValidator();

            foreach (var item in instance.PerformanceEvaluationRatingReviewers)
            {
                var validationResult = performanceEvaluationRatingReviewersValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingResult table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    [NoUnsuppliedRequiredMembersWithMeaningfulDefaults]
    public class PerformanceEvaluationRatingResult : Entities.Common.TPDM.IPerformanceEvaluationRatingResult, IHasRequiredMembersWithMeaningfulDefaultValues
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluationRating _performanceEvaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluationRating Entities.Common.TPDM.IPerformanceEvaluationRatingResult.PerformanceEvaluationRating
        {
            get { return _performanceEvaluationRating; }
            set { SetPerformanceEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluationRating PerformanceEvaluationRating
        {
            set { SetPerformanceEvaluationRating(value); }
        }

        private void SetPerformanceEvaluationRating(Entities.Common.TPDM.IPerformanceEvaluationRating value)
        {
            _performanceEvaluationRating = value;
        }
        
        private bool _ratingExplicitlyAssigned = false;
        private decimal _rating;

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rating"), NaturalKeyMember]
        public decimal Rating 
        { 
            get => _rating;
            set 
            { 
                _rating = value;
                _ratingExplicitlyAssigned = true; 
            }
        }


        /// <summary>
        /// The title of Rating Result.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="ratingResultTitle"), NaturalKeyMember]
        public string RatingResultTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingResult;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluationRating == null || !_performanceEvaluationRating.Equals(compareTo.PerformanceEvaluationRating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).Rating.Equals(compareTo.Rating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).RatingResultTitle.Equals(compareTo.RatingResultTitle))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_performanceEvaluationRating != null)
                hash.Add(_performanceEvaluationRating);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).Rating);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRatingResult).RatingResultTitle);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The datatype of the result.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="resultDatatypeTypeDescriptor")]
        public string ResultDatatypeTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        IEnumerable<string> IHasRequiredMembersWithMeaningfulDefaultValues.GetUnassignedMemberNames()
        {
            if (!_ratingExplicitlyAssigned)
            {
                yield return "Rating";
            }
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingResultMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingResultMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingResult)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingResultPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingResult>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingResult> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewer table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewer : Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _reviewerPersonReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _reviewerPersonReference;
        private Person.EdFi.PersonReference ImplicitReviewerPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_reviewerPersonReference == null && !_reviewerPersonReferenceExplicitlyAssigned)
                    _reviewerPersonReference = new Person.EdFi.PersonReference();

                return _reviewerPersonReference;
            }
        }

        [DataMember(Name="reviewerPersonReference")]
        public Person.EdFi.PersonReference ReviewerPersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitReviewerPersonReference != null
                    && (_reviewerPersonReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    return ImplicitReviewerPersonReference;

                return null;
            }
            set
            {
                _reviewerPersonReferenceExplicitlyAssigned = true;
                _reviewerPersonReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluationRating _performanceEvaluationRating;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluationRating Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRating
        {
            get { return _performanceEvaluationRating; }
            set { SetPerformanceEvaluationRating(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluationRating PerformanceEvaluationRating
        {
            set { SetPerformanceEvaluationRating(value); }
        }

        private void SetPerformanceEvaluationRating(Entities.Common.TPDM.IPerformanceEvaluationRating value)
        {
            _performanceEvaluationRating = value;
        }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName"), NaturalKeyMember]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname"), NaturalKeyMember]
        public string LastSurname { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluationRating == null || !_performanceEvaluationRating.Equals(compareTo.PerformanceEvaluationRating))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).FirstName.Equals(compareTo.FirstName))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).LastSurname.Equals(compareTo.LastSurname))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_performanceEvaluationRating != null)
                hash.Add(_performanceEvaluationRating);

            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).FirstName);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer).LastSurname);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonId
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // ReviewerPerson
                _reviewerPersonReferenceExplicitlyAssigned = false;
                ImplicitReviewerPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (PerformanceEvaluationRatingReviewer.ReviewerSourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerSourceSystemDescriptor
        {
            get
            {
                if (ImplicitReviewerPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitReviewerPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitReviewerPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitReviewerPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// receivedTraining
        /// </summary>
        [DataMember(Name = "receivedTraining")]
        public PerformanceEvaluationRatingReviewerReceivedTraining PerformanceEvaluationRatingReviewerReceivedTraining { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRatingReviewerReceivedTraining
        {
            get { return PerformanceEvaluationRatingReviewerReceivedTraining; }
            set { PerformanceEvaluationRatingReviewerReceivedTraining = (PerformanceEvaluationRatingReviewerReceivedTraining) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingReviewerMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingReviewerMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return null; }
            set { ImplicitReviewerPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitReviewerPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingReviewer>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingReviewer> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewerReceivedTraining table of the PerformanceEvaluationRating aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerReceivedTraining : Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer _performanceEvaluationRatingReviewer;

        [IgnoreDataMember]
        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining.PerformanceEvaluationRatingReviewer
        {
            get { return _performanceEvaluationRatingReviewer; }
            set { SetPerformanceEvaluationRatingReviewer(value); }
        }

        internal Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer PerformanceEvaluationRatingReviewer
        {
            set { SetPerformanceEvaluationRatingReviewer(value); }
        }

        private void SetPerformanceEvaluationRatingReviewer(Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer value)
        {
            _performanceEvaluationRatingReviewer = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_performanceEvaluationRatingReviewer == null || !_performanceEvaluationRatingReviewer.Equals(compareTo.PerformanceEvaluationRatingReviewer))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_performanceEvaluationRatingReviewer != null)
                hash.Add(_performanceEvaluationRatingReviewer);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="interRaterReliabilityScore")]
        public int? InterRaterReliabilityScore { get; set; }

        /// <summary>
        /// The date on which the person administering the performance meausre received training on how to conduct performance measures.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="receivedTrainingDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ReceivedTrainingDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingReviewerReceivedTrainingMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingReviewerReceivedTrainingMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerReceivedTrainingPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingReviewerReceivedTraining>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingReviewerReceivedTraining> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluationRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevelDescriptor table of the PerformanceEvaluationRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelDescriptor : Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluationRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationRatingLevelDescriptorId"), NaturalKeyMember]
        public int PerformanceEvaluationRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return PerformanceEvaluationRatingLevelDescriptorId; }
            set { PerformanceEvaluationRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor).PerformanceEvaluationRatingLevelDescriptorId.Equals(compareTo.PerformanceEvaluationRatingLevelDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor).PerformanceEvaluationRatingLevelDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: PerformanceEvaluationTypeDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.PerformanceEvaluationTypeDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationTypeDescriptor table of the PerformanceEvaluationTypeDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationTypeDescriptor : Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the PerformanceEvaluationTypeDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="performanceEvaluationTypeDescriptorId"), NaturalKeyMember]
        public int PerformanceEvaluationTypeDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return PerformanceEvaluationTypeDescriptorId; }
            set { PerformanceEvaluationTypeDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor).PerformanceEvaluationTypeDescriptorId.Equals(compareTo.PerformanceEvaluationTypeDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor).PerformanceEvaluationTypeDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.PerformanceEvaluationTypeDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.PerformanceEvaluationTypeDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationTypeDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<PerformanceEvaluationTypeDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<PerformanceEvaluationTypeDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RubricDimension

namespace EdFi.Ods.Api.Common.Models.Resources.RubricDimension.TPDM
{
    /// <summary>
    /// Represents a reference to the RubricDimension resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class RubricDimensionReference
    {
        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public long EducationOrganizationId { get; set; }

        [DataMember(Name="evaluationElementTitle"), NaturalKeyMember]
        public string EvaluationElementTitle { get; set; }

        [DataMember(Name="evaluationObjectiveTitle"), NaturalKeyMember]
        public string EvaluationObjectiveTitle { get; set; }

        [DataMember(Name="evaluationPeriodDescriptor"), NaturalKeyMember]
        public string EvaluationPeriodDescriptor { get; set; }

        [DataMember(Name="evaluationTitle"), NaturalKeyMember]
        public string EvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTitle"), NaturalKeyMember]
        public string PerformanceEvaluationTitle { get; set; }

        [DataMember(Name="performanceEvaluationTypeDescriptor"), NaturalKeyMember]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        [DataMember(Name="rubricRating"), NaturalKeyMember]
        public int RubricRating { get; set; }

        [DataMember(Name="schoolYear"), NaturalKeyMember]
        public short SchoolYear { get; set; }

        [DataMember(Name="termDescriptor"), NaturalKeyMember]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return EducationOrganizationId != default(long) && EvaluationElementTitle != default(string) && EvaluationObjectiveTitle != default(string) && EvaluationPeriodDescriptor != default(string) && EvaluationTitle != default(string) && PerformanceEvaluationTitle != default(string) && PerformanceEvaluationTypeDescriptor != default(string) && RubricRating != default(int) && SchoolYear != default(short) && TermDescriptor != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "RubricDimension",
                Href = $"/tpdm/rubricDimensions/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.RubricDimension table of the RubricDimension aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    [NoUnsuppliedRequiredMembersWithMeaningfulDefaults]
    public class RubricDimension : Entities.Common.TPDM.IRubricDimension, IHasETag, IDateVersionedEntity, IHasRequiredMembersWithMeaningfulDefaultValues
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RubricDimension resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _evaluationElementReferenceExplicitlyAssigned;
        private EvaluationElement.TPDM.EvaluationElementReference _evaluationElementReference;
        private EvaluationElement.TPDM.EvaluationElementReference ImplicitEvaluationElementReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_evaluationElementReference == null && !_evaluationElementReferenceExplicitlyAssigned)
                    _evaluationElementReference = new EvaluationElement.TPDM.EvaluationElementReference();

                return _evaluationElementReference;
            }
        }

        [DataMember(Name="evaluationElementReference")][NaturalKeyMember]
        public EvaluationElement.TPDM.EvaluationElementReference EvaluationElementReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEvaluationElementReference != null
                    && (_evaluationElementReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference;

                return null;
            }
            set
            {
                _evaluationElementReferenceExplicitlyAssigned = true;
                _evaluationElementReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long Entities.Common.TPDM.IRubricDimension.EducationOrganizationId
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EducationOrganizationId;

                return default(long);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EducationOrganizationId = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation element.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationElementTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationElementTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationElementTitle = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation Objective.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationObjectiveTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationObjectiveTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationObjectiveTitle = value;
            }
        }

        /// <summary>
        /// The period for the evaluation.
        /// </summary>

        // IS in a reference (RubricDimension.EvaluationPeriodDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationPeriodDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationPeriodDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.EvaluationPeriodDescriptor = value;
            }
        }

        /// <summary>
        /// The name or title of the evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.EvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.EvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.EvaluationTitle = value;
            }
        }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.IRubricDimension.PerformanceEvaluationTitle
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.PerformanceEvaluationTitle = value;
            }
        }

        /// <summary>
        /// The type of performance evaluation conducted.
        /// </summary>

        // IS in a reference (RubricDimension.PerformanceEvaluationTypeDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IRubricDimension.PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.PerformanceEvaluationTypeDescriptor = value;
            }
        }
        
        private bool _rubricRatingExplicitlyAssigned = false;
        private int _rubricRating;

        /// <summary>
        /// The rating achieved for the rubric dimension.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rubricRating"), NaturalKeyMember]
        public int RubricRating 
        { 
            get => _rubricRating;
            set 
            { 
                _rubricRating = value;
                _rubricRatingExplicitlyAssigned = true; 
            }
        }


        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        short Entities.Common.TPDM.IRubricDimension.SchoolYear
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.SchoolYear;

                return default(short);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EvaluationElement
                _evaluationElementReferenceExplicitlyAssigned = false;
                ImplicitEvaluationElementReference.SchoolYear = value;
            }
        }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>

        // IS in a reference (RubricDimension.TermDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.IRubricDimension.TermDescriptor
        {
            get
            {
                if (ImplicitEvaluationElementReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEvaluationElementReference.IsReferenceFullyDefined()))
                    return ImplicitEvaluationElementReference.TermDescriptor;

                return null;
            }
            set
            {
                ImplicitEvaluationElementReference.TermDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IRubricDimension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).EducationOrganizationId.Equals(compareTo.EducationOrganizationId))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).EvaluationElementTitle.Equals(compareTo.EvaluationElementTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).EvaluationObjectiveTitle.Equals(compareTo.EvaluationObjectiveTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).EvaluationPeriodDescriptor.Equals(compareTo.EvaluationPeriodDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).EvaluationTitle.Equals(compareTo.EvaluationTitle))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTitle.Equals(compareTo.PerformanceEvaluationTitle))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTypeDescriptor.Equals(compareTo.PerformanceEvaluationTypeDescriptor))
                return false;


            // Standard Property
             if ((this as Entities.Common.TPDM.IRubricDimension).RubricRating.Equals(compareTo.RubricRating))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).SchoolYear.Equals(compareTo.SchoolYear))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.IRubricDimension).TermDescriptor.Equals(compareTo.TermDescriptor))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).EducationOrganizationId);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).EvaluationElementTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).EvaluationObjectiveTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).EvaluationPeriodDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).EvaluationTitle);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTitle);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).PerformanceEvaluationTypeDescriptor);


            // Standard Property
                hash.Add((this as Entities.Common.TPDM.IRubricDimension).RubricRating);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).SchoolYear);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.IRubricDimension).TermDescriptor);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The criterion description for the rubric dimension.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criterionDescription")]
        public string CriterionDescription { get; set; }

        /// <summary>
        /// The order for the rubric dimension.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dimensionOrder")]
        public int? DimensionOrder { get; set; }

        /// <summary>
        /// The rating level achieved for the rubric dimension.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="rubricRatingLevelDescriptor")]
        public string RubricRatingLevelDescriptor { get; set; }
        // -------------------------------------------------------------

        IEnumerable<string> IHasRequiredMembersWithMeaningfulDefaultValues.GetUnassignedMemberNames()
        {
            if (!_rubricRatingExplicitlyAssigned)
            {
                yield return "RubricRating";
            }
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RubricDimensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRubricDimension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RubricDimensionMapper.MapTo(this, (Entities.Common.TPDM.IRubricDimension)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.IRubricDimension.EvaluationElementResourceId
        {
            get { return null; }
            set { ImplicitEvaluationElementReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.IRubricDimension.EvaluationElementDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEvaluationElementReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RubricDimensionPutPostRequestValidator : FluentValidation.AbstractValidator<RubricDimension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RubricDimension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: RubricRatingLevelDescriptor

namespace EdFi.Ods.Api.Common.Models.Resources.RubricRatingLevelDescriptor.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.RubricRatingLevelDescriptor table of the RubricRatingLevelDescriptor aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class RubricRatingLevelDescriptor : Entities.Common.TPDM.IRubricRatingLevelDescriptor, Entities.Common.EdFi.IDescriptor, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the RubricRatingLevelDescriptor resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="rubricRatingLevelDescriptorId"), NaturalKeyMember]
        public int RubricRatingLevelDescriptorId { get; set; }

        int IDescriptor.DescriptorId
        {
            get { return RubricRatingLevelDescriptorId; }
            set { RubricRatingLevelDescriptorId = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.IRubricRatingLevelDescriptor;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Derived Property
            if (!(this as Entities.Common.TPDM.IRubricRatingLevelDescriptor).RubricRatingLevelDescriptorId.Equals(compareTo.RubricRatingLevelDescriptorId))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Derived Property
            hash.Add((this as Entities.Common.TPDM.IRubricRatingLevelDescriptor).RubricRatingLevelDescriptorId);

            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="codeValue")]
        public string CodeValue { get; set; }

        /// <summary>
        /// The description of the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveBeginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveBeginDate { get; set; }

        /// <summary>
        /// The end date of the period when the descriptor is in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="effectiveEndDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="priorDescriptorId")]
        public int? PriorDescriptorId { get; set; }

        /// <summary>
        /// A shortened description for the descriptor.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="shortDescription")]
        public string ShortDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.RubricRatingLevelDescriptorMapper.SynchronizeTo(this, (Entities.Common.TPDM.IRubricRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.RubricRatingLevelDescriptorMapper.MapTo(this, (Entities.Common.TPDM.IRubricRatingLevelDescriptor)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class RubricRatingLevelDescriptorPutPostRequestValidator : FluentValidation.AbstractValidator<RubricRatingLevelDescriptor>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<RubricRatingLevelDescriptor> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: School

namespace EdFi.Ods.Api.Common.Models.Resources.School.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.SchoolExtension table of the School aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SchoolExtension : Entities.Common.TPDM.ISchoolExtension, IChildEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _postSecondaryInstitutionReferenceExplicitlyAssigned;
        private PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference _postSecondaryInstitutionReference;
        private PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference ImplicitPostSecondaryInstitutionReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_postSecondaryInstitutionReference == null && !_postSecondaryInstitutionReferenceExplicitlyAssigned)
                    _postSecondaryInstitutionReference = new PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference();

                return _postSecondaryInstitutionReference;
            }
        }

        [DataMember(Name="postSecondaryInstitutionReference")]
        public PostSecondaryInstitution.EdFi.PostSecondaryInstitutionReference PostSecondaryInstitutionReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPostSecondaryInstitutionReference != null
                    && (_postSecondaryInstitutionReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPostSecondaryInstitutionReference.IsReferenceFullyDefined()))
                    return ImplicitPostSecondaryInstitutionReference;

                return null;
            }
            set
            {
                _postSecondaryInstitutionReferenceExplicitlyAssigned = true;
                _postSecondaryInstitutionReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ISchool _school;

        [IgnoreDataMember]
        Entities.Common.EdFi.ISchool Entities.Common.TPDM.ISchoolExtension.School
        {
            get { return _school; }
            set { SetSchool(value); }
        }

        internal Entities.Common.EdFi.ISchool School
        {
            set { SetSchool(value); }
        }

        private void SetSchool(Entities.Common.EdFi.ISchool value)
        {
            _school = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ISchoolExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_school == null || !_school.Equals(compareTo.School))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_school != null)
                hash.Add(_school);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The ID of the post secondary institution.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        long? Entities.Common.TPDM.ISchoolExtension.PostSecondaryInstitutionId
        {
            get
            {
                if (ImplicitPostSecondaryInstitutionReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPostSecondaryInstitutionReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPostSecondaryInstitutionReference.PostSecondaryInstitutionId;
                    }

                return default(long?);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // PostSecondaryInstitution
                _postSecondaryInstitutionReferenceExplicitlyAssigned = false;
                ImplicitPostSecondaryInstitutionReference.PostSecondaryInstitutionId = value.GetValueOrDefault();
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SchoolExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISchoolExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SchoolExtensionMapper.MapTo(this, (Entities.Common.TPDM.ISchoolExtension)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISchoolExtension.PostSecondaryInstitutionResourceId
        {
            get { return null; }
            set { ImplicitPostSecondaryInstitutionReference.ResourceId = value ?? default(Guid); }
        }


        // -----------------------------------------------------------------

        void IChildEntity.SetParent(object value)
        {
            School = (ISchool)value;
        }
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SchoolExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<SchoolExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SchoolExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Api.Common.Models.Resources.SurveyResponse.EdFi.Extensions.TPDM
{
    /// <summary>
    /// A class which represents the tpdm.SurveyResponseExtension table of the SurveyResponse aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveyResponseExtension : Entities.Common.TPDM.ISurveyResponseExtension, IChildEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.ISurveyResponse _surveyResponse;

        [IgnoreDataMember]
        Entities.Common.EdFi.ISurveyResponse Entities.Common.TPDM.ISurveyResponseExtension.SurveyResponse
        {
            get { return _surveyResponse; }
            set { SetSurveyResponse(value); }
        }

        internal Entities.Common.EdFi.ISurveyResponse SurveyResponse
        {
            set { SetSurveyResponse(value); }
        }

        private void SetSurveyResponse(Entities.Common.EdFi.ISurveyResponse value)
        {
            _surveyResponse = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ISurveyResponseExtension;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            // Parent Property
            if (_surveyResponse == null || !_surveyResponse.Equals(compareTo.SurveyResponse))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            //Parent Property
            if (_surveyResponse != null)
                hash.Add(_surveyResponse);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponseExtension.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.PersonId;
                    }

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveyResponse.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveyResponseExtension.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    {
                        return ImplicitPersonReference.SourceSystemDescriptor;
                    }

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveyResponseExtensionMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveyResponseExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveyResponseExtensionMapper.MapTo(this, (Entities.Common.TPDM.ISurveyResponseExtension)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveyResponseExtension.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveyResponseExtension.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------

        void IChildEntity.SetParent(object value)
        {
            SurveyResponse = (ISurveyResponse)value;
        }
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveyResponseExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<SurveyResponseExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveyResponseExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveyResponsePersonTargetAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.SurveyResponsePersonTargetAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the SurveyResponsePersonTargetAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociationReference
    {
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="surveyIdentifier"), NaturalKeyMember]
        public string SurveyIdentifier { get; set; }

        [DataMember(Name="surveyResponseIdentifier"), NaturalKeyMember]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return Namespace != default(string) && PersonId != default(string) && SourceSystemDescriptor != default(string) && SurveyIdentifier != default(string) && SurveyResponseIdentifier != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "SurveyResponsePersonTargetAssociation",
                Href = $"/tpdm/surveyResponsePersonTargetAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.SurveyResponsePersonTargetAssociation table of the SurveyResponsePersonTargetAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociation : Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the SurveyResponsePersonTargetAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        private bool _surveyResponseReferenceExplicitlyAssigned;
        private SurveyResponse.EdFi.SurveyResponseReference _surveyResponseReference;
        private SurveyResponse.EdFi.SurveyResponseReference ImplicitSurveyResponseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_surveyResponseReference == null && !_surveyResponseReferenceExplicitlyAssigned)
                    _surveyResponseReference = new SurveyResponse.EdFi.SurveyResponseReference();

                return _surveyResponseReference;
            }
        }

        [DataMember(Name="surveyResponseReference")][NaturalKeyMember]
        public SurveyResponse.EdFi.SurveyResponseReference SurveyResponseReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSurveyResponseReference != null
                    && (_surveyResponseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference;

                return null;
            }
            set
            {
                _surveyResponseReferenceExplicitlyAssigned = true;
                _surveyResponseReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.Namespace
        {
            get
            {
                if (ImplicitSurveyResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveyResponse
                _surveyResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveyResponseReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveyResponsePersonTargetAssociation.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyIdentifier
        {
            get
            {
                if (ImplicitSurveyResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference.SurveyIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveyResponse
                _surveyResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveyResponseReference.SurveyIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseIdentifier
        {
            get
            {
                if (ImplicitSurveyResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveyResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveyResponseReference.SurveyResponseIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveyResponse
                _surveyResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveyResponseReference.SurveyResponseIdentifier = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).Namespace.Equals(compareTo.Namespace))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).PersonId.Equals(compareTo.PersonId))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyIdentifier.Equals(compareTo.SurveyIdentifier))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyResponseIdentifier.Equals(compareTo.SurveyResponseIdentifier))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).Namespace);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).PersonId);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SourceSystemDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyIdentifier);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation).SurveyResponseIdentifier);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveyResponsePersonTargetAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveyResponsePersonTargetAssociationMapper.MapTo(this, (Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseResourceId
        {
            get { return null; }
            set { ImplicitSurveyResponseReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSurveyResponseReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<SurveyResponsePersonTargetAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveyResponsePersonTargetAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: SurveySectionResponsePersonTargetAssociation

namespace EdFi.Ods.Api.Common.Models.Resources.SurveySectionResponsePersonTargetAssociation.TPDM
{
    /// <summary>
    /// Represents a reference to the SurveySectionResponsePersonTargetAssociation resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociationReference
    {
        [DataMember(Name="namespace"), NaturalKeyMember]
        public string Namespace { get; set; }

        [DataMember(Name="personId"), NaturalKeyMember]
        public string PersonId { get; set; }

        [DataMember(Name="sourceSystemDescriptor"), NaturalKeyMember]
        public string SourceSystemDescriptor { get; set; }

        [DataMember(Name="surveyIdentifier"), NaturalKeyMember]
        public string SurveyIdentifier { get; set; }

        [DataMember(Name="surveyResponseIdentifier"), NaturalKeyMember]
        public string SurveyResponseIdentifier { get; set; }

        [DataMember(Name="surveySectionTitle"), NaturalKeyMember]
        public string SurveySectionTitle { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return Namespace != default(string) && PersonId != default(string) && SourceSystemDescriptor != default(string) && SurveyIdentifier != default(string) && SurveyResponseIdentifier != default(string) && SurveySectionTitle != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "SurveySectionResponsePersonTargetAssociation",
                Href = $"/tpdm/surveySectionResponsePersonTargetAssociations/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the tpdm.SurveySectionResponsePersonTargetAssociation table of the SurveySectionResponsePersonTargetAssociation aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociation : Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation, IHasETag, IDateVersionedEntity
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the SurveySectionResponsePersonTargetAssociation resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _personReferenceExplicitlyAssigned;
        private Person.EdFi.PersonReference _personReference;
        private Person.EdFi.PersonReference ImplicitPersonReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_personReference == null && !_personReferenceExplicitlyAssigned)
                    _personReference = new Person.EdFi.PersonReference();

                return _personReference;
            }
        }

        [DataMember(Name="personReference")][NaturalKeyMember]
        public Person.EdFi.PersonReference PersonReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitPersonReference != null
                    && (_personReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference;

                return null;
            }
            set
            {
                _personReferenceExplicitlyAssigned = true;
                _personReference = value;
            }
        }
        private bool _surveySectionResponseReferenceExplicitlyAssigned;
        private SurveySectionResponse.EdFi.SurveySectionResponseReference _surveySectionResponseReference;
        private SurveySectionResponse.EdFi.SurveySectionResponseReference ImplicitSurveySectionResponseReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_surveySectionResponseReference == null && !_surveySectionResponseReferenceExplicitlyAssigned)
                    _surveySectionResponseReference = new SurveySectionResponse.EdFi.SurveySectionResponseReference();

                return _surveySectionResponseReference;
            }
        }

        [DataMember(Name="surveySectionResponseReference")][NaturalKeyMember]
        public SurveySectionResponse.EdFi.SurveySectionResponseReference SurveySectionResponseReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitSurveySectionResponseReference != null
                    && (_surveySectionResponseReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference;

                return null;
            }
            set
            {
                _surveySectionResponseReferenceExplicitlyAssigned = true;
                _surveySectionResponseReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.Namespace
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.Namespace;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.Namespace = value;
            }
        }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonId
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.PersonId;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Person
                _personReferenceExplicitlyAssigned = false;
                ImplicitPersonReference.PersonId = value;
            }
        }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>

        // IS in a reference (SurveySectionResponsePersonTargetAssociation.SourceSystemDescriptorId), IS a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SourceSystemDescriptor
        {
            get
            {
                if (ImplicitPersonReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitPersonReference.IsReferenceFullyDefined()))
                    return ImplicitPersonReference.SourceSystemDescriptor;

                return null;
            }
            set
            {
                ImplicitPersonReference.SourceSystemDescriptor = value;
            }
        }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveyIdentifier
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.SurveyIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.SurveyIdentifier = value;
            }
        }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveyResponseIdentifier
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.SurveyResponseIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.SurveyResponseIdentifier = value;
            }
        }

        /// <summary>
        /// The title or label for the survey section.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionTitle
        {
            get
            {
                if (ImplicitSurveySectionResponseReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitSurveySectionResponseReference.IsReferenceFullyDefined()))
                    return ImplicitSurveySectionResponseReference.SurveySectionTitle;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // SurveySectionResponse
                _surveySectionResponseReferenceExplicitlyAssigned = false;
                ImplicitSurveySectionResponseReference.SurveySectionTitle = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).Namespace.Equals(compareTo.Namespace))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).PersonId.Equals(compareTo.PersonId))
                return false;


            // Unified Type Property
            if (!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SourceSystemDescriptor.Equals(compareTo.SourceSystemDescriptor))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyIdentifier.Equals(compareTo.SurveyIdentifier))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyResponseIdentifier.Equals(compareTo.SurveyResponseIdentifier))
                return false;


            // Referenced Property
            if (!(this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveySectionTitle.Equals(compareTo.SurveySectionTitle))
                return false;


            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).Namespace);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).PersonId);

            //Unified Type Property
            hash.Add((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SourceSystemDescriptor);


            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyIdentifier);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveyResponseIdentifier);

            //Referenced Property
            hash.Add((this as Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation).SurveySectionTitle);
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        public virtual DateTime LastModifiedDate { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.TPDM.SurveySectionResponsePersonTargetAssociationMapper.SynchronizeTo(this, (Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.TPDM.SurveySectionResponsePersonTargetAssociationMapper.MapTo(this, (Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation)target, null);
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonResourceId
        {
            get { return null; }
            set { ImplicitPersonReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitPersonReference.Discriminator = value; }
        }


        Guid? Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionResponseResourceId
        {
            get { return null; }
            set { ImplicitSurveySectionResponseReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionResponseDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitSurveySectionResponseReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociationPutPostRequestValidator : FluentValidation.AbstractValidator<SurveySectionResponsePersonTargetAssociation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<SurveySectionResponsePersonTargetAssociation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------

            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
