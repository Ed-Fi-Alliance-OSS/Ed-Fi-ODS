using System;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Api.Providers;
using EdFi.Ods.Common.Dependencies;
using EdFi.Ods.Common.Providers;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Constants;
using EdFi.Ods.Common.Conventions;
using EdFi.Ods.Common.Exceptions;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common.Models;
using EdFi.Ods.Common.Models.Domain;
using EdFi.Ods.Entities.Common.EdFi;
// Aggregate: AbsenceEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AbsenceEventCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AbsenceEventCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AbsenceEventCategoryDescriptor = new FullName("edfi", "AbsenceEventCategoryDescriptor");
    
        public static bool SynchronizeTo(this IAbsenceEventCategoryDescriptor source, IAbsenceEventCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AbsenceEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AbsenceEventCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AbsenceEventCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAbsenceEventCategoryDescriptor source, IAbsenceEventCategoryDescriptor target, Action<IAbsenceEventCategoryDescriptor, IAbsenceEventCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AbsenceEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AbsenceEventCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AbsenceEventCategoryDescriptorId = source.AbsenceEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AcademicHonorCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AcademicHonorCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AcademicHonorCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AcademicHonorCategoryDescriptor = new FullName("edfi", "AcademicHonorCategoryDescriptor");
    
        public static bool SynchronizeTo(this IAcademicHonorCategoryDescriptor source, IAcademicHonorCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AcademicHonorCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AcademicHonorCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AcademicHonorCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAcademicHonorCategoryDescriptor source, IAcademicHonorCategoryDescriptor target, Action<IAcademicHonorCategoryDescriptor, IAcademicHonorCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AcademicHonorCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AcademicHonorCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AcademicHonorCategoryDescriptorId = source.AcademicHonorCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AcademicSubjectDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AcademicSubjectDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AcademicSubjectDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AcademicSubjectDescriptor = new FullName("edfi", "AcademicSubjectDescriptor");
    
        public static bool SynchronizeTo(this IAcademicSubjectDescriptor source, IAcademicSubjectDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AcademicSubjectDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AcademicSubjectDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AcademicSubjectDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAcademicSubjectDescriptor source, IAcademicSubjectDescriptor target, Action<IAcademicSubjectDescriptor, IAcademicSubjectDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AcademicSubjectDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AcademicSubjectDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptorId = source.AcademicSubjectDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AcademicWeek

namespace EdFi.Ods.Entities.Common.EdFi //.AcademicWeekAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AcademicWeekMapper
    {
        private static readonly FullName _fullName_edfi_AcademicWeek = new FullName("edfi", "AcademicWeek");
    
        public static bool SynchronizeTo(this IAcademicWeek source, IAcademicWeek target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AcademicWeekMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AcademicWeek);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.SchoolId != source.SchoolId)
                || (!keyStringComparer.Equals(target.WeekIdentifier, source.WeekIdentifier)))
            {
                // Disallow PK column updates on AcademicWeek
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsTotalInstructionalDaysSupported != false)
                && target.TotalInstructionalDays != source.TotalInstructionalDays)
            {
                target.TotalInstructionalDays = source.TotalInstructionalDays;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAcademicWeek source, IAcademicWeek target, Action<IAcademicWeek, IAcademicWeek> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AcademicWeekMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AcademicWeek);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;
            target.WeekIdentifier = source.WeekIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsTotalInstructionalDaysSupported != false)
                target.TotalInstructionalDays = source.TotalInstructionalDays;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AccommodationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AccommodationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AccommodationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AccommodationDescriptor = new FullName("edfi", "AccommodationDescriptor");
    
        public static bool SynchronizeTo(this IAccommodationDescriptor source, IAccommodationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AccommodationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AccommodationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AccommodationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAccommodationDescriptor source, IAccommodationDescriptor target, Action<IAccommodationDescriptor, IAccommodationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AccommodationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AccommodationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccommodationDescriptorId = source.AccommodationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AccountabilityRating

namespace EdFi.Ods.Entities.Common.EdFi //.AccountabilityRatingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AccountabilityRatingMapper
    {
        private static readonly FullName _fullName_edfi_AccountabilityRating = new FullName("edfi", "AccountabilityRating");
    
        public static bool SynchronizeTo(this IAccountabilityRating source, IAccountabilityRating target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AccountabilityRatingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AccountabilityRating);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.RatingTitle, source.RatingTitle))
                || (target.SchoolYear != source.SchoolYear))
            {
                // Disallow PK column updates on AccountabilityRating
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsRatingSupported != false)
                && target.Rating != source.Rating)
            {
                target.Rating = source.Rating;
                isModified = true;
            }

            if ((mappingContract?.IsRatingDateSupported != false)
                && target.RatingDate != source.RatingDate)
            {
                target.RatingDate = source.RatingDate;
                isModified = true;
            }

            if ((mappingContract?.IsRatingOrganizationSupported != false)
                && target.RatingOrganization != source.RatingOrganization)
            {
                target.RatingOrganization = source.RatingOrganization;
                isModified = true;
            }

            if ((mappingContract?.IsRatingProgramSupported != false)
                && target.RatingProgram != source.RatingProgram)
            {
                target.RatingProgram = source.RatingProgram;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAccountabilityRating source, IAccountabilityRating target, Action<IAccountabilityRating, IAccountabilityRating> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AccountabilityRatingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AccountabilityRating);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RatingTitle = source.RatingTitle;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsRatingSupported != false)
                target.Rating = source.Rating;

            if (mappingContract?.IsRatingDateSupported != false)
                target.RatingDate = source.RatingDate;

            if (mappingContract?.IsRatingOrganizationSupported != false)
                target.RatingOrganization = source.RatingOrganization;

            if (mappingContract?.IsRatingProgramSupported != false)
                target.RatingProgram = source.RatingProgram;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AccountTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AccountTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AccountTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AccountTypeDescriptor = new FullName("edfi", "AccountTypeDescriptor");
    
        public static bool SynchronizeTo(this IAccountTypeDescriptor source, IAccountTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AccountTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AccountTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AccountTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAccountTypeDescriptor source, IAccountTypeDescriptor target, Action<IAccountTypeDescriptor, IAccountTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AccountTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AccountTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountTypeDescriptorId = source.AccountTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AchievementCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AchievementCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AchievementCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AchievementCategoryDescriptor = new FullName("edfi", "AchievementCategoryDescriptor");
    
        public static bool SynchronizeTo(this IAchievementCategoryDescriptor source, IAchievementCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AchievementCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AchievementCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AchievementCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAchievementCategoryDescriptor source, IAchievementCategoryDescriptor target, Action<IAchievementCategoryDescriptor, IAchievementCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AchievementCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AchievementCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AchievementCategoryDescriptorId = source.AchievementCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AdditionalCreditTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AdditionalCreditTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AdditionalCreditTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AdditionalCreditTypeDescriptor = new FullName("edfi", "AdditionalCreditTypeDescriptor");
    
        public static bool SynchronizeTo(this IAdditionalCreditTypeDescriptor source, IAdditionalCreditTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AdditionalCreditTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AdditionalCreditTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AdditionalCreditTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAdditionalCreditTypeDescriptor source, IAdditionalCreditTypeDescriptor target, Action<IAdditionalCreditTypeDescriptor, IAdditionalCreditTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AdditionalCreditTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AdditionalCreditTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdditionalCreditTypeDescriptorId = source.AdditionalCreditTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AddressTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AddressTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AddressTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AddressTypeDescriptor = new FullName("edfi", "AddressTypeDescriptor");
    
        public static bool SynchronizeTo(this IAddressTypeDescriptor source, IAddressTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AddressTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AddressTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AddressTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAddressTypeDescriptor source, IAddressTypeDescriptor target, Action<IAddressTypeDescriptor, IAddressTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AddressTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AddressTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AddressTypeDescriptorId = source.AddressTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AdministrationEnvironmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AdministrationEnvironmentDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AdministrationEnvironmentDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AdministrationEnvironmentDescriptor = new FullName("edfi", "AdministrationEnvironmentDescriptor");
    
        public static bool SynchronizeTo(this IAdministrationEnvironmentDescriptor source, IAdministrationEnvironmentDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AdministrationEnvironmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AdministrationEnvironmentDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AdministrationEnvironmentDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAdministrationEnvironmentDescriptor source, IAdministrationEnvironmentDescriptor target, Action<IAdministrationEnvironmentDescriptor, IAdministrationEnvironmentDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AdministrationEnvironmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AdministrationEnvironmentDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationEnvironmentDescriptorId = source.AdministrationEnvironmentDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AdministrativeFundingControlDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AdministrativeFundingControlDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AdministrativeFundingControlDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AdministrativeFundingControlDescriptor = new FullName("edfi", "AdministrativeFundingControlDescriptor");
    
        public static bool SynchronizeTo(this IAdministrativeFundingControlDescriptor source, IAdministrativeFundingControlDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AdministrativeFundingControlDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AdministrativeFundingControlDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AdministrativeFundingControlDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAdministrativeFundingControlDescriptor source, IAdministrativeFundingControlDescriptor target, Action<IAdministrativeFundingControlDescriptor, IAdministrativeFundingControlDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AdministrativeFundingControlDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AdministrativeFundingControlDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrativeFundingControlDescriptorId = source.AdministrativeFundingControlDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AncestryEthnicOriginDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AncestryEthnicOriginDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AncestryEthnicOriginDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AncestryEthnicOriginDescriptor = new FullName("edfi", "AncestryEthnicOriginDescriptor");
    
        public static bool SynchronizeTo(this IAncestryEthnicOriginDescriptor source, IAncestryEthnicOriginDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AncestryEthnicOriginDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AncestryEthnicOriginDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AncestryEthnicOriginDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAncestryEthnicOriginDescriptor source, IAncestryEthnicOriginDescriptor target, Action<IAncestryEthnicOriginDescriptor, IAncestryEthnicOriginDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AncestryEthnicOriginDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AncestryEthnicOriginDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AncestryEthnicOriginDescriptorId = source.AncestryEthnicOriginDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentMapper
    {
        private static readonly FullName _fullName_edfi_Assessment = new FullName("edfi", "Assessment");
    
        public static bool SynchronizeTo(this IAssessment source, IAssessment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Assessment);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AssessmentIdentifier, source.AssessmentIdentifier))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace)))
            {
                // Disallow PK column updates on Assessment
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAdaptiveAssessmentSupported != false)
                && target.AdaptiveAssessment != source.AdaptiveAssessment)
            {
                target.AdaptiveAssessment = source.AdaptiveAssessment;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentCategoryDescriptorSupported != false)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentFamilySupported != false)
                && target.AssessmentFamily != source.AssessmentFamily)
            {
                target.AssessmentFamily = source.AssessmentFamily;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentFormSupported != false)
                && target.AssessmentForm != source.AssessmentForm)
            {
                target.AssessmentForm = source.AssessmentForm;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentTitleSupported != false)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentVersionSupported != false)
                && target.AssessmentVersion != source.AssessmentVersion)
            {
                target.AssessmentVersion = source.AssessmentVersion;
                isModified = true;
            }

            if ((mappingContract?.IsEducationOrganizationIdSupported != false)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsMaxRawScoreSupported != false)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((mappingContract?.IsNomenclatureSupported != false)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }

            if ((mappingContract?.IsRevisionDateSupported != false)
                && target.RevisionDate != source.RevisionDate)
            {
                target.RevisionDate = source.RevisionDate;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // AssessmentContentStandard (AssessmentContentStandard)
            if (mappingContract?.IsAssessmentContentStandardSupported != false)
            {
                if (source.AssessmentContentStandard == null)
                {
                    if (target.AssessmentContentStandard != null)
                    {
                        target.AssessmentContentStandard = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AssessmentContentStandard == null)
                    {
                        var itemType = target.GetType().GetProperty("AssessmentContentStandard").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AssessmentContentStandard = (IAssessmentContentStandard) newItem;
                    }

                    isModified |= source.AssessmentContentStandard.Synchronize(target.AssessmentContentStandard);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (mappingContract?.IsAssessmentAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.AssessmentAcademicSubjects.SynchronizeCollectionTo(
                        target.AssessmentAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentAssessedGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.AssessmentAssessedGradeLevels.SynchronizeCollectionTo(
                        target.AssessmentAssessedGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentAssessedGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentIdentificationCodesSupported ?? true)
            {
                isModified |=
                    source.AssessmentIdentificationCodes.SynchronizeCollectionTo(
                        target.AssessmentIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentLanguagesSupported ?? true)
            {
                isModified |=
                    source.AssessmentLanguages.SynchronizeCollectionTo(
                        target.AssessmentLanguages,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentLanguageIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentPerformanceLevelsSupported ?? true)
            {
                isModified |=
                    source.AssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.AssessmentPerformanceLevels,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentPerformanceLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentPeriodsSupported ?? true)
            {
                isModified |=
                    source.AssessmentPeriods.SynchronizeCollectionTo(
                        target.AssessmentPeriods,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentPeriodIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentPlatformTypesSupported ?? true)
            {
                isModified |=
                    source.AssessmentPlatformTypes.SynchronizeCollectionTo(
                        target.AssessmentPlatformTypes,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentPlatformTypeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentProgramsSupported ?? true)
            {
                isModified |=
                    source.AssessmentPrograms.SynchronizeCollectionTo(
                        target.AssessmentPrograms,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentProgramIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentScoresSupported ?? true)
            {
                isModified |=
                    source.AssessmentScores.SynchronizeCollectionTo(
                        target.AssessmentScores,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentScoreIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentSectionsSupported ?? true)
            {
                isModified |=
                    source.AssessmentSections.SynchronizeCollectionTo(
                        target.AssessmentSections,
                        onChildAdded: child =>
                            {
                                child.Assessment = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentSectionIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessment source, IAssessment target, Action<IAssessment, IAssessment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Assessment);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (mappingContract?.IsAdaptiveAssessmentSupported != false)
                target.AdaptiveAssessment = source.AdaptiveAssessment;

            if (mappingContract?.IsAssessmentCategoryDescriptorSupported != false)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;

            if (mappingContract?.IsAssessmentFamilySupported != false)
                target.AssessmentFamily = source.AssessmentFamily;

            if (mappingContract?.IsAssessmentFormSupported != false)
                target.AssessmentForm = source.AssessmentForm;

            if (mappingContract?.IsAssessmentTitleSupported != false)
                target.AssessmentTitle = source.AssessmentTitle;

            if (mappingContract?.IsAssessmentVersionSupported != false)
                target.AssessmentVersion = source.AssessmentVersion;

            if (mappingContract?.IsEducationOrganizationIdSupported != false)
                target.EducationOrganizationId = source.EducationOrganizationId;

            if (mappingContract?.IsMaxRawScoreSupported != false)
                target.MaxRawScore = source.MaxRawScore;

            if (mappingContract?.IsNomenclatureSupported != false)
                target.Nomenclature = source.Nomenclature;

            if (mappingContract?.IsRevisionDateSupported != false)
                target.RevisionDate = source.RevisionDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // AssessmentContentStandard (AssessmentContentStandard) (Source)
            if (mappingContract?.IsAssessmentContentStandardSupported != false)
            {
                var itemProperty = target.GetType().GetProperty("AssessmentContentStandard");

                if (itemProperty != null)
                {
                    if (source.AssessmentContentStandard == null)
                    {
                        target.AssessmentContentStandard = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAssessmentContentStandard = Activator.CreateInstance(itemType);
                        (targetAssessmentContentStandard as IChildEntity)?.SetParent(target);
                        source.AssessmentContentStandard.Map(targetAssessmentContentStandard);

                        // Update the target reference appropriately
                        target.AssessmentContentStandard = (IAssessmentContentStandard) targetAssessmentContentStandard;
                    }
                }
            }
            // -------------------------------------------------------------

            // Map lists

            if (mappingContract?.IsAssessmentAcademicSubjectsSupported != false)
            {
                source.AssessmentAcademicSubjects.MapCollectionTo(target.AssessmentAcademicSubjects, target, mappingContract?.IsAssessmentAcademicSubjectIncluded);
            }

            if (mappingContract?.IsAssessmentAssessedGradeLevelsSupported != false)
            {
                source.AssessmentAssessedGradeLevels.MapCollectionTo(target.AssessmentAssessedGradeLevels, target, mappingContract?.IsAssessmentAssessedGradeLevelIncluded);
            }

            if (mappingContract?.IsAssessmentIdentificationCodesSupported != false)
            {
                source.AssessmentIdentificationCodes.MapCollectionTo(target.AssessmentIdentificationCodes, target, mappingContract?.IsAssessmentIdentificationCodeIncluded);
            }

            if (mappingContract?.IsAssessmentLanguagesSupported != false)
            {
                source.AssessmentLanguages.MapCollectionTo(target.AssessmentLanguages, target, mappingContract?.IsAssessmentLanguageIncluded);
            }

            if (mappingContract?.IsAssessmentPerformanceLevelsSupported != false)
            {
                source.AssessmentPerformanceLevels.MapCollectionTo(target.AssessmentPerformanceLevels, target, mappingContract?.IsAssessmentPerformanceLevelIncluded);
            }

            if (mappingContract?.IsAssessmentPeriodsSupported != false)
            {
                source.AssessmentPeriods.MapCollectionTo(target.AssessmentPeriods, target, mappingContract?.IsAssessmentPeriodIncluded);
            }

            if (mappingContract?.IsAssessmentPlatformTypesSupported != false)
            {
                source.AssessmentPlatformTypes.MapCollectionTo(target.AssessmentPlatformTypes, target, mappingContract?.IsAssessmentPlatformTypeIncluded);
            }

            if (mappingContract?.IsAssessmentProgramsSupported != false)
            {
                source.AssessmentPrograms.MapCollectionTo(target.AssessmentPrograms, target, mappingContract?.IsAssessmentProgramIncluded);
            }

            if (mappingContract?.IsAssessmentScoresSupported != false)
            {
                source.AssessmentScores.MapCollectionTo(target.AssessmentScores, target, mappingContract?.IsAssessmentScoreIncluded);
            }

            if (mappingContract?.IsAssessmentSectionsSupported != false)
            {
                source.AssessmentSections.MapCollectionTo(target.AssessmentSections, target, mappingContract?.IsAssessmentSectionIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentAcademicSubject = new FullName("edfi", "AssessmentAcademicSubject");
    
        public static bool SynchronizeTo(this IAssessmentAcademicSubject source, IAssessmentAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentAcademicSubject source, IAssessmentAcademicSubject target, Action<IAssessmentAcademicSubject, IAssessmentAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentAssessedGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentAssessedGradeLevel = new FullName("edfi", "AssessmentAssessedGradeLevel");
    
        public static bool SynchronizeTo(this IAssessmentAssessedGradeLevel source, IAssessmentAssessedGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentAssessedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentAssessedGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentAssessedGradeLevel source, IAssessmentAssessedGradeLevel target, Action<IAssessmentAssessedGradeLevel, IAssessmentAssessedGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentAssessedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentAssessedGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentContentStandardMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentContentStandard = new FullName("edfi", "AssessmentContentStandard");
    
        public static bool SynchronizeTo(this IAssessmentContentStandard source, IAssessmentContentStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentContentStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentContentStandard);


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsMandatingEducationOrganizationIdSupported != false)
                && target.MandatingEducationOrganizationId != source.MandatingEducationOrganizationId)
            {
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationDateSupported != false)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationStatusDescriptorSupported != false)
                && target.PublicationStatusDescriptor != source.PublicationStatusDescriptor)
            {
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationYearSupported != false)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((mappingContract?.IsTitleSupported != false)
                && target.Title != source.Title)
            {
                target.Title = source.Title;
                isModified = true;
            }

            if ((mappingContract?.IsURISupported != false)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            if ((mappingContract?.IsVersionSupported != false)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsAssessmentContentStandardAuthorsSupported ?? true)
            {
                isModified |=
                    source.AssessmentContentStandardAuthors.SynchronizeCollectionTo(
                        target.AssessmentContentStandardAuthors,
                        onChildAdded: child =>
                            {
                                child.AssessmentContentStandard = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentContentStandardAuthorIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentContentStandard source, IAssessmentContentStandard target, Action<IAssessmentContentStandard, IAssessmentContentStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentContentStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentContentStandard);
    
            // Copy contextual primary key values

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsMandatingEducationOrganizationIdSupported != false)
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;

            if (mappingContract?.IsPublicationDateSupported != false)
                target.PublicationDate = source.PublicationDate;

            if (mappingContract?.IsPublicationStatusDescriptorSupported != false)
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;

            if (mappingContract?.IsPublicationYearSupported != false)
                target.PublicationYear = source.PublicationYear;

            if (mappingContract?.IsTitleSupported != false)
                target.Title = source.Title;

            if (mappingContract?.IsURISupported != false)
                target.URI = source.URI;

            if (mappingContract?.IsVersionSupported != false)
                target.Version = source.Version;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.MandatingEducationOrganizationResourceId = source.MandatingEducationOrganizationResourceId;
                target.MandatingEducationOrganizationDiscriminator = source.MandatingEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsAssessmentContentStandardAuthorsSupported != false)
            {
                source.AssessmentContentStandardAuthors.MapCollectionTo(target.AssessmentContentStandardAuthors, target, mappingContract?.IsAssessmentContentStandardAuthorIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentContentStandardAuthorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentContentStandardAuthor = new FullName("edfi", "AssessmentContentStandardAuthor");
    
        public static bool SynchronizeTo(this IAssessmentContentStandardAuthor source, IAssessmentContentStandardAuthor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentContentStandardAuthorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentContentStandardAuthor);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentContentStandardAuthor source, IAssessmentContentStandardAuthor target, Action<IAssessmentContentStandardAuthor, IAssessmentContentStandardAuthor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentContentStandardAuthorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentContentStandardAuthor);
    
            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentIdentificationCode = new FullName("edfi", "AssessmentIdentificationCode");
    
        public static bool SynchronizeTo(this IAssessmentIdentificationCode source, IAssessmentIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentIdentificationCode);


            // Copy non-PK properties

            if ((mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentIdentificationCode source, IAssessmentIdentificationCode target, Action<IAssessmentIdentificationCode, IAssessmentIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentIdentificationCode);
    
            // Copy contextual primary key values
            target.AssessmentIdentificationSystemDescriptor = source.AssessmentIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentLanguageMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentLanguage = new FullName("edfi", "AssessmentLanguage");
    
        public static bool SynchronizeTo(this IAssessmentLanguage source, IAssessmentLanguage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentLanguage);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentLanguage source, IAssessmentLanguage target, Action<IAssessmentLanguage, IAssessmentLanguage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentLanguage);
    
            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentPerformanceLevelMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentPerformanceLevel = new FullName("edfi", "AssessmentPerformanceLevel");
    
        public static bool SynchronizeTo(this IAssessmentPerformanceLevel source, IAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPerformanceLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                && target.PerformanceLevelIndicatorName != source.PerformanceLevelIndicatorName)
            {
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentPerformanceLevel source, IAssessmentPerformanceLevel target, Action<IAssessmentPerformanceLevel, IAssessmentPerformanceLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPerformanceLevel);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            if (mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentPeriodMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentPeriod = new FullName("edfi", "AssessmentPeriod");
    
        public static bool SynchronizeTo(this IAssessmentPeriod source, IAssessmentPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentPeriod source, IAssessmentPeriod target, Action<IAssessmentPeriod, IAssessmentPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPeriod);
    
            // Copy contextual primary key values
            target.AssessmentPeriodDescriptor = source.AssessmentPeriodDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentPlatformTypeMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentPlatformType = new FullName("edfi", "AssessmentPlatformType");
    
        public static bool SynchronizeTo(this IAssessmentPlatformType source, IAssessmentPlatformType target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentPlatformTypeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPlatformType);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentPlatformType source, IAssessmentPlatformType target, Action<IAssessmentPlatformType, IAssessmentPlatformType> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentPlatformTypeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPlatformType);
    
            // Copy contextual primary key values
            target.PlatformTypeDescriptor = source.PlatformTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentProgramMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentProgram = new FullName("edfi", "AssessmentProgram");
    
        public static bool SynchronizeTo(this IAssessmentProgram source, IAssessmentProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentProgram);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentProgram source, IAssessmentProgram target, Action<IAssessmentProgram, IAssessmentProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentProgram);
    
            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentScoreMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentScore = new FullName("edfi", "AssessmentScore");
    
        public static bool SynchronizeTo(this IAssessmentScore source, IAssessmentScore target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentScoreMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentScore);


            // Copy non-PK properties

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentScore source, IAssessmentScore target, Action<IAssessmentScore, IAssessmentScore> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentScoreMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentScore);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentSectionMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentSection = new FullName("edfi", "AssessmentSection");
    
        public static bool SynchronizeTo(this IAssessmentSection source, IAssessmentSection target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentSectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentSection);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentSection source, IAssessmentSection target, Action<IAssessmentSection, IAssessmentSection> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentSectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentSection);
    
            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentCategoryDescriptor = new FullName("edfi", "AssessmentCategoryDescriptor");
    
        public static bool SynchronizeTo(this IAssessmentCategoryDescriptor source, IAssessmentCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssessmentCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssessmentCategoryDescriptor source, IAssessmentCategoryDescriptor target, Action<IAssessmentCategoryDescriptor, IAssessmentCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentCategoryDescriptorId = source.AssessmentCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentIdentificationSystemDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentIdentificationSystemDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentIdentificationSystemDescriptor = new FullName("edfi", "AssessmentIdentificationSystemDescriptor");
    
        public static bool SynchronizeTo(this IAssessmentIdentificationSystemDescriptor source, IAssessmentIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentIdentificationSystemDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssessmentIdentificationSystemDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssessmentIdentificationSystemDescriptor source, IAssessmentIdentificationSystemDescriptor target, Action<IAssessmentIdentificationSystemDescriptor, IAssessmentIdentificationSystemDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentIdentificationSystemDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentificationSystemDescriptorId = source.AssessmentIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentItem

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentItemAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentItem = new FullName("edfi", "AssessmentItem");
    
        public static bool SynchronizeTo(this IAssessmentItem source, IAssessmentItem target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentItemMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItem);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AssessmentIdentifier, source.AssessmentIdentifier))
                || (!keyStringComparer.Equals(target.IdentificationCode, source.IdentificationCode))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace)))
            {
                // Disallow PK column updates on AssessmentItem
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAssessmentItemCategoryDescriptorSupported != false)
                && target.AssessmentItemCategoryDescriptor != source.AssessmentItemCategoryDescriptor)
            {
                target.AssessmentItemCategoryDescriptor = source.AssessmentItemCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentItemURISupported != false)
                && target.AssessmentItemURI != source.AssessmentItemURI)
            {
                target.AssessmentItemURI = source.AssessmentItemURI;
                isModified = true;
            }

            if ((mappingContract?.IsExpectedTimeAssessedSupported != false)
                && target.ExpectedTimeAssessed != source.ExpectedTimeAssessed)
            {
                target.ExpectedTimeAssessed = source.ExpectedTimeAssessed;
                isModified = true;
            }

            if ((mappingContract?.IsItemTextSupported != false)
                && target.ItemText != source.ItemText)
            {
                target.ItemText = source.ItemText;
                isModified = true;
            }

            if ((mappingContract?.IsMaxRawScoreSupported != false)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((mappingContract?.IsNomenclatureSupported != false)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsAssessmentItemLearningStandardsSupported ?? true)
            {
                isModified |=
                    source.AssessmentItemLearningStandards.SynchronizeCollectionTo(
                        target.AssessmentItemLearningStandards,
                        onChildAdded: child =>
                            {
                                child.AssessmentItem = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentItemLearningStandardIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsAssessmentItemPossibleResponsesSupported ?? true)
            {
                isModified |=
                    source.AssessmentItemPossibleResponses.SynchronizeCollectionTo(
                        target.AssessmentItemPossibleResponses,
                        onChildAdded: child =>
                            {
                                child.AssessmentItem = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentItemPossibleResponseIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentItem source, IAssessmentItem target, Action<IAssessmentItem, IAssessmentItem> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentItemMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItem);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.IdentificationCode = source.IdentificationCode;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (mappingContract?.IsAssessmentItemCategoryDescriptorSupported != false)
                target.AssessmentItemCategoryDescriptor = source.AssessmentItemCategoryDescriptor;

            if (mappingContract?.IsAssessmentItemURISupported != false)
                target.AssessmentItemURI = source.AssessmentItemURI;

            if (mappingContract?.IsExpectedTimeAssessedSupported != false)
                target.ExpectedTimeAssessed = source.ExpectedTimeAssessed;

            if (mappingContract?.IsItemTextSupported != false)
                target.ItemText = source.ItemText;

            if (mappingContract?.IsMaxRawScoreSupported != false)
                target.MaxRawScore = source.MaxRawScore;

            if (mappingContract?.IsNomenclatureSupported != false)
                target.Nomenclature = source.Nomenclature;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsAssessmentItemLearningStandardsSupported != false)
            {
                source.AssessmentItemLearningStandards.MapCollectionTo(target.AssessmentItemLearningStandards, target, mappingContract?.IsAssessmentItemLearningStandardIncluded);
            }

            if (mappingContract?.IsAssessmentItemPossibleResponsesSupported != false)
            {
                source.AssessmentItemPossibleResponses.MapCollectionTo(target.AssessmentItemPossibleResponses, target, mappingContract?.IsAssessmentItemPossibleResponseIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentItemLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentItemLearningStandard = new FullName("edfi", "AssessmentItemLearningStandard");
    
        public static bool SynchronizeTo(this IAssessmentItemLearningStandard source, IAssessmentItemLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentItemLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemLearningStandard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentItemLearningStandard source, IAssessmentItemLearningStandard target, Action<IAssessmentItemLearningStandard, IAssessmentItemLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentItemLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemLearningStandard);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentItemPossibleResponseMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentItemPossibleResponse = new FullName("edfi", "AssessmentItemPossibleResponse");
    
        public static bool SynchronizeTo(this IAssessmentItemPossibleResponse source, IAssessmentItemPossibleResponse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentItemPossibleResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemPossibleResponse);


            // Copy non-PK properties

            if ((mappingContract?.IsCorrectResponseSupported != false)
                && target.CorrectResponse != source.CorrectResponse)
            {
                target.CorrectResponse = source.CorrectResponse;
                isModified = true;
            }

            if ((mappingContract?.IsResponseDescriptionSupported != false)
                && target.ResponseDescription != source.ResponseDescription)
            {
                target.ResponseDescription = source.ResponseDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentItemPossibleResponse source, IAssessmentItemPossibleResponse target, Action<IAssessmentItemPossibleResponse, IAssessmentItemPossibleResponse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentItemPossibleResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemPossibleResponse);
    
            // Copy contextual primary key values
            target.ResponseValue = source.ResponseValue;

            // Copy non-PK properties

            if (mappingContract?.IsCorrectResponseSupported != false)
                target.CorrectResponse = source.CorrectResponse;

            if (mappingContract?.IsResponseDescriptionSupported != false)
                target.ResponseDescription = source.ResponseDescription;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentItemCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentItemCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentItemCategoryDescriptor = new FullName("edfi", "AssessmentItemCategoryDescriptor");
    
        public static bool SynchronizeTo(this IAssessmentItemCategoryDescriptor source, IAssessmentItemCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentItemCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssessmentItemCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssessmentItemCategoryDescriptor source, IAssessmentItemCategoryDescriptor target, Action<IAssessmentItemCategoryDescriptor, IAssessmentItemCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentItemCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentItemCategoryDescriptorId = source.AssessmentItemCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentItemResultDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentItemResultDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemResultDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentItemResultDescriptor = new FullName("edfi", "AssessmentItemResultDescriptor");
    
        public static bool SynchronizeTo(this IAssessmentItemResultDescriptor source, IAssessmentItemResultDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentItemResultDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemResultDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssessmentItemResultDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssessmentItemResultDescriptor source, IAssessmentItemResultDescriptor target, Action<IAssessmentItemResultDescriptor, IAssessmentItemResultDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentItemResultDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentItemResultDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentItemResultDescriptorId = source.AssessmentItemResultDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentPeriodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentPeriodDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentPeriodDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentPeriodDescriptor = new FullName("edfi", "AssessmentPeriodDescriptor");
    
        public static bool SynchronizeTo(this IAssessmentPeriodDescriptor source, IAssessmentPeriodDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentPeriodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPeriodDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssessmentPeriodDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssessmentPeriodDescriptor source, IAssessmentPeriodDescriptor target, Action<IAssessmentPeriodDescriptor, IAssessmentPeriodDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentPeriodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentPeriodDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentPeriodDescriptorId = source.AssessmentPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentReportingMethodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentReportingMethodDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentReportingMethodDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentReportingMethodDescriptor = new FullName("edfi", "AssessmentReportingMethodDescriptor");
    
        public static bool SynchronizeTo(this IAssessmentReportingMethodDescriptor source, IAssessmentReportingMethodDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentReportingMethodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentReportingMethodDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssessmentReportingMethodDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssessmentReportingMethodDescriptor source, IAssessmentReportingMethodDescriptor target, Action<IAssessmentReportingMethodDescriptor, IAssessmentReportingMethodDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentReportingMethodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentReportingMethodDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptorId = source.AssessmentReportingMethodDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssessmentScoreRangeLearningStandard

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentScoreRangeLearningStandardAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentScoreRangeLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentScoreRangeLearningStandard = new FullName("edfi", "AssessmentScoreRangeLearningStandard");
    
        public static bool SynchronizeTo(this IAssessmentScoreRangeLearningStandard source, IAssessmentScoreRangeLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentScoreRangeLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentScoreRangeLearningStandard);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AssessmentIdentifier, source.AssessmentIdentifier))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.ScoreRangeId, source.ScoreRangeId)))
            {
                // Disallow PK column updates on AssessmentScoreRangeLearningStandard
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAssessmentReportingMethodDescriptorSupported != false)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsAssessmentScoreRangeLearningStandardLearningStandardsSupported ?? true)
            {
                isModified |=
                    source.AssessmentScoreRangeLearningStandardLearningStandards.SynchronizeCollectionTo(
                        target.AssessmentScoreRangeLearningStandardLearningStandards,
                        onChildAdded: child =>
                            {
                                child.AssessmentScoreRangeLearningStandard = target;
                            },
                        includeItem: item => mappingContract?.IsAssessmentScoreRangeLearningStandardLearningStandardIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentScoreRangeLearningStandard source, IAssessmentScoreRangeLearningStandard target, Action<IAssessmentScoreRangeLearningStandard, IAssessmentScoreRangeLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentScoreRangeLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentScoreRangeLearningStandard);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;
            target.ScoreRangeId = source.ScoreRangeId;

            // Copy non-PK properties

            if (mappingContract?.IsAssessmentReportingMethodDescriptorSupported != false)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
                target.ObjectiveAssessmentResourceId = source.ObjectiveAssessmentResourceId;
                target.ObjectiveAssessmentDiscriminator = source.ObjectiveAssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsAssessmentScoreRangeLearningStandardLearningStandardsSupported != false)
            {
                source.AssessmentScoreRangeLearningStandardLearningStandards.MapCollectionTo(target.AssessmentScoreRangeLearningStandardLearningStandards, target, mappingContract?.IsAssessmentScoreRangeLearningStandardLearningStandardIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class AssessmentScoreRangeLearningStandardLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_AssessmentScoreRangeLearningStandardLearningStandard = new FullName("edfi", "AssessmentScoreRangeLearningStandardLearningStandard");
    
        public static bool SynchronizeTo(this IAssessmentScoreRangeLearningStandardLearningStandard source, IAssessmentScoreRangeLearningStandardLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssessmentScoreRangeLearningStandardLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentScoreRangeLearningStandardLearningStandard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IAssessmentScoreRangeLearningStandardLearningStandard source, IAssessmentScoreRangeLearningStandardLearningStandard target, Action<IAssessmentScoreRangeLearningStandardLearningStandard, IAssessmentScoreRangeLearningStandardLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssessmentScoreRangeLearningStandardLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssessmentScoreRangeLearningStandardLearningStandard);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AssignmentLateStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssignmentLateStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssignmentLateStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AssignmentLateStatusDescriptor = new FullName("edfi", "AssignmentLateStatusDescriptor");
    
        public static bool SynchronizeTo(this IAssignmentLateStatusDescriptor source, IAssignmentLateStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AssignmentLateStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssignmentLateStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AssignmentLateStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAssignmentLateStatusDescriptor source, IAssignmentLateStatusDescriptor target, Action<IAssignmentLateStatusDescriptor, IAssignmentLateStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AssignmentLateStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AssignmentLateStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssignmentLateStatusDescriptorId = source.AssignmentLateStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AttemptStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AttemptStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AttemptStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AttemptStatusDescriptor = new FullName("edfi", "AttemptStatusDescriptor");
    
        public static bool SynchronizeTo(this IAttemptStatusDescriptor source, IAttemptStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AttemptStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AttemptStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AttemptStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAttemptStatusDescriptor source, IAttemptStatusDescriptor target, Action<IAttemptStatusDescriptor, IAttemptStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AttemptStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AttemptStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttemptStatusDescriptorId = source.AttemptStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: AttendanceEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AttendanceEventCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AttendanceEventCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_AttendanceEventCategoryDescriptor = new FullName("edfi", "AttendanceEventCategoryDescriptor");
    
        public static bool SynchronizeTo(this IAttendanceEventCategoryDescriptor source, IAttendanceEventCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (AttendanceEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AttendanceEventCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on AttendanceEventCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IAttendanceEventCategoryDescriptor source, IAttendanceEventCategoryDescriptor target, Action<IAttendanceEventCategoryDescriptor, IAttendanceEventCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (AttendanceEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_AttendanceEventCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptorId = source.AttendanceEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: BalanceSheetDimension

namespace EdFi.Ods.Entities.Common.EdFi //.BalanceSheetDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class BalanceSheetDimensionMapper
    {
        private static readonly FullName _fullName_edfi_BalanceSheetDimension = new FullName("edfi", "BalanceSheetDimension");
    
        public static bool SynchronizeTo(this IBalanceSheetDimension source, IBalanceSheetDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BalanceSheetDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BalanceSheetDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on BalanceSheetDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsBalanceSheetDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.BalanceSheetDimensionReportingTags.SynchronizeCollectionTo(
                        target.BalanceSheetDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.BalanceSheetDimension = target;
                            },
                        includeItem: item => mappingContract?.IsBalanceSheetDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IBalanceSheetDimension source, IBalanceSheetDimension target, Action<IBalanceSheetDimension, IBalanceSheetDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BalanceSheetDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BalanceSheetDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsBalanceSheetDimensionReportingTagsSupported != false)
            {
                source.BalanceSheetDimensionReportingTags.MapCollectionTo(target.BalanceSheetDimensionReportingTags, target, mappingContract?.IsBalanceSheetDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class BalanceSheetDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_BalanceSheetDimensionReportingTag = new FullName("edfi", "BalanceSheetDimensionReportingTag");
    
        public static bool SynchronizeTo(this IBalanceSheetDimensionReportingTag source, IBalanceSheetDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BalanceSheetDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BalanceSheetDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IBalanceSheetDimensionReportingTag source, IBalanceSheetDimensionReportingTag target, Action<IBalanceSheetDimensionReportingTag, IBalanceSheetDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BalanceSheetDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BalanceSheetDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: BarrierToInternetAccessInResidenceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.BarrierToInternetAccessInResidenceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class BarrierToInternetAccessInResidenceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_BarrierToInternetAccessInResidenceDescriptor = new FullName("edfi", "BarrierToInternetAccessInResidenceDescriptor");
    
        public static bool SynchronizeTo(this IBarrierToInternetAccessInResidenceDescriptor source, IBarrierToInternetAccessInResidenceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BarrierToInternetAccessInResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BarrierToInternetAccessInResidenceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on BarrierToInternetAccessInResidenceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IBarrierToInternetAccessInResidenceDescriptor source, IBarrierToInternetAccessInResidenceDescriptor target, Action<IBarrierToInternetAccessInResidenceDescriptor, IBarrierToInternetAccessInResidenceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BarrierToInternetAccessInResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BarrierToInternetAccessInResidenceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BarrierToInternetAccessInResidenceDescriptorId = source.BarrierToInternetAccessInResidenceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: BehaviorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.BehaviorDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class BehaviorDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_BehaviorDescriptor = new FullName("edfi", "BehaviorDescriptor");
    
        public static bool SynchronizeTo(this IBehaviorDescriptor source, IBehaviorDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BehaviorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BehaviorDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on BehaviorDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IBehaviorDescriptor source, IBehaviorDescriptor target, Action<IBehaviorDescriptor, IBehaviorDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BehaviorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BehaviorDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BehaviorDescriptorId = source.BehaviorDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: BellSchedule

namespace EdFi.Ods.Entities.Common.EdFi //.BellScheduleAggregate
{
    [ExcludeFromCodeCoverage]
    public static class BellScheduleMapper
    {
        private static readonly FullName _fullName_edfi_BellSchedule = new FullName("edfi", "BellSchedule");
    
        public static bool SynchronizeTo(this IBellSchedule source, IBellSchedule target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BellScheduleMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellSchedule);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.BellScheduleName, source.BellScheduleName))
                || (target.SchoolId != source.SchoolId))
            {
                // Disallow PK column updates on BellSchedule
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAlternateDayNameSupported != false)
                && target.AlternateDayName != source.AlternateDayName)
            {
                target.AlternateDayName = source.AlternateDayName;
                isModified = true;
            }

            if ((mappingContract?.IsEndTimeSupported != false)
                && target.EndTime != source.EndTime)
            {
                target.EndTime = source.EndTime;
                isModified = true;
            }

            if ((mappingContract?.IsStartTimeSupported != false)
                && target.StartTime != source.StartTime)
            {
                target.StartTime = source.StartTime;
                isModified = true;
            }

            if ((mappingContract?.IsTotalInstructionalTimeSupported != false)
                && target.TotalInstructionalTime != source.TotalInstructionalTime)
            {
                target.TotalInstructionalTime = source.TotalInstructionalTime;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsBellScheduleClassPeriodsSupported ?? true)
            {
                isModified |=
                    source.BellScheduleClassPeriods.SynchronizeCollectionTo(
                        target.BellScheduleClassPeriods,
                        onChildAdded: child =>
                            {
                                child.BellSchedule = target;
                            },
                        includeItem: item => mappingContract?.IsBellScheduleClassPeriodIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsBellScheduleDatesSupported ?? true)
            {
                isModified |=
                    source.BellScheduleDates.SynchronizeCollectionTo(
                        target.BellScheduleDates,
                        onChildAdded: child =>
                            {
                                child.BellSchedule = target;
                            },
                        includeItem: item => mappingContract?.IsBellScheduleDateIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsBellScheduleGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.BellScheduleGradeLevels.SynchronizeCollectionTo(
                        target.BellScheduleGradeLevels,
                        onChildAdded: child =>
                            {
                                child.BellSchedule = target;
                            },
                        includeItem: item => mappingContract?.IsBellScheduleGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IBellSchedule source, IBellSchedule target, Action<IBellSchedule, IBellSchedule> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BellScheduleMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellSchedule);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BellScheduleName = source.BellScheduleName;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (mappingContract?.IsAlternateDayNameSupported != false)
                target.AlternateDayName = source.AlternateDayName;

            if (mappingContract?.IsEndTimeSupported != false)
                target.EndTime = source.EndTime;

            if (mappingContract?.IsStartTimeSupported != false)
                target.StartTime = source.StartTime;

            if (mappingContract?.IsTotalInstructionalTimeSupported != false)
                target.TotalInstructionalTime = source.TotalInstructionalTime;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsBellScheduleClassPeriodsSupported != false)
            {
                source.BellScheduleClassPeriods.MapCollectionTo(target.BellScheduleClassPeriods, target, mappingContract?.IsBellScheduleClassPeriodIncluded);
            }

            if (mappingContract?.IsBellScheduleDatesSupported != false)
            {
                source.BellScheduleDates.MapCollectionTo(target.BellScheduleDates, target, mappingContract?.IsBellScheduleDateIncluded);
            }

            if (mappingContract?.IsBellScheduleGradeLevelsSupported != false)
            {
                source.BellScheduleGradeLevels.MapCollectionTo(target.BellScheduleGradeLevels, target, mappingContract?.IsBellScheduleGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class BellScheduleClassPeriodMapper
    {
        private static readonly FullName _fullName_edfi_BellScheduleClassPeriod = new FullName("edfi", "BellScheduleClassPeriod");
    
        public static bool SynchronizeTo(this IBellScheduleClassPeriod source, IBellScheduleClassPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BellScheduleClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellScheduleClassPeriod);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IBellScheduleClassPeriod source, IBellScheduleClassPeriod target, Action<IBellScheduleClassPeriod, IBellScheduleClassPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BellScheduleClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellScheduleClassPeriod);
    
            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassPeriodResourceId = source.ClassPeriodResourceId;
                target.ClassPeriodDiscriminator = source.ClassPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class BellScheduleDateMapper
    {
        private static readonly FullName _fullName_edfi_BellScheduleDate = new FullName("edfi", "BellScheduleDate");
    
        public static bool SynchronizeTo(this IBellScheduleDate source, IBellScheduleDate target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BellScheduleDateMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellScheduleDate);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IBellScheduleDate source, IBellScheduleDate target, Action<IBellScheduleDate, IBellScheduleDate> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BellScheduleDateMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellScheduleDate);
    
            // Copy contextual primary key values
            target.Date = source.Date;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class BellScheduleGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_BellScheduleGradeLevel = new FullName("edfi", "BellScheduleGradeLevel");
    
        public static bool SynchronizeTo(this IBellScheduleGradeLevel source, IBellScheduleGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (BellScheduleGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellScheduleGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IBellScheduleGradeLevel source, IBellScheduleGradeLevel target, Action<IBellScheduleGradeLevel, IBellScheduleGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (BellScheduleGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_BellScheduleGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Calendar

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CalendarMapper
    {
        private static readonly FullName _fullName_edfi_Calendar = new FullName("edfi", "Calendar");
    
        public static bool SynchronizeTo(this ICalendar source, ICalendar target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CalendarMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Calendar);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CalendarCode, source.CalendarCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear))
            {
                // Disallow PK column updates on Calendar
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCalendarTypeDescriptorSupported != false)
                && target.CalendarTypeDescriptor != source.CalendarTypeDescriptor)
            {
                target.CalendarTypeDescriptor = source.CalendarTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsCalendarGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.CalendarGradeLevels.SynchronizeCollectionTo(
                        target.CalendarGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Calendar = target;
                            },
                        includeItem: item => mappingContract?.IsCalendarGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICalendar source, ICalendar target, Action<ICalendar, ICalendar> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CalendarMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Calendar);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarCode = source.CalendarCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsCalendarTypeDescriptorSupported != false)
                target.CalendarTypeDescriptor = source.CalendarTypeDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCalendarGradeLevelsSupported != false)
            {
                source.CalendarGradeLevels.MapCollectionTo(target.CalendarGradeLevels, target, mappingContract?.IsCalendarGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CalendarGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_CalendarGradeLevel = new FullName("edfi", "CalendarGradeLevel");
    
        public static bool SynchronizeTo(this ICalendarGradeLevel source, ICalendarGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CalendarGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICalendarGradeLevel source, ICalendarGradeLevel target, Action<ICalendarGradeLevel, ICalendarGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CalendarGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CalendarDate

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarDateAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CalendarDateMapper
    {
        private static readonly FullName _fullName_edfi_CalendarDate = new FullName("edfi", "CalendarDate");
    
        public static bool SynchronizeTo(this ICalendarDate source, ICalendarDate target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CalendarDateMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarDate);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CalendarCode, source.CalendarCode))
                || (target.Date != source.Date)
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear))
            {
                // Disallow PK column updates on CalendarDate
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsCalendarDateCalendarEventsSupported ?? true)
            {
                isModified |=
                    source.CalendarDateCalendarEvents.SynchronizeCollectionTo(
                        target.CalendarDateCalendarEvents,
                        onChildAdded: child =>
                            {
                                child.CalendarDate = target;
                            },
                        includeItem: item => mappingContract?.IsCalendarDateCalendarEventIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICalendarDate source, ICalendarDate target, Action<ICalendarDate, ICalendarDate> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CalendarDateMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarDate);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarCode = source.CalendarCode;
            target.Date = source.Date;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarResourceId = source.CalendarResourceId;
                target.CalendarDiscriminator = source.CalendarDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCalendarDateCalendarEventsSupported != false)
            {
                source.CalendarDateCalendarEvents.MapCollectionTo(target.CalendarDateCalendarEvents, target, mappingContract?.IsCalendarDateCalendarEventIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CalendarDateCalendarEventMapper
    {
        private static readonly FullName _fullName_edfi_CalendarDateCalendarEvent = new FullName("edfi", "CalendarDateCalendarEvent");
    
        public static bool SynchronizeTo(this ICalendarDateCalendarEvent source, ICalendarDateCalendarEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CalendarDateCalendarEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarDateCalendarEvent);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICalendarDateCalendarEvent source, ICalendarDateCalendarEvent target, Action<ICalendarDateCalendarEvent, ICalendarDateCalendarEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CalendarDateCalendarEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarDateCalendarEvent);
    
            // Copy contextual primary key values
            target.CalendarEventDescriptor = source.CalendarEventDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CalendarEventDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarEventDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CalendarEventDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CalendarEventDescriptor = new FullName("edfi", "CalendarEventDescriptor");
    
        public static bool SynchronizeTo(this ICalendarEventDescriptor source, ICalendarEventDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CalendarEventDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarEventDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CalendarEventDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICalendarEventDescriptor source, ICalendarEventDescriptor target, Action<ICalendarEventDescriptor, ICalendarEventDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CalendarEventDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarEventDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarEventDescriptorId = source.CalendarEventDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CalendarTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CalendarTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CalendarTypeDescriptor = new FullName("edfi", "CalendarTypeDescriptor");
    
        public static bool SynchronizeTo(this ICalendarTypeDescriptor source, ICalendarTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CalendarTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CalendarTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICalendarTypeDescriptor source, ICalendarTypeDescriptor target, Action<ICalendarTypeDescriptor, ICalendarTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CalendarTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CalendarTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarTypeDescriptorId = source.CalendarTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CareerPathwayDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CareerPathwayDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CareerPathwayDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CareerPathwayDescriptor = new FullName("edfi", "CareerPathwayDescriptor");
    
        public static bool SynchronizeTo(this ICareerPathwayDescriptor source, ICareerPathwayDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CareerPathwayDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CareerPathwayDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CareerPathwayDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICareerPathwayDescriptor source, ICareerPathwayDescriptor target, Action<ICareerPathwayDescriptor, ICareerPathwayDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CareerPathwayDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CareerPathwayDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CareerPathwayDescriptorId = source.CareerPathwayDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CharterApprovalAgencyTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CharterApprovalAgencyTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CharterApprovalAgencyTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CharterApprovalAgencyTypeDescriptor = new FullName("edfi", "CharterApprovalAgencyTypeDescriptor");
    
        public static bool SynchronizeTo(this ICharterApprovalAgencyTypeDescriptor source, ICharterApprovalAgencyTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CharterApprovalAgencyTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CharterApprovalAgencyTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CharterApprovalAgencyTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICharterApprovalAgencyTypeDescriptor source, ICharterApprovalAgencyTypeDescriptor target, Action<ICharterApprovalAgencyTypeDescriptor, ICharterApprovalAgencyTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CharterApprovalAgencyTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CharterApprovalAgencyTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CharterApprovalAgencyTypeDescriptorId = source.CharterApprovalAgencyTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CharterStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CharterStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CharterStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CharterStatusDescriptor = new FullName("edfi", "CharterStatusDescriptor");
    
        public static bool SynchronizeTo(this ICharterStatusDescriptor source, ICharterStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CharterStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CharterStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CharterStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICharterStatusDescriptor source, ICharterStatusDescriptor target, Action<ICharterStatusDescriptor, ICharterStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CharterStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CharterStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CharterStatusDescriptorId = source.CharterStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ChartOfAccount

namespace EdFi.Ods.Entities.Common.EdFi //.ChartOfAccountAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ChartOfAccountMapper
    {
        private static readonly FullName _fullName_edfi_ChartOfAccount = new FullName("edfi", "ChartOfAccount");
    
        public static bool SynchronizeTo(this IChartOfAccount source, IChartOfAccount target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ChartOfAccountMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ChartOfAccount);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on ChartOfAccount
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAccountNameSupported != false)
                && target.AccountName != source.AccountName)
            {
                target.AccountName = source.AccountName;
                isModified = true;
            }

            if ((mappingContract?.IsAccountTypeDescriptorSupported != false)
                && target.AccountTypeDescriptor != source.AccountTypeDescriptor)
            {
                target.AccountTypeDescriptor = source.AccountTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsBalanceSheetCodeSupported != false)
                && target.BalanceSheetCode != source.BalanceSheetCode)
            {
                target.BalanceSheetCode = source.BalanceSheetCode;
                isModified = true;
            }

            if ((mappingContract?.IsFunctionCodeSupported != false)
                && target.FunctionCode != source.FunctionCode)
            {
                target.FunctionCode = source.FunctionCode;
                isModified = true;
            }

            if ((mappingContract?.IsFundCodeSupported != false)
                && target.FundCode != source.FundCode)
            {
                target.FundCode = source.FundCode;
                isModified = true;
            }

            if ((mappingContract?.IsObjectCodeSupported != false)
                && target.ObjectCode != source.ObjectCode)
            {
                target.ObjectCode = source.ObjectCode;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalUnitCodeSupported != false)
                && target.OperationalUnitCode != source.OperationalUnitCode)
            {
                target.OperationalUnitCode = source.OperationalUnitCode;
                isModified = true;
            }

            if ((mappingContract?.IsProgramCodeSupported != false)
                && target.ProgramCode != source.ProgramCode)
            {
                target.ProgramCode = source.ProgramCode;
                isModified = true;
            }

            if ((mappingContract?.IsProjectCodeSupported != false)
                && target.ProjectCode != source.ProjectCode)
            {
                target.ProjectCode = source.ProjectCode;
                isModified = true;
            }

            if ((mappingContract?.IsSourceCodeSupported != false)
                && target.SourceCode != source.SourceCode)
            {
                target.SourceCode = source.SourceCode;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsChartOfAccountReportingTagsSupported ?? true)
            {
                isModified |=
                    source.ChartOfAccountReportingTags.SynchronizeCollectionTo(
                        target.ChartOfAccountReportingTags,
                        onChildAdded: child =>
                            {
                                child.ChartOfAccount = target;
                            },
                        includeItem: item => mappingContract?.IsChartOfAccountReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IChartOfAccount source, IChartOfAccount target, Action<IChartOfAccount, IChartOfAccount> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ChartOfAccountMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ChartOfAccount);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsAccountNameSupported != false)
                target.AccountName = source.AccountName;

            if (mappingContract?.IsAccountTypeDescriptorSupported != false)
                target.AccountTypeDescriptor = source.AccountTypeDescriptor;

            if (mappingContract?.IsBalanceSheetCodeSupported != false)
                target.BalanceSheetCode = source.BalanceSheetCode;

            if (mappingContract?.IsFunctionCodeSupported != false)
                target.FunctionCode = source.FunctionCode;

            if (mappingContract?.IsFundCodeSupported != false)
                target.FundCode = source.FundCode;

            if (mappingContract?.IsObjectCodeSupported != false)
                target.ObjectCode = source.ObjectCode;

            if (mappingContract?.IsOperationalUnitCodeSupported != false)
                target.OperationalUnitCode = source.OperationalUnitCode;

            if (mappingContract?.IsProgramCodeSupported != false)
                target.ProgramCode = source.ProgramCode;

            if (mappingContract?.IsProjectCodeSupported != false)
                target.ProjectCode = source.ProjectCode;

            if (mappingContract?.IsSourceCodeSupported != false)
                target.SourceCode = source.SourceCode;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.BalanceSheetDimensionResourceId = source.BalanceSheetDimensionResourceId;
                target.BalanceSheetDimensionDiscriminator = source.BalanceSheetDimensionDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.FunctionDimensionResourceId = source.FunctionDimensionResourceId;
                target.FunctionDimensionDiscriminator = source.FunctionDimensionDiscriminator;
                target.FundDimensionResourceId = source.FundDimensionResourceId;
                target.FundDimensionDiscriminator = source.FundDimensionDiscriminator;
                target.ObjectDimensionResourceId = source.ObjectDimensionResourceId;
                target.ObjectDimensionDiscriminator = source.ObjectDimensionDiscriminator;
                target.OperationalUnitDimensionResourceId = source.OperationalUnitDimensionResourceId;
                target.OperationalUnitDimensionDiscriminator = source.OperationalUnitDimensionDiscriminator;
                target.ProgramDimensionResourceId = source.ProgramDimensionResourceId;
                target.ProgramDimensionDiscriminator = source.ProgramDimensionDiscriminator;
                target.ProjectDimensionResourceId = source.ProjectDimensionResourceId;
                target.ProjectDimensionDiscriminator = source.ProjectDimensionDiscriminator;
                target.SourceDimensionResourceId = source.SourceDimensionResourceId;
                target.SourceDimensionDiscriminator = source.SourceDimensionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsChartOfAccountReportingTagsSupported != false)
            {
                source.ChartOfAccountReportingTags.MapCollectionTo(target.ChartOfAccountReportingTags, target, mappingContract?.IsChartOfAccountReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ChartOfAccountReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_ChartOfAccountReportingTag = new FullName("edfi", "ChartOfAccountReportingTag");
    
        public static bool SynchronizeTo(this IChartOfAccountReportingTag source, IChartOfAccountReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ChartOfAccountReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ChartOfAccountReportingTag);


            // Copy non-PK properties

            if ((mappingContract?.IsTagValueSupported != false)
                && target.TagValue != source.TagValue)
            {
                target.TagValue = source.TagValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IChartOfAccountReportingTag source, IChartOfAccountReportingTag target, Action<IChartOfAccountReportingTag, IChartOfAccountReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ChartOfAccountReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ChartOfAccountReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsTagValueSupported != false)
                target.TagValue = source.TagValue;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CitizenshipStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CitizenshipStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CitizenshipStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CitizenshipStatusDescriptor = new FullName("edfi", "CitizenshipStatusDescriptor");
    
        public static bool SynchronizeTo(this ICitizenshipStatusDescriptor source, ICitizenshipStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CitizenshipStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CitizenshipStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CitizenshipStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICitizenshipStatusDescriptor source, ICitizenshipStatusDescriptor target, Action<ICitizenshipStatusDescriptor, ICitizenshipStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CitizenshipStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CitizenshipStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CitizenshipStatusDescriptorId = source.CitizenshipStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ClassPeriod

namespace EdFi.Ods.Entities.Common.EdFi //.ClassPeriodAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ClassPeriodMapper
    {
        private static readonly FullName _fullName_edfi_ClassPeriod = new FullName("edfi", "ClassPeriod");
    
        public static bool SynchronizeTo(this IClassPeriod source, IClassPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ClassPeriod);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.ClassPeriodName, source.ClassPeriodName))
                || (target.SchoolId != source.SchoolId))
            {
                // Allow PK column updates on ClassPeriod
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.ClassPeriodName != target.ClassPeriodName)
                {
                    source.ClassPeriodName = target.ClassPeriodName;
                }
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsOfficialAttendancePeriodSupported != false)
                && target.OfficialAttendancePeriod != source.OfficialAttendancePeriod)
            {
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsClassPeriodMeetingTimesSupported ?? true)
            {
                isModified |=
                    source.ClassPeriodMeetingTimes.SynchronizeCollectionTo(
                        target.ClassPeriodMeetingTimes,
                        onChildAdded: child =>
                            {
                                child.ClassPeriod = target;
                            },
                        includeItem: item => mappingContract?.IsClassPeriodMeetingTimeIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IClassPeriod source, IClassPeriod target, Action<IClassPeriod, IClassPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ClassPeriod);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (mappingContract?.IsOfficialAttendancePeriodSupported != false)
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsClassPeriodMeetingTimesSupported != false)
            {
                source.ClassPeriodMeetingTimes.MapCollectionTo(target.ClassPeriodMeetingTimes, target, mappingContract?.IsClassPeriodMeetingTimeIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ClassPeriodMeetingTimeMapper
    {
        private static readonly FullName _fullName_edfi_ClassPeriodMeetingTime = new FullName("edfi", "ClassPeriodMeetingTime");
    
        public static bool SynchronizeTo(this IClassPeriodMeetingTime source, IClassPeriodMeetingTime target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ClassPeriodMeetingTimeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ClassPeriodMeetingTime);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IClassPeriodMeetingTime source, IClassPeriodMeetingTime target, Action<IClassPeriodMeetingTime, IClassPeriodMeetingTime> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ClassPeriodMeetingTimeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ClassPeriodMeetingTime);
    
            // Copy contextual primary key values
            target.EndTime = source.EndTime;
            target.StartTime = source.StartTime;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ClassroomPositionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ClassroomPositionDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ClassroomPositionDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ClassroomPositionDescriptor = new FullName("edfi", "ClassroomPositionDescriptor");
    
        public static bool SynchronizeTo(this IClassroomPositionDescriptor source, IClassroomPositionDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ClassroomPositionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ClassroomPositionDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ClassroomPositionDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IClassroomPositionDescriptor source, IClassroomPositionDescriptor target, Action<IClassroomPositionDescriptor, IClassroomPositionDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ClassroomPositionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ClassroomPositionDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ClassroomPositionDescriptorId = source.ClassroomPositionDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Cohort

namespace EdFi.Ods.Entities.Common.EdFi //.CohortAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CohortMapper
    {
        private static readonly FullName _fullName_edfi_Cohort = new FullName("edfi", "Cohort");
    
        public static bool SynchronizeTo(this ICohort source, ICohort target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CohortMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Cohort);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CohortIdentifier, source.CohortIdentifier))
                || (target.EducationOrganizationId != source.EducationOrganizationId))
            {
                // Disallow PK column updates on Cohort
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAcademicSubjectDescriptorSupported != false)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCohortDescriptionSupported != false)
                && target.CohortDescription != source.CohortDescription)
            {
                target.CohortDescription = source.CohortDescription;
                isModified = true;
            }

            if ((mappingContract?.IsCohortScopeDescriptorSupported != false)
                && target.CohortScopeDescriptor != source.CohortScopeDescriptor)
            {
                target.CohortScopeDescriptor = source.CohortScopeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCohortTypeDescriptorSupported != false)
                && target.CohortTypeDescriptor != source.CohortTypeDescriptor)
            {
                target.CohortTypeDescriptor = source.CohortTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsCohortProgramsSupported ?? true)
            {
                isModified |=
                    source.CohortPrograms.SynchronizeCollectionTo(
                        target.CohortPrograms,
                        onChildAdded: child =>
                            {
                                child.Cohort = target;
                            },
                        includeItem: item => mappingContract?.IsCohortProgramIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICohort source, ICohort target, Action<ICohort, ICohort> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CohortMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Cohort);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortIdentifier = source.CohortIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (mappingContract?.IsAcademicSubjectDescriptorSupported != false)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            if (mappingContract?.IsCohortDescriptionSupported != false)
                target.CohortDescription = source.CohortDescription;

            if (mappingContract?.IsCohortScopeDescriptorSupported != false)
                target.CohortScopeDescriptor = source.CohortScopeDescriptor;

            if (mappingContract?.IsCohortTypeDescriptorSupported != false)
                target.CohortTypeDescriptor = source.CohortTypeDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCohortProgramsSupported != false)
            {
                source.CohortPrograms.MapCollectionTo(target.CohortPrograms, target, mappingContract?.IsCohortProgramIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CohortProgramMapper
    {
        private static readonly FullName _fullName_edfi_CohortProgram = new FullName("edfi", "CohortProgram");
    
        public static bool SynchronizeTo(this ICohortProgram source, ICohortProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CohortProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortProgram);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICohortProgram source, ICohortProgram target, Action<ICohortProgram, ICohortProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CohortProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortProgram);
    
            // Copy contextual primary key values
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CohortScopeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CohortScopeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CohortScopeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CohortScopeDescriptor = new FullName("edfi", "CohortScopeDescriptor");
    
        public static bool SynchronizeTo(this ICohortScopeDescriptor source, ICohortScopeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CohortScopeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortScopeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CohortScopeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICohortScopeDescriptor source, ICohortScopeDescriptor target, Action<ICohortScopeDescriptor, ICohortScopeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CohortScopeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortScopeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortScopeDescriptorId = source.CohortScopeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CohortTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CohortTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CohortTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CohortTypeDescriptor = new FullName("edfi", "CohortTypeDescriptor");
    
        public static bool SynchronizeTo(this ICohortTypeDescriptor source, ICohortTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CohortTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CohortTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICohortTypeDescriptor source, ICohortTypeDescriptor target, Action<ICohortTypeDescriptor, ICohortTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CohortTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortTypeDescriptorId = source.CohortTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CohortYearTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CohortYearTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CohortYearTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CohortYearTypeDescriptor = new FullName("edfi", "CohortYearTypeDescriptor");
    
        public static bool SynchronizeTo(this ICohortYearTypeDescriptor source, ICohortYearTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CohortYearTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortYearTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CohortYearTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICohortYearTypeDescriptor source, ICohortYearTypeDescriptor target, Action<ICohortYearTypeDescriptor, ICohortYearTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CohortYearTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CohortYearTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortYearTypeDescriptorId = source.CohortYearTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CommunityOrganization

namespace EdFi.Ods.Entities.Common.EdFi //.CommunityOrganizationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CommunityOrganizationMapper
    {
        private static readonly FullName _fullName_edfi_CommunityOrganization = new FullName("edfi", "CommunityOrganization");
    
        public static bool SynchronizeTo(this ICommunityOrganization source, ICommunityOrganization target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CommunityOrganizationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CommunityOrganization);

            // Detect primary key changes
            if (
                 (target.CommunityOrganizationId != source.CommunityOrganizationId))
            {
                // Disallow PK column updates on CommunityOrganization
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICommunityOrganization source, ICommunityOrganization target, Action<ICommunityOrganization, ICommunityOrganization> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CommunityOrganizationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CommunityOrganization);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CommunityOrganizationId = source.CommunityOrganizationId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CommunityProvider

namespace EdFi.Ods.Entities.Common.EdFi //.CommunityProviderAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CommunityProviderMapper
    {
        private static readonly FullName _fullName_edfi_CommunityProvider = new FullName("edfi", "CommunityProvider");
    
        public static bool SynchronizeTo(this ICommunityProvider source, ICommunityProvider target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CommunityProviderMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CommunityProvider);

            // Detect primary key changes
            if (
                 (target.CommunityProviderId != source.CommunityProviderId))
            {
                // Disallow PK column updates on CommunityProvider
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsCommunityOrganizationIdSupported != false)
                && target.CommunityOrganizationId != source.CommunityOrganizationId)
            {
                target.CommunityOrganizationId = source.CommunityOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsLicenseExemptIndicatorSupported != false)
                && target.LicenseExemptIndicator != source.LicenseExemptIndicator)
            {
                target.LicenseExemptIndicator = source.LicenseExemptIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsProviderCategoryDescriptorSupported != false)
                && target.ProviderCategoryDescriptor != source.ProviderCategoryDescriptor)
            {
                target.ProviderCategoryDescriptor = source.ProviderCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProviderProfitabilityDescriptorSupported != false)
                && target.ProviderProfitabilityDescriptor != source.ProviderProfitabilityDescriptor)
            {
                target.ProviderProfitabilityDescriptor = source.ProviderProfitabilityDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProviderStatusDescriptorSupported != false)
                && target.ProviderStatusDescriptor != source.ProviderStatusDescriptor)
            {
                target.ProviderStatusDescriptor = source.ProviderStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolIndicatorSupported != false)
                && target.SchoolIndicator != source.SchoolIndicator)
            {
                target.SchoolIndicator = source.SchoolIndicator;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICommunityProvider source, ICommunityProvider target, Action<ICommunityProvider, ICommunityProvider> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CommunityProviderMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CommunityProvider);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CommunityProviderId = source.CommunityProviderId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsCommunityOrganizationIdSupported != false)
                target.CommunityOrganizationId = source.CommunityOrganizationId;

            if (mappingContract?.IsLicenseExemptIndicatorSupported != false)
                target.LicenseExemptIndicator = source.LicenseExemptIndicator;

            if (mappingContract?.IsProviderCategoryDescriptorSupported != false)
                target.ProviderCategoryDescriptor = source.ProviderCategoryDescriptor;

            if (mappingContract?.IsProviderProfitabilityDescriptorSupported != false)
                target.ProviderProfitabilityDescriptor = source.ProviderProfitabilityDescriptor;

            if (mappingContract?.IsProviderStatusDescriptorSupported != false)
                target.ProviderStatusDescriptor = source.ProviderStatusDescriptor;

            if (mappingContract?.IsSchoolIndicatorSupported != false)
                target.SchoolIndicator = source.SchoolIndicator;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CommunityOrganizationResourceId = source.CommunityOrganizationResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CommunityProviderLicense

namespace EdFi.Ods.Entities.Common.EdFi //.CommunityProviderLicenseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CommunityProviderLicenseMapper
    {
        private static readonly FullName _fullName_edfi_CommunityProviderLicense = new FullName("edfi", "CommunityProviderLicense");
    
        public static bool SynchronizeTo(this ICommunityProviderLicense source, ICommunityProviderLicense target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CommunityProviderLicenseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CommunityProviderLicense);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.CommunityProviderId != source.CommunityProviderId)
                || (!keyStringComparer.Equals(target.LicenseIdentifier, source.LicenseIdentifier))
                || (!keyStringComparer.Equals(target.LicensingOrganization, source.LicensingOrganization)))
            {
                // Disallow PK column updates on CommunityProviderLicense
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAuthorizedFacilityCapacitySupported != false)
                && target.AuthorizedFacilityCapacity != source.AuthorizedFacilityCapacity)
            {
                target.AuthorizedFacilityCapacity = source.AuthorizedFacilityCapacity;
                isModified = true;
            }

            if ((mappingContract?.IsLicenseEffectiveDateSupported != false)
                && target.LicenseEffectiveDate != source.LicenseEffectiveDate)
            {
                target.LicenseEffectiveDate = source.LicenseEffectiveDate;
                isModified = true;
            }

            if ((mappingContract?.IsLicenseExpirationDateSupported != false)
                && target.LicenseExpirationDate != source.LicenseExpirationDate)
            {
                target.LicenseExpirationDate = source.LicenseExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsLicenseIssueDateSupported != false)
                && target.LicenseIssueDate != source.LicenseIssueDate)
            {
                target.LicenseIssueDate = source.LicenseIssueDate;
                isModified = true;
            }

            if ((mappingContract?.IsLicenseStatusDescriptorSupported != false)
                && target.LicenseStatusDescriptor != source.LicenseStatusDescriptor)
            {
                target.LicenseStatusDescriptor = source.LicenseStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLicenseTypeDescriptorSupported != false)
                && target.LicenseTypeDescriptor != source.LicenseTypeDescriptor)
            {
                target.LicenseTypeDescriptor = source.LicenseTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsOldestAgeAuthorizedToServeSupported != false)
                && target.OldestAgeAuthorizedToServe != source.OldestAgeAuthorizedToServe)
            {
                target.OldestAgeAuthorizedToServe = source.OldestAgeAuthorizedToServe;
                isModified = true;
            }

            if ((mappingContract?.IsYoungestAgeAuthorizedToServeSupported != false)
                && target.YoungestAgeAuthorizedToServe != source.YoungestAgeAuthorizedToServe)
            {
                target.YoungestAgeAuthorizedToServe = source.YoungestAgeAuthorizedToServe;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICommunityProviderLicense source, ICommunityProviderLicense target, Action<ICommunityProviderLicense, ICommunityProviderLicense> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CommunityProviderLicenseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CommunityProviderLicense);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CommunityProviderId = source.CommunityProviderId;
            target.LicenseIdentifier = source.LicenseIdentifier;
            target.LicensingOrganization = source.LicensingOrganization;

            // Copy non-PK properties

            if (mappingContract?.IsAuthorizedFacilityCapacitySupported != false)
                target.AuthorizedFacilityCapacity = source.AuthorizedFacilityCapacity;

            if (mappingContract?.IsLicenseEffectiveDateSupported != false)
                target.LicenseEffectiveDate = source.LicenseEffectiveDate;

            if (mappingContract?.IsLicenseExpirationDateSupported != false)
                target.LicenseExpirationDate = source.LicenseExpirationDate;

            if (mappingContract?.IsLicenseIssueDateSupported != false)
                target.LicenseIssueDate = source.LicenseIssueDate;

            if (mappingContract?.IsLicenseStatusDescriptorSupported != false)
                target.LicenseStatusDescriptor = source.LicenseStatusDescriptor;

            if (mappingContract?.IsLicenseTypeDescriptorSupported != false)
                target.LicenseTypeDescriptor = source.LicenseTypeDescriptor;

            if (mappingContract?.IsOldestAgeAuthorizedToServeSupported != false)
                target.OldestAgeAuthorizedToServe = source.OldestAgeAuthorizedToServe;

            if (mappingContract?.IsYoungestAgeAuthorizedToServeSupported != false)
                target.YoungestAgeAuthorizedToServe = source.YoungestAgeAuthorizedToServe;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CommunityProviderResourceId = source.CommunityProviderResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CompetencyLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CompetencyLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CompetencyLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CompetencyLevelDescriptor = new FullName("edfi", "CompetencyLevelDescriptor");
    
        public static bool SynchronizeTo(this ICompetencyLevelDescriptor source, ICompetencyLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CompetencyLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CompetencyLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CompetencyLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICompetencyLevelDescriptor source, ICompetencyLevelDescriptor target, Action<ICompetencyLevelDescriptor, ICompetencyLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CompetencyLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CompetencyLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CompetencyLevelDescriptorId = source.CompetencyLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CompetencyObjective

namespace EdFi.Ods.Entities.Common.EdFi //.CompetencyObjectiveAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CompetencyObjectiveMapper
    {
        private static readonly FullName _fullName_edfi_CompetencyObjective = new FullName("edfi", "CompetencyObjective");
    
        public static bool SynchronizeTo(this ICompetencyObjective source, ICompetencyObjective target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CompetencyObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CompetencyObjective);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.Objective, source.Objective))
                || !string.Equals(target.ObjectiveGradeLevelDescriptor, source.ObjectiveGradeLevelDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CompetencyObjective
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCompetencyObjectiveIdSupported != false)
                && target.CompetencyObjectiveId != source.CompetencyObjectiveId)
            {
                target.CompetencyObjectiveId = source.CompetencyObjectiveId;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsSuccessCriteriaSupported != false)
                && target.SuccessCriteria != source.SuccessCriteria)
            {
                target.SuccessCriteria = source.SuccessCriteria;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICompetencyObjective source, ICompetencyObjective target, Action<ICompetencyObjective, ICompetencyObjective> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CompetencyObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CompetencyObjective);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Objective = source.Objective;
            target.ObjectiveGradeLevelDescriptor = source.ObjectiveGradeLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCompetencyObjectiveIdSupported != false)
                target.CompetencyObjectiveId = source.CompetencyObjectiveId;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsSuccessCriteriaSupported != false)
                target.SuccessCriteria = source.SuccessCriteria;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Contact

namespace EdFi.Ods.Entities.Common.EdFi //.ContactAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ContactMapper
    {
        private static readonly FullName _fullName_edfi_Contact = new FullName("edfi", "Contact");
    
        public static bool SynchronizeTo(this IContact source, IContact target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Contact);

            // Detect primary key changes
            if (
                 (target.ContactUniqueId != source.ContactUniqueId))
            {
                // Disallow PK column updates on Contact
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsContactUniqueIdSupported != false)
                && target.ContactUniqueId != source.ContactUniqueId)
            {
                target.ContactUniqueId = source.ContactUniqueId;
                isModified = true;
            }

            if ((mappingContract?.IsFirstNameSupported != false)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((mappingContract?.IsGenderIdentitySupported != false)
                && target.GenderIdentity != source.GenderIdentity)
            {
                target.GenderIdentity = source.GenderIdentity;
                isModified = true;
            }

            if ((mappingContract?.IsGenerationCodeSuffixSupported != false)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((mappingContract?.IsHighestCompletedLevelOfEducationDescriptorSupported != false)
                && target.HighestCompletedLevelOfEducationDescriptor != source.HighestCompletedLevelOfEducationDescriptor)
            {
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLastSurnameSupported != false)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsLoginIdSupported != false)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((mappingContract?.IsMaidenNameSupported != false)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((mappingContract?.IsMiddleNameSupported != false)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((mappingContract?.IsPersonalTitlePrefixSupported != false)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((mappingContract?.IsPersonIdSupported != false)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((mappingContract?.IsPreferredFirstNameSupported != false)
                && target.PreferredFirstName != source.PreferredFirstName)
            {
                target.PreferredFirstName = source.PreferredFirstName;
                isModified = true;
            }

            if ((mappingContract?.IsPreferredLastSurnameSupported != false)
                && target.PreferredLastSurname != source.PreferredLastSurname)
            {
                target.PreferredLastSurname = source.PreferredLastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsSexDescriptorSupported != false)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSourceSystemDescriptorSupported != false)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsContactAddressesSupported ?? true)
            {
                isModified |=
                    source.ContactAddresses.SynchronizeCollectionTo(
                        target.ContactAddresses,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsContactElectronicMailsSupported ?? true)
            {
                isModified |=
                    source.ContactElectronicMails.SynchronizeCollectionTo(
                        target.ContactElectronicMails,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactElectronicMailIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsContactInternationalAddressesSupported ?? true)
            {
                isModified |=
                    source.ContactInternationalAddresses.SynchronizeCollectionTo(
                        target.ContactInternationalAddresses,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactInternationalAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsContactLanguagesSupported ?? true)
            {
                isModified |=
                    source.ContactLanguages.SynchronizeCollectionTo(
                        target.ContactLanguages,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactLanguageIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsContactOtherNamesSupported ?? true)
            {
                isModified |=
                    source.ContactOtherNames.SynchronizeCollectionTo(
                        target.ContactOtherNames,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactOtherNameIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsContactPersonalIdentificationDocumentsSupported ?? true)
            {
                isModified |=
                    source.ContactPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ContactPersonalIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactPersonalIdentificationDocumentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsContactTelephonesSupported ?? true)
            {
                isModified |=
                    source.ContactTelephones.SynchronizeCollectionTo(
                        target.ContactTelephones,
                        onChildAdded: child =>
                            {
                                child.Contact = target;
                            },
                        includeItem: item => mappingContract?.IsContactTelephoneIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContact source, IContact target, Action<IContact, IContact> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Contact);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContactUniqueId = source.ContactUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsContactUniqueIdSupported != false)
                target.ContactUniqueId = source.ContactUniqueId;

            if (mappingContract?.IsFirstNameSupported != false)
                target.FirstName = source.FirstName;

            if (mappingContract?.IsGenderIdentitySupported != false)
                target.GenderIdentity = source.GenderIdentity;

            if (mappingContract?.IsGenerationCodeSuffixSupported != false)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;

            if (mappingContract?.IsHighestCompletedLevelOfEducationDescriptorSupported != false)
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;

            if (mappingContract?.IsLastSurnameSupported != false)
                target.LastSurname = source.LastSurname;

            if (mappingContract?.IsLoginIdSupported != false)
                target.LoginId = source.LoginId;

            if (mappingContract?.IsMaidenNameSupported != false)
                target.MaidenName = source.MaidenName;

            if (mappingContract?.IsMiddleNameSupported != false)
                target.MiddleName = source.MiddleName;

            if (mappingContract?.IsPersonalTitlePrefixSupported != false)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;

            if (mappingContract?.IsPersonIdSupported != false)
                target.PersonId = source.PersonId;

            if (mappingContract?.IsPreferredFirstNameSupported != false)
                target.PreferredFirstName = source.PreferredFirstName;

            if (mappingContract?.IsPreferredLastSurnameSupported != false)
                target.PreferredLastSurname = source.PreferredLastSurname;

            if (mappingContract?.IsSexDescriptorSupported != false)
                target.SexDescriptor = source.SexDescriptor;

            if (mappingContract?.IsSourceSystemDescriptorSupported != false)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsContactAddressesSupported != false)
            {
                source.ContactAddresses.MapCollectionTo(target.ContactAddresses, target, mappingContract?.IsContactAddressIncluded);
            }

            if (mappingContract?.IsContactElectronicMailsSupported != false)
            {
                source.ContactElectronicMails.MapCollectionTo(target.ContactElectronicMails, target, mappingContract?.IsContactElectronicMailIncluded);
            }

            if (mappingContract?.IsContactInternationalAddressesSupported != false)
            {
                source.ContactInternationalAddresses.MapCollectionTo(target.ContactInternationalAddresses, target, mappingContract?.IsContactInternationalAddressIncluded);
            }

            if (mappingContract?.IsContactLanguagesSupported != false)
            {
                source.ContactLanguages.MapCollectionTo(target.ContactLanguages, target, mappingContract?.IsContactLanguageIncluded);
            }

            if (mappingContract?.IsContactOtherNamesSupported != false)
            {
                source.ContactOtherNames.MapCollectionTo(target.ContactOtherNames, target, mappingContract?.IsContactOtherNameIncluded);
            }

            if (mappingContract?.IsContactPersonalIdentificationDocumentsSupported != false)
            {
                source.ContactPersonalIdentificationDocuments.MapCollectionTo(target.ContactPersonalIdentificationDocuments, target, mappingContract?.IsContactPersonalIdentificationDocumentIncluded);
            }

            if (mappingContract?.IsContactTelephonesSupported != false)
            {
                source.ContactTelephones.MapCollectionTo(target.ContactTelephones, target, mappingContract?.IsContactTelephoneIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactAddressMapper
    {
        private static readonly FullName _fullName_edfi_ContactAddress = new FullName("edfi", "ContactAddress");
    
        public static bool SynchronizeTo(this IContactAddress source, IContactAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsBuildingSiteNumberSupported != false)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsCongressionalDistrictSupported != false)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((mappingContract?.IsCountyFIPSCodeSupported != false)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLocaleDescriptorSupported != false)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((mappingContract?.IsNameOfCountySupported != false)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsContactAddressPeriodsSupported ?? true)
            {
                isModified |=
                    source.ContactAddressPeriods.SynchronizeCollectionTo(
                        target.ContactAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.ContactAddress = target;
                            },
                        includeItem: item => mappingContract?.IsContactAddressPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactAddress source, IContactAddress target, Action<IContactAddress, IContactAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;

            if (mappingContract?.IsBuildingSiteNumberSupported != false)
                target.BuildingSiteNumber = source.BuildingSiteNumber;

            if (mappingContract?.IsCongressionalDistrictSupported != false)
                target.CongressionalDistrict = source.CongressionalDistrict;

            if (mappingContract?.IsCountyFIPSCodeSupported != false)
                target.CountyFIPSCode = source.CountyFIPSCode;

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLocaleDescriptorSupported != false)
                target.LocaleDescriptor = source.LocaleDescriptor;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            if (mappingContract?.IsNameOfCountySupported != false)
                target.NameOfCounty = source.NameOfCounty;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsContactAddressPeriodsSupported != false)
            {
                source.ContactAddressPeriods.MapCollectionTo(target.ContactAddressPeriods, target, mappingContract?.IsContactAddressPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactAddressPeriodMapper
    {
        private static readonly FullName _fullName_edfi_ContactAddressPeriod = new FullName("edfi", "ContactAddressPeriod");
    
        public static bool SynchronizeTo(this IContactAddressPeriod source, IContactAddressPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactAddressPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactAddressPeriod source, IContactAddressPeriod target, Action<IContactAddressPeriod, IContactAddressPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactAddressPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactElectronicMailMapper
    {
        private static readonly FullName _fullName_edfi_ContactElectronicMail = new FullName("edfi", "ContactElectronicMail");
    
        public static bool SynchronizeTo(this IContactElectronicMail source, IContactElectronicMail target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactElectronicMailMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactElectronicMail);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryEmailAddressIndicatorSupported != false)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactElectronicMail source, IContactElectronicMail target, Action<IContactElectronicMail, IContactElectronicMail> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactElectronicMailMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactElectronicMail);
    
            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsPrimaryEmailAddressIndicatorSupported != false)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactInternationalAddressMapper
    {
        private static readonly FullName _fullName_edfi_ContactInternationalAddress = new FullName("edfi", "ContactInternationalAddress");
    
        public static bool SynchronizeTo(this IContactInternationalAddress source, IContactInternationalAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactInternationalAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsAddressLine1Supported != false)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine2Supported != false)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine3Supported != false)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine4Supported != false)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsCountryDescriptorSupported != false)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactInternationalAddress source, IContactInternationalAddress target, Action<IContactInternationalAddress, IContactInternationalAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactInternationalAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAddressLine1Supported != false)
                target.AddressLine1 = source.AddressLine1;

            if (mappingContract?.IsAddressLine2Supported != false)
                target.AddressLine2 = source.AddressLine2;

            if (mappingContract?.IsAddressLine3Supported != false)
                target.AddressLine3 = source.AddressLine3;

            if (mappingContract?.IsAddressLine4Supported != false)
                target.AddressLine4 = source.AddressLine4;

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsCountryDescriptorSupported != false)
                target.CountryDescriptor = source.CountryDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactLanguageMapper
    {
        private static readonly FullName _fullName_edfi_ContactLanguage = new FullName("edfi", "ContactLanguage");
    
        public static bool SynchronizeTo(this IContactLanguage source, IContactLanguage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactLanguage);


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsContactLanguageUsesSupported ?? true)
            {
                isModified |=
                    source.ContactLanguageUses.SynchronizeCollectionTo(
                        target.ContactLanguageUses,
                        onChildAdded: child =>
                            {
                                child.ContactLanguage = target;
                            },
                        includeItem: item => mappingContract?.IsContactLanguageUseIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactLanguage source, IContactLanguage target, Action<IContactLanguage, IContactLanguage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactLanguage);
    
            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsContactLanguageUsesSupported != false)
            {
                source.ContactLanguageUses.MapCollectionTo(target.ContactLanguageUses, target, mappingContract?.IsContactLanguageUseIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactLanguageUseMapper
    {
        private static readonly FullName _fullName_edfi_ContactLanguageUse = new FullName("edfi", "ContactLanguageUse");
    
        public static bool SynchronizeTo(this IContactLanguageUse source, IContactLanguageUse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactLanguageUseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactLanguageUse);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactLanguageUse source, IContactLanguageUse target, Action<IContactLanguageUse, IContactLanguageUse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactLanguageUseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactLanguageUse);
    
            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactOtherNameMapper
    {
        private static readonly FullName _fullName_edfi_ContactOtherName = new FullName("edfi", "ContactOtherName");
    
        public static bool SynchronizeTo(this IContactOtherName source, IContactOtherName target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactOtherNameMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactOtherName);


            // Copy non-PK properties

            if ((mappingContract?.IsFirstNameSupported != false)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((mappingContract?.IsGenerationCodeSuffixSupported != false)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((mappingContract?.IsLastSurnameSupported != false)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsMiddleNameSupported != false)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((mappingContract?.IsPersonalTitlePrefixSupported != false)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactOtherName source, IContactOtherName target, Action<IContactOtherName, IContactOtherName> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactOtherNameMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactOtherName);
    
            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsFirstNameSupported != false)
                target.FirstName = source.FirstName;

            if (mappingContract?.IsGenerationCodeSuffixSupported != false)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;

            if (mappingContract?.IsLastSurnameSupported != false)
                target.LastSurname = source.LastSurname;

            if (mappingContract?.IsMiddleNameSupported != false)
                target.MiddleName = source.MiddleName;

            if (mappingContract?.IsPersonalTitlePrefixSupported != false)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactPersonalIdentificationDocumentMapper
    {
        private static readonly FullName _fullName_edfi_ContactPersonalIdentificationDocument = new FullName("edfi", "ContactPersonalIdentificationDocument");
    
        public static bool SynchronizeTo(this IContactPersonalIdentificationDocument source, IContactPersonalIdentificationDocument target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactPersonalIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactPersonalIdentificationDocument);


            // Copy non-PK properties

            if ((mappingContract?.IsDocumentExpirationDateSupported != false)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsDocumentTitleSupported != false)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerCountryDescriptorSupported != false)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactPersonalIdentificationDocument source, IContactPersonalIdentificationDocument target, Action<IContactPersonalIdentificationDocument, IContactPersonalIdentificationDocument> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactPersonalIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactPersonalIdentificationDocument);
    
            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDocumentExpirationDateSupported != false)
                target.DocumentExpirationDate = source.DocumentExpirationDate;

            if (mappingContract?.IsDocumentTitleSupported != false)
                target.DocumentTitle = source.DocumentTitle;

            if (mappingContract?.IsIssuerCountryDescriptorSupported != false)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;

            if (mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ContactTelephoneMapper
    {
        private static readonly FullName _fullName_edfi_ContactTelephone = new FullName("edfi", "ContactTelephone");
    
        public static bool SynchronizeTo(this IContactTelephone source, IContactTelephone target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactTelephone);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfPrioritySupported != false)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IContactTelephone source, IContactTelephone target, Action<IContactTelephone, IContactTelephone> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactTelephone);
    
            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsOrderOfPrioritySupported != false)
                target.OrderOfPriority = source.OrderOfPriority;

            if (mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ContactTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ContactTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ContactTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ContactTypeDescriptor = new FullName("edfi", "ContactTypeDescriptor");
    
        public static bool SynchronizeTo(this IContactTypeDescriptor source, IContactTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContactTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ContactTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IContactTypeDescriptor source, IContactTypeDescriptor target, Action<IContactTypeDescriptor, IContactTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContactTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContactTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContactTypeDescriptorId = source.ContactTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ContentClassDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ContentClassDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ContentClassDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ContentClassDescriptor = new FullName("edfi", "ContentClassDescriptor");
    
        public static bool SynchronizeTo(this IContentClassDescriptor source, IContentClassDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContentClassDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContentClassDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ContentClassDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IContentClassDescriptor source, IContentClassDescriptor target, Action<IContentClassDescriptor, IContentClassDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContentClassDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContentClassDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContentClassDescriptorId = source.ContentClassDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ContinuationOfServicesReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ContinuationOfServicesReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ContinuationOfServicesReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ContinuationOfServicesReasonDescriptor = new FullName("edfi", "ContinuationOfServicesReasonDescriptor");
    
        public static bool SynchronizeTo(this IContinuationOfServicesReasonDescriptor source, IContinuationOfServicesReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ContinuationOfServicesReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContinuationOfServicesReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ContinuationOfServicesReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IContinuationOfServicesReasonDescriptor source, IContinuationOfServicesReasonDescriptor target, Action<IContinuationOfServicesReasonDescriptor, IContinuationOfServicesReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ContinuationOfServicesReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ContinuationOfServicesReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContinuationOfServicesReasonDescriptorId = source.ContinuationOfServicesReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CostRateDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CostRateDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CostRateDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CostRateDescriptor = new FullName("edfi", "CostRateDescriptor");
    
        public static bool SynchronizeTo(this ICostRateDescriptor source, ICostRateDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CostRateDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CostRateDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CostRateDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICostRateDescriptor source, ICostRateDescriptor target, Action<ICostRateDescriptor, ICostRateDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CostRateDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CostRateDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CostRateDescriptorId = source.CostRateDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CountryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CountryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CountryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CountryDescriptor = new FullName("edfi", "CountryDescriptor");
    
        public static bool SynchronizeTo(this ICountryDescriptor source, ICountryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CountryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CountryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CountryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICountryDescriptor source, ICountryDescriptor target, Action<ICountryDescriptor, ICountryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CountryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CountryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CountryDescriptorId = source.CountryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Course

namespace EdFi.Ods.Entities.Common.EdFi //.CourseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseMapper
    {
        private static readonly FullName _fullName_edfi_Course = new FullName("edfi", "Course");
    
        public static bool SynchronizeTo(this ICourse source, ICourse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Course);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CourseCode, source.CourseCode))
                || (target.EducationOrganizationId != source.EducationOrganizationId))
            {
                // Disallow PK column updates on Course
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCareerPathwayDescriptorSupported != false)
                && target.CareerPathwayDescriptor != source.CareerPathwayDescriptor)
            {
                target.CareerPathwayDescriptor = source.CareerPathwayDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCourseDefinedByDescriptorSupported != false)
                && target.CourseDefinedByDescriptor != source.CourseDefinedByDescriptor)
            {
                target.CourseDefinedByDescriptor = source.CourseDefinedByDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCourseDescriptionSupported != false)
                && target.CourseDescription != source.CourseDescription)
            {
                target.CourseDescription = source.CourseDescription;
                isModified = true;
            }

            if ((mappingContract?.IsCourseGPAApplicabilityDescriptorSupported != false)
                && target.CourseGPAApplicabilityDescriptor != source.CourseGPAApplicabilityDescriptor)
            {
                target.CourseGPAApplicabilityDescriptor = source.CourseGPAApplicabilityDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCourseTitleSupported != false)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((mappingContract?.IsDateCourseAdoptedSupported != false)
                && target.DateCourseAdopted != source.DateCourseAdopted)
            {
                target.DateCourseAdopted = source.DateCourseAdopted;
                isModified = true;
            }

            if ((mappingContract?.IsHighSchoolCourseRequirementSupported != false)
                && target.HighSchoolCourseRequirement != source.HighSchoolCourseRequirement)
            {
                target.HighSchoolCourseRequirement = source.HighSchoolCourseRequirement;
                isModified = true;
            }

            if ((mappingContract?.IsMaxCompletionsForCreditSupported != false)
                && target.MaxCompletionsForCredit != source.MaxCompletionsForCredit)
            {
                target.MaxCompletionsForCredit = source.MaxCompletionsForCredit;
                isModified = true;
            }

            if ((mappingContract?.IsMaximumAvailableCreditConversionSupported != false)
                && target.MaximumAvailableCreditConversion != source.MaximumAvailableCreditConversion)
            {
                target.MaximumAvailableCreditConversion = source.MaximumAvailableCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsMaximumAvailableCreditsSupported != false)
                && target.MaximumAvailableCredits != source.MaximumAvailableCredits)
            {
                target.MaximumAvailableCredits = source.MaximumAvailableCredits;
                isModified = true;
            }

            if ((mappingContract?.IsMaximumAvailableCreditTypeDescriptorSupported != false)
                && target.MaximumAvailableCreditTypeDescriptor != source.MaximumAvailableCreditTypeDescriptor)
            {
                target.MaximumAvailableCreditTypeDescriptor = source.MaximumAvailableCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumAvailableCreditConversionSupported != false)
                && target.MinimumAvailableCreditConversion != source.MinimumAvailableCreditConversion)
            {
                target.MinimumAvailableCreditConversion = source.MinimumAvailableCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumAvailableCreditsSupported != false)
                && target.MinimumAvailableCredits != source.MinimumAvailableCredits)
            {
                target.MinimumAvailableCredits = source.MinimumAvailableCredits;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumAvailableCreditTypeDescriptorSupported != false)
                && target.MinimumAvailableCreditTypeDescriptor != source.MinimumAvailableCreditTypeDescriptor)
            {
                target.MinimumAvailableCreditTypeDescriptor = source.MinimumAvailableCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsNumberOfPartsSupported != false)
                && target.NumberOfParts != source.NumberOfParts)
            {
                target.NumberOfParts = source.NumberOfParts;
                isModified = true;
            }

            if ((mappingContract?.IsTimeRequiredForCompletionSupported != false)
                && target.TimeRequiredForCompletion != source.TimeRequiredForCompletion)
            {
                target.TimeRequiredForCompletion = source.TimeRequiredForCompletion;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsCourseAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.CourseAcademicSubjects.SynchronizeCollectionTo(
                        target.CourseAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.Course = target;
                            },
                        includeItem: item => mappingContract?.IsCourseAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseCompetencyLevelsSupported ?? true)
            {
                isModified |=
                    source.CourseCompetencyLevels.SynchronizeCollectionTo(
                        target.CourseCompetencyLevels,
                        onChildAdded: child =>
                            {
                                child.Course = target;
                            },
                        includeItem: item => mappingContract?.IsCourseCompetencyLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseIdentificationCodesSupported ?? true)
            {
                isModified |=
                    source.CourseIdentificationCodes.SynchronizeCollectionTo(
                        target.CourseIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.Course = target;
                            },
                        includeItem: item => mappingContract?.IsCourseIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseLearningStandardsSupported ?? true)
            {
                isModified |=
                    source.CourseLearningStandards.SynchronizeCollectionTo(
                        target.CourseLearningStandards,
                        onChildAdded: child =>
                            {
                                child.Course = target;
                            },
                        includeItem: item => mappingContract?.IsCourseLearningStandardIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseLevelCharacteristicsSupported ?? true)
            {
                isModified |=
                    source.CourseLevelCharacteristics.SynchronizeCollectionTo(
                        target.CourseLevelCharacteristics,
                        onChildAdded: child =>
                            {
                                child.Course = target;
                            },
                        includeItem: item => mappingContract?.IsCourseLevelCharacteristicIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseOfferedGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.CourseOfferedGradeLevels.SynchronizeCollectionTo(
                        target.CourseOfferedGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Course = target;
                            },
                        includeItem: item => mappingContract?.IsCourseOfferedGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourse source, ICourse target, Action<ICourse, ICourse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Course);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (mappingContract?.IsCareerPathwayDescriptorSupported != false)
                target.CareerPathwayDescriptor = source.CareerPathwayDescriptor;

            if (mappingContract?.IsCourseDefinedByDescriptorSupported != false)
                target.CourseDefinedByDescriptor = source.CourseDefinedByDescriptor;

            if (mappingContract?.IsCourseDescriptionSupported != false)
                target.CourseDescription = source.CourseDescription;

            if (mappingContract?.IsCourseGPAApplicabilityDescriptorSupported != false)
                target.CourseGPAApplicabilityDescriptor = source.CourseGPAApplicabilityDescriptor;

            if (mappingContract?.IsCourseTitleSupported != false)
                target.CourseTitle = source.CourseTitle;

            if (mappingContract?.IsDateCourseAdoptedSupported != false)
                target.DateCourseAdopted = source.DateCourseAdopted;

            if (mappingContract?.IsHighSchoolCourseRequirementSupported != false)
                target.HighSchoolCourseRequirement = source.HighSchoolCourseRequirement;

            if (mappingContract?.IsMaxCompletionsForCreditSupported != false)
                target.MaxCompletionsForCredit = source.MaxCompletionsForCredit;

            if (mappingContract?.IsMaximumAvailableCreditConversionSupported != false)
                target.MaximumAvailableCreditConversion = source.MaximumAvailableCreditConversion;

            if (mappingContract?.IsMaximumAvailableCreditsSupported != false)
                target.MaximumAvailableCredits = source.MaximumAvailableCredits;

            if (mappingContract?.IsMaximumAvailableCreditTypeDescriptorSupported != false)
                target.MaximumAvailableCreditTypeDescriptor = source.MaximumAvailableCreditTypeDescriptor;

            if (mappingContract?.IsMinimumAvailableCreditConversionSupported != false)
                target.MinimumAvailableCreditConversion = source.MinimumAvailableCreditConversion;

            if (mappingContract?.IsMinimumAvailableCreditsSupported != false)
                target.MinimumAvailableCredits = source.MinimumAvailableCredits;

            if (mappingContract?.IsMinimumAvailableCreditTypeDescriptorSupported != false)
                target.MinimumAvailableCreditTypeDescriptor = source.MinimumAvailableCreditTypeDescriptor;

            if (mappingContract?.IsNumberOfPartsSupported != false)
                target.NumberOfParts = source.NumberOfParts;

            if (mappingContract?.IsTimeRequiredForCompletionSupported != false)
                target.TimeRequiredForCompletion = source.TimeRequiredForCompletion;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCourseAcademicSubjectsSupported != false)
            {
                source.CourseAcademicSubjects.MapCollectionTo(target.CourseAcademicSubjects, target, mappingContract?.IsCourseAcademicSubjectIncluded);
            }

            if (mappingContract?.IsCourseCompetencyLevelsSupported != false)
            {
                source.CourseCompetencyLevels.MapCollectionTo(target.CourseCompetencyLevels, target, mappingContract?.IsCourseCompetencyLevelIncluded);
            }

            if (mappingContract?.IsCourseIdentificationCodesSupported != false)
            {
                source.CourseIdentificationCodes.MapCollectionTo(target.CourseIdentificationCodes, target, mappingContract?.IsCourseIdentificationCodeIncluded);
            }

            if (mappingContract?.IsCourseLearningStandardsSupported != false)
            {
                source.CourseLearningStandards.MapCollectionTo(target.CourseLearningStandards, target, mappingContract?.IsCourseLearningStandardIncluded);
            }

            if (mappingContract?.IsCourseLevelCharacteristicsSupported != false)
            {
                source.CourseLevelCharacteristics.MapCollectionTo(target.CourseLevelCharacteristics, target, mappingContract?.IsCourseLevelCharacteristicIncluded);
            }

            if (mappingContract?.IsCourseOfferedGradeLevelsSupported != false)
            {
                source.CourseOfferedGradeLevels.MapCollectionTo(target.CourseOfferedGradeLevels, target, mappingContract?.IsCourseOfferedGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_CourseAcademicSubject = new FullName("edfi", "CourseAcademicSubject");
    
        public static bool SynchronizeTo(this ICourseAcademicSubject source, ICourseAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseAcademicSubject source, ICourseAcademicSubject target, Action<ICourseAcademicSubject, ICourseAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseCompetencyLevelMapper
    {
        private static readonly FullName _fullName_edfi_CourseCompetencyLevel = new FullName("edfi", "CourseCompetencyLevel");
    
        public static bool SynchronizeTo(this ICourseCompetencyLevel source, ICourseCompetencyLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseCompetencyLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseCompetencyLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseCompetencyLevel source, ICourseCompetencyLevel target, Action<ICourseCompetencyLevel, ICourseCompetencyLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseCompetencyLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseCompetencyLevel);
    
            // Copy contextual primary key values
            target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_CourseIdentificationCode = new FullName("edfi", "CourseIdentificationCode");
    
        public static bool SynchronizeTo(this ICourseIdentificationCode source, ICourseIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseIdentificationCode);


            // Copy non-PK properties

            if ((mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsCourseCatalogURLSupported != false)
                && target.CourseCatalogURL != source.CourseCatalogURL)
            {
                target.CourseCatalogURL = source.CourseCatalogURL;
                isModified = true;
            }

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseIdentificationCode source, ICourseIdentificationCode target, Action<ICourseIdentificationCode, ICourseIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseIdentificationCode);
    
            // Copy contextual primary key values
            target.CourseIdentificationSystemDescriptor = source.CourseIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;

            if (mappingContract?.IsCourseCatalogURLSupported != false)
                target.CourseCatalogURL = source.CourseCatalogURL;

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_CourseLearningStandard = new FullName("edfi", "CourseLearningStandard");
    
        public static bool SynchronizeTo(this ICourseLearningStandard source, ICourseLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseLearningStandard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseLearningStandard source, ICourseLearningStandard target, Action<ICourseLearningStandard, ICourseLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseLearningStandard);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseLevelCharacteristicMapper
    {
        private static readonly FullName _fullName_edfi_CourseLevelCharacteristic = new FullName("edfi", "CourseLevelCharacteristic");
    
        public static bool SynchronizeTo(this ICourseLevelCharacteristic source, ICourseLevelCharacteristic target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseLevelCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseLevelCharacteristic);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseLevelCharacteristic source, ICourseLevelCharacteristic target, Action<ICourseLevelCharacteristic, ICourseLevelCharacteristic> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseLevelCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseLevelCharacteristic);
    
            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptor = source.CourseLevelCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseOfferedGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_CourseOfferedGradeLevel = new FullName("edfi", "CourseOfferedGradeLevel");
    
        public static bool SynchronizeTo(this ICourseOfferedGradeLevel source, ICourseOfferedGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseOfferedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferedGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseOfferedGradeLevel source, ICourseOfferedGradeLevel target, Action<ICourseOfferedGradeLevel, ICourseOfferedGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseOfferedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferedGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseAttemptResultDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseAttemptResultDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseAttemptResultDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CourseAttemptResultDescriptor = new FullName("edfi", "CourseAttemptResultDescriptor");
    
        public static bool SynchronizeTo(this ICourseAttemptResultDescriptor source, ICourseAttemptResultDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseAttemptResultDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseAttemptResultDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseAttemptResultDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICourseAttemptResultDescriptor source, ICourseAttemptResultDescriptor target, Action<ICourseAttemptResultDescriptor, ICourseAttemptResultDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseAttemptResultDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseAttemptResultDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseAttemptResultDescriptorId = source.CourseAttemptResultDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseDefinedByDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseDefinedByDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseDefinedByDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CourseDefinedByDescriptor = new FullName("edfi", "CourseDefinedByDescriptor");
    
        public static bool SynchronizeTo(this ICourseDefinedByDescriptor source, ICourseDefinedByDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseDefinedByDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseDefinedByDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseDefinedByDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICourseDefinedByDescriptor source, ICourseDefinedByDescriptor target, Action<ICourseDefinedByDescriptor, ICourseDefinedByDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseDefinedByDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseDefinedByDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseDefinedByDescriptorId = source.CourseDefinedByDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseGPAApplicabilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseGPAApplicabilityDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseGPAApplicabilityDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CourseGPAApplicabilityDescriptor = new FullName("edfi", "CourseGPAApplicabilityDescriptor");
    
        public static bool SynchronizeTo(this ICourseGPAApplicabilityDescriptor source, ICourseGPAApplicabilityDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseGPAApplicabilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseGPAApplicabilityDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseGPAApplicabilityDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICourseGPAApplicabilityDescriptor source, ICourseGPAApplicabilityDescriptor target, Action<ICourseGPAApplicabilityDescriptor, ICourseGPAApplicabilityDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseGPAApplicabilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseGPAApplicabilityDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseGPAApplicabilityDescriptorId = source.CourseGPAApplicabilityDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseIdentificationSystemDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseIdentificationSystemDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CourseIdentificationSystemDescriptor = new FullName("edfi", "CourseIdentificationSystemDescriptor");
    
        public static bool SynchronizeTo(this ICourseIdentificationSystemDescriptor source, ICourseIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseIdentificationSystemDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseIdentificationSystemDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICourseIdentificationSystemDescriptor source, ICourseIdentificationSystemDescriptor target, Action<ICourseIdentificationSystemDescriptor, ICourseIdentificationSystemDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseIdentificationSystemDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseIdentificationSystemDescriptorId = source.CourseIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseLevelCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseLevelCharacteristicDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseLevelCharacteristicDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CourseLevelCharacteristicDescriptor = new FullName("edfi", "CourseLevelCharacteristicDescriptor");
    
        public static bool SynchronizeTo(this ICourseLevelCharacteristicDescriptor source, ICourseLevelCharacteristicDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseLevelCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseLevelCharacteristicDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseLevelCharacteristicDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICourseLevelCharacteristicDescriptor source, ICourseLevelCharacteristicDescriptor target, Action<ICourseLevelCharacteristicDescriptor, ICourseLevelCharacteristicDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseLevelCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseLevelCharacteristicDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptorId = source.CourseLevelCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseOffering

namespace EdFi.Ods.Entities.Common.EdFi //.CourseOfferingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseOfferingMapper
    {
        private static readonly FullName _fullName_edfi_CourseOffering = new FullName("edfi", "CourseOffering");
    
        public static bool SynchronizeTo(this ICourseOffering source, ICourseOffering target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseOfferingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOffering);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName)))
            {
                // Disallow PK column updates on CourseOffering
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCourseCodeSupported != false)
                && target.CourseCode != source.CourseCode)
            {
                target.CourseCode = source.CourseCode;
                isModified = true;
            }

            if ((mappingContract?.IsEducationOrganizationIdSupported != false)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsInstructionalTimePlannedSupported != false)
                && target.InstructionalTimePlanned != source.InstructionalTimePlanned)
            {
                target.InstructionalTimePlanned = source.InstructionalTimePlanned;
                isModified = true;
            }

            if ((mappingContract?.IsLocalCourseTitleSupported != false)
                && target.LocalCourseTitle != source.LocalCourseTitle)
            {
                target.LocalCourseTitle = source.LocalCourseTitle;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsCourseOfferingCourseLevelCharacteristicsSupported ?? true)
            {
                isModified |=
                    source.CourseOfferingCourseLevelCharacteristics.SynchronizeCollectionTo(
                        target.CourseOfferingCourseLevelCharacteristics,
                        onChildAdded: child =>
                            {
                                child.CourseOffering = target;
                            },
                        includeItem: item => mappingContract?.IsCourseOfferingCourseLevelCharacteristicIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseOfferingCurriculumUsedsSupported ?? true)
            {
                isModified |=
                    source.CourseOfferingCurriculumUseds.SynchronizeCollectionTo(
                        target.CourseOfferingCurriculumUseds,
                        onChildAdded: child =>
                            {
                                child.CourseOffering = target;
                            },
                        includeItem: item => mappingContract?.IsCourseOfferingCurriculumUsedIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseOfferingOfferedGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.CourseOfferingOfferedGradeLevels.SynchronizeCollectionTo(
                        target.CourseOfferingOfferedGradeLevels,
                        onChildAdded: child =>
                            {
                                child.CourseOffering = target;
                            },
                        includeItem: item => mappingContract?.IsCourseOfferingOfferedGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseOffering source, ICourseOffering target, Action<ICourseOffering, ICourseOffering> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseOfferingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOffering);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (mappingContract?.IsCourseCodeSupported != false)
                target.CourseCode = source.CourseCode;

            if (mappingContract?.IsEducationOrganizationIdSupported != false)
                target.EducationOrganizationId = source.EducationOrganizationId;

            if (mappingContract?.IsInstructionalTimePlannedSupported != false)
                target.InstructionalTimePlanned = source.InstructionalTimePlanned;

            if (mappingContract?.IsLocalCourseTitleSupported != false)
                target.LocalCourseTitle = source.LocalCourseTitle;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.SessionResourceId = source.SessionResourceId;
                target.SessionDiscriminator = source.SessionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCourseOfferingCourseLevelCharacteristicsSupported != false)
            {
                source.CourseOfferingCourseLevelCharacteristics.MapCollectionTo(target.CourseOfferingCourseLevelCharacteristics, target, mappingContract?.IsCourseOfferingCourseLevelCharacteristicIncluded);
            }

            if (mappingContract?.IsCourseOfferingCurriculumUsedsSupported != false)
            {
                source.CourseOfferingCurriculumUseds.MapCollectionTo(target.CourseOfferingCurriculumUseds, target, mappingContract?.IsCourseOfferingCurriculumUsedIncluded);
            }

            if (mappingContract?.IsCourseOfferingOfferedGradeLevelsSupported != false)
            {
                source.CourseOfferingOfferedGradeLevels.MapCollectionTo(target.CourseOfferingOfferedGradeLevels, target, mappingContract?.IsCourseOfferingOfferedGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseOfferingCourseLevelCharacteristicMapper
    {
        private static readonly FullName _fullName_edfi_CourseOfferingCourseLevelCharacteristic = new FullName("edfi", "CourseOfferingCourseLevelCharacteristic");
    
        public static bool SynchronizeTo(this ICourseOfferingCourseLevelCharacteristic source, ICourseOfferingCourseLevelCharacteristic target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseOfferingCourseLevelCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferingCourseLevelCharacteristic);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseOfferingCourseLevelCharacteristic source, ICourseOfferingCourseLevelCharacteristic target, Action<ICourseOfferingCourseLevelCharacteristic, ICourseOfferingCourseLevelCharacteristic> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseOfferingCourseLevelCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferingCourseLevelCharacteristic);
    
            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptor = source.CourseLevelCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseOfferingCurriculumUsedMapper
    {
        private static readonly FullName _fullName_edfi_CourseOfferingCurriculumUsed = new FullName("edfi", "CourseOfferingCurriculumUsed");
    
        public static bool SynchronizeTo(this ICourseOfferingCurriculumUsed source, ICourseOfferingCurriculumUsed target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseOfferingCurriculumUsedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferingCurriculumUsed);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseOfferingCurriculumUsed source, ICourseOfferingCurriculumUsed target, Action<ICourseOfferingCurriculumUsed, ICourseOfferingCurriculumUsed> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseOfferingCurriculumUsedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferingCurriculumUsed);
    
            // Copy contextual primary key values
            target.CurriculumUsedDescriptor = source.CurriculumUsedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseOfferingOfferedGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_CourseOfferingOfferedGradeLevel = new FullName("edfi", "CourseOfferingOfferedGradeLevel");
    
        public static bool SynchronizeTo(this ICourseOfferingOfferedGradeLevel source, ICourseOfferingOfferedGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseOfferingOfferedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferingOfferedGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseOfferingOfferedGradeLevel source, ICourseOfferingOfferedGradeLevel target, Action<ICourseOfferingOfferedGradeLevel, ICourseOfferingOfferedGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseOfferingOfferedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseOfferingOfferedGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseRepeatCodeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseRepeatCodeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseRepeatCodeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CourseRepeatCodeDescriptor = new FullName("edfi", "CourseRepeatCodeDescriptor");
    
        public static bool SynchronizeTo(this ICourseRepeatCodeDescriptor source, ICourseRepeatCodeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseRepeatCodeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseRepeatCodeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseRepeatCodeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICourseRepeatCodeDescriptor source, ICourseRepeatCodeDescriptor target, Action<ICourseRepeatCodeDescriptor, ICourseRepeatCodeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseRepeatCodeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseRepeatCodeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseRepeatCodeDescriptorId = source.CourseRepeatCodeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CourseTranscript

namespace EdFi.Ods.Entities.Common.EdFi //.CourseTranscriptAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscript = new FullName("edfi", "CourseTranscript");
    
        public static bool SynchronizeTo(this ICourseTranscript source, ICourseTranscript target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscript);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.CourseAttemptResultDescriptor, source.CourseAttemptResultDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.CourseCode, source.CourseCode))
                || (target.CourseEducationOrganizationId != source.CourseEducationOrganizationId)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.StudentUniqueId != source.StudentUniqueId)
                || !string.Equals(target.TermDescriptor, source.TermDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CourseTranscript
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAlternativeCourseTitleSupported != false)
                && target.AlternativeCourseTitle != source.AlternativeCourseTitle)
            {
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
                isModified = true;
            }

            if ((mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsAttemptedCreditConversionSupported != false)
                && target.AttemptedCreditConversion != source.AttemptedCreditConversion)
            {
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsAttemptedCreditsSupported != false)
                && target.AttemptedCredits != source.AttemptedCredits)
            {
                target.AttemptedCredits = source.AttemptedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsAttemptedCreditTypeDescriptorSupported != false)
                && target.AttemptedCreditTypeDescriptor != source.AttemptedCreditTypeDescriptor)
            {
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCourseCatalogURLSupported != false)
                && target.CourseCatalogURL != source.CourseCatalogURL)
            {
                target.CourseCatalogURL = source.CourseCatalogURL;
                isModified = true;
            }

            if ((mappingContract?.IsCourseRepeatCodeDescriptorSupported != false)
                && target.CourseRepeatCodeDescriptor != source.CourseRepeatCodeDescriptor)
            {
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCourseTitleSupported != false)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((mappingContract?.IsEarnedCreditConversionSupported != false)
                && target.EarnedCreditConversion != source.EarnedCreditConversion)
            {
                target.EarnedCreditConversion = source.EarnedCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsEarnedCreditsSupported != false)
                && target.EarnedCredits != source.EarnedCredits)
            {
                target.EarnedCredits = source.EarnedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsEarnedCreditTypeDescriptorSupported != false)
                && target.EarnedCreditTypeDescriptor != source.EarnedCreditTypeDescriptor)
            {
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsExternalEducationOrganizationIdSupported != false)
                && target.ExternalEducationOrganizationId != source.ExternalEducationOrganizationId)
            {
                target.ExternalEducationOrganizationId = source.ExternalEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsExternalEducationOrganizationNameOfInstitutionSupported != false)
                && target.ExternalEducationOrganizationNameOfInstitution != source.ExternalEducationOrganizationNameOfInstitution)
            {
                target.ExternalEducationOrganizationNameOfInstitution = source.ExternalEducationOrganizationNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsFinalLetterGradeEarnedSupported != false)
                && target.FinalLetterGradeEarned != source.FinalLetterGradeEarned)
            {
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsFinalNumericGradeEarnedSupported != false)
                && target.FinalNumericGradeEarned != source.FinalNumericGradeEarned)
            {
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsMethodCreditEarnedDescriptorSupported != false)
                && target.MethodCreditEarnedDescriptor != source.MethodCreditEarnedDescriptor)
            {
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsResponsibleTeacherStaffUniqueIdSupported != false)
                && target.ResponsibleTeacherStaffUniqueId != source.ResponsibleTeacherStaffUniqueId)
            {
                target.ResponsibleTeacherStaffUniqueId = source.ResponsibleTeacherStaffUniqueId;
                isModified = true;
            }

            if ((mappingContract?.IsWhenTakenGradeLevelDescriptorSupported != false)
                && target.WhenTakenGradeLevelDescriptor != source.WhenTakenGradeLevelDescriptor)
            {
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsCourseTranscriptAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptAcademicSubjects.SynchronizeCollectionTo(
                        target.CourseTranscriptAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseTranscriptAlternativeCourseIdentificationCodesSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptAlternativeCourseIdentificationCodes.SynchronizeCollectionTo(
                        target.CourseTranscriptAlternativeCourseIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseTranscriptCourseProgramsSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptCoursePrograms.SynchronizeCollectionTo(
                        target.CourseTranscriptCoursePrograms,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptCourseProgramIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseTranscriptCreditCategoriesSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptCreditCategories.SynchronizeCollectionTo(
                        target.CourseTranscriptCreditCategories,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptCreditCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseTranscriptEarnedAdditionalCreditsSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptEarnedAdditionalCredits.SynchronizeCollectionTo(
                        target.CourseTranscriptEarnedAdditionalCredits,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptEarnedAdditionalCreditsIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseTranscriptPartialCourseTranscriptAwardsSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptPartialCourseTranscriptAwards.SynchronizeCollectionTo(
                        target.CourseTranscriptPartialCourseTranscriptAwards,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptPartialCourseTranscriptAwardsIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCourseTranscriptSectionsSupported ?? true)
            {
                isModified |=
                    source.CourseTranscriptSections.SynchronizeCollectionTo(
                        target.CourseTranscriptSections,
                        onChildAdded: child =>
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: item => mappingContract?.IsCourseTranscriptSectionIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscript source, ICourseTranscript target, Action<ICourseTranscript, ICourseTranscript> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscript);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseAttemptResultDescriptor = source.CourseAttemptResultDescriptor;
            target.CourseCode = source.CourseCode;
            target.CourseEducationOrganizationId = source.CourseEducationOrganizationId;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAlternativeCourseTitleSupported != false)
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;

            if (mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;

            if (mappingContract?.IsAttemptedCreditConversionSupported != false)
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;

            if (mappingContract?.IsAttemptedCreditsSupported != false)
                target.AttemptedCredits = source.AttemptedCredits;

            if (mappingContract?.IsAttemptedCreditTypeDescriptorSupported != false)
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;

            if (mappingContract?.IsCourseCatalogURLSupported != false)
                target.CourseCatalogURL = source.CourseCatalogURL;

            if (mappingContract?.IsCourseRepeatCodeDescriptorSupported != false)
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;

            if (mappingContract?.IsCourseTitleSupported != false)
                target.CourseTitle = source.CourseTitle;

            if (mappingContract?.IsEarnedCreditConversionSupported != false)
                target.EarnedCreditConversion = source.EarnedCreditConversion;

            if (mappingContract?.IsEarnedCreditsSupported != false)
                target.EarnedCredits = source.EarnedCredits;

            if (mappingContract?.IsEarnedCreditTypeDescriptorSupported != false)
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;

            if (mappingContract?.IsExternalEducationOrganizationIdSupported != false)
                target.ExternalEducationOrganizationId = source.ExternalEducationOrganizationId;

            if (mappingContract?.IsExternalEducationOrganizationNameOfInstitutionSupported != false)
                target.ExternalEducationOrganizationNameOfInstitution = source.ExternalEducationOrganizationNameOfInstitution;

            if (mappingContract?.IsFinalLetterGradeEarnedSupported != false)
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;

            if (mappingContract?.IsFinalNumericGradeEarnedSupported != false)
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;

            if (mappingContract?.IsMethodCreditEarnedDescriptorSupported != false)
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;

            if (mappingContract?.IsResponsibleTeacherStaffUniqueIdSupported != false)
                target.ResponsibleTeacherStaffUniqueId = source.ResponsibleTeacherStaffUniqueId;

            if (mappingContract?.IsWhenTakenGradeLevelDescriptorSupported != false)
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.ExternalEducationOrganizationResourceId = source.ExternalEducationOrganizationResourceId;
                target.ExternalEducationOrganizationDiscriminator = source.ExternalEducationOrganizationDiscriminator;
                target.ResponsibleTeacherStaffResourceId = source.ResponsibleTeacherStaffResourceId;
                target.ResponsibleTeacherStaffDiscriminator = source.ResponsibleTeacherStaffDiscriminator;
                target.StudentAcademicRecordResourceId = source.StudentAcademicRecordResourceId;
                target.StudentAcademicRecordDiscriminator = source.StudentAcademicRecordDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCourseTranscriptAcademicSubjectsSupported != false)
            {
                source.CourseTranscriptAcademicSubjects.MapCollectionTo(target.CourseTranscriptAcademicSubjects, target, mappingContract?.IsCourseTranscriptAcademicSubjectIncluded);
            }

            if (mappingContract?.IsCourseTranscriptAlternativeCourseIdentificationCodesSupported != false)
            {
                source.CourseTranscriptAlternativeCourseIdentificationCodes.MapCollectionTo(target.CourseTranscriptAlternativeCourseIdentificationCodes, target, mappingContract?.IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded);
            }

            if (mappingContract?.IsCourseTranscriptCourseProgramsSupported != false)
            {
                source.CourseTranscriptCoursePrograms.MapCollectionTo(target.CourseTranscriptCoursePrograms, target, mappingContract?.IsCourseTranscriptCourseProgramIncluded);
            }

            if (mappingContract?.IsCourseTranscriptCreditCategoriesSupported != false)
            {
                source.CourseTranscriptCreditCategories.MapCollectionTo(target.CourseTranscriptCreditCategories, target, mappingContract?.IsCourseTranscriptCreditCategoryIncluded);
            }

            if (mappingContract?.IsCourseTranscriptEarnedAdditionalCreditsSupported != false)
            {
                source.CourseTranscriptEarnedAdditionalCredits.MapCollectionTo(target.CourseTranscriptEarnedAdditionalCredits, target, mappingContract?.IsCourseTranscriptEarnedAdditionalCreditsIncluded);
            }

            if (mappingContract?.IsCourseTranscriptPartialCourseTranscriptAwardsSupported != false)
            {
                source.CourseTranscriptPartialCourseTranscriptAwards.MapCollectionTo(target.CourseTranscriptPartialCourseTranscriptAwards, target, mappingContract?.IsCourseTranscriptPartialCourseTranscriptAwardsIncluded);
            }

            if (mappingContract?.IsCourseTranscriptSectionsSupported != false)
            {
                source.CourseTranscriptSections.MapCollectionTo(target.CourseTranscriptSections, target, mappingContract?.IsCourseTranscriptSectionIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptAcademicSubject = new FullName("edfi", "CourseTranscriptAcademicSubject");
    
        public static bool SynchronizeTo(this ICourseTranscriptAcademicSubject source, ICourseTranscriptAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptAcademicSubject source, ICourseTranscriptAcademicSubject target, Action<ICourseTranscriptAcademicSubject, ICourseTranscriptAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptAlternativeCourseIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptAlternativeCourseIdentificationCode = new FullName("edfi", "CourseTranscriptAlternativeCourseIdentificationCode");
    
        public static bool SynchronizeTo(this ICourseTranscriptAlternativeCourseIdentificationCode source, ICourseTranscriptAlternativeCourseIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptAlternativeCourseIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptAlternativeCourseIdentificationCode);


            // Copy non-PK properties

            if ((mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsCourseCatalogURLSupported != false)
                && target.CourseCatalogURL != source.CourseCatalogURL)
            {
                target.CourseCatalogURL = source.CourseCatalogURL;
                isModified = true;
            }

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptAlternativeCourseIdentificationCode source, ICourseTranscriptAlternativeCourseIdentificationCode target, Action<ICourseTranscriptAlternativeCourseIdentificationCode, ICourseTranscriptAlternativeCourseIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptAlternativeCourseIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptAlternativeCourseIdentificationCode);
    
            // Copy contextual primary key values
            target.CourseIdentificationSystemDescriptor = source.CourseIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;

            if (mappingContract?.IsCourseCatalogURLSupported != false)
                target.CourseCatalogURL = source.CourseCatalogURL;

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptCourseProgramMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptCourseProgram = new FullName("edfi", "CourseTranscriptCourseProgram");
    
        public static bool SynchronizeTo(this ICourseTranscriptCourseProgram source, ICourseTranscriptCourseProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptCourseProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptCourseProgram);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptCourseProgram source, ICourseTranscriptCourseProgram target, Action<ICourseTranscriptCourseProgram, ICourseTranscriptCourseProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptCourseProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptCourseProgram);
    
            // Copy contextual primary key values
            target.CourseProgramName = source.CourseProgramName;
            target.CourseProgramTypeDescriptor = source.CourseProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseProgramResourceId = source.CourseProgramResourceId;
                target.CourseProgramDiscriminator = source.CourseProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptCreditCategoryMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptCreditCategory = new FullName("edfi", "CourseTranscriptCreditCategory");
    
        public static bool SynchronizeTo(this ICourseTranscriptCreditCategory source, ICourseTranscriptCreditCategory target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptCreditCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptCreditCategory);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptCreditCategory source, ICourseTranscriptCreditCategory target, Action<ICourseTranscriptCreditCategory, ICourseTranscriptCreditCategory> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptCreditCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptCreditCategory);
    
            // Copy contextual primary key values
            target.CreditCategoryDescriptor = source.CreditCategoryDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptEarnedAdditionalCreditsMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptEarnedAdditionalCredits = new FullName("edfi", "CourseTranscriptEarnedAdditionalCredits");
    
        public static bool SynchronizeTo(this ICourseTranscriptEarnedAdditionalCredits source, ICourseTranscriptEarnedAdditionalCredits target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptEarnedAdditionalCreditsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptEarnedAdditionalCredits);


            // Copy non-PK properties

            if ((mappingContract?.IsCreditsSupported != false)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptEarnedAdditionalCredits source, ICourseTranscriptEarnedAdditionalCredits target, Action<ICourseTranscriptEarnedAdditionalCredits, ICourseTranscriptEarnedAdditionalCredits> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptEarnedAdditionalCreditsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptEarnedAdditionalCredits);
    
            // Copy contextual primary key values
            target.AdditionalCreditTypeDescriptor = source.AdditionalCreditTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCreditsSupported != false)
                target.Credits = source.Credits;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptPartialCourseTranscriptAwardsMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptPartialCourseTranscriptAwards = new FullName("edfi", "CourseTranscriptPartialCourseTranscriptAwards");
    
        public static bool SynchronizeTo(this ICourseTranscriptPartialCourseTranscriptAwards source, ICourseTranscriptPartialCourseTranscriptAwards target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptPartialCourseTranscriptAwardsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptPartialCourseTranscriptAwards);


            // Copy non-PK properties

            if ((mappingContract?.IsEarnedCreditsSupported != false)
                && target.EarnedCredits != source.EarnedCredits)
            {
                target.EarnedCredits = source.EarnedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsLetterGradeEarnedSupported != false)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsMethodCreditEarnedDescriptorSupported != false)
                && target.MethodCreditEarnedDescriptor != source.MethodCreditEarnedDescriptor)
            {
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsNumericGradeEarnedSupported != false)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptPartialCourseTranscriptAwards source, ICourseTranscriptPartialCourseTranscriptAwards target, Action<ICourseTranscriptPartialCourseTranscriptAwards, ICourseTranscriptPartialCourseTranscriptAwards> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptPartialCourseTranscriptAwardsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptPartialCourseTranscriptAwards);
    
            // Copy contextual primary key values
            target.AwardDate = source.AwardDate;

            // Copy non-PK properties

            if (mappingContract?.IsEarnedCreditsSupported != false)
                target.EarnedCredits = source.EarnedCredits;

            if (mappingContract?.IsLetterGradeEarnedSupported != false)
                target.LetterGradeEarned = source.LetterGradeEarned;

            if (mappingContract?.IsMethodCreditEarnedDescriptorSupported != false)
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;

            if (mappingContract?.IsNumericGradeEarnedSupported != false)
                target.NumericGradeEarned = source.NumericGradeEarned;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptSectionMapper
    {
        private static readonly FullName _fullName_edfi_CourseTranscriptSection = new FullName("edfi", "CourseTranscriptSection");
    
        public static bool SynchronizeTo(this ICourseTranscriptSection source, ICourseTranscriptSection target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CourseTranscriptSectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptSection);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICourseTranscriptSection source, ICourseTranscriptSection target, Action<ICourseTranscriptSection, ICourseTranscriptSection> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CourseTranscriptSectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CourseTranscriptSection);
    
            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Credential

namespace EdFi.Ods.Entities.Common.EdFi //.CredentialAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialMapper
    {
        private static readonly FullName _fullName_edfi_Credential = new FullName("edfi", "Credential");
    
        public static bool SynchronizeTo(this ICredential source, ICredential target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CredentialMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Credential);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CredentialIdentifier, source.CredentialIdentifier))
                || !string.Equals(target.StateOfIssueStateAbbreviationDescriptor, source.StateOfIssueStateAbbreviationDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on Credential
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCredentialFieldDescriptorSupported != false)
                && target.CredentialFieldDescriptor != source.CredentialFieldDescriptor)
            {
                target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCredentialTypeDescriptorSupported != false)
                && target.CredentialTypeDescriptor != source.CredentialTypeDescriptor)
            {
                target.CredentialTypeDescriptor = source.CredentialTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveDateSupported != false)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((mappingContract?.IsExpirationDateSupported != false)
                && target.ExpirationDate != source.ExpirationDate)
            {
                target.ExpirationDate = source.ExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsIssuanceDateSupported != false)
                && target.IssuanceDate != source.IssuanceDate)
            {
                target.IssuanceDate = source.IssuanceDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsTeachingCredentialBasisDescriptorSupported != false)
                && target.TeachingCredentialBasisDescriptor != source.TeachingCredentialBasisDescriptor)
            {
                target.TeachingCredentialBasisDescriptor = source.TeachingCredentialBasisDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsTeachingCredentialDescriptorSupported != false)
                && target.TeachingCredentialDescriptor != source.TeachingCredentialDescriptor)
            {
                target.TeachingCredentialDescriptor = source.TeachingCredentialDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsCredentialAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.CredentialAcademicSubjects.SynchronizeCollectionTo(
                        target.CredentialAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.Credential = target;
                            },
                        includeItem: item => mappingContract?.IsCredentialAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCredentialEndorsementsSupported ?? true)
            {
                isModified |=
                    source.CredentialEndorsements.SynchronizeCollectionTo(
                        target.CredentialEndorsements,
                        onChildAdded: child =>
                            {
                                child.Credential = target;
                            },
                        includeItem: item => mappingContract?.IsCredentialEndorsementIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsCredentialGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.CredentialGradeLevels.SynchronizeCollectionTo(
                        target.CredentialGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Credential = target;
                            },
                        includeItem: item => mappingContract?.IsCredentialGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICredential source, ICredential target, Action<ICredential, ICredential> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CredentialMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Credential);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCredentialFieldDescriptorSupported != false)
                target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;

            if (mappingContract?.IsCredentialTypeDescriptorSupported != false)
                target.CredentialTypeDescriptor = source.CredentialTypeDescriptor;

            if (mappingContract?.IsEffectiveDateSupported != false)
                target.EffectiveDate = source.EffectiveDate;

            if (mappingContract?.IsExpirationDateSupported != false)
                target.ExpirationDate = source.ExpirationDate;

            if (mappingContract?.IsIssuanceDateSupported != false)
                target.IssuanceDate = source.IssuanceDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsTeachingCredentialBasisDescriptorSupported != false)
                target.TeachingCredentialBasisDescriptor = source.TeachingCredentialBasisDescriptor;

            if (mappingContract?.IsTeachingCredentialDescriptorSupported != false)
                target.TeachingCredentialDescriptor = source.TeachingCredentialDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsCredentialAcademicSubjectsSupported != false)
            {
                source.CredentialAcademicSubjects.MapCollectionTo(target.CredentialAcademicSubjects, target, mappingContract?.IsCredentialAcademicSubjectIncluded);
            }

            if (mappingContract?.IsCredentialEndorsementsSupported != false)
            {
                source.CredentialEndorsements.MapCollectionTo(target.CredentialEndorsements, target, mappingContract?.IsCredentialEndorsementIncluded);
            }

            if (mappingContract?.IsCredentialGradeLevelsSupported != false)
            {
                source.CredentialGradeLevels.MapCollectionTo(target.CredentialGradeLevels, target, mappingContract?.IsCredentialGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CredentialAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_CredentialAcademicSubject = new FullName("edfi", "CredentialAcademicSubject");
    
        public static bool SynchronizeTo(this ICredentialAcademicSubject source, ICredentialAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CredentialAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICredentialAcademicSubject source, ICredentialAcademicSubject target, Action<ICredentialAcademicSubject, ICredentialAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CredentialAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CredentialEndorsementMapper
    {
        private static readonly FullName _fullName_edfi_CredentialEndorsement = new FullName("edfi", "CredentialEndorsement");
    
        public static bool SynchronizeTo(this ICredentialEndorsement source, ICredentialEndorsement target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CredentialEndorsementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialEndorsement);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICredentialEndorsement source, ICredentialEndorsement target, Action<ICredentialEndorsement, ICredentialEndorsement> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CredentialEndorsementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialEndorsement);
    
            // Copy contextual primary key values
            target.CredentialEndorsementX = source.CredentialEndorsementX;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class CredentialGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_CredentialGradeLevel = new FullName("edfi", "CredentialGradeLevel");
    
        public static bool SynchronizeTo(this ICredentialGradeLevel source, ICredentialGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CredentialGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ICredentialGradeLevel source, ICredentialGradeLevel target, Action<ICredentialGradeLevel, ICredentialGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CredentialGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CredentialFieldDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CredentialFieldDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialFieldDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CredentialFieldDescriptor = new FullName("edfi", "CredentialFieldDescriptor");
    
        public static bool SynchronizeTo(this ICredentialFieldDescriptor source, ICredentialFieldDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CredentialFieldDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialFieldDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CredentialFieldDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICredentialFieldDescriptor source, ICredentialFieldDescriptor target, Action<ICredentialFieldDescriptor, ICredentialFieldDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CredentialFieldDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialFieldDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialFieldDescriptorId = source.CredentialFieldDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CredentialTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CredentialTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CredentialTypeDescriptor = new FullName("edfi", "CredentialTypeDescriptor");
    
        public static bool SynchronizeTo(this ICredentialTypeDescriptor source, ICredentialTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CredentialTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CredentialTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICredentialTypeDescriptor source, ICredentialTypeDescriptor target, Action<ICredentialTypeDescriptor, ICredentialTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CredentialTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CredentialTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialTypeDescriptorId = source.CredentialTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CreditCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CreditCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CreditCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CreditCategoryDescriptor = new FullName("edfi", "CreditCategoryDescriptor");
    
        public static bool SynchronizeTo(this ICreditCategoryDescriptor source, ICreditCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CreditCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CreditCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CreditCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICreditCategoryDescriptor source, ICreditCategoryDescriptor target, Action<ICreditCategoryDescriptor, ICreditCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CreditCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CreditCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CreditCategoryDescriptorId = source.CreditCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CreditTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CreditTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CreditTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CreditTypeDescriptor = new FullName("edfi", "CreditTypeDescriptor");
    
        public static bool SynchronizeTo(this ICreditTypeDescriptor source, ICreditTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CreditTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CreditTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CreditTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICreditTypeDescriptor source, ICreditTypeDescriptor target, Action<ICreditTypeDescriptor, ICreditTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CreditTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CreditTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CreditTypeDescriptorId = source.CreditTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CTEProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CTEProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CTEProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CTEProgramServiceDescriptor = new FullName("edfi", "CTEProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this ICTEProgramServiceDescriptor source, ICTEProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CTEProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CTEProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CTEProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICTEProgramServiceDescriptor source, ICTEProgramServiceDescriptor target, Action<ICTEProgramServiceDescriptor, ICTEProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CTEProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CTEProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CTEProgramServiceDescriptorId = source.CTEProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: CurriculumUsedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CurriculumUsedDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CurriculumUsedDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_CurriculumUsedDescriptor = new FullName("edfi", "CurriculumUsedDescriptor");
    
        public static bool SynchronizeTo(this ICurriculumUsedDescriptor source, ICurriculumUsedDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (CurriculumUsedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CurriculumUsedDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on CurriculumUsedDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ICurriculumUsedDescriptor source, ICurriculumUsedDescriptor target, Action<ICurriculumUsedDescriptor, ICurriculumUsedDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (CurriculumUsedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_CurriculumUsedDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CurriculumUsedDescriptorId = source.CurriculumUsedDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DeliveryMethodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DeliveryMethodDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DeliveryMethodDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DeliveryMethodDescriptor = new FullName("edfi", "DeliveryMethodDescriptor");
    
        public static bool SynchronizeTo(this IDeliveryMethodDescriptor source, IDeliveryMethodDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DeliveryMethodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DeliveryMethodDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DeliveryMethodDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDeliveryMethodDescriptor source, IDeliveryMethodDescriptor target, Action<IDeliveryMethodDescriptor, IDeliveryMethodDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DeliveryMethodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DeliveryMethodDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DeliveryMethodDescriptorId = source.DeliveryMethodDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DescriptorMapping

namespace EdFi.Ods.Entities.Common.EdFi //.DescriptorMappingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DescriptorMappingMapper
    {
        private static readonly FullName _fullName_edfi_DescriptorMapping = new FullName("edfi", "DescriptorMapping");
    
        public static bool SynchronizeTo(this IDescriptorMapping source, IDescriptorMapping target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DescriptorMappingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DescriptorMapping);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.MappedNamespace, source.MappedNamespace))
                || (!keyStringComparer.Equals(target.MappedValue, source.MappedValue))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.Value, source.Value)))
            {
                // Disallow PK column updates on DescriptorMapping
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsDescriptorMappingModelEntitiesSupported ?? true)
            {
                isModified |=
                    source.DescriptorMappingModelEntities.SynchronizeCollectionTo(
                        target.DescriptorMappingModelEntities,
                        onChildAdded: child =>
                            {
                                child.DescriptorMapping = target;
                            },
                        includeItem: item => mappingContract?.IsDescriptorMappingModelEntityIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDescriptorMapping source, IDescriptorMapping target, Action<IDescriptorMapping, IDescriptorMapping> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DescriptorMappingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DescriptorMapping);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MappedNamespace = source.MappedNamespace;
            target.MappedValue = source.MappedValue;
            target.Namespace = source.Namespace;
            target.Value = source.Value;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsDescriptorMappingModelEntitiesSupported != false)
            {
                source.DescriptorMappingModelEntities.MapCollectionTo(target.DescriptorMappingModelEntities, target, mappingContract?.IsDescriptorMappingModelEntityIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DescriptorMappingModelEntityMapper
    {
        private static readonly FullName _fullName_edfi_DescriptorMappingModelEntity = new FullName("edfi", "DescriptorMappingModelEntity");
    
        public static bool SynchronizeTo(this IDescriptorMappingModelEntity source, IDescriptorMappingModelEntity target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DescriptorMappingModelEntityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DescriptorMappingModelEntity);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDescriptorMappingModelEntity source, IDescriptorMappingModelEntity target, Action<IDescriptorMappingModelEntity, IDescriptorMappingModelEntity> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DescriptorMappingModelEntityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DescriptorMappingModelEntity);
    
            // Copy contextual primary key values
            target.ModelEntityDescriptor = source.ModelEntityDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DiagnosisDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DiagnosisDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DiagnosisDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DiagnosisDescriptor = new FullName("edfi", "DiagnosisDescriptor");
    
        public static bool SynchronizeTo(this IDiagnosisDescriptor source, IDiagnosisDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DiagnosisDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DiagnosisDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DiagnosisDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDiagnosisDescriptor source, IDiagnosisDescriptor target, Action<IDiagnosisDescriptor, IDiagnosisDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DiagnosisDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DiagnosisDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DiagnosisDescriptorId = source.DiagnosisDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DiplomaLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DiplomaLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DiplomaLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DiplomaLevelDescriptor = new FullName("edfi", "DiplomaLevelDescriptor");
    
        public static bool SynchronizeTo(this IDiplomaLevelDescriptor source, IDiplomaLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DiplomaLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DiplomaLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DiplomaLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDiplomaLevelDescriptor source, IDiplomaLevelDescriptor target, Action<IDiplomaLevelDescriptor, IDiplomaLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DiplomaLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DiplomaLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DiplomaLevelDescriptorId = source.DiplomaLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DiplomaTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DiplomaTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DiplomaTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DiplomaTypeDescriptor = new FullName("edfi", "DiplomaTypeDescriptor");
    
        public static bool SynchronizeTo(this IDiplomaTypeDescriptor source, IDiplomaTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DiplomaTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DiplomaTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DiplomaTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDiplomaTypeDescriptor source, IDiplomaTypeDescriptor target, Action<IDiplomaTypeDescriptor, IDiplomaTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DiplomaTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DiplomaTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DiplomaTypeDescriptorId = source.DiplomaTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisabilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisabilityDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisabilityDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DisabilityDescriptor = new FullName("edfi", "DisabilityDescriptor");
    
        public static bool SynchronizeTo(this IDisabilityDescriptor source, IDisabilityDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisabilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisabilityDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DisabilityDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDisabilityDescriptor source, IDisabilityDescriptor target, Action<IDisabilityDescriptor, IDisabilityDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisabilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisabilityDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisabilityDescriptorId = source.DisabilityDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisabilityDesignationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisabilityDesignationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisabilityDesignationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DisabilityDesignationDescriptor = new FullName("edfi", "DisabilityDesignationDescriptor");
    
        public static bool SynchronizeTo(this IDisabilityDesignationDescriptor source, IDisabilityDesignationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisabilityDesignationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisabilityDesignationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DisabilityDesignationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDisabilityDesignationDescriptor source, IDisabilityDesignationDescriptor target, Action<IDisabilityDesignationDescriptor, IDisabilityDesignationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisabilityDesignationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisabilityDesignationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptorId = source.DisabilityDesignationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisabilityDeterminationSourceTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisabilityDeterminationSourceTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisabilityDeterminationSourceTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DisabilityDeterminationSourceTypeDescriptor = new FullName("edfi", "DisabilityDeterminationSourceTypeDescriptor");
    
        public static bool SynchronizeTo(this IDisabilityDeterminationSourceTypeDescriptor source, IDisabilityDeterminationSourceTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisabilityDeterminationSourceTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisabilityDeterminationSourceTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DisabilityDeterminationSourceTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDisabilityDeterminationSourceTypeDescriptor source, IDisabilityDeterminationSourceTypeDescriptor target, Action<IDisabilityDeterminationSourceTypeDescriptor, IDisabilityDeterminationSourceTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisabilityDeterminationSourceTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisabilityDeterminationSourceTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisabilityDeterminationSourceTypeDescriptorId = source.DisabilityDeterminationSourceTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisciplineAction

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineActionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineAction = new FullName("edfi", "DisciplineAction");
    
        public static bool SynchronizeTo(this IDisciplineAction source, IDisciplineAction target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineActionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineAction);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.DisciplineActionIdentifier, source.DisciplineActionIdentifier))
                || (target.DisciplineDate != source.DisciplineDate)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on DisciplineAction
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsActualDisciplineActionLengthSupported != false)
                && target.ActualDisciplineActionLength != source.ActualDisciplineActionLength)
            {
                target.ActualDisciplineActionLength = source.ActualDisciplineActionLength;
                isModified = true;
            }

            if ((mappingContract?.IsAssignmentSchoolIdSupported != false)
                && target.AssignmentSchoolId != source.AssignmentSchoolId)
            {
                target.AssignmentSchoolId = source.AssignmentSchoolId;
                isModified = true;
            }

            if ((mappingContract?.IsDisciplineActionLengthSupported != false)
                && target.DisciplineActionLength != source.DisciplineActionLength)
            {
                target.DisciplineActionLength = source.DisciplineActionLength;
                isModified = true;
            }

            if ((mappingContract?.IsDisciplineActionLengthDifferenceReasonDescriptorSupported != false)
                && target.DisciplineActionLengthDifferenceReasonDescriptor != source.DisciplineActionLengthDifferenceReasonDescriptor)
            {
                target.DisciplineActionLengthDifferenceReasonDescriptor = source.DisciplineActionLengthDifferenceReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIEPPlacementMeetingIndicatorSupported != false)
                && target.IEPPlacementMeetingIndicator != source.IEPPlacementMeetingIndicator)
            {
                target.IEPPlacementMeetingIndicator = source.IEPPlacementMeetingIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsRelatedToZeroTolerancePolicySupported != false)
                && target.RelatedToZeroTolerancePolicy != source.RelatedToZeroTolerancePolicy)
            {
                target.RelatedToZeroTolerancePolicy = source.RelatedToZeroTolerancePolicy;
                isModified = true;
            }

            if ((mappingContract?.IsResponsibilitySchoolIdSupported != false)
                && target.ResponsibilitySchoolId != source.ResponsibilitySchoolId)
            {
                target.ResponsibilitySchoolId = source.ResponsibilitySchoolId;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsDisciplineActionDisciplinesSupported ?? true)
            {
                isModified |=
                    source.DisciplineActionDisciplines.SynchronizeCollectionTo(
                        target.DisciplineActionDisciplines,
                        onChildAdded: child =>
                            {
                                child.DisciplineAction = target;
                            },
                        includeItem: item => mappingContract?.IsDisciplineActionDisciplineIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsDisciplineActionStaffsSupported ?? true)
            {
                isModified |=
                    source.DisciplineActionStaffs.SynchronizeCollectionTo(
                        target.DisciplineActionStaffs,
                        onChildAdded: child =>
                            {
                                child.DisciplineAction = target;
                            },
                        includeItem: item => mappingContract?.IsDisciplineActionStaffIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported ?? true)
            {
                isModified |=
                    source.DisciplineActionStudentDisciplineIncidentBehaviorAssociations.SynchronizeCollectionTo(
                        target.DisciplineActionStudentDisciplineIncidentBehaviorAssociations,
                        onChildAdded: child =>
                            {
                                child.DisciplineAction = target;
                            },
                        includeItem: item => mappingContract?.IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineAction source, IDisciplineAction target, Action<IDisciplineAction, IDisciplineAction> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineActionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineAction);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineActionIdentifier = source.DisciplineActionIdentifier;
            target.DisciplineDate = source.DisciplineDate;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsActualDisciplineActionLengthSupported != false)
                target.ActualDisciplineActionLength = source.ActualDisciplineActionLength;

            if (mappingContract?.IsAssignmentSchoolIdSupported != false)
                target.AssignmentSchoolId = source.AssignmentSchoolId;

            if (mappingContract?.IsDisciplineActionLengthSupported != false)
                target.DisciplineActionLength = source.DisciplineActionLength;

            if (mappingContract?.IsDisciplineActionLengthDifferenceReasonDescriptorSupported != false)
                target.DisciplineActionLengthDifferenceReasonDescriptor = source.DisciplineActionLengthDifferenceReasonDescriptor;

            if (mappingContract?.IsIEPPlacementMeetingIndicatorSupported != false)
                target.IEPPlacementMeetingIndicator = source.IEPPlacementMeetingIndicator;

            if (mappingContract?.IsRelatedToZeroTolerancePolicySupported != false)
                target.RelatedToZeroTolerancePolicy = source.RelatedToZeroTolerancePolicy;

            if (mappingContract?.IsResponsibilitySchoolIdSupported != false)
                target.ResponsibilitySchoolId = source.ResponsibilitySchoolId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssignmentSchoolResourceId = source.AssignmentSchoolResourceId;
                target.ResponsibilitySchoolResourceId = source.ResponsibilitySchoolResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsDisciplineActionDisciplinesSupported != false)
            {
                source.DisciplineActionDisciplines.MapCollectionTo(target.DisciplineActionDisciplines, target, mappingContract?.IsDisciplineActionDisciplineIncluded);
            }

            if (mappingContract?.IsDisciplineActionStaffsSupported != false)
            {
                source.DisciplineActionStaffs.MapCollectionTo(target.DisciplineActionStaffs, target, mappingContract?.IsDisciplineActionStaffIncluded);
            }

            if (mappingContract?.IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationsSupported != false)
            {
                source.DisciplineActionStudentDisciplineIncidentBehaviorAssociations.MapCollectionTo(target.DisciplineActionStudentDisciplineIncidentBehaviorAssociations, target, mappingContract?.IsDisciplineActionStudentDisciplineIncidentBehaviorAssociationIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DisciplineActionDisciplineMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineActionDiscipline = new FullName("edfi", "DisciplineActionDiscipline");
    
        public static bool SynchronizeTo(this IDisciplineActionDiscipline source, IDisciplineActionDiscipline target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineActionDisciplineMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionDiscipline);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineActionDiscipline source, IDisciplineActionDiscipline target, Action<IDisciplineActionDiscipline, IDisciplineActionDiscipline> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineActionDisciplineMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionDiscipline);
    
            // Copy contextual primary key values
            target.DisciplineDescriptor = source.DisciplineDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DisciplineActionStaffMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineActionStaff = new FullName("edfi", "DisciplineActionStaff");
    
        public static bool SynchronizeTo(this IDisciplineActionStaff source, IDisciplineActionStaff target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineActionStaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionStaff);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineActionStaff source, IDisciplineActionStaff target, Action<IDisciplineActionStaff, IDisciplineActionStaff> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineActionStaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionStaff);
    
            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DisciplineActionStudentDisciplineIncidentBehaviorAssociationMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineActionStudentDisciplineIncidentBehaviorAssociation = new FullName("edfi", "DisciplineActionStudentDisciplineIncidentBehaviorAssociation");
    
        public static bool SynchronizeTo(this IDisciplineActionStudentDisciplineIncidentBehaviorAssociation source, IDisciplineActionStudentDisciplineIncidentBehaviorAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineActionStudentDisciplineIncidentBehaviorAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionStudentDisciplineIncidentBehaviorAssociation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineActionStudentDisciplineIncidentBehaviorAssociation source, IDisciplineActionStudentDisciplineIncidentBehaviorAssociation target, Action<IDisciplineActionStudentDisciplineIncidentBehaviorAssociation, IDisciplineActionStudentDisciplineIncidentBehaviorAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineActionStudentDisciplineIncidentBehaviorAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionStudentDisciplineIncidentBehaviorAssociation);
    
            // Copy contextual primary key values
            target.BehaviorDescriptor = source.BehaviorDescriptor;
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentDisciplineIncidentBehaviorAssociationResourceId = source.StudentDisciplineIncidentBehaviorAssociationResourceId;
                target.StudentDisciplineIncidentBehaviorAssociationDiscriminator = source.StudentDisciplineIncidentBehaviorAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisciplineActionLengthDifferenceReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineActionLengthDifferenceReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionLengthDifferenceReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineActionLengthDifferenceReasonDescriptor = new FullName("edfi", "DisciplineActionLengthDifferenceReasonDescriptor");
    
        public static bool SynchronizeTo(this IDisciplineActionLengthDifferenceReasonDescriptor source, IDisciplineActionLengthDifferenceReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineActionLengthDifferenceReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionLengthDifferenceReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DisciplineActionLengthDifferenceReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDisciplineActionLengthDifferenceReasonDescriptor source, IDisciplineActionLengthDifferenceReasonDescriptor target, Action<IDisciplineActionLengthDifferenceReasonDescriptor, IDisciplineActionLengthDifferenceReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineActionLengthDifferenceReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineActionLengthDifferenceReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineActionLengthDifferenceReasonDescriptorId = source.DisciplineActionLengthDifferenceReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisciplineDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisciplineDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineDescriptor = new FullName("edfi", "DisciplineDescriptor");
    
        public static bool SynchronizeTo(this IDisciplineDescriptor source, IDisciplineDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DisciplineDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDisciplineDescriptor source, IDisciplineDescriptor target, Action<IDisciplineDescriptor, IDisciplineDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineDescriptorId = source.DisciplineDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisciplineIncident

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineIncidentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineIncident = new FullName("edfi", "DisciplineIncident");
    
        public static bool SynchronizeTo(this IDisciplineIncident source, IDisciplineIncident target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineIncidentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncident);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.IncidentIdentifier, source.IncidentIdentifier))
                || (target.SchoolId != source.SchoolId))
            {
                // Disallow PK column updates on DisciplineIncident
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCaseNumberSupported != false)
                && target.CaseNumber != source.CaseNumber)
            {
                target.CaseNumber = source.CaseNumber;
                isModified = true;
            }

            if ((mappingContract?.IsIncidentCostSupported != false)
                && target.IncidentCost != source.IncidentCost)
            {
                target.IncidentCost = source.IncidentCost;
                isModified = true;
            }

            if ((mappingContract?.IsIncidentDateSupported != false)
                && target.IncidentDate != source.IncidentDate)
            {
                target.IncidentDate = source.IncidentDate;
                isModified = true;
            }

            if ((mappingContract?.IsIncidentDescriptionSupported != false)
                && target.IncidentDescription != source.IncidentDescription)
            {
                target.IncidentDescription = source.IncidentDescription;
                isModified = true;
            }

            if ((mappingContract?.IsIncidentLocationDescriptorSupported != false)
                && target.IncidentLocationDescriptor != source.IncidentLocationDescriptor)
            {
                target.IncidentLocationDescriptor = source.IncidentLocationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIncidentTimeSupported != false)
                && target.IncidentTime != source.IncidentTime)
            {
                target.IncidentTime = source.IncidentTime;
                isModified = true;
            }

            if ((mappingContract?.IsReportedToLawEnforcementSupported != false)
                && target.ReportedToLawEnforcement != source.ReportedToLawEnforcement)
            {
                target.ReportedToLawEnforcement = source.ReportedToLawEnforcement;
                isModified = true;
            }

            if ((mappingContract?.IsReporterDescriptionDescriptorSupported != false)
                && target.ReporterDescriptionDescriptor != source.ReporterDescriptionDescriptor)
            {
                target.ReporterDescriptionDescriptor = source.ReporterDescriptionDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsReporterNameSupported != false)
                && target.ReporterName != source.ReporterName)
            {
                target.ReporterName = source.ReporterName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsDisciplineIncidentBehaviorsSupported ?? true)
            {
                isModified |=
                    source.DisciplineIncidentBehaviors.SynchronizeCollectionTo(
                        target.DisciplineIncidentBehaviors,
                        onChildAdded: child =>
                            {
                                child.DisciplineIncident = target;
                            },
                        includeItem: item => mappingContract?.IsDisciplineIncidentBehaviorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsDisciplineIncidentExternalParticipantsSupported ?? true)
            {
                isModified |=
                    source.DisciplineIncidentExternalParticipants.SynchronizeCollectionTo(
                        target.DisciplineIncidentExternalParticipants,
                        onChildAdded: child =>
                            {
                                child.DisciplineIncident = target;
                            },
                        includeItem: item => mappingContract?.IsDisciplineIncidentExternalParticipantIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsDisciplineIncidentWeaponsSupported ?? true)
            {
                isModified |=
                    source.DisciplineIncidentWeapons.SynchronizeCollectionTo(
                        target.DisciplineIncidentWeapons,
                        onChildAdded: child =>
                            {
                                child.DisciplineIncident = target;
                            },
                        includeItem: item => mappingContract?.IsDisciplineIncidentWeaponIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineIncident source, IDisciplineIncident target, Action<IDisciplineIncident, IDisciplineIncident> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineIncidentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncident);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (mappingContract?.IsCaseNumberSupported != false)
                target.CaseNumber = source.CaseNumber;

            if (mappingContract?.IsIncidentCostSupported != false)
                target.IncidentCost = source.IncidentCost;

            if (mappingContract?.IsIncidentDateSupported != false)
                target.IncidentDate = source.IncidentDate;

            if (mappingContract?.IsIncidentDescriptionSupported != false)
                target.IncidentDescription = source.IncidentDescription;

            if (mappingContract?.IsIncidentLocationDescriptorSupported != false)
                target.IncidentLocationDescriptor = source.IncidentLocationDescriptor;

            if (mappingContract?.IsIncidentTimeSupported != false)
                target.IncidentTime = source.IncidentTime;

            if (mappingContract?.IsReportedToLawEnforcementSupported != false)
                target.ReportedToLawEnforcement = source.ReportedToLawEnforcement;

            if (mappingContract?.IsReporterDescriptionDescriptorSupported != false)
                target.ReporterDescriptionDescriptor = source.ReporterDescriptionDescriptor;

            if (mappingContract?.IsReporterNameSupported != false)
                target.ReporterName = source.ReporterName;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsDisciplineIncidentBehaviorsSupported != false)
            {
                source.DisciplineIncidentBehaviors.MapCollectionTo(target.DisciplineIncidentBehaviors, target, mappingContract?.IsDisciplineIncidentBehaviorIncluded);
            }

            if (mappingContract?.IsDisciplineIncidentExternalParticipantsSupported != false)
            {
                source.DisciplineIncidentExternalParticipants.MapCollectionTo(target.DisciplineIncidentExternalParticipants, target, mappingContract?.IsDisciplineIncidentExternalParticipantIncluded);
            }

            if (mappingContract?.IsDisciplineIncidentWeaponsSupported != false)
            {
                source.DisciplineIncidentWeapons.MapCollectionTo(target.DisciplineIncidentWeapons, target, mappingContract?.IsDisciplineIncidentWeaponIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentBehaviorMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineIncidentBehavior = new FullName("edfi", "DisciplineIncidentBehavior");
    
        public static bool SynchronizeTo(this IDisciplineIncidentBehavior source, IDisciplineIncidentBehavior target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineIncidentBehaviorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentBehavior);


            // Copy non-PK properties

            if ((mappingContract?.IsBehaviorDetailedDescriptionSupported != false)
                && target.BehaviorDetailedDescription != source.BehaviorDetailedDescription)
            {
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineIncidentBehavior source, IDisciplineIncidentBehavior target, Action<IDisciplineIncidentBehavior, IDisciplineIncidentBehavior> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineIncidentBehaviorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentBehavior);
    
            // Copy contextual primary key values
            target.BehaviorDescriptor = source.BehaviorDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsBehaviorDetailedDescriptionSupported != false)
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentExternalParticipantMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineIncidentExternalParticipant = new FullName("edfi", "DisciplineIncidentExternalParticipant");
    
        public static bool SynchronizeTo(this IDisciplineIncidentExternalParticipant source, IDisciplineIncidentExternalParticipant target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineIncidentExternalParticipantMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentExternalParticipant);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineIncidentExternalParticipant source, IDisciplineIncidentExternalParticipant target, Action<IDisciplineIncidentExternalParticipant, IDisciplineIncidentExternalParticipant> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineIncidentExternalParticipantMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentExternalParticipant);
    
            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptor = source.DisciplineIncidentParticipationCodeDescriptor;
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentWeaponMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineIncidentWeapon = new FullName("edfi", "DisciplineIncidentWeapon");
    
        public static bool SynchronizeTo(this IDisciplineIncidentWeapon source, IDisciplineIncidentWeapon target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineIncidentWeaponMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentWeapon);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IDisciplineIncidentWeapon source, IDisciplineIncidentWeapon target, Action<IDisciplineIncidentWeapon, IDisciplineIncidentWeapon> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineIncidentWeaponMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentWeapon);
    
            // Copy contextual primary key values
            target.WeaponDescriptor = source.WeaponDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: DisciplineIncidentParticipationCodeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineIncidentParticipationCodeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentParticipationCodeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_DisciplineIncidentParticipationCodeDescriptor = new FullName("edfi", "DisciplineIncidentParticipationCodeDescriptor");
    
        public static bool SynchronizeTo(this IDisciplineIncidentParticipationCodeDescriptor source, IDisciplineIncidentParticipationCodeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (DisciplineIncidentParticipationCodeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentParticipationCodeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on DisciplineIncidentParticipationCodeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IDisciplineIncidentParticipationCodeDescriptor source, IDisciplineIncidentParticipationCodeDescriptor target, Action<IDisciplineIncidentParticipationCodeDescriptor, IDisciplineIncidentParticipationCodeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (DisciplineIncidentParticipationCodeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_DisciplineIncidentParticipationCodeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptorId = source.DisciplineIncidentParticipationCodeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationalEnvironmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationalEnvironmentDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationalEnvironmentDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EducationalEnvironmentDescriptor = new FullName("edfi", "EducationalEnvironmentDescriptor");
    
        public static bool SynchronizeTo(this IEducationalEnvironmentDescriptor source, IEducationalEnvironmentDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationalEnvironmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationalEnvironmentDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EducationalEnvironmentDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEducationalEnvironmentDescriptor source, IEducationalEnvironmentDescriptor target, Action<IEducationalEnvironmentDescriptor, IEducationalEnvironmentDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationalEnvironmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationalEnvironmentDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationalEnvironmentDescriptorId = source.EducationalEnvironmentDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationContent

namespace EdFi.Ods.Entities.Common.EdFi //.EducationContentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationContentMapper
    {
        private static readonly FullName _fullName_edfi_EducationContent = new FullName("edfi", "EducationContent");
    
        public static bool SynchronizeTo(this IEducationContent source, IEducationContent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.ContentIdentifier, source.ContentIdentifier)))
            {
                // Disallow PK column updates on EducationContent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAdditionalAuthorsIndicatorSupported != false)
                && target.AdditionalAuthorsIndicator != source.AdditionalAuthorsIndicator)
            {
                target.AdditionalAuthorsIndicator = source.AdditionalAuthorsIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsContentClassDescriptorSupported != false)
                && target.ContentClassDescriptor != source.ContentClassDescriptor)
            {
                target.ContentClassDescriptor = source.ContentClassDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCostSupported != false)
                && target.Cost != source.Cost)
            {
                target.Cost = source.Cost;
                isModified = true;
            }

            if ((mappingContract?.IsCostRateDescriptorSupported != false)
                && target.CostRateDescriptor != source.CostRateDescriptor)
            {
                target.CostRateDescriptor = source.CostRateDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsInteractivityStyleDescriptorSupported != false)
                && target.InteractivityStyleDescriptor != source.InteractivityStyleDescriptor)
            {
                target.InteractivityStyleDescriptor = source.InteractivityStyleDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLearningResourceMetadataURISupported != false)
                && target.LearningResourceMetadataURI != source.LearningResourceMetadataURI)
            {
                target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;
                isModified = true;
            }

            if ((mappingContract?.IsLearningStandardIdSupported != false)
                && target.LearningStandardId != source.LearningStandardId)
            {
                target.LearningStandardId = source.LearningStandardId;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationDateSupported != false)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationYearSupported != false)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((mappingContract?.IsPublisherSupported != false)
                && target.Publisher != source.Publisher)
            {
                target.Publisher = source.Publisher;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            if ((mappingContract?.IsTimeRequiredSupported != false)
                && target.TimeRequired != source.TimeRequired)
            {
                target.TimeRequired = source.TimeRequired;
                isModified = true;
            }

            if ((mappingContract?.IsUseRightsURLSupported != false)
                && target.UseRightsURL != source.UseRightsURL)
            {
                target.UseRightsURL = source.UseRightsURL;
                isModified = true;
            }

            if ((mappingContract?.IsVersionSupported != false)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsEducationContentAppropriateGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.EducationContentAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.EducationContentAppropriateGradeLevels,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentAppropriateGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationContentAppropriateSexesSupported ?? true)
            {
                isModified |=
                    source.EducationContentAppropriateSexes.SynchronizeCollectionTo(
                        target.EducationContentAppropriateSexes,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentAppropriateSexIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationContentAuthorsSupported ?? true)
            {
                isModified |=
                    source.EducationContentAuthors.SynchronizeCollectionTo(
                        target.EducationContentAuthors,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentAuthorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationContentDerivativeSourceEducationContentsSupported ?? true)
            {
                isModified |=
                    source.EducationContentDerivativeSourceEducationContents.SynchronizeCollectionTo(
                        target.EducationContentDerivativeSourceEducationContents,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentDerivativeSourceEducationContentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported ?? true)
            {
                isModified |=
                    source.EducationContentDerivativeSourceLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.EducationContentDerivativeSourceLearningResourceMetadataURIs,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationContentDerivativeSourceURIsSupported ?? true)
            {
                isModified |=
                    source.EducationContentDerivativeSourceURIs.SynchronizeCollectionTo(
                        target.EducationContentDerivativeSourceURIs,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentDerivativeSourceURIIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationContentLanguagesSupported ?? true)
            {
                isModified |=
                    source.EducationContentLanguages.SynchronizeCollectionTo(
                        target.EducationContentLanguages,
                        onChildAdded: child =>
                            {
                                child.EducationContent = target;
                            },
                        includeItem: item => mappingContract?.IsEducationContentLanguageIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContent source, IEducationContent target, Action<IEducationContent, IEducationContent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsAdditionalAuthorsIndicatorSupported != false)
                target.AdditionalAuthorsIndicator = source.AdditionalAuthorsIndicator;

            if (mappingContract?.IsContentClassDescriptorSupported != false)
                target.ContentClassDescriptor = source.ContentClassDescriptor;

            if (mappingContract?.IsCostSupported != false)
                target.Cost = source.Cost;

            if (mappingContract?.IsCostRateDescriptorSupported != false)
                target.CostRateDescriptor = source.CostRateDescriptor;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsInteractivityStyleDescriptorSupported != false)
                target.InteractivityStyleDescriptor = source.InteractivityStyleDescriptor;

            if (mappingContract?.IsLearningResourceMetadataURISupported != false)
                target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            if (mappingContract?.IsLearningStandardIdSupported != false)
                target.LearningStandardId = source.LearningStandardId;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsPublicationDateSupported != false)
                target.PublicationDate = source.PublicationDate;

            if (mappingContract?.IsPublicationYearSupported != false)
                target.PublicationYear = source.PublicationYear;

            if (mappingContract?.IsPublisherSupported != false)
                target.Publisher = source.Publisher;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            if (mappingContract?.IsTimeRequiredSupported != false)
                target.TimeRequired = source.TimeRequired;

            if (mappingContract?.IsUseRightsURLSupported != false)
                target.UseRightsURL = source.UseRightsURL;

            if (mappingContract?.IsVersionSupported != false)
                target.Version = source.Version;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsEducationContentAppropriateGradeLevelsSupported != false)
            {
                source.EducationContentAppropriateGradeLevels.MapCollectionTo(target.EducationContentAppropriateGradeLevels, target, mappingContract?.IsEducationContentAppropriateGradeLevelIncluded);
            }

            if (mappingContract?.IsEducationContentAppropriateSexesSupported != false)
            {
                source.EducationContentAppropriateSexes.MapCollectionTo(target.EducationContentAppropriateSexes, target, mappingContract?.IsEducationContentAppropriateSexIncluded);
            }

            if (mappingContract?.IsEducationContentAuthorsSupported != false)
            {
                source.EducationContentAuthors.MapCollectionTo(target.EducationContentAuthors, target, mappingContract?.IsEducationContentAuthorIncluded);
            }

            if (mappingContract?.IsEducationContentDerivativeSourceEducationContentsSupported != false)
            {
                source.EducationContentDerivativeSourceEducationContents.MapCollectionTo(target.EducationContentDerivativeSourceEducationContents, target, mappingContract?.IsEducationContentDerivativeSourceEducationContentIncluded);
            }

            if (mappingContract?.IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported != false)
            {
                source.EducationContentDerivativeSourceLearningResourceMetadataURIs.MapCollectionTo(target.EducationContentDerivativeSourceLearningResourceMetadataURIs, target, mappingContract?.IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded);
            }

            if (mappingContract?.IsEducationContentDerivativeSourceURIsSupported != false)
            {
                source.EducationContentDerivativeSourceURIs.MapCollectionTo(target.EducationContentDerivativeSourceURIs, target, mappingContract?.IsEducationContentDerivativeSourceURIIncluded);
            }

            if (mappingContract?.IsEducationContentLanguagesSupported != false)
            {
                source.EducationContentLanguages.MapCollectionTo(target.EducationContentLanguages, target, mappingContract?.IsEducationContentLanguageIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentAppropriateGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentAppropriateGradeLevel = new FullName("edfi", "EducationContentAppropriateGradeLevel");
    
        public static bool SynchronizeTo(this IEducationContentAppropriateGradeLevel source, IEducationContentAppropriateGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentAppropriateGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentAppropriateGradeLevel source, IEducationContentAppropriateGradeLevel target, Action<IEducationContentAppropriateGradeLevel, IEducationContentAppropriateGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentAppropriateGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentAppropriateSexMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentAppropriateSex = new FullName("edfi", "EducationContentAppropriateSex");
    
        public static bool SynchronizeTo(this IEducationContentAppropriateSex source, IEducationContentAppropriateSex target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentAppropriateSex);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentAppropriateSex source, IEducationContentAppropriateSex target, Action<IEducationContentAppropriateSex, IEducationContentAppropriateSex> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentAppropriateSex);
    
            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentAuthorMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentAuthor = new FullName("edfi", "EducationContentAuthor");
    
        public static bool SynchronizeTo(this IEducationContentAuthor source, IEducationContentAuthor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentAuthorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentAuthor);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentAuthor source, IEducationContentAuthor target, Action<IEducationContentAuthor, IEducationContentAuthor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentAuthorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentAuthor);
    
            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentDerivativeSourceEducationContentMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentDerivativeSourceEducationContent = new FullName("edfi", "EducationContentDerivativeSourceEducationContent");
    
        public static bool SynchronizeTo(this IEducationContentDerivativeSourceEducationContent source, IEducationContentDerivativeSourceEducationContent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentDerivativeSourceEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentDerivativeSourceEducationContent);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentDerivativeSourceEducationContent source, IEducationContentDerivativeSourceEducationContent target, Action<IEducationContentDerivativeSourceEducationContent, IEducationContentDerivativeSourceEducationContent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentDerivativeSourceEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentDerivativeSourceEducationContent);
    
            // Copy contextual primary key values
            target.DerivativeSourceContentIdentifier = source.DerivativeSourceContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DerivativeSourceEducationContentResourceId = source.DerivativeSourceEducationContentResourceId;
                target.DerivativeSourceEducationContentDiscriminator = source.DerivativeSourceEducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentDerivativeSourceLearningResourceMetadataURIMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentDerivativeSourceLearningResourceMetadataURI = new FullName("edfi", "EducationContentDerivativeSourceLearningResourceMetadataURI");
    
        public static bool SynchronizeTo(this IEducationContentDerivativeSourceLearningResourceMetadataURI source, IEducationContentDerivativeSourceLearningResourceMetadataURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentDerivativeSourceLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentDerivativeSourceLearningResourceMetadataURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentDerivativeSourceLearningResourceMetadataURI source, IEducationContentDerivativeSourceLearningResourceMetadataURI target, Action<IEducationContentDerivativeSourceLearningResourceMetadataURI, IEducationContentDerivativeSourceLearningResourceMetadataURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentDerivativeSourceLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentDerivativeSourceLearningResourceMetadataURI);
    
            // Copy contextual primary key values
            target.DerivativeSourceLearningResourceMetadataURI = source.DerivativeSourceLearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentDerivativeSourceURIMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentDerivativeSourceURI = new FullName("edfi", "EducationContentDerivativeSourceURI");
    
        public static bool SynchronizeTo(this IEducationContentDerivativeSourceURI source, IEducationContentDerivativeSourceURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentDerivativeSourceURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentDerivativeSourceURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentDerivativeSourceURI source, IEducationContentDerivativeSourceURI target, Action<IEducationContentDerivativeSourceURI, IEducationContentDerivativeSourceURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentDerivativeSourceURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentDerivativeSourceURI);
    
            // Copy contextual primary key values
            target.DerivativeSourceURI = source.DerivativeSourceURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationContentLanguageMapper
    {
        private static readonly FullName _fullName_edfi_EducationContentLanguage = new FullName("edfi", "EducationContentLanguage");
    
        public static bool SynchronizeTo(this IEducationContentLanguage source, IEducationContentLanguage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationContentLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentLanguage);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationContentLanguage source, IEducationContentLanguage target, Action<IEducationContentLanguage, IEducationContentLanguage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationContentLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationContentLanguage);
    
            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganization

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationAddressMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationAddress = new FullName("edfi", "EducationOrganizationAddress");
    
        public static bool SynchronizeTo(this IEducationOrganizationAddress source, IEducationOrganizationAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsBuildingSiteNumberSupported != false)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsCongressionalDistrictSupported != false)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((mappingContract?.IsCountyFIPSCodeSupported != false)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLocaleDescriptorSupported != false)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((mappingContract?.IsNameOfCountySupported != false)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsEducationOrganizationAddressPeriodsSupported ?? true)
            {
                isModified |=
                    source.EducationOrganizationAddressPeriods.SynchronizeCollectionTo(
                        target.EducationOrganizationAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.EducationOrganizationAddress = target;
                            },
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationAddress source, IEducationOrganizationAddress target, Action<IEducationOrganizationAddress, IEducationOrganizationAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;

            if (mappingContract?.IsBuildingSiteNumberSupported != false)
                target.BuildingSiteNumber = source.BuildingSiteNumber;

            if (mappingContract?.IsCongressionalDistrictSupported != false)
                target.CongressionalDistrict = source.CongressionalDistrict;

            if (mappingContract?.IsCountyFIPSCodeSupported != false)
                target.CountyFIPSCode = source.CountyFIPSCode;

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLocaleDescriptorSupported != false)
                target.LocaleDescriptor = source.LocaleDescriptor;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            if (mappingContract?.IsNameOfCountySupported != false)
                target.NameOfCounty = source.NameOfCounty;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsEducationOrganizationAddressPeriodsSupported != false)
            {
                source.EducationOrganizationAddressPeriods.MapCollectionTo(target.EducationOrganizationAddressPeriods, target, mappingContract?.IsEducationOrganizationAddressPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationAddressPeriodMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationAddressPeriod = new FullName("edfi", "EducationOrganizationAddressPeriod");
    
        public static bool SynchronizeTo(this IEducationOrganizationAddressPeriod source, IEducationOrganizationAddressPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationAddressPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationAddressPeriod source, IEducationOrganizationAddressPeriod target, Action<IEducationOrganizationAddressPeriod, IEducationOrganizationAddressPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationAddressPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCategoryMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationCategory = new FullName("edfi", "EducationOrganizationCategory");
    
        public static bool SynchronizeTo(this IEducationOrganizationCategory source, IEducationOrganizationCategory target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationCategory);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationCategory source, IEducationOrganizationCategory target, Action<IEducationOrganizationCategory, IEducationOrganizationCategory> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationCategory);
    
            // Copy contextual primary key values
            target.EducationOrganizationCategoryDescriptor = source.EducationOrganizationCategoryDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationIdentificationCode = new FullName("edfi", "EducationOrganizationIdentificationCode");
    
        public static bool SynchronizeTo(this IEducationOrganizationIdentificationCode source, IEducationOrganizationIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIdentificationCode);


            // Copy non-PK properties

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationIdentificationCode source, IEducationOrganizationIdentificationCode target, Action<IEducationOrganizationIdentificationCode, IEducationOrganizationIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIdentificationCode);
    
            // Copy contextual primary key values
            target.EducationOrganizationIdentificationSystemDescriptor = source.EducationOrganizationIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationIndicatorMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationIndicator = new FullName("edfi", "EducationOrganizationIndicator");
    
        public static bool SynchronizeTo(this IEducationOrganizationIndicator source, IEducationOrganizationIndicator target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationIndicatorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIndicator);


            // Copy non-PK properties

            if ((mappingContract?.IsDesignatedBySupported != false)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((mappingContract?.IsIndicatorGroupDescriptorSupported != false)
                && target.IndicatorGroupDescriptor != source.IndicatorGroupDescriptor)
            {
                target.IndicatorGroupDescriptor = source.IndicatorGroupDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIndicatorLevelDescriptorSupported != false)
                && target.IndicatorLevelDescriptor != source.IndicatorLevelDescriptor)
            {
                target.IndicatorLevelDescriptor = source.IndicatorLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIndicatorValueSupported != false)
                && target.IndicatorValue != source.IndicatorValue)
            {
                target.IndicatorValue = source.IndicatorValue;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsEducationOrganizationIndicatorPeriodsSupported ?? true)
            {
                isModified |=
                    source.EducationOrganizationIndicatorPeriods.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicatorPeriods,
                        onChildAdded: child =>
                            {
                                child.EducationOrganizationIndicator = target;
                            },
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationIndicator source, IEducationOrganizationIndicator target, Action<IEducationOrganizationIndicator, IEducationOrganizationIndicator> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationIndicatorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIndicator);
    
            // Copy contextual primary key values
            target.IndicatorDescriptor = source.IndicatorDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDesignatedBySupported != false)
                target.DesignatedBy = source.DesignatedBy;

            if (mappingContract?.IsIndicatorGroupDescriptorSupported != false)
                target.IndicatorGroupDescriptor = source.IndicatorGroupDescriptor;

            if (mappingContract?.IsIndicatorLevelDescriptorSupported != false)
                target.IndicatorLevelDescriptor = source.IndicatorLevelDescriptor;

            if (mappingContract?.IsIndicatorValueSupported != false)
                target.IndicatorValue = source.IndicatorValue;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsEducationOrganizationIndicatorPeriodsSupported != false)
            {
                source.EducationOrganizationIndicatorPeriods.MapCollectionTo(target.EducationOrganizationIndicatorPeriods, target, mappingContract?.IsEducationOrganizationIndicatorPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationIndicatorPeriodMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationIndicatorPeriod = new FullName("edfi", "EducationOrganizationIndicatorPeriod");
    
        public static bool SynchronizeTo(this IEducationOrganizationIndicatorPeriod source, IEducationOrganizationIndicatorPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationIndicatorPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIndicatorPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationIndicatorPeriod source, IEducationOrganizationIndicatorPeriod target, Action<IEducationOrganizationIndicatorPeriod, IEducationOrganizationIndicatorPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationIndicatorPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIndicatorPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationInstitutionTelephoneMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationInstitutionTelephone = new FullName("edfi", "EducationOrganizationInstitutionTelephone");
    
        public static bool SynchronizeTo(this IEducationOrganizationInstitutionTelephone source, IEducationOrganizationInstitutionTelephone target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationInstitutionTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationInstitutionTelephone);


            // Copy non-PK properties

            if ((mappingContract?.IsTelephoneNumberSupported != false)
                && target.TelephoneNumber != source.TelephoneNumber)
            {
                target.TelephoneNumber = source.TelephoneNumber;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationInstitutionTelephone source, IEducationOrganizationInstitutionTelephone target, Action<IEducationOrganizationInstitutionTelephone, IEducationOrganizationInstitutionTelephone> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationInstitutionTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationInstitutionTelephone);
    
            // Copy contextual primary key values
            target.InstitutionTelephoneNumberTypeDescriptor = source.InstitutionTelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsTelephoneNumberSupported != false)
                target.TelephoneNumber = source.TelephoneNumber;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationInternationalAddressMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationInternationalAddress = new FullName("edfi", "EducationOrganizationInternationalAddress");
    
        public static bool SynchronizeTo(this IEducationOrganizationInternationalAddress source, IEducationOrganizationInternationalAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationInternationalAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsAddressLine1Supported != false)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine2Supported != false)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine3Supported != false)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine4Supported != false)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsCountryDescriptorSupported != false)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationInternationalAddress source, IEducationOrganizationInternationalAddress target, Action<IEducationOrganizationInternationalAddress, IEducationOrganizationInternationalAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationInternationalAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAddressLine1Supported != false)
                target.AddressLine1 = source.AddressLine1;

            if (mappingContract?.IsAddressLine2Supported != false)
                target.AddressLine2 = source.AddressLine2;

            if (mappingContract?.IsAddressLine3Supported != false)
                target.AddressLine3 = source.AddressLine3;

            if (mappingContract?.IsAddressLine4Supported != false)
                target.AddressLine4 = source.AddressLine4;

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsCountryDescriptorSupported != false)
                target.CountryDescriptor = source.CountryDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationAssociationTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationAssociationTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationAssociationTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationAssociationTypeDescriptor = new FullName("edfi", "EducationOrganizationAssociationTypeDescriptor");
    
        public static bool SynchronizeTo(this IEducationOrganizationAssociationTypeDescriptor source, IEducationOrganizationAssociationTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationAssociationTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationAssociationTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EducationOrganizationAssociationTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationAssociationTypeDescriptor source, IEducationOrganizationAssociationTypeDescriptor target, Action<IEducationOrganizationAssociationTypeDescriptor, IEducationOrganizationAssociationTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationAssociationTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationAssociationTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationAssociationTypeDescriptorId = source.EducationOrganizationAssociationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationCategoryDescriptor = new FullName("edfi", "EducationOrganizationCategoryDescriptor");
    
        public static bool SynchronizeTo(this IEducationOrganizationCategoryDescriptor source, IEducationOrganizationCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EducationOrganizationCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationCategoryDescriptor source, IEducationOrganizationCategoryDescriptor target, Action<IEducationOrganizationCategoryDescriptor, IEducationOrganizationCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationCategoryDescriptorId = source.EducationOrganizationCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationIdentificationSystemDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationIdentificationSystemDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationIdentificationSystemDescriptor = new FullName("edfi", "EducationOrganizationIdentificationSystemDescriptor");
    
        public static bool SynchronizeTo(this IEducationOrganizationIdentificationSystemDescriptor source, IEducationOrganizationIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIdentificationSystemDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EducationOrganizationIdentificationSystemDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationIdentificationSystemDescriptor source, IEducationOrganizationIdentificationSystemDescriptor target, Action<IEducationOrganizationIdentificationSystemDescriptor, IEducationOrganizationIdentificationSystemDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationIdentificationSystemDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationIdentificationSystemDescriptorId = source.EducationOrganizationIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationInterventionPrescriptionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationInterventionPrescriptionAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationInterventionPrescriptionAssociationMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationInterventionPrescriptionAssociation = new FullName("edfi", "EducationOrganizationInterventionPrescriptionAssociation");
    
        public static bool SynchronizeTo(this IEducationOrganizationInterventionPrescriptionAssociation source, IEducationOrganizationInterventionPrescriptionAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationInterventionPrescriptionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationInterventionPrescriptionAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.InterventionPrescriptionEducationOrganizationId != source.InterventionPrescriptionEducationOrganizationId)
                || (!keyStringComparer.Equals(target.InterventionPrescriptionIdentificationCode, source.InterventionPrescriptionIdentificationCode)))
            {
                // Disallow PK column updates on EducationOrganizationInterventionPrescriptionAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationInterventionPrescriptionAssociation source, IEducationOrganizationInterventionPrescriptionAssociation target, Action<IEducationOrganizationInterventionPrescriptionAssociation, IEducationOrganizationInterventionPrescriptionAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationInterventionPrescriptionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationInterventionPrescriptionAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
            target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.InterventionPrescriptionResourceId = source.InterventionPrescriptionResourceId;
                target.InterventionPrescriptionDiscriminator = source.InterventionPrescriptionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationNetwork

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationNetworkAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationNetworkMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationNetwork = new FullName("edfi", "EducationOrganizationNetwork");
    
        public static bool SynchronizeTo(this IEducationOrganizationNetwork source, IEducationOrganizationNetwork target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationNetworkMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationNetwork);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationNetworkId != source.EducationOrganizationNetworkId))
            {
                // Disallow PK column updates on EducationOrganizationNetwork
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsNetworkPurposeDescriptorSupported != false)
                && target.NetworkPurposeDescriptor != source.NetworkPurposeDescriptor)
            {
                target.NetworkPurposeDescriptor = source.NetworkPurposeDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationNetwork source, IEducationOrganizationNetwork target, Action<IEducationOrganizationNetwork, IEducationOrganizationNetwork> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationNetworkMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationNetwork);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationNetworkId = source.EducationOrganizationNetworkId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsNetworkPurposeDescriptorSupported != false)
                target.NetworkPurposeDescriptor = source.NetworkPurposeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationNetworkAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationNetworkAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationNetworkAssociationMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationNetworkAssociation = new FullName("edfi", "EducationOrganizationNetworkAssociation");
    
        public static bool SynchronizeTo(this IEducationOrganizationNetworkAssociation source, IEducationOrganizationNetworkAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationNetworkAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationNetworkAssociation);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationNetworkId != source.EducationOrganizationNetworkId)
                || (target.MemberEducationOrganizationId != source.MemberEducationOrganizationId))
            {
                // Disallow PK column updates on EducationOrganizationNetworkAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationNetworkAssociation source, IEducationOrganizationNetworkAssociation target, Action<IEducationOrganizationNetworkAssociation, IEducationOrganizationNetworkAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationNetworkAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationNetworkAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationNetworkId = source.EducationOrganizationNetworkId;
            target.MemberEducationOrganizationId = source.MemberEducationOrganizationId;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationNetworkResourceId = source.EducationOrganizationNetworkResourceId;
                target.MemberEducationOrganizationResourceId = source.MemberEducationOrganizationResourceId;
                target.MemberEducationOrganizationDiscriminator = source.MemberEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationOrganizationPeerAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationPeerAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationPeerAssociationMapper
    {
        private static readonly FullName _fullName_edfi_EducationOrganizationPeerAssociation = new FullName("edfi", "EducationOrganizationPeerAssociation");
    
        public static bool SynchronizeTo(this IEducationOrganizationPeerAssociation source, IEducationOrganizationPeerAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationOrganizationPeerAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationPeerAssociation);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.PeerEducationOrganizationId != source.PeerEducationOrganizationId))
            {
                // Disallow PK column updates on EducationOrganizationPeerAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationOrganizationPeerAssociation source, IEducationOrganizationPeerAssociation target, Action<IEducationOrganizationPeerAssociation, IEducationOrganizationPeerAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationOrganizationPeerAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationOrganizationPeerAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.PeerEducationOrganizationId = source.PeerEducationOrganizationId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.PeerEducationOrganizationResourceId = source.PeerEducationOrganizationResourceId;
                target.PeerEducationOrganizationDiscriminator = source.PeerEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationPlanDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationPlanDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationPlanDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EducationPlanDescriptor = new FullName("edfi", "EducationPlanDescriptor");
    
        public static bool SynchronizeTo(this IEducationPlanDescriptor source, IEducationPlanDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationPlanDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationPlanDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EducationPlanDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEducationPlanDescriptor source, IEducationPlanDescriptor target, Action<IEducationPlanDescriptor, IEducationPlanDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationPlanDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationPlanDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationPlanDescriptorId = source.EducationPlanDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EducationServiceCenter

namespace EdFi.Ods.Entities.Common.EdFi //.EducationServiceCenterAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducationServiceCenterMapper
    {
        private static readonly FullName _fullName_edfi_EducationServiceCenter = new FullName("edfi", "EducationServiceCenter");
    
        public static bool SynchronizeTo(this IEducationServiceCenter source, IEducationServiceCenter target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EducationServiceCenterMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationServiceCenter);

            // Detect primary key changes
            if (
                 (target.EducationServiceCenterId != source.EducationServiceCenterId))
            {
                // Disallow PK column updates on EducationServiceCenter
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsStateEducationAgencyIdSupported != false)
                && target.StateEducationAgencyId != source.StateEducationAgencyId)
            {
                target.StateEducationAgencyId = source.StateEducationAgencyId;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEducationServiceCenter source, IEducationServiceCenter target, Action<IEducationServiceCenter, IEducationServiceCenter> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EducationServiceCenterMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EducationServiceCenter);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationServiceCenterId = source.EducationServiceCenterId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsStateEducationAgencyIdSupported != false)
                target.StateEducationAgencyId = source.StateEducationAgencyId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StateEducationAgencyResourceId = source.StateEducationAgencyResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ElectronicMailTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ElectronicMailTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ElectronicMailTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ElectronicMailTypeDescriptor = new FullName("edfi", "ElectronicMailTypeDescriptor");
    
        public static bool SynchronizeTo(this IElectronicMailTypeDescriptor source, IElectronicMailTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ElectronicMailTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ElectronicMailTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ElectronicMailTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IElectronicMailTypeDescriptor source, IElectronicMailTypeDescriptor target, Action<IElectronicMailTypeDescriptor, IElectronicMailTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ElectronicMailTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ElectronicMailTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ElectronicMailTypeDescriptorId = source.ElectronicMailTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EligibilityDelayReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EligibilityDelayReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EligibilityDelayReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EligibilityDelayReasonDescriptor = new FullName("edfi", "EligibilityDelayReasonDescriptor");
    
        public static bool SynchronizeTo(this IEligibilityDelayReasonDescriptor source, IEligibilityDelayReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EligibilityDelayReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EligibilityDelayReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EligibilityDelayReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEligibilityDelayReasonDescriptor source, IEligibilityDelayReasonDescriptor target, Action<IEligibilityDelayReasonDescriptor, IEligibilityDelayReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EligibilityDelayReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EligibilityDelayReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EligibilityDelayReasonDescriptorId = source.EligibilityDelayReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EligibilityEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EligibilityEvaluationTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EligibilityEvaluationTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EligibilityEvaluationTypeDescriptor = new FullName("edfi", "EligibilityEvaluationTypeDescriptor");
    
        public static bool SynchronizeTo(this IEligibilityEvaluationTypeDescriptor source, IEligibilityEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EligibilityEvaluationTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EligibilityEvaluationTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EligibilityEvaluationTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEligibilityEvaluationTypeDescriptor source, IEligibilityEvaluationTypeDescriptor target, Action<IEligibilityEvaluationTypeDescriptor, IEligibilityEvaluationTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EligibilityEvaluationTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EligibilityEvaluationTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EligibilityEvaluationTypeDescriptorId = source.EligibilityEvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EmploymentStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EmploymentStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EmploymentStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EmploymentStatusDescriptor = new FullName("edfi", "EmploymentStatusDescriptor");
    
        public static bool SynchronizeTo(this IEmploymentStatusDescriptor source, IEmploymentStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EmploymentStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EmploymentStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EmploymentStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEmploymentStatusDescriptor source, IEmploymentStatusDescriptor target, Action<IEmploymentStatusDescriptor, IEmploymentStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EmploymentStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EmploymentStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentStatusDescriptorId = source.EmploymentStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EnrollmentTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EnrollmentTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EnrollmentTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EnrollmentTypeDescriptor = new FullName("edfi", "EnrollmentTypeDescriptor");
    
        public static bool SynchronizeTo(this IEnrollmentTypeDescriptor source, IEnrollmentTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EnrollmentTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EnrollmentTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EnrollmentTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEnrollmentTypeDescriptor source, IEnrollmentTypeDescriptor target, Action<IEnrollmentTypeDescriptor, IEnrollmentTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EnrollmentTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EnrollmentTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EnrollmentTypeDescriptorId = source.EnrollmentTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EntryGradeLevelReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EntryGradeLevelReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EntryGradeLevelReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EntryGradeLevelReasonDescriptor = new FullName("edfi", "EntryGradeLevelReasonDescriptor");
    
        public static bool SynchronizeTo(this IEntryGradeLevelReasonDescriptor source, IEntryGradeLevelReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EntryGradeLevelReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EntryGradeLevelReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EntryGradeLevelReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEntryGradeLevelReasonDescriptor source, IEntryGradeLevelReasonDescriptor target, Action<IEntryGradeLevelReasonDescriptor, IEntryGradeLevelReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EntryGradeLevelReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EntryGradeLevelReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryGradeLevelReasonDescriptorId = source.EntryGradeLevelReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EntryTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EntryTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EntryTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EntryTypeDescriptor = new FullName("edfi", "EntryTypeDescriptor");
    
        public static bool SynchronizeTo(this IEntryTypeDescriptor source, IEntryTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EntryTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EntryTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EntryTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEntryTypeDescriptor source, IEntryTypeDescriptor target, Action<IEntryTypeDescriptor, IEntryTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EntryTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EntryTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryTypeDescriptorId = source.EntryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EvaluationDelayReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EvaluationDelayReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationDelayReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EvaluationDelayReasonDescriptor = new FullName("edfi", "EvaluationDelayReasonDescriptor");
    
        public static bool SynchronizeTo(this IEvaluationDelayReasonDescriptor source, IEvaluationDelayReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EvaluationDelayReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EvaluationDelayReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EvaluationDelayReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEvaluationDelayReasonDescriptor source, IEvaluationDelayReasonDescriptor target, Action<IEvaluationDelayReasonDescriptor, IEvaluationDelayReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EvaluationDelayReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EvaluationDelayReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationDelayReasonDescriptorId = source.EvaluationDelayReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EvaluationRubricDimension

namespace EdFi.Ods.Entities.Common.EdFi //.EvaluationRubricDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationRubricDimensionMapper
    {
        private static readonly FullName _fullName_edfi_EvaluationRubricDimension = new FullName("edfi", "EvaluationRubricDimension");
    
        public static bool SynchronizeTo(this IEvaluationRubricDimension source, IEvaluationRubricDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EvaluationRubricDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EvaluationRubricDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EvaluationRubricRating != source.EvaluationRubricRating)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramEvaluationElementTitle, source.ProgramEvaluationElementTitle))
                || !string.Equals(target.ProgramEvaluationPeriodDescriptor, source.ProgramEvaluationPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramEvaluationTitle, source.ProgramEvaluationTitle))
                || !string.Equals(target.ProgramEvaluationTypeDescriptor, source.ProgramEvaluationTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EvaluationRubricDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEvaluationCriterionDescriptionSupported != false)
                && target.EvaluationCriterionDescription != source.EvaluationCriterionDescription)
            {
                target.EvaluationCriterionDescription = source.EvaluationCriterionDescription;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationRubricRatingLevelDescriptorSupported != false)
                && target.EvaluationRubricRatingLevelDescriptor != source.EvaluationRubricRatingLevelDescriptor)
            {
                target.EvaluationRubricRatingLevelDescriptor = source.EvaluationRubricRatingLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsRubricDimensionSortOrderSupported != false)
                && target.RubricDimensionSortOrder != source.RubricDimensionSortOrder)
            {
                target.RubricDimensionSortOrder = source.RubricDimensionSortOrder;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IEvaluationRubricDimension source, IEvaluationRubricDimension target, Action<IEvaluationRubricDimension, IEvaluationRubricDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EvaluationRubricDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EvaluationRubricDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationRubricRating = source.EvaluationRubricRating;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramEvaluationElementTitle = source.ProgramEvaluationElementTitle;
            target.ProgramEvaluationPeriodDescriptor = source.ProgramEvaluationPeriodDescriptor;
            target.ProgramEvaluationTitle = source.ProgramEvaluationTitle;
            target.ProgramEvaluationTypeDescriptor = source.ProgramEvaluationTypeDescriptor;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsEvaluationCriterionDescriptionSupported != false)
                target.EvaluationCriterionDescription = source.EvaluationCriterionDescription;

            if (mappingContract?.IsEvaluationRubricRatingLevelDescriptorSupported != false)
                target.EvaluationRubricRatingLevelDescriptor = source.EvaluationRubricRatingLevelDescriptor;

            if (mappingContract?.IsRubricDimensionSortOrderSupported != false)
                target.RubricDimensionSortOrder = source.RubricDimensionSortOrder;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramEvaluationElementResourceId = source.ProgramEvaluationElementResourceId;
                target.ProgramEvaluationElementDiscriminator = source.ProgramEvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: EventCircumstanceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EventCircumstanceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EventCircumstanceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_EventCircumstanceDescriptor = new FullName("edfi", "EventCircumstanceDescriptor");
    
        public static bool SynchronizeTo(this IEventCircumstanceDescriptor source, IEventCircumstanceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (EventCircumstanceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EventCircumstanceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on EventCircumstanceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IEventCircumstanceDescriptor source, IEventCircumstanceDescriptor target, Action<IEventCircumstanceDescriptor, IEventCircumstanceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (EventCircumstanceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_EventCircumstanceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EventCircumstanceDescriptorId = source.EventCircumstanceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ExitWithdrawTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ExitWithdrawTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ExitWithdrawTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ExitWithdrawTypeDescriptor = new FullName("edfi", "ExitWithdrawTypeDescriptor");
    
        public static bool SynchronizeTo(this IExitWithdrawTypeDescriptor source, IExitWithdrawTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ExitWithdrawTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ExitWithdrawTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ExitWithdrawTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IExitWithdrawTypeDescriptor source, IExitWithdrawTypeDescriptor target, Action<IExitWithdrawTypeDescriptor, IExitWithdrawTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ExitWithdrawTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ExitWithdrawTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ExitWithdrawTypeDescriptorId = source.ExitWithdrawTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: FeederSchoolAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.FeederSchoolAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FeederSchoolAssociationMapper
    {
        private static readonly FullName _fullName_edfi_FeederSchoolAssociation = new FullName("edfi", "FeederSchoolAssociation");
    
        public static bool SynchronizeTo(this IFeederSchoolAssociation source, IFeederSchoolAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (FeederSchoolAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FeederSchoolAssociation);

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.FeederSchoolId != source.FeederSchoolId)
                || (target.SchoolId != source.SchoolId))
            {
                // Disallow PK column updates on FeederSchoolAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsFeederRelationshipDescriptionSupported != false)
                && target.FeederRelationshipDescription != source.FeederRelationshipDescription)
            {
                target.FeederRelationshipDescription = source.FeederRelationshipDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IFeederSchoolAssociation source, IFeederSchoolAssociation target, Action<IFeederSchoolAssociation, IFeederSchoolAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (FeederSchoolAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FeederSchoolAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FeederSchoolId = source.FeederSchoolId;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsFeederRelationshipDescriptionSupported != false)
                target.FeederRelationshipDescription = source.FeederRelationshipDescription;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.FeederSchoolResourceId = source.FeederSchoolResourceId;
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: FinancialCollectionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.FinancialCollectionDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FinancialCollectionDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_FinancialCollectionDescriptor = new FullName("edfi", "FinancialCollectionDescriptor");
    
        public static bool SynchronizeTo(this IFinancialCollectionDescriptor source, IFinancialCollectionDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (FinancialCollectionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FinancialCollectionDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on FinancialCollectionDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IFinancialCollectionDescriptor source, IFinancialCollectionDescriptor target, Action<IFinancialCollectionDescriptor, IFinancialCollectionDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (FinancialCollectionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FinancialCollectionDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FinancialCollectionDescriptorId = source.FinancialCollectionDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: FunctionDimension

namespace EdFi.Ods.Entities.Common.EdFi //.FunctionDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FunctionDimensionMapper
    {
        private static readonly FullName _fullName_edfi_FunctionDimension = new FullName("edfi", "FunctionDimension");
    
        public static bool SynchronizeTo(this IFunctionDimension source, IFunctionDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (FunctionDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FunctionDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on FunctionDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsFunctionDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.FunctionDimensionReportingTags.SynchronizeCollectionTo(
                        target.FunctionDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.FunctionDimension = target;
                            },
                        includeItem: item => mappingContract?.IsFunctionDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IFunctionDimension source, IFunctionDimension target, Action<IFunctionDimension, IFunctionDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (FunctionDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FunctionDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsFunctionDimensionReportingTagsSupported != false)
            {
                source.FunctionDimensionReportingTags.MapCollectionTo(target.FunctionDimensionReportingTags, target, mappingContract?.IsFunctionDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class FunctionDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_FunctionDimensionReportingTag = new FullName("edfi", "FunctionDimensionReportingTag");
    
        public static bool SynchronizeTo(this IFunctionDimensionReportingTag source, IFunctionDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (FunctionDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FunctionDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IFunctionDimensionReportingTag source, IFunctionDimensionReportingTag target, Action<IFunctionDimensionReportingTag, IFunctionDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (FunctionDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FunctionDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: FundDimension

namespace EdFi.Ods.Entities.Common.EdFi //.FundDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FundDimensionMapper
    {
        private static readonly FullName _fullName_edfi_FundDimension = new FullName("edfi", "FundDimension");
    
        public static bool SynchronizeTo(this IFundDimension source, IFundDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (FundDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FundDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on FundDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsFundDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.FundDimensionReportingTags.SynchronizeCollectionTo(
                        target.FundDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.FundDimension = target;
                            },
                        includeItem: item => mappingContract?.IsFundDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IFundDimension source, IFundDimension target, Action<IFundDimension, IFundDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (FundDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FundDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsFundDimensionReportingTagsSupported != false)
            {
                source.FundDimensionReportingTags.MapCollectionTo(target.FundDimensionReportingTags, target, mappingContract?.IsFundDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class FundDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_FundDimensionReportingTag = new FullName("edfi", "FundDimensionReportingTag");
    
        public static bool SynchronizeTo(this IFundDimensionReportingTag source, IFundDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (FundDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FundDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IFundDimensionReportingTag source, IFundDimensionReportingTag target, Action<IFundDimensionReportingTag, IFundDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (FundDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_FundDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GeneralStudentProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.GeneralStudentProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GeneralStudentProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_GeneralStudentProgramAssociation = new FullName("edfi", "GeneralStudentProgramAssociation");
    
        public static bool SynchronizeTo(this IGeneralStudentProgramAssociation source, IGeneralStudentProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GeneralStudentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GeneralStudentProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on GeneralStudentProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |=
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses,
                        onChildAdded: child =>
                            {
                                child.GeneralStudentProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            return isModified;
        }

        public static void MapTo(this IGeneralStudentProgramAssociation source, IGeneralStudentProgramAssociation target, Action<IGeneralStudentProgramAssociation, IGeneralStudentProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GeneralStudentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GeneralStudentProgramAssociation);
    
            // =======================================================================================
            // Detect and map derived types (compiler is unable to correctly link to appropriate
            //      mapping methods when there are base/derived interfaces and a concrete base class)
            // ---------------------------------------------------------------------------------------
            // Map derived type StudentCTEProgramAssociation
            var sourceStudentCTEProgramAssociation = source as IStudentCTEProgramAssociation;

            if (sourceStudentCTEProgramAssociation != null)
            {
                sourceStudentCTEProgramAssociation.MapDerivedTo((IStudentCTEProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentHomelessProgramAssociation
            var sourceStudentHomelessProgramAssociation = source as IStudentHomelessProgramAssociation;

            if (sourceStudentHomelessProgramAssociation != null)
            {
                sourceStudentHomelessProgramAssociation.MapDerivedTo((IStudentHomelessProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentLanguageInstructionProgramAssociation
            var sourceStudentLanguageInstructionProgramAssociation = source as IStudentLanguageInstructionProgramAssociation;

            if (sourceStudentLanguageInstructionProgramAssociation != null)
            {
                sourceStudentLanguageInstructionProgramAssociation.MapDerivedTo((IStudentLanguageInstructionProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentMigrantEducationProgramAssociation
            var sourceStudentMigrantEducationProgramAssociation = source as IStudentMigrantEducationProgramAssociation;

            if (sourceStudentMigrantEducationProgramAssociation != null)
            {
                sourceStudentMigrantEducationProgramAssociation.MapDerivedTo((IStudentMigrantEducationProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentNeglectedOrDelinquentProgramAssociation
            var sourceStudentNeglectedOrDelinquentProgramAssociation = source as IStudentNeglectedOrDelinquentProgramAssociation;

            if (sourceStudentNeglectedOrDelinquentProgramAssociation != null)
            {
                sourceStudentNeglectedOrDelinquentProgramAssociation.MapDerivedTo((IStudentNeglectedOrDelinquentProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentProgramAssociation
            var sourceStudentProgramAssociation = source as IStudentProgramAssociation;

            if (sourceStudentProgramAssociation != null)
            {
                sourceStudentProgramAssociation.MapDerivedTo((IStudentProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentSchoolFoodServiceProgramAssociation
            var sourceStudentSchoolFoodServiceProgramAssociation = source as IStudentSchoolFoodServiceProgramAssociation;

            if (sourceStudentSchoolFoodServiceProgramAssociation != null)
            {
                sourceStudentSchoolFoodServiceProgramAssociation.MapDerivedTo((IStudentSchoolFoodServiceProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentSpecialEducationProgramAssociation
            var sourceStudentSpecialEducationProgramAssociation = source as IStudentSpecialEducationProgramAssociation;

            if (sourceStudentSpecialEducationProgramAssociation != null)
            {
                sourceStudentSpecialEducationProgramAssociation.MapDerivedTo((IStudentSpecialEducationProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentTitleIPartAProgramAssociation
            var sourceStudentTitleIPartAProgramAssociation = source as IStudentTitleIPartAProgramAssociation;

            if (sourceStudentTitleIPartAProgramAssociation != null)
            {
                sourceStudentTitleIPartAProgramAssociation.MapDerivedTo((IStudentTitleIPartAProgramAssociation) target, onMapped);
                return;
            }
            // =======================================================================================

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GeneralStudentProgramAssociationProgramParticipationStatusMapper
    {
        private static readonly FullName _fullName_edfi_GeneralStudentProgramAssociationProgramParticipationStatus = new FullName("edfi", "GeneralStudentProgramAssociationProgramParticipationStatus");
    
        public static bool SynchronizeTo(this IGeneralStudentProgramAssociationProgramParticipationStatus source, IGeneralStudentProgramAssociationProgramParticipationStatus target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GeneralStudentProgramAssociationProgramParticipationStatusMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GeneralStudentProgramAssociationProgramParticipationStatus);


            // Copy non-PK properties

            if ((mappingContract?.IsDesignatedBySupported != false)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((mappingContract?.IsStatusEndDateSupported != false)
                && target.StatusEndDate != source.StatusEndDate)
            {
                target.StatusEndDate = source.StatusEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGeneralStudentProgramAssociationProgramParticipationStatus source, IGeneralStudentProgramAssociationProgramParticipationStatus target, Action<IGeneralStudentProgramAssociationProgramParticipationStatus, IGeneralStudentProgramAssociationProgramParticipationStatus> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GeneralStudentProgramAssociationProgramParticipationStatusMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GeneralStudentProgramAssociationProgramParticipationStatus);
    
            // Copy contextual primary key values
            target.ParticipationStatusDescriptor = source.ParticipationStatusDescriptor;
            target.StatusBeginDate = source.StatusBeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsDesignatedBySupported != false)
                target.DesignatedBy = source.DesignatedBy;

            if (mappingContract?.IsStatusEndDateSupported != false)
                target.StatusEndDate = source.StatusEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Grade

namespace EdFi.Ods.Entities.Common.EdFi //.GradeAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradeMapper
    {
        private static readonly FullName _fullName_edfi_Grade = new FullName("edfi", "Grade");
    
        public static bool SynchronizeTo(this IGrade source, IGrade target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Grade);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || !string.Equals(target.GradeTypeDescriptor, source.GradeTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || !string.Equals(target.GradingPeriodDescriptor, source.GradingPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.GradingPeriodName, source.GradingPeriodName))
                || (target.GradingPeriodSchoolYear != source.GradingPeriodSchoolYear)
                || (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Allow PK column updates on Grade
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.BeginDate != target.BeginDate)
                {
                    source.BeginDate = target.BeginDate;
                }
                if (source.GradeTypeDescriptor != target.GradeTypeDescriptor)
                {
                    source.GradeTypeDescriptor = target.GradeTypeDescriptor;
                }
                if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
                {
                    source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
                }
                if (source.GradingPeriodName != target.GradingPeriodName)
                {
                    source.GradingPeriodName = target.GradingPeriodName;
                }
                if (source.GradingPeriodSchoolYear != target.GradingPeriodSchoolYear)
                {
                    source.GradingPeriodSchoolYear = target.GradingPeriodSchoolYear;
                }
                if (source.LocalCourseCode != target.LocalCourseCode)
                {
                    source.LocalCourseCode = target.LocalCourseCode;
                }
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
                if (source.SchoolYear != target.SchoolYear)
                {
                    source.SchoolYear = target.SchoolYear;
                }
                if (source.SectionIdentifier != target.SectionIdentifier)
                {
                    source.SectionIdentifier = target.SectionIdentifier;
                }
                if (source.SessionName != target.SessionName)
                {
                    source.SessionName = target.SessionName;
                }
                if (source.StudentUniqueId != target.StudentUniqueId)
                {
                    source.StudentUniqueId = target.StudentUniqueId;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCurrentGradeAsOfDateSupported != false)
                && target.CurrentGradeAsOfDate != source.CurrentGradeAsOfDate)
            {
                target.CurrentGradeAsOfDate = source.CurrentGradeAsOfDate;
                isModified = true;
            }

            if ((mappingContract?.IsCurrentGradeIndicatorSupported != false)
                && target.CurrentGradeIndicator != source.CurrentGradeIndicator)
            {
                target.CurrentGradeIndicator = source.CurrentGradeIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsDiagnosticStatementSupported != false)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((mappingContract?.IsGradeEarnedDescriptionSupported != false)
                && target.GradeEarnedDescription != source.GradeEarnedDescription)
            {
                target.GradeEarnedDescription = source.GradeEarnedDescription;
                isModified = true;
            }

            if ((mappingContract?.IsLetterGradeEarnedSupported != false)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsNumericGradeEarnedSupported != false)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsPerformanceBaseConversionDescriptorSupported != false)
                && target.PerformanceBaseConversionDescriptor != source.PerformanceBaseConversionDescriptor)
            {
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsGradeLearningStandardGradesSupported ?? true)
            {
                isModified |=
                    source.GradeLearningStandardGrades.SynchronizeCollectionTo(
                        target.GradeLearningStandardGrades,
                        onChildAdded: child =>
                            {
                                child.Grade = target;
                            },
                        includeItem: item => mappingContract?.IsGradeLearningStandardGradeIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGrade source, IGrade target, Action<IGrade, IGrade> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Grade);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.GradeTypeDescriptor = source.GradeTypeDescriptor;
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodName = source.GradingPeriodName;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsCurrentGradeAsOfDateSupported != false)
                target.CurrentGradeAsOfDate = source.CurrentGradeAsOfDate;

            if (mappingContract?.IsCurrentGradeIndicatorSupported != false)
                target.CurrentGradeIndicator = source.CurrentGradeIndicator;

            if (mappingContract?.IsDiagnosticStatementSupported != false)
                target.DiagnosticStatement = source.DiagnosticStatement;

            if (mappingContract?.IsGradeEarnedDescriptionSupported != false)
                target.GradeEarnedDescription = source.GradeEarnedDescription;

            if (mappingContract?.IsLetterGradeEarnedSupported != false)
                target.LetterGradeEarned = source.LetterGradeEarned;

            if (mappingContract?.IsNumericGradeEarnedSupported != false)
                target.NumericGradeEarned = source.NumericGradeEarned;

            if (mappingContract?.IsPerformanceBaseConversionDescriptorSupported != false)
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.StudentSectionAssociationResourceId = source.StudentSectionAssociationResourceId;
                target.StudentSectionAssociationDiscriminator = source.StudentSectionAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsGradeLearningStandardGradesSupported != false)
            {
                source.GradeLearningStandardGrades.MapCollectionTo(target.GradeLearningStandardGrades, target, mappingContract?.IsGradeLearningStandardGradeIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GradeLearningStandardGradeMapper
    {
        private static readonly FullName _fullName_edfi_GradeLearningStandardGrade = new FullName("edfi", "GradeLearningStandardGrade");
    
        public static bool SynchronizeTo(this IGradeLearningStandardGrade source, IGradeLearningStandardGrade target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradeLearningStandardGradeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradeLearningStandardGrade);


            // Copy non-PK properties

            if ((mappingContract?.IsDiagnosticStatementSupported != false)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((mappingContract?.IsLetterGradeEarnedSupported != false)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsNumericGradeEarnedSupported != false)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsPerformanceBaseConversionDescriptorSupported != false)
                && target.PerformanceBaseConversionDescriptor != source.PerformanceBaseConversionDescriptor)
            {
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGradeLearningStandardGrade source, IGradeLearningStandardGrade target, Action<IGradeLearningStandardGrade, IGradeLearningStandardGrade> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradeLearningStandardGradeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradeLearningStandardGrade);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            if (mappingContract?.IsDiagnosticStatementSupported != false)
                target.DiagnosticStatement = source.DiagnosticStatement;

            if (mappingContract?.IsLetterGradeEarnedSupported != false)
                target.LetterGradeEarned = source.LetterGradeEarned;

            if (mappingContract?.IsNumericGradeEarnedSupported != false)
                target.NumericGradeEarned = source.NumericGradeEarned;

            if (mappingContract?.IsPerformanceBaseConversionDescriptorSupported != false)
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradebookEntry

namespace EdFi.Ods.Entities.Common.EdFi //.GradebookEntryAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryMapper
    {
        private static readonly FullName _fullName_edfi_GradebookEntry = new FullName("edfi", "GradebookEntry");
    
        public static bool SynchronizeTo(this IGradebookEntry source, IGradebookEntry target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradebookEntryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradebookEntry);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.GradebookEntryIdentifier, source.GradebookEntryIdentifier))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace)))
            {
                // Allow PK column updates on GradebookEntry
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.GradebookEntryIdentifier != target.GradebookEntryIdentifier)
                {
                    source.GradebookEntryIdentifier = target.GradebookEntryIdentifier;
                }
                if (source.Namespace != target.Namespace)
                {
                    source.Namespace = target.Namespace;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsDateAssignedSupported != false)
                && target.DateAssigned != source.DateAssigned)
            {
                target.DateAssigned = source.DateAssigned;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsDueDateSupported != false)
                && target.DueDate != source.DueDate)
            {
                target.DueDate = source.DueDate;
                isModified = true;
            }

            if ((mappingContract?.IsDueTimeSupported != false)
                && target.DueTime != source.DueTime)
            {
                target.DueTime = source.DueTime;
                isModified = true;
            }

            if ((mappingContract?.IsGradebookEntryTypeDescriptorSupported != false)
                && target.GradebookEntryTypeDescriptor != source.GradebookEntryTypeDescriptor)
            {
                target.GradebookEntryTypeDescriptor = source.GradebookEntryTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsGradingPeriodDescriptorSupported != false)
                && target.GradingPeriodDescriptor != source.GradingPeriodDescriptor)
            {
                target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsGradingPeriodNameSupported != false)
                && target.GradingPeriodName != source.GradingPeriodName)
            {
                target.GradingPeriodName = source.GradingPeriodName;
                isModified = true;
            }

            if ((mappingContract?.IsLocalCourseCodeSupported != false)
                && target.LocalCourseCode != source.LocalCourseCode)
            {
                target.LocalCourseCode = source.LocalCourseCode;
                isModified = true;
            }

            if ((mappingContract?.IsMaxPointsSupported != false)
                && target.MaxPoints != source.MaxPoints)
            {
                target.MaxPoints = source.MaxPoints;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolIdSupported != false)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolYearSupported != false)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsSectionIdentifierSupported != false)
                && target.SectionIdentifier != source.SectionIdentifier)
            {
                target.SectionIdentifier = source.SectionIdentifier;
                isModified = true;
            }

            if ((mappingContract?.IsSessionNameSupported != false)
                && target.SessionName != source.SessionName)
            {
                target.SessionName = source.SessionName;
                isModified = true;
            }

            if ((mappingContract?.IsSourceSectionIdentifierSupported != false)
                && target.SourceSectionIdentifier != source.SourceSectionIdentifier)
            {
                target.SourceSectionIdentifier = source.SourceSectionIdentifier;
                isModified = true;
            }

            if ((mappingContract?.IsTitleSupported != false)
                && target.Title != source.Title)
            {
                target.Title = source.Title;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsGradebookEntryLearningStandardsSupported ?? true)
            {
                isModified |=
                    source.GradebookEntryLearningStandards.SynchronizeCollectionTo(
                        target.GradebookEntryLearningStandards,
                        onChildAdded: child =>
                            {
                                child.GradebookEntry = target;
                            },
                        includeItem: item => mappingContract?.IsGradebookEntryLearningStandardIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGradebookEntry source, IGradebookEntry target, Action<IGradebookEntry, IGradebookEntry> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradebookEntryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradebookEntry);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradebookEntryIdentifier = source.GradebookEntryIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (mappingContract?.IsDateAssignedSupported != false)
                target.DateAssigned = source.DateAssigned;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsDueDateSupported != false)
                target.DueDate = source.DueDate;

            if (mappingContract?.IsDueTimeSupported != false)
                target.DueTime = source.DueTime;

            if (mappingContract?.IsGradebookEntryTypeDescriptorSupported != false)
                target.GradebookEntryTypeDescriptor = source.GradebookEntryTypeDescriptor;

            if (mappingContract?.IsGradingPeriodDescriptorSupported != false)
                target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;

            if (mappingContract?.IsGradingPeriodNameSupported != false)
                target.GradingPeriodName = source.GradingPeriodName;

            if (mappingContract?.IsLocalCourseCodeSupported != false)
                target.LocalCourseCode = source.LocalCourseCode;

            if (mappingContract?.IsMaxPointsSupported != false)
                target.MaxPoints = source.MaxPoints;

            if (mappingContract?.IsSchoolIdSupported != false)
                target.SchoolId = source.SchoolId;

            if (mappingContract?.IsSchoolYearSupported != false)
                target.SchoolYear = source.SchoolYear;

            if (mappingContract?.IsSectionIdentifierSupported != false)
                target.SectionIdentifier = source.SectionIdentifier;

            if (mappingContract?.IsSessionNameSupported != false)
                target.SessionName = source.SessionName;

            if (mappingContract?.IsSourceSectionIdentifierSupported != false)
                target.SourceSectionIdentifier = source.SourceSectionIdentifier;

            if (mappingContract?.IsTitleSupported != false)
                target.Title = source.Title;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsGradebookEntryLearningStandardsSupported != false)
            {
                source.GradebookEntryLearningStandards.MapCollectionTo(target.GradebookEntryLearningStandards, target, mappingContract?.IsGradebookEntryLearningStandardIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GradebookEntryLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_GradebookEntryLearningStandard = new FullName("edfi", "GradebookEntryLearningStandard");
    
        public static bool SynchronizeTo(this IGradebookEntryLearningStandard source, IGradebookEntryLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradebookEntryLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradebookEntryLearningStandard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGradebookEntryLearningStandard source, IGradebookEntryLearningStandard target, Action<IGradebookEntryLearningStandard, IGradebookEntryLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradebookEntryLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradebookEntryLearningStandard);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradebookEntryTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradebookEntryTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GradebookEntryTypeDescriptor = new FullName("edfi", "GradebookEntryTypeDescriptor");
    
        public static bool SynchronizeTo(this IGradebookEntryTypeDescriptor source, IGradebookEntryTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradebookEntryTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradebookEntryTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GradebookEntryTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGradebookEntryTypeDescriptor source, IGradebookEntryTypeDescriptor target, Action<IGradebookEntryTypeDescriptor, IGradebookEntryTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradebookEntryTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradebookEntryTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradebookEntryTypeDescriptorId = source.GradebookEntryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradeLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradeLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradeLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GradeLevelDescriptor = new FullName("edfi", "GradeLevelDescriptor");
    
        public static bool SynchronizeTo(this IGradeLevelDescriptor source, IGradeLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradeLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradeLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GradeLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGradeLevelDescriptor source, IGradeLevelDescriptor target, Action<IGradeLevelDescriptor, IGradeLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradeLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradeLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradeLevelDescriptorId = source.GradeLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradePointAverageTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradePointAverageTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradePointAverageTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GradePointAverageTypeDescriptor = new FullName("edfi", "GradePointAverageTypeDescriptor");
    
        public static bool SynchronizeTo(this IGradePointAverageTypeDescriptor source, IGradePointAverageTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradePointAverageTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradePointAverageTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GradePointAverageTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGradePointAverageTypeDescriptor source, IGradePointAverageTypeDescriptor target, Action<IGradePointAverageTypeDescriptor, IGradePointAverageTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradePointAverageTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradePointAverageTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptorId = source.GradePointAverageTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradeTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradeTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradeTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GradeTypeDescriptor = new FullName("edfi", "GradeTypeDescriptor");
    
        public static bool SynchronizeTo(this IGradeTypeDescriptor source, IGradeTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradeTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradeTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GradeTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGradeTypeDescriptor source, IGradeTypeDescriptor target, Action<IGradeTypeDescriptor, IGradeTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradeTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradeTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradeTypeDescriptorId = source.GradeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradingPeriod

namespace EdFi.Ods.Entities.Common.EdFi //.GradingPeriodAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradingPeriodMapper
    {
        private static readonly FullName _fullName_edfi_GradingPeriod = new FullName("edfi", "GradingPeriod");
    
        public static bool SynchronizeTo(this IGradingPeriod source, IGradingPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradingPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradingPeriod);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.GradingPeriodDescriptor, source.GradingPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.GradingPeriodName, source.GradingPeriodName))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear))
            {
                // Disallow PK column updates on GradingPeriod
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsPeriodSequenceSupported != false)
                && target.PeriodSequence != source.PeriodSequence)
            {
                target.PeriodSequence = source.PeriodSequence;
                isModified = true;
            }

            if ((mappingContract?.IsTotalInstructionalDaysSupported != false)
                && target.TotalInstructionalDays != source.TotalInstructionalDays)
            {
                target.TotalInstructionalDays = source.TotalInstructionalDays;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGradingPeriod source, IGradingPeriod target, Action<IGradingPeriod, IGradingPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradingPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradingPeriod);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodName = source.GradingPeriodName;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsPeriodSequenceSupported != false)
                target.PeriodSequence = source.PeriodSequence;

            if (mappingContract?.IsTotalInstructionalDaysSupported != false)
                target.TotalInstructionalDays = source.TotalInstructionalDays;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GradingPeriodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradingPeriodDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GradingPeriodDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GradingPeriodDescriptor = new FullName("edfi", "GradingPeriodDescriptor");
    
        public static bool SynchronizeTo(this IGradingPeriodDescriptor source, IGradingPeriodDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GradingPeriodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradingPeriodDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GradingPeriodDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGradingPeriodDescriptor source, IGradingPeriodDescriptor target, Action<IGradingPeriodDescriptor, IGradingPeriodDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GradingPeriodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GradingPeriodDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptorId = source.GradingPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Entities.Common.EdFi //.GraduationPlanAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlan = new FullName("edfi", "GraduationPlan");
    
        public static bool SynchronizeTo(this IGraduationPlan source, IGraduationPlan target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlan);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || !string.Equals(target.GraduationPlanTypeDescriptor, source.GraduationPlanTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.GraduationSchoolYear != source.GraduationSchoolYear))
            {
                // Disallow PK column updates on GraduationPlan
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsIndividualPlanSupported != false)
                && target.IndividualPlan != source.IndividualPlan)
            {
                target.IndividualPlan = source.IndividualPlan;
                isModified = true;
            }

            if ((mappingContract?.IsTotalRequiredCreditConversionSupported != false)
                && target.TotalRequiredCreditConversion != source.TotalRequiredCreditConversion)
            {
                target.TotalRequiredCreditConversion = source.TotalRequiredCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsTotalRequiredCreditsSupported != false)
                && target.TotalRequiredCredits != source.TotalRequiredCredits)
            {
                target.TotalRequiredCredits = source.TotalRequiredCredits;
                isModified = true;
            }

            if ((mappingContract?.IsTotalRequiredCreditTypeDescriptorSupported != false)
                && target.TotalRequiredCreditTypeDescriptor != source.TotalRequiredCreditTypeDescriptor)
            {
                target.TotalRequiredCreditTypeDescriptor = source.TotalRequiredCreditTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsGraduationPlanCreditsByCoursesSupported ?? true)
            {
                isModified |=
                    source.GraduationPlanCreditsByCourses.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsByCourses,
                        onChildAdded: child =>
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: item => mappingContract?.IsGraduationPlanCreditsByCourseIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsGraduationPlanCreditsByCreditCategoriesSupported ?? true)
            {
                isModified |=
                    source.GraduationPlanCreditsByCreditCategories.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsByCreditCategories,
                        onChildAdded: child =>
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: item => mappingContract?.IsGraduationPlanCreditsByCreditCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsGraduationPlanCreditsBySubjectsSupported ?? true)
            {
                isModified |=
                    source.GraduationPlanCreditsBySubjects.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsBySubjects,
                        onChildAdded: child =>
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: item => mappingContract?.IsGraduationPlanCreditsBySubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsGraduationPlanRequiredAssessmentsSupported ?? true)
            {
                isModified |=
                    source.GraduationPlanRequiredAssessments.SynchronizeCollectionTo(
                        target.GraduationPlanRequiredAssessments,
                        onChildAdded: child =>
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: item => mappingContract?.IsGraduationPlanRequiredAssessmentIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlan source, IGraduationPlan target, Action<IGraduationPlan, IGraduationPlan> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlan);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.GraduationPlanTypeDescriptor = source.GraduationPlanTypeDescriptor;
            target.GraduationSchoolYear = source.GraduationSchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsIndividualPlanSupported != false)
                target.IndividualPlan = source.IndividualPlan;

            if (mappingContract?.IsTotalRequiredCreditConversionSupported != false)
                target.TotalRequiredCreditConversion = source.TotalRequiredCreditConversion;

            if (mappingContract?.IsTotalRequiredCreditsSupported != false)
                target.TotalRequiredCredits = source.TotalRequiredCredits;

            if (mappingContract?.IsTotalRequiredCreditTypeDescriptorSupported != false)
                target.TotalRequiredCreditTypeDescriptor = source.TotalRequiredCreditTypeDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.GraduationSchoolYearTypeResourceId = source.GraduationSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsGraduationPlanCreditsByCoursesSupported != false)
            {
                source.GraduationPlanCreditsByCourses.MapCollectionTo(target.GraduationPlanCreditsByCourses, target, mappingContract?.IsGraduationPlanCreditsByCourseIncluded);
            }

            if (mappingContract?.IsGraduationPlanCreditsByCreditCategoriesSupported != false)
            {
                source.GraduationPlanCreditsByCreditCategories.MapCollectionTo(target.GraduationPlanCreditsByCreditCategories, target, mappingContract?.IsGraduationPlanCreditsByCreditCategoryIncluded);
            }

            if (mappingContract?.IsGraduationPlanCreditsBySubjectsSupported != false)
            {
                source.GraduationPlanCreditsBySubjects.MapCollectionTo(target.GraduationPlanCreditsBySubjects, target, mappingContract?.IsGraduationPlanCreditsBySubjectIncluded);
            }

            if (mappingContract?.IsGraduationPlanRequiredAssessmentsSupported != false)
            {
                source.GraduationPlanRequiredAssessments.MapCollectionTo(target.GraduationPlanRequiredAssessments, target, mappingContract?.IsGraduationPlanRequiredAssessmentIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsByCourseMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanCreditsByCourse = new FullName("edfi", "GraduationPlanCreditsByCourse");
    
        public static bool SynchronizeTo(this IGraduationPlanCreditsByCourse source, IGraduationPlanCreditsByCourse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanCreditsByCourseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsByCourse);


            // Copy non-PK properties

            if ((mappingContract?.IsCreditConversionSupported != false)
                && target.CreditConversion != source.CreditConversion)
            {
                target.CreditConversion = source.CreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsCreditsSupported != false)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }

            if ((mappingContract?.IsCreditTypeDescriptorSupported != false)
                && target.CreditTypeDescriptor != source.CreditTypeDescriptor)
            {
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsWhenTakenGradeLevelDescriptorSupported != false)
                && target.WhenTakenGradeLevelDescriptor != source.WhenTakenGradeLevelDescriptor)
            {
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsGraduationPlanCreditsByCourseCoursesSupported ?? true)
            {
                isModified |=
                    source.GraduationPlanCreditsByCourseCourses.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsByCourseCourses,
                        onChildAdded: child =>
                            {
                                child.GraduationPlanCreditsByCourse = target;
                            },
                        includeItem: item => mappingContract?.IsGraduationPlanCreditsByCourseCourseIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanCreditsByCourse source, IGraduationPlanCreditsByCourse target, Action<IGraduationPlanCreditsByCourse, IGraduationPlanCreditsByCourse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanCreditsByCourseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsByCourse);
    
            // Copy contextual primary key values
            target.CourseSetName = source.CourseSetName;

            // Copy non-PK properties

            if (mappingContract?.IsCreditConversionSupported != false)
                target.CreditConversion = source.CreditConversion;

            if (mappingContract?.IsCreditsSupported != false)
                target.Credits = source.Credits;

            if (mappingContract?.IsCreditTypeDescriptorSupported != false)
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;

            if (mappingContract?.IsWhenTakenGradeLevelDescriptorSupported != false)
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsGraduationPlanCreditsByCourseCoursesSupported != false)
            {
                source.GraduationPlanCreditsByCourseCourses.MapCollectionTo(target.GraduationPlanCreditsByCourseCourses, target, mappingContract?.IsGraduationPlanCreditsByCourseCourseIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsByCourseCourseMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanCreditsByCourseCourse = new FullName("edfi", "GraduationPlanCreditsByCourseCourse");
    
        public static bool SynchronizeTo(this IGraduationPlanCreditsByCourseCourse source, IGraduationPlanCreditsByCourseCourse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanCreditsByCourseCourseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsByCourseCourse);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanCreditsByCourseCourse source, IGraduationPlanCreditsByCourseCourse target, Action<IGraduationPlanCreditsByCourseCourse, IGraduationPlanCreditsByCourseCourse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanCreditsByCourseCourseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsByCourseCourse);
    
            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.CourseEducationOrganizationId = source.CourseEducationOrganizationId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsByCreditCategoryMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanCreditsByCreditCategory = new FullName("edfi", "GraduationPlanCreditsByCreditCategory");
    
        public static bool SynchronizeTo(this IGraduationPlanCreditsByCreditCategory source, IGraduationPlanCreditsByCreditCategory target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanCreditsByCreditCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsByCreditCategory);


            // Copy non-PK properties

            if ((mappingContract?.IsCreditConversionSupported != false)
                && target.CreditConversion != source.CreditConversion)
            {
                target.CreditConversion = source.CreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsCreditsSupported != false)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }

            if ((mappingContract?.IsCreditTypeDescriptorSupported != false)
                && target.CreditTypeDescriptor != source.CreditTypeDescriptor)
            {
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanCreditsByCreditCategory source, IGraduationPlanCreditsByCreditCategory target, Action<IGraduationPlanCreditsByCreditCategory, IGraduationPlanCreditsByCreditCategory> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanCreditsByCreditCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsByCreditCategory);
    
            // Copy contextual primary key values
            target.CreditCategoryDescriptor = source.CreditCategoryDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCreditConversionSupported != false)
                target.CreditConversion = source.CreditConversion;

            if (mappingContract?.IsCreditsSupported != false)
                target.Credits = source.Credits;

            if (mappingContract?.IsCreditTypeDescriptorSupported != false)
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsBySubjectMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanCreditsBySubject = new FullName("edfi", "GraduationPlanCreditsBySubject");
    
        public static bool SynchronizeTo(this IGraduationPlanCreditsBySubject source, IGraduationPlanCreditsBySubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanCreditsBySubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsBySubject);


            // Copy non-PK properties

            if ((mappingContract?.IsCreditConversionSupported != false)
                && target.CreditConversion != source.CreditConversion)
            {
                target.CreditConversion = source.CreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsCreditsSupported != false)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }

            if ((mappingContract?.IsCreditTypeDescriptorSupported != false)
                && target.CreditTypeDescriptor != source.CreditTypeDescriptor)
            {
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanCreditsBySubject source, IGraduationPlanCreditsBySubject target, Action<IGraduationPlanCreditsBySubject, IGraduationPlanCreditsBySubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanCreditsBySubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanCreditsBySubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCreditConversionSupported != false)
                target.CreditConversion = source.CreditConversion;

            if (mappingContract?.IsCreditsSupported != false)
                target.Credits = source.Credits;

            if (mappingContract?.IsCreditTypeDescriptorSupported != false)
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredAssessmentMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanRequiredAssessment = new FullName("edfi", "GraduationPlanRequiredAssessment");
    
        public static bool SynchronizeTo(this IGraduationPlanRequiredAssessment source, IGraduationPlanRequiredAssessment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanRequiredAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanRequiredAssessment);


            // Copy non-PK properties

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // GraduationPlanRequiredAssessmentPerformanceLevel (GraduationPlanRequiredAssessmentPerformanceLevel)
            if (mappingContract?.IsGraduationPlanRequiredAssessmentPerformanceLevelSupported != false)
            {
                if (source.GraduationPlanRequiredAssessmentPerformanceLevel == null)
                {
                    if (target.GraduationPlanRequiredAssessmentPerformanceLevel != null)
                    {
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GraduationPlanRequiredAssessmentPerformanceLevel == null)
                    {
                        var itemType = target.GetType().GetProperty("GraduationPlanRequiredAssessmentPerformanceLevel").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = (IGraduationPlanRequiredAssessmentPerformanceLevel) newItem;
                    }

                    isModified |= source.GraduationPlanRequiredAssessmentPerformanceLevel.Synchronize(target.GraduationPlanRequiredAssessmentPerformanceLevel);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (mappingContract?.IsGraduationPlanRequiredAssessmentScoresSupported ?? true)
            {
                isModified |=
                    source.GraduationPlanRequiredAssessmentScores.SynchronizeCollectionTo(
                        target.GraduationPlanRequiredAssessmentScores,
                        onChildAdded: child =>
                            {
                                child.GraduationPlanRequiredAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsGraduationPlanRequiredAssessmentScoreIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanRequiredAssessment source, IGraduationPlanRequiredAssessment target, Action<IGraduationPlanRequiredAssessment, IGraduationPlanRequiredAssessment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanRequiredAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanRequiredAssessment);
    
            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GraduationPlanRequiredAssessmentPerformanceLevel (GraduationPlanRequiredAssessmentPerformanceLevel) (Source)
            if (mappingContract?.IsGraduationPlanRequiredAssessmentPerformanceLevelSupported != false)
            {
                var itemProperty = target.GetType().GetProperty("GraduationPlanRequiredAssessmentPerformanceLevel");

                if (itemProperty != null)
                {
                    if (source.GraduationPlanRequiredAssessmentPerformanceLevel == null)
                    {
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGraduationPlanRequiredAssessmentPerformanceLevel = Activator.CreateInstance(itemType);
                        (targetGraduationPlanRequiredAssessmentPerformanceLevel as IChildEntity)?.SetParent(target);
                        source.GraduationPlanRequiredAssessmentPerformanceLevel.Map(targetGraduationPlanRequiredAssessmentPerformanceLevel);

                        // Update the target reference appropriately
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = (IGraduationPlanRequiredAssessmentPerformanceLevel) targetGraduationPlanRequiredAssessmentPerformanceLevel;
                    }
                }
            }
            // -------------------------------------------------------------

            // Map lists

            if (mappingContract?.IsGraduationPlanRequiredAssessmentScoresSupported != false)
            {
                source.GraduationPlanRequiredAssessmentScores.MapCollectionTo(target.GraduationPlanRequiredAssessmentScores, target, mappingContract?.IsGraduationPlanRequiredAssessmentScoreIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredAssessmentPerformanceLevelMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanRequiredAssessmentPerformanceLevel = new FullName("edfi", "GraduationPlanRequiredAssessmentPerformanceLevel");
    
        public static bool SynchronizeTo(this IGraduationPlanRequiredAssessmentPerformanceLevel source, IGraduationPlanRequiredAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanRequiredAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanRequiredAssessmentPerformanceLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsAssessmentReportingMethodDescriptorSupported != false)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((mappingContract?.IsPerformanceLevelDescriptorSupported != false)
                && target.PerformanceLevelDescriptor != source.PerformanceLevelDescriptor)
            {
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                && target.PerformanceLevelIndicatorName != source.PerformanceLevelIndicatorName)
            {
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanRequiredAssessmentPerformanceLevel source, IGraduationPlanRequiredAssessmentPerformanceLevel target, Action<IGraduationPlanRequiredAssessmentPerformanceLevel, IGraduationPlanRequiredAssessmentPerformanceLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanRequiredAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanRequiredAssessmentPerformanceLevel);
    
            // Copy contextual primary key values

            // Copy non-PK properties

            if (mappingContract?.IsAssessmentReportingMethodDescriptorSupported != false)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            if (mappingContract?.IsPerformanceLevelDescriptorSupported != false)
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            if (mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredAssessmentScoreMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanRequiredAssessmentScore = new FullName("edfi", "GraduationPlanRequiredAssessmentScore");
    
        public static bool SynchronizeTo(this IGraduationPlanRequiredAssessmentScore source, IGraduationPlanRequiredAssessmentScore target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanRequiredAssessmentScoreMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanRequiredAssessmentScore);


            // Copy non-PK properties

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IGraduationPlanRequiredAssessmentScore source, IGraduationPlanRequiredAssessmentScore target, Action<IGraduationPlanRequiredAssessmentScore, IGraduationPlanRequiredAssessmentScore> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanRequiredAssessmentScoreMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanRequiredAssessmentScore);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GraduationPlanTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GraduationPlanTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GraduationPlanTypeDescriptor = new FullName("edfi", "GraduationPlanTypeDescriptor");
    
        public static bool SynchronizeTo(this IGraduationPlanTypeDescriptor source, IGraduationPlanTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GraduationPlanTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GraduationPlanTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGraduationPlanTypeDescriptor source, IGraduationPlanTypeDescriptor target, Action<IGraduationPlanTypeDescriptor, IGraduationPlanTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GraduationPlanTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GraduationPlanTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GraduationPlanTypeDescriptorId = source.GraduationPlanTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: GunFreeSchoolsActReportingStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GunFreeSchoolsActReportingStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GunFreeSchoolsActReportingStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_GunFreeSchoolsActReportingStatusDescriptor = new FullName("edfi", "GunFreeSchoolsActReportingStatusDescriptor");
    
        public static bool SynchronizeTo(this IGunFreeSchoolsActReportingStatusDescriptor source, IGunFreeSchoolsActReportingStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (GunFreeSchoolsActReportingStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GunFreeSchoolsActReportingStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on GunFreeSchoolsActReportingStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IGunFreeSchoolsActReportingStatusDescriptor source, IGunFreeSchoolsActReportingStatusDescriptor target, Action<IGunFreeSchoolsActReportingStatusDescriptor, IGunFreeSchoolsActReportingStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (GunFreeSchoolsActReportingStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_GunFreeSchoolsActReportingStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GunFreeSchoolsActReportingStatusDescriptorId = source.GunFreeSchoolsActReportingStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: HomelessPrimaryNighttimeResidenceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.HomelessPrimaryNighttimeResidenceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class HomelessPrimaryNighttimeResidenceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_HomelessPrimaryNighttimeResidenceDescriptor = new FullName("edfi", "HomelessPrimaryNighttimeResidenceDescriptor");
    
        public static bool SynchronizeTo(this IHomelessPrimaryNighttimeResidenceDescriptor source, IHomelessPrimaryNighttimeResidenceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (HomelessPrimaryNighttimeResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_HomelessPrimaryNighttimeResidenceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on HomelessPrimaryNighttimeResidenceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IHomelessPrimaryNighttimeResidenceDescriptor source, IHomelessPrimaryNighttimeResidenceDescriptor target, Action<IHomelessPrimaryNighttimeResidenceDescriptor, IHomelessPrimaryNighttimeResidenceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (HomelessPrimaryNighttimeResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_HomelessPrimaryNighttimeResidenceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HomelessPrimaryNighttimeResidenceDescriptorId = source.HomelessPrimaryNighttimeResidenceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: HomelessProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.HomelessProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class HomelessProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_HomelessProgramServiceDescriptor = new FullName("edfi", "HomelessProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this IHomelessProgramServiceDescriptor source, IHomelessProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (HomelessProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_HomelessProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on HomelessProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IHomelessProgramServiceDescriptor source, IHomelessProgramServiceDescriptor target, Action<IHomelessProgramServiceDescriptor, IHomelessProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (HomelessProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_HomelessProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HomelessProgramServiceDescriptorId = source.HomelessProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: IDEAPartDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IDEAPartDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class IDEAPartDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_IDEAPartDescriptor = new FullName("edfi", "IDEAPartDescriptor");
    
        public static bool SynchronizeTo(this IIDEAPartDescriptor source, IIDEAPartDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (IDEAPartDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IDEAPartDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on IDEAPartDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IIDEAPartDescriptor source, IIDEAPartDescriptor target, Action<IIDEAPartDescriptor, IIDEAPartDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (IDEAPartDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IDEAPartDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IDEAPartDescriptorId = source.IDEAPartDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: IdentificationDocumentUseDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IdentificationDocumentUseDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class IdentificationDocumentUseDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_IdentificationDocumentUseDescriptor = new FullName("edfi", "IdentificationDocumentUseDescriptor");
    
        public static bool SynchronizeTo(this IIdentificationDocumentUseDescriptor source, IIdentificationDocumentUseDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (IdentificationDocumentUseDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IdentificationDocumentUseDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on IdentificationDocumentUseDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IIdentificationDocumentUseDescriptor source, IIdentificationDocumentUseDescriptor target, Action<IIdentificationDocumentUseDescriptor, IIdentificationDocumentUseDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (IdentificationDocumentUseDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IdentificationDocumentUseDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptorId = source.IdentificationDocumentUseDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: IncidentLocationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IncidentLocationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class IncidentLocationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_IncidentLocationDescriptor = new FullName("edfi", "IncidentLocationDescriptor");
    
        public static bool SynchronizeTo(this IIncidentLocationDescriptor source, IIncidentLocationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (IncidentLocationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IncidentLocationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on IncidentLocationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IIncidentLocationDescriptor source, IIncidentLocationDescriptor target, Action<IIncidentLocationDescriptor, IIncidentLocationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (IncidentLocationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IncidentLocationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentLocationDescriptorId = source.IncidentLocationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: IndicatorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IndicatorDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class IndicatorDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_IndicatorDescriptor = new FullName("edfi", "IndicatorDescriptor");
    
        public static bool SynchronizeTo(this IIndicatorDescriptor source, IIndicatorDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (IndicatorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IndicatorDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on IndicatorDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IIndicatorDescriptor source, IIndicatorDescriptor target, Action<IIndicatorDescriptor, IIndicatorDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (IndicatorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IndicatorDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IndicatorDescriptorId = source.IndicatorDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: IndicatorGroupDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IndicatorGroupDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class IndicatorGroupDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_IndicatorGroupDescriptor = new FullName("edfi", "IndicatorGroupDescriptor");
    
        public static bool SynchronizeTo(this IIndicatorGroupDescriptor source, IIndicatorGroupDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (IndicatorGroupDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IndicatorGroupDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on IndicatorGroupDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IIndicatorGroupDescriptor source, IIndicatorGroupDescriptor target, Action<IIndicatorGroupDescriptor, IIndicatorGroupDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (IndicatorGroupDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IndicatorGroupDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IndicatorGroupDescriptorId = source.IndicatorGroupDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: IndicatorLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IndicatorLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class IndicatorLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_IndicatorLevelDescriptor = new FullName("edfi", "IndicatorLevelDescriptor");
    
        public static bool SynchronizeTo(this IIndicatorLevelDescriptor source, IIndicatorLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (IndicatorLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IndicatorLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on IndicatorLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IIndicatorLevelDescriptor source, IIndicatorLevelDescriptor target, Action<IIndicatorLevelDescriptor, IIndicatorLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (IndicatorLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_IndicatorLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IndicatorLevelDescriptorId = source.IndicatorLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InstitutionTelephoneNumberTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InstitutionTelephoneNumberTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InstitutionTelephoneNumberTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InstitutionTelephoneNumberTypeDescriptor = new FullName("edfi", "InstitutionTelephoneNumberTypeDescriptor");
    
        public static bool SynchronizeTo(this IInstitutionTelephoneNumberTypeDescriptor source, IInstitutionTelephoneNumberTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InstitutionTelephoneNumberTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InstitutionTelephoneNumberTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InstitutionTelephoneNumberTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInstitutionTelephoneNumberTypeDescriptor source, IInstitutionTelephoneNumberTypeDescriptor target, Action<IInstitutionTelephoneNumberTypeDescriptor, IInstitutionTelephoneNumberTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InstitutionTelephoneNumberTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InstitutionTelephoneNumberTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InstitutionTelephoneNumberTypeDescriptorId = source.InstitutionTelephoneNumberTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InteractivityStyleDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InteractivityStyleDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InteractivityStyleDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InteractivityStyleDescriptor = new FullName("edfi", "InteractivityStyleDescriptor");
    
        public static bool SynchronizeTo(this IInteractivityStyleDescriptor source, IInteractivityStyleDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InteractivityStyleDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InteractivityStyleDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InteractivityStyleDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInteractivityStyleDescriptor source, IInteractivityStyleDescriptor target, Action<IInteractivityStyleDescriptor, IInteractivityStyleDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InteractivityStyleDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InteractivityStyleDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InteractivityStyleDescriptorId = source.InteractivityStyleDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InternetAccessDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InternetAccessDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InternetAccessDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InternetAccessDescriptor = new FullName("edfi", "InternetAccessDescriptor");
    
        public static bool SynchronizeTo(this IInternetAccessDescriptor source, IInternetAccessDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InternetAccessDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InternetAccessDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InternetAccessDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInternetAccessDescriptor source, IInternetAccessDescriptor target, Action<IInternetAccessDescriptor, IInternetAccessDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InternetAccessDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InternetAccessDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InternetAccessDescriptorId = source.InternetAccessDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InternetAccessTypeInResidenceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InternetAccessTypeInResidenceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InternetAccessTypeInResidenceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InternetAccessTypeInResidenceDescriptor = new FullName("edfi", "InternetAccessTypeInResidenceDescriptor");
    
        public static bool SynchronizeTo(this IInternetAccessTypeInResidenceDescriptor source, IInternetAccessTypeInResidenceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InternetAccessTypeInResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InternetAccessTypeInResidenceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InternetAccessTypeInResidenceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInternetAccessTypeInResidenceDescriptor source, IInternetAccessTypeInResidenceDescriptor target, Action<IInternetAccessTypeInResidenceDescriptor, IInternetAccessTypeInResidenceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InternetAccessTypeInResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InternetAccessTypeInResidenceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InternetAccessTypeInResidenceDescriptorId = source.InternetAccessTypeInResidenceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InternetPerformanceInResidenceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InternetPerformanceInResidenceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InternetPerformanceInResidenceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InternetPerformanceInResidenceDescriptor = new FullName("edfi", "InternetPerformanceInResidenceDescriptor");
    
        public static bool SynchronizeTo(this IInternetPerformanceInResidenceDescriptor source, IInternetPerformanceInResidenceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InternetPerformanceInResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InternetPerformanceInResidenceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InternetPerformanceInResidenceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInternetPerformanceInResidenceDescriptor source, IInternetPerformanceInResidenceDescriptor target, Action<IInternetPerformanceInResidenceDescriptor, IInternetPerformanceInResidenceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InternetPerformanceInResidenceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InternetPerformanceInResidenceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InternetPerformanceInResidenceDescriptorId = source.InternetPerformanceInResidenceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Intervention

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InterventionMapper
    {
        private static readonly FullName _fullName_edfi_Intervention = new FullName("edfi", "Intervention");
    
        public static bool SynchronizeTo(this IIntervention source, IIntervention target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Intervention);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.InterventionIdentificationCode, source.InterventionIdentificationCode)))
            {
                // Disallow PK column updates on Intervention
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsDeliveryMethodDescriptorSupported != false)
                && target.DeliveryMethodDescriptor != source.DeliveryMethodDescriptor)
            {
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionClassDescriptorSupported != false)
                && target.InterventionClassDescriptor != source.InterventionClassDescriptor)
            {
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsMaxDosageSupported != false)
                && target.MaxDosage != source.MaxDosage)
            {
                target.MaxDosage = source.MaxDosage;
                isModified = true;
            }

            if ((mappingContract?.IsMinDosageSupported != false)
                && target.MinDosage != source.MinDosage)
            {
                target.MinDosage = source.MinDosage;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsInterventionAppropriateGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.InterventionAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.InterventionAppropriateGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionAppropriateGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionAppropriateSexesSupported ?? true)
            {
                isModified |=
                    source.InterventionAppropriateSexes.SynchronizeCollectionTo(
                        target.InterventionAppropriateSexes,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionAppropriateSexIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionDiagnosesSupported ?? true)
            {
                isModified |=
                    source.InterventionDiagnoses.SynchronizeCollectionTo(
                        target.InterventionDiagnoses,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionDiagnosisIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionEducationContentsSupported ?? true)
            {
                isModified |=
                    source.InterventionEducationContents.SynchronizeCollectionTo(
                        target.InterventionEducationContents,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionEducationContentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionInterventionPrescriptionsSupported ?? true)
            {
                isModified |=
                    source.InterventionInterventionPrescriptions.SynchronizeCollectionTo(
                        target.InterventionInterventionPrescriptions,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionInterventionPrescriptionIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionLearningResourceMetadataURIsSupported ?? true)
            {
                isModified |=
                    source.InterventionLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.InterventionLearningResourceMetadataURIs,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionLearningResourceMetadataURIIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionMeetingTimesSupported ?? true)
            {
                isModified |=
                    source.InterventionMeetingTimes.SynchronizeCollectionTo(
                        target.InterventionMeetingTimes,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionMeetingTimeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPopulationServedsSupported ?? true)
            {
                isModified |=
                    source.InterventionPopulationServeds.SynchronizeCollectionTo(
                        target.InterventionPopulationServeds,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPopulationServedIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStaffsSupported ?? true)
            {
                isModified |=
                    source.InterventionStaffs.SynchronizeCollectionTo(
                        target.InterventionStaffs,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStaffIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionURIsSupported ?? true)
            {
                isModified |=
                    source.InterventionURIs.SynchronizeCollectionTo(
                        target.InterventionURIs,
                        onChildAdded: child =>
                            {
                                child.Intervention = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionURIIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IIntervention source, IIntervention target, Action<IIntervention, IIntervention> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Intervention);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionIdentificationCode = source.InterventionIdentificationCode;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsDeliveryMethodDescriptorSupported != false)
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsInterventionClassDescriptorSupported != false)
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;

            if (mappingContract?.IsMaxDosageSupported != false)
                target.MaxDosage = source.MaxDosage;

            if (mappingContract?.IsMinDosageSupported != false)
                target.MinDosage = source.MinDosage;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsInterventionAppropriateGradeLevelsSupported != false)
            {
                source.InterventionAppropriateGradeLevels.MapCollectionTo(target.InterventionAppropriateGradeLevels, target, mappingContract?.IsInterventionAppropriateGradeLevelIncluded);
            }

            if (mappingContract?.IsInterventionAppropriateSexesSupported != false)
            {
                source.InterventionAppropriateSexes.MapCollectionTo(target.InterventionAppropriateSexes, target, mappingContract?.IsInterventionAppropriateSexIncluded);
            }

            if (mappingContract?.IsInterventionDiagnosesSupported != false)
            {
                source.InterventionDiagnoses.MapCollectionTo(target.InterventionDiagnoses, target, mappingContract?.IsInterventionDiagnosisIncluded);
            }

            if (mappingContract?.IsInterventionEducationContentsSupported != false)
            {
                source.InterventionEducationContents.MapCollectionTo(target.InterventionEducationContents, target, mappingContract?.IsInterventionEducationContentIncluded);
            }

            if (mappingContract?.IsInterventionInterventionPrescriptionsSupported != false)
            {
                source.InterventionInterventionPrescriptions.MapCollectionTo(target.InterventionInterventionPrescriptions, target, mappingContract?.IsInterventionInterventionPrescriptionIncluded);
            }

            if (mappingContract?.IsInterventionLearningResourceMetadataURIsSupported != false)
            {
                source.InterventionLearningResourceMetadataURIs.MapCollectionTo(target.InterventionLearningResourceMetadataURIs, target, mappingContract?.IsInterventionLearningResourceMetadataURIIncluded);
            }

            if (mappingContract?.IsInterventionMeetingTimesSupported != false)
            {
                source.InterventionMeetingTimes.MapCollectionTo(target.InterventionMeetingTimes, target, mappingContract?.IsInterventionMeetingTimeIncluded);
            }

            if (mappingContract?.IsInterventionPopulationServedsSupported != false)
            {
                source.InterventionPopulationServeds.MapCollectionTo(target.InterventionPopulationServeds, target, mappingContract?.IsInterventionPopulationServedIncluded);
            }

            if (mappingContract?.IsInterventionStaffsSupported != false)
            {
                source.InterventionStaffs.MapCollectionTo(target.InterventionStaffs, target, mappingContract?.IsInterventionStaffIncluded);
            }

            if (mappingContract?.IsInterventionURIsSupported != false)
            {
                source.InterventionURIs.MapCollectionTo(target.InterventionURIs, target, mappingContract?.IsInterventionURIIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionAppropriateGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_InterventionAppropriateGradeLevel = new FullName("edfi", "InterventionAppropriateGradeLevel");
    
        public static bool SynchronizeTo(this IInterventionAppropriateGradeLevel source, IInterventionAppropriateGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionAppropriateGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionAppropriateGradeLevel source, IInterventionAppropriateGradeLevel target, Action<IInterventionAppropriateGradeLevel, IInterventionAppropriateGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionAppropriateGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionAppropriateSexMapper
    {
        private static readonly FullName _fullName_edfi_InterventionAppropriateSex = new FullName("edfi", "InterventionAppropriateSex");
    
        public static bool SynchronizeTo(this IInterventionAppropriateSex source, IInterventionAppropriateSex target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionAppropriateSex);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionAppropriateSex source, IInterventionAppropriateSex target, Action<IInterventionAppropriateSex, IInterventionAppropriateSex> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionAppropriateSex);
    
            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionDiagnosisMapper
    {
        private static readonly FullName _fullName_edfi_InterventionDiagnosis = new FullName("edfi", "InterventionDiagnosis");
    
        public static bool SynchronizeTo(this IInterventionDiagnosis source, IInterventionDiagnosis target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionDiagnosisMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionDiagnosis);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionDiagnosis source, IInterventionDiagnosis target, Action<IInterventionDiagnosis, IInterventionDiagnosis> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionDiagnosisMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionDiagnosis);
    
            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionEducationContentMapper
    {
        private static readonly FullName _fullName_edfi_InterventionEducationContent = new FullName("edfi", "InterventionEducationContent");
    
        public static bool SynchronizeTo(this IInterventionEducationContent source, IInterventionEducationContent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionEducationContent);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionEducationContent source, IInterventionEducationContent target, Action<IInterventionEducationContent, IInterventionEducationContent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionEducationContent);
    
            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationContentResourceId = source.EducationContentResourceId;
                target.EducationContentDiscriminator = source.EducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionInterventionPrescriptionMapper
    {
        private static readonly FullName _fullName_edfi_InterventionInterventionPrescription = new FullName("edfi", "InterventionInterventionPrescription");
    
        public static bool SynchronizeTo(this IInterventionInterventionPrescription source, IInterventionInterventionPrescription target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionInterventionPrescriptionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionInterventionPrescription);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionInterventionPrescription source, IInterventionInterventionPrescription target, Action<IInterventionInterventionPrescription, IInterventionInterventionPrescription> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionInterventionPrescriptionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionInterventionPrescription);
    
            // Copy contextual primary key values
            target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
            target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.InterventionPrescriptionResourceId = source.InterventionPrescriptionResourceId;
                target.InterventionPrescriptionDiscriminator = source.InterventionPrescriptionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionLearningResourceMetadataURIMapper
    {
        private static readonly FullName _fullName_edfi_InterventionLearningResourceMetadataURI = new FullName("edfi", "InterventionLearningResourceMetadataURI");
    
        public static bool SynchronizeTo(this IInterventionLearningResourceMetadataURI source, IInterventionLearningResourceMetadataURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionLearningResourceMetadataURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionLearningResourceMetadataURI source, IInterventionLearningResourceMetadataURI target, Action<IInterventionLearningResourceMetadataURI, IInterventionLearningResourceMetadataURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionLearningResourceMetadataURI);
    
            // Copy contextual primary key values
            target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionMeetingTimeMapper
    {
        private static readonly FullName _fullName_edfi_InterventionMeetingTime = new FullName("edfi", "InterventionMeetingTime");
    
        public static bool SynchronizeTo(this IInterventionMeetingTime source, IInterventionMeetingTime target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionMeetingTimeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionMeetingTime);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionMeetingTime source, IInterventionMeetingTime target, Action<IInterventionMeetingTime, IInterventionMeetingTime> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionMeetingTimeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionMeetingTime);
    
            // Copy contextual primary key values
            target.EndTime = source.EndTime;
            target.StartTime = source.StartTime;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPopulationServedMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPopulationServed = new FullName("edfi", "InterventionPopulationServed");
    
        public static bool SynchronizeTo(this IInterventionPopulationServed source, IInterventionPopulationServed target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPopulationServedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPopulationServed);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPopulationServed source, IInterventionPopulationServed target, Action<IInterventionPopulationServed, IInterventionPopulationServed> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPopulationServedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPopulationServed);
    
            // Copy contextual primary key values
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStaffMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStaff = new FullName("edfi", "InterventionStaff");
    
        public static bool SynchronizeTo(this IInterventionStaff source, IInterventionStaff target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStaff);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStaff source, IInterventionStaff target, Action<IInterventionStaff, IInterventionStaff> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStaff);
    
            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionURIMapper
    {
        private static readonly FullName _fullName_edfi_InterventionURI = new FullName("edfi", "InterventionURI");
    
        public static bool SynchronizeTo(this IInterventionURI source, IInterventionURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionURI source, IInterventionURI target, Action<IInterventionURI, IInterventionURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionURI);
    
            // Copy contextual primary key values
            target.URI = source.URI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InterventionClassDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionClassDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InterventionClassDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InterventionClassDescriptor = new FullName("edfi", "InterventionClassDescriptor");
    
        public static bool SynchronizeTo(this IInterventionClassDescriptor source, IInterventionClassDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionClassDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionClassDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InterventionClassDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInterventionClassDescriptor source, IInterventionClassDescriptor target, Action<IInterventionClassDescriptor, IInterventionClassDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionClassDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionClassDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InterventionClassDescriptorId = source.InterventionClassDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InterventionEffectivenessRatingDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionEffectivenessRatingDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InterventionEffectivenessRatingDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_InterventionEffectivenessRatingDescriptor = new FullName("edfi", "InterventionEffectivenessRatingDescriptor");
    
        public static bool SynchronizeTo(this IInterventionEffectivenessRatingDescriptor source, IInterventionEffectivenessRatingDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionEffectivenessRatingDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionEffectivenessRatingDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on InterventionEffectivenessRatingDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IInterventionEffectivenessRatingDescriptor source, IInterventionEffectivenessRatingDescriptor target, Action<IInterventionEffectivenessRatingDescriptor, IInterventionEffectivenessRatingDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionEffectivenessRatingDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionEffectivenessRatingDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InterventionEffectivenessRatingDescriptorId = source.InterventionEffectivenessRatingDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InterventionPrescription

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionPrescriptionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescription = new FullName("edfi", "InterventionPrescription");
    
        public static bool SynchronizeTo(this IInterventionPrescription source, IInterventionPrescription target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescription);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.InterventionPrescriptionIdentificationCode, source.InterventionPrescriptionIdentificationCode)))
            {
                // Disallow PK column updates on InterventionPrescription
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsDeliveryMethodDescriptorSupported != false)
                && target.DeliveryMethodDescriptor != source.DeliveryMethodDescriptor)
            {
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionClassDescriptorSupported != false)
                && target.InterventionClassDescriptor != source.InterventionClassDescriptor)
            {
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsMaxDosageSupported != false)
                && target.MaxDosage != source.MaxDosage)
            {
                target.MaxDosage = source.MaxDosage;
                isModified = true;
            }

            if ((mappingContract?.IsMinDosageSupported != false)
                && target.MinDosage != source.MinDosage)
            {
                target.MinDosage = source.MinDosage;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsInterventionPrescriptionAppropriateGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.InterventionPrescriptionAppropriateGradeLevels,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionAppropriateGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPrescriptionAppropriateSexesSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionAppropriateSexes.SynchronizeCollectionTo(
                        target.InterventionPrescriptionAppropriateSexes,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionAppropriateSexIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPrescriptionDiagnosesSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionDiagnoses.SynchronizeCollectionTo(
                        target.InterventionPrescriptionDiagnoses,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionDiagnosisIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPrescriptionEducationContentsSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionEducationContents.SynchronizeCollectionTo(
                        target.InterventionPrescriptionEducationContents,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionEducationContentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPrescriptionLearningResourceMetadataURIsSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.InterventionPrescriptionLearningResourceMetadataURIs,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionLearningResourceMetadataURIIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPrescriptionPopulationServedsSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionPopulationServeds.SynchronizeCollectionTo(
                        target.InterventionPrescriptionPopulationServeds,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionPopulationServedIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionPrescriptionURIsSupported ?? true)
            {
                isModified |=
                    source.InterventionPrescriptionURIs.SynchronizeCollectionTo(
                        target.InterventionPrescriptionURIs,
                        onChildAdded: child =>
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionPrescriptionURIIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescription source, IInterventionPrescription target, Action<IInterventionPrescription, IInterventionPrescription> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescription);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            // Copy non-PK properties

            if (mappingContract?.IsDeliveryMethodDescriptorSupported != false)
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;

            if (mappingContract?.IsInterventionClassDescriptorSupported != false)
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;

            if (mappingContract?.IsMaxDosageSupported != false)
                target.MaxDosage = source.MaxDosage;

            if (mappingContract?.IsMinDosageSupported != false)
                target.MinDosage = source.MinDosage;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsInterventionPrescriptionAppropriateGradeLevelsSupported != false)
            {
                source.InterventionPrescriptionAppropriateGradeLevels.MapCollectionTo(target.InterventionPrescriptionAppropriateGradeLevels, target, mappingContract?.IsInterventionPrescriptionAppropriateGradeLevelIncluded);
            }

            if (mappingContract?.IsInterventionPrescriptionAppropriateSexesSupported != false)
            {
                source.InterventionPrescriptionAppropriateSexes.MapCollectionTo(target.InterventionPrescriptionAppropriateSexes, target, mappingContract?.IsInterventionPrescriptionAppropriateSexIncluded);
            }

            if (mappingContract?.IsInterventionPrescriptionDiagnosesSupported != false)
            {
                source.InterventionPrescriptionDiagnoses.MapCollectionTo(target.InterventionPrescriptionDiagnoses, target, mappingContract?.IsInterventionPrescriptionDiagnosisIncluded);
            }

            if (mappingContract?.IsInterventionPrescriptionEducationContentsSupported != false)
            {
                source.InterventionPrescriptionEducationContents.MapCollectionTo(target.InterventionPrescriptionEducationContents, target, mappingContract?.IsInterventionPrescriptionEducationContentIncluded);
            }

            if (mappingContract?.IsInterventionPrescriptionLearningResourceMetadataURIsSupported != false)
            {
                source.InterventionPrescriptionLearningResourceMetadataURIs.MapCollectionTo(target.InterventionPrescriptionLearningResourceMetadataURIs, target, mappingContract?.IsInterventionPrescriptionLearningResourceMetadataURIIncluded);
            }

            if (mappingContract?.IsInterventionPrescriptionPopulationServedsSupported != false)
            {
                source.InterventionPrescriptionPopulationServeds.MapCollectionTo(target.InterventionPrescriptionPopulationServeds, target, mappingContract?.IsInterventionPrescriptionPopulationServedIncluded);
            }

            if (mappingContract?.IsInterventionPrescriptionURIsSupported != false)
            {
                source.InterventionPrescriptionURIs.MapCollectionTo(target.InterventionPrescriptionURIs, target, mappingContract?.IsInterventionPrescriptionURIIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionAppropriateGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionAppropriateGradeLevel = new FullName("edfi", "InterventionPrescriptionAppropriateGradeLevel");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionAppropriateGradeLevel source, IInterventionPrescriptionAppropriateGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionAppropriateGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionAppropriateGradeLevel source, IInterventionPrescriptionAppropriateGradeLevel target, Action<IInterventionPrescriptionAppropriateGradeLevel, IInterventionPrescriptionAppropriateGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionAppropriateGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionAppropriateSexMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionAppropriateSex = new FullName("edfi", "InterventionPrescriptionAppropriateSex");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionAppropriateSex source, IInterventionPrescriptionAppropriateSex target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionAppropriateSex);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionAppropriateSex source, IInterventionPrescriptionAppropriateSex target, Action<IInterventionPrescriptionAppropriateSex, IInterventionPrescriptionAppropriateSex> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionAppropriateSex);
    
            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionDiagnosisMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionDiagnosis = new FullName("edfi", "InterventionPrescriptionDiagnosis");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionDiagnosis source, IInterventionPrescriptionDiagnosis target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionDiagnosisMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionDiagnosis);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionDiagnosis source, IInterventionPrescriptionDiagnosis target, Action<IInterventionPrescriptionDiagnosis, IInterventionPrescriptionDiagnosis> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionDiagnosisMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionDiagnosis);
    
            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionEducationContentMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionEducationContent = new FullName("edfi", "InterventionPrescriptionEducationContent");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionEducationContent source, IInterventionPrescriptionEducationContent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionEducationContent);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionEducationContent source, IInterventionPrescriptionEducationContent target, Action<IInterventionPrescriptionEducationContent, IInterventionPrescriptionEducationContent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionEducationContent);
    
            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationContentResourceId = source.EducationContentResourceId;
                target.EducationContentDiscriminator = source.EducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionLearningResourceMetadataURIMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionLearningResourceMetadataURI = new FullName("edfi", "InterventionPrescriptionLearningResourceMetadataURI");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionLearningResourceMetadataURI source, IInterventionPrescriptionLearningResourceMetadataURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionLearningResourceMetadataURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionLearningResourceMetadataURI source, IInterventionPrescriptionLearningResourceMetadataURI target, Action<IInterventionPrescriptionLearningResourceMetadataURI, IInterventionPrescriptionLearningResourceMetadataURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionLearningResourceMetadataURI);
    
            // Copy contextual primary key values
            target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionPopulationServedMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionPopulationServed = new FullName("edfi", "InterventionPrescriptionPopulationServed");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionPopulationServed source, IInterventionPrescriptionPopulationServed target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionPopulationServedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionPopulationServed);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionPopulationServed source, IInterventionPrescriptionPopulationServed target, Action<IInterventionPrescriptionPopulationServed, IInterventionPrescriptionPopulationServed> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionPopulationServedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionPopulationServed);
    
            // Copy contextual primary key values
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionURIMapper
    {
        private static readonly FullName _fullName_edfi_InterventionPrescriptionURI = new FullName("edfi", "InterventionPrescriptionURI");
    
        public static bool SynchronizeTo(this IInterventionPrescriptionURI source, IInterventionPrescriptionURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionPrescriptionURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionPrescriptionURI source, IInterventionPrescriptionURI target, Action<IInterventionPrescriptionURI, IInterventionPrescriptionURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionPrescriptionURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionPrescriptionURI);
    
            // Copy contextual primary key values
            target.URI = source.URI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: InterventionStudy

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionStudyAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudy = new FullName("edfi", "InterventionStudy");
    
        public static bool SynchronizeTo(this IInterventionStudy source, IInterventionStudy target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudy);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.InterventionStudyIdentificationCode, source.InterventionStudyIdentificationCode)))
            {
                // Disallow PK column updates on InterventionStudy
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsDeliveryMethodDescriptorSupported != false)
                && target.DeliveryMethodDescriptor != source.DeliveryMethodDescriptor)
            {
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionClassDescriptorSupported != false)
                && target.InterventionClassDescriptor != source.InterventionClassDescriptor)
            {
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionPrescriptionEducationOrganizationIdSupported != false)
                && target.InterventionPrescriptionEducationOrganizationId != source.InterventionPrescriptionEducationOrganizationId)
            {
                target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionPrescriptionIdentificationCodeSupported != false)
                && target.InterventionPrescriptionIdentificationCode != source.InterventionPrescriptionIdentificationCode)
            {
                target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsParticipantsSupported != false)
                && target.Participants != source.Participants)
            {
                target.Participants = source.Participants;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsInterventionStudyAppropriateGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.InterventionStudyAppropriateGradeLevels,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyAppropriateGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyAppropriateSexesSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyAppropriateSexes.SynchronizeCollectionTo(
                        target.InterventionStudyAppropriateSexes,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyAppropriateSexIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyEducationContentsSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyEducationContents.SynchronizeCollectionTo(
                        target.InterventionStudyEducationContents,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyEducationContentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyInterventionEffectivenessesSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyInterventionEffectivenesses.SynchronizeCollectionTo(
                        target.InterventionStudyInterventionEffectivenesses,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyInterventionEffectivenessIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyLearningResourceMetadataURIsSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.InterventionStudyLearningResourceMetadataURIs,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyLearningResourceMetadataURIIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyPopulationServedsSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyPopulationServeds.SynchronizeCollectionTo(
                        target.InterventionStudyPopulationServeds,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyPopulationServedIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyStateAbbreviationsSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyStateAbbreviations.SynchronizeCollectionTo(
                        target.InterventionStudyStateAbbreviations,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyStateAbbreviationIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsInterventionStudyURIsSupported ?? true)
            {
                isModified |=
                    source.InterventionStudyURIs.SynchronizeCollectionTo(
                        target.InterventionStudyURIs,
                        onChildAdded: child =>
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: item => mappingContract?.IsInterventionStudyURIIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudy source, IInterventionStudy target, Action<IInterventionStudy, IInterventionStudy> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudy);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionStudyIdentificationCode = source.InterventionStudyIdentificationCode;

            // Copy non-PK properties

            if (mappingContract?.IsDeliveryMethodDescriptorSupported != false)
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;

            if (mappingContract?.IsInterventionClassDescriptorSupported != false)
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;

            if (mappingContract?.IsInterventionPrescriptionEducationOrganizationIdSupported != false)
                target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;

            if (mappingContract?.IsInterventionPrescriptionIdentificationCodeSupported != false)
                target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            if (mappingContract?.IsParticipantsSupported != false)
                target.Participants = source.Participants;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.InterventionPrescriptionResourceId = source.InterventionPrescriptionResourceId;
                target.InterventionPrescriptionDiscriminator = source.InterventionPrescriptionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsInterventionStudyAppropriateGradeLevelsSupported != false)
            {
                source.InterventionStudyAppropriateGradeLevels.MapCollectionTo(target.InterventionStudyAppropriateGradeLevels, target, mappingContract?.IsInterventionStudyAppropriateGradeLevelIncluded);
            }

            if (mappingContract?.IsInterventionStudyAppropriateSexesSupported != false)
            {
                source.InterventionStudyAppropriateSexes.MapCollectionTo(target.InterventionStudyAppropriateSexes, target, mappingContract?.IsInterventionStudyAppropriateSexIncluded);
            }

            if (mappingContract?.IsInterventionStudyEducationContentsSupported != false)
            {
                source.InterventionStudyEducationContents.MapCollectionTo(target.InterventionStudyEducationContents, target, mappingContract?.IsInterventionStudyEducationContentIncluded);
            }

            if (mappingContract?.IsInterventionStudyInterventionEffectivenessesSupported != false)
            {
                source.InterventionStudyInterventionEffectivenesses.MapCollectionTo(target.InterventionStudyInterventionEffectivenesses, target, mappingContract?.IsInterventionStudyInterventionEffectivenessIncluded);
            }

            if (mappingContract?.IsInterventionStudyLearningResourceMetadataURIsSupported != false)
            {
                source.InterventionStudyLearningResourceMetadataURIs.MapCollectionTo(target.InterventionStudyLearningResourceMetadataURIs, target, mappingContract?.IsInterventionStudyLearningResourceMetadataURIIncluded);
            }

            if (mappingContract?.IsInterventionStudyPopulationServedsSupported != false)
            {
                source.InterventionStudyPopulationServeds.MapCollectionTo(target.InterventionStudyPopulationServeds, target, mappingContract?.IsInterventionStudyPopulationServedIncluded);
            }

            if (mappingContract?.IsInterventionStudyStateAbbreviationsSupported != false)
            {
                source.InterventionStudyStateAbbreviations.MapCollectionTo(target.InterventionStudyStateAbbreviations, target, mappingContract?.IsInterventionStudyStateAbbreviationIncluded);
            }

            if (mappingContract?.IsInterventionStudyURIsSupported != false)
            {
                source.InterventionStudyURIs.MapCollectionTo(target.InterventionStudyURIs, target, mappingContract?.IsInterventionStudyURIIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyAppropriateGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyAppropriateGradeLevel = new FullName("edfi", "InterventionStudyAppropriateGradeLevel");
    
        public static bool SynchronizeTo(this IInterventionStudyAppropriateGradeLevel source, IInterventionStudyAppropriateGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyAppropriateGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyAppropriateGradeLevel source, IInterventionStudyAppropriateGradeLevel target, Action<IInterventionStudyAppropriateGradeLevel, IInterventionStudyAppropriateGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyAppropriateGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyAppropriateGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyAppropriateSexMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyAppropriateSex = new FullName("edfi", "InterventionStudyAppropriateSex");
    
        public static bool SynchronizeTo(this IInterventionStudyAppropriateSex source, IInterventionStudyAppropriateSex target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyAppropriateSex);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyAppropriateSex source, IInterventionStudyAppropriateSex target, Action<IInterventionStudyAppropriateSex, IInterventionStudyAppropriateSex> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyAppropriateSexMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyAppropriateSex);
    
            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyEducationContentMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyEducationContent = new FullName("edfi", "InterventionStudyEducationContent");
    
        public static bool SynchronizeTo(this IInterventionStudyEducationContent source, IInterventionStudyEducationContent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyEducationContent);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyEducationContent source, IInterventionStudyEducationContent target, Action<IInterventionStudyEducationContent, IInterventionStudyEducationContent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyEducationContentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyEducationContent);
    
            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationContentResourceId = source.EducationContentResourceId;
                target.EducationContentDiscriminator = source.EducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyInterventionEffectivenessMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyInterventionEffectiveness = new FullName("edfi", "InterventionStudyInterventionEffectiveness");
    
        public static bool SynchronizeTo(this IInterventionStudyInterventionEffectiveness source, IInterventionStudyInterventionEffectiveness target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyInterventionEffectivenessMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyInterventionEffectiveness);


            // Copy non-PK properties

            if ((mappingContract?.IsImprovementIndexSupported != false)
                && target.ImprovementIndex != source.ImprovementIndex)
            {
                target.ImprovementIndex = source.ImprovementIndex;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionEffectivenessRatingDescriptorSupported != false)
                && target.InterventionEffectivenessRatingDescriptor != source.InterventionEffectivenessRatingDescriptor)
            {
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyInterventionEffectiveness source, IInterventionStudyInterventionEffectiveness target, Action<IInterventionStudyInterventionEffectiveness, IInterventionStudyInterventionEffectiveness> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyInterventionEffectivenessMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyInterventionEffectiveness);
    
            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsImprovementIndexSupported != false)
                target.ImprovementIndex = source.ImprovementIndex;

            if (mappingContract?.IsInterventionEffectivenessRatingDescriptorSupported != false)
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyLearningResourceMetadataURIMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyLearningResourceMetadataURI = new FullName("edfi", "InterventionStudyLearningResourceMetadataURI");
    
        public static bool SynchronizeTo(this IInterventionStudyLearningResourceMetadataURI source, IInterventionStudyLearningResourceMetadataURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyLearningResourceMetadataURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyLearningResourceMetadataURI source, IInterventionStudyLearningResourceMetadataURI target, Action<IInterventionStudyLearningResourceMetadataURI, IInterventionStudyLearningResourceMetadataURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyLearningResourceMetadataURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyLearningResourceMetadataURI);
    
            // Copy contextual primary key values
            target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyPopulationServedMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyPopulationServed = new FullName("edfi", "InterventionStudyPopulationServed");
    
        public static bool SynchronizeTo(this IInterventionStudyPopulationServed source, IInterventionStudyPopulationServed target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyPopulationServedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyPopulationServed);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyPopulationServed source, IInterventionStudyPopulationServed target, Action<IInterventionStudyPopulationServed, IInterventionStudyPopulationServed> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyPopulationServedMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyPopulationServed);
    
            // Copy contextual primary key values
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyStateAbbreviationMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyStateAbbreviation = new FullName("edfi", "InterventionStudyStateAbbreviation");
    
        public static bool SynchronizeTo(this IInterventionStudyStateAbbreviation source, IInterventionStudyStateAbbreviation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyStateAbbreviationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyStateAbbreviation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyStateAbbreviation source, IInterventionStudyStateAbbreviation target, Action<IInterventionStudyStateAbbreviation, IInterventionStudyStateAbbreviation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyStateAbbreviationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyStateAbbreviation);
    
            // Copy contextual primary key values
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class InterventionStudyURIMapper
    {
        private static readonly FullName _fullName_edfi_InterventionStudyURI = new FullName("edfi", "InterventionStudyURI");
    
        public static bool SynchronizeTo(this IInterventionStudyURI source, IInterventionStudyURI target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (InterventionStudyURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyURI);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IInterventionStudyURI source, IInterventionStudyURI target, Action<IInterventionStudyURI, IInterventionStudyURI> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (InterventionStudyURIMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_InterventionStudyURI);
    
            // Copy contextual primary key values
            target.URI = source.URI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LanguageDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LanguageDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LanguageDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LanguageDescriptor = new FullName("edfi", "LanguageDescriptor");
    
        public static bool SynchronizeTo(this ILanguageDescriptor source, ILanguageDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LanguageDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LanguageDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LanguageDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILanguageDescriptor source, ILanguageDescriptor target, Action<ILanguageDescriptor, ILanguageDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LanguageDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LanguageDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LanguageDescriptorId = source.LanguageDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LanguageInstructionProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LanguageInstructionProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LanguageInstructionProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LanguageInstructionProgramServiceDescriptor = new FullName("edfi", "LanguageInstructionProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this ILanguageInstructionProgramServiceDescriptor source, ILanguageInstructionProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LanguageInstructionProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LanguageInstructionProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LanguageInstructionProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILanguageInstructionProgramServiceDescriptor source, ILanguageInstructionProgramServiceDescriptor target, Action<ILanguageInstructionProgramServiceDescriptor, ILanguageInstructionProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LanguageInstructionProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LanguageInstructionProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LanguageInstructionProgramServiceDescriptorId = source.LanguageInstructionProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LanguageUseDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LanguageUseDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LanguageUseDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LanguageUseDescriptor = new FullName("edfi", "LanguageUseDescriptor");
    
        public static bool SynchronizeTo(this ILanguageUseDescriptor source, ILanguageUseDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LanguageUseDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LanguageUseDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LanguageUseDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILanguageUseDescriptor source, ILanguageUseDescriptor target, Action<ILanguageUseDescriptor, ILanguageUseDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LanguageUseDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LanguageUseDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LanguageUseDescriptorId = source.LanguageUseDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LearningStandard

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandard = new FullName("edfi", "LearningStandard");
    
        public static bool SynchronizeTo(this ILearningStandard source, ILearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandard);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.LearningStandardId, source.LearningStandardId)))
            {
                // Disallow PK column updates on LearningStandard
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCourseTitleSupported != false)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsLearningStandardCategoryDescriptorSupported != false)
                && target.LearningStandardCategoryDescriptor != source.LearningStandardCategoryDescriptor)
            {
                target.LearningStandardCategoryDescriptor = source.LearningStandardCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLearningStandardItemCodeSupported != false)
                && target.LearningStandardItemCode != source.LearningStandardItemCode)
            {
                target.LearningStandardItemCode = source.LearningStandardItemCode;
                isModified = true;
            }

            if ((mappingContract?.IsLearningStandardScopeDescriptorSupported != false)
                && target.LearningStandardScopeDescriptor != source.LearningStandardScopeDescriptor)
            {
                target.LearningStandardScopeDescriptor = source.LearningStandardScopeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsParentLearningStandardIdSupported != false)
                && target.ParentLearningStandardId != source.ParentLearningStandardId)
            {
                target.ParentLearningStandardId = source.ParentLearningStandardId;
                isModified = true;
            }

            if ((mappingContract?.IsSuccessCriteriaSupported != false)
                && target.SuccessCriteria != source.SuccessCriteria)
            {
                target.SuccessCriteria = source.SuccessCriteria;
                isModified = true;
            }

            if ((mappingContract?.IsURISupported != false)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // LearningStandardContentStandard (LearningStandardContentStandard)
            if (mappingContract?.IsLearningStandardContentStandardSupported != false)
            {
                if (source.LearningStandardContentStandard == null)
                {
                    if (target.LearningStandardContentStandard != null)
                    {
                        target.LearningStandardContentStandard = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.LearningStandardContentStandard == null)
                    {
                        var itemType = target.GetType().GetProperty("LearningStandardContentStandard").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.LearningStandardContentStandard = (ILearningStandardContentStandard) newItem;
                    }

                    isModified |= source.LearningStandardContentStandard.Synchronize(target.LearningStandardContentStandard);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (mappingContract?.IsLearningStandardAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.LearningStandardAcademicSubjects.SynchronizeCollectionTo(
                        target.LearningStandardAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: item => mappingContract?.IsLearningStandardAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsLearningStandardGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.LearningStandardGradeLevels.SynchronizeCollectionTo(
                        target.LearningStandardGradeLevels,
                        onChildAdded: child =>
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: item => mappingContract?.IsLearningStandardGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsLearningStandardIdentificationCodesSupported ?? true)
            {
                isModified |=
                    source.LearningStandardIdentificationCodes.SynchronizeCollectionTo(
                        target.LearningStandardIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: item => mappingContract?.IsLearningStandardIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandard source, ILearningStandard target, Action<ILearningStandard, ILearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandard);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            if (mappingContract?.IsCourseTitleSupported != false)
                target.CourseTitle = source.CourseTitle;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsLearningStandardCategoryDescriptorSupported != false)
                target.LearningStandardCategoryDescriptor = source.LearningStandardCategoryDescriptor;

            if (mappingContract?.IsLearningStandardItemCodeSupported != false)
                target.LearningStandardItemCode = source.LearningStandardItemCode;

            if (mappingContract?.IsLearningStandardScopeDescriptorSupported != false)
                target.LearningStandardScopeDescriptor = source.LearningStandardScopeDescriptor;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsParentLearningStandardIdSupported != false)
                target.ParentLearningStandardId = source.ParentLearningStandardId;

            if (mappingContract?.IsSuccessCriteriaSupported != false)
                target.SuccessCriteria = source.SuccessCriteria;

            if (mappingContract?.IsURISupported != false)
                target.URI = source.URI;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ParentLearningStandardResourceId = source.ParentLearningStandardResourceId;
                target.ParentLearningStandardDiscriminator = source.ParentLearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // LearningStandardContentStandard (LearningStandardContentStandard) (Source)
            if (mappingContract?.IsLearningStandardContentStandardSupported != false)
            {
                var itemProperty = target.GetType().GetProperty("LearningStandardContentStandard");

                if (itemProperty != null)
                {
                    if (source.LearningStandardContentStandard == null)
                    {
                        target.LearningStandardContentStandard = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetLearningStandardContentStandard = Activator.CreateInstance(itemType);
                        (targetLearningStandardContentStandard as IChildEntity)?.SetParent(target);
                        source.LearningStandardContentStandard.Map(targetLearningStandardContentStandard);

                        // Update the target reference appropriately
                        target.LearningStandardContentStandard = (ILearningStandardContentStandard) targetLearningStandardContentStandard;
                    }
                }
            }
            // -------------------------------------------------------------

            // Map lists

            if (mappingContract?.IsLearningStandardAcademicSubjectsSupported != false)
            {
                source.LearningStandardAcademicSubjects.MapCollectionTo(target.LearningStandardAcademicSubjects, target, mappingContract?.IsLearningStandardAcademicSubjectIncluded);
            }

            if (mappingContract?.IsLearningStandardGradeLevelsSupported != false)
            {
                source.LearningStandardGradeLevels.MapCollectionTo(target.LearningStandardGradeLevels, target, mappingContract?.IsLearningStandardGradeLevelIncluded);
            }

            if (mappingContract?.IsLearningStandardIdentificationCodesSupported != false)
            {
                source.LearningStandardIdentificationCodes.MapCollectionTo(target.LearningStandardIdentificationCodes, target, mappingContract?.IsLearningStandardIdentificationCodeIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LearningStandardAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardAcademicSubject = new FullName("edfi", "LearningStandardAcademicSubject");
    
        public static bool SynchronizeTo(this ILearningStandardAcademicSubject source, ILearningStandardAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandardAcademicSubject source, ILearningStandardAcademicSubject target, Action<ILearningStandardAcademicSubject, ILearningStandardAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LearningStandardContentStandardMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardContentStandard = new FullName("edfi", "LearningStandardContentStandard");
    
        public static bool SynchronizeTo(this ILearningStandardContentStandard source, ILearningStandardContentStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardContentStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardContentStandard);


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsMandatingEducationOrganizationIdSupported != false)
                && target.MandatingEducationOrganizationId != source.MandatingEducationOrganizationId)
            {
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationDateSupported != false)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationStatusDescriptorSupported != false)
                && target.PublicationStatusDescriptor != source.PublicationStatusDescriptor)
            {
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPublicationYearSupported != false)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((mappingContract?.IsTitleSupported != false)
                && target.Title != source.Title)
            {
                target.Title = source.Title;
                isModified = true;
            }

            if ((mappingContract?.IsURISupported != false)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            if ((mappingContract?.IsVersionSupported != false)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsLearningStandardContentStandardAuthorsSupported ?? true)
            {
                isModified |=
                    source.LearningStandardContentStandardAuthors.SynchronizeCollectionTo(
                        target.LearningStandardContentStandardAuthors,
                        onChildAdded: child =>
                            {
                                child.LearningStandardContentStandard = target;
                            },
                        includeItem: item => mappingContract?.IsLearningStandardContentStandardAuthorIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandardContentStandard source, ILearningStandardContentStandard target, Action<ILearningStandardContentStandard, ILearningStandardContentStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardContentStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardContentStandard);
    
            // Copy contextual primary key values

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsMandatingEducationOrganizationIdSupported != false)
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;

            if (mappingContract?.IsPublicationDateSupported != false)
                target.PublicationDate = source.PublicationDate;

            if (mappingContract?.IsPublicationStatusDescriptorSupported != false)
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;

            if (mappingContract?.IsPublicationYearSupported != false)
                target.PublicationYear = source.PublicationYear;

            if (mappingContract?.IsTitleSupported != false)
                target.Title = source.Title;

            if (mappingContract?.IsURISupported != false)
                target.URI = source.URI;

            if (mappingContract?.IsVersionSupported != false)
                target.Version = source.Version;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.MandatingEducationOrganizationResourceId = source.MandatingEducationOrganizationResourceId;
                target.MandatingEducationOrganizationDiscriminator = source.MandatingEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsLearningStandardContentStandardAuthorsSupported != false)
            {
                source.LearningStandardContentStandardAuthors.MapCollectionTo(target.LearningStandardContentStandardAuthors, target, mappingContract?.IsLearningStandardContentStandardAuthorIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LearningStandardContentStandardAuthorMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardContentStandardAuthor = new FullName("edfi", "LearningStandardContentStandardAuthor");
    
        public static bool SynchronizeTo(this ILearningStandardContentStandardAuthor source, ILearningStandardContentStandardAuthor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardContentStandardAuthorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardContentStandardAuthor);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandardContentStandardAuthor source, ILearningStandardContentStandardAuthor target, Action<ILearningStandardContentStandardAuthor, ILearningStandardContentStandardAuthor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardContentStandardAuthorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardContentStandardAuthor);
    
            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LearningStandardGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardGradeLevel = new FullName("edfi", "LearningStandardGradeLevel");
    
        public static bool SynchronizeTo(this ILearningStandardGradeLevel source, ILearningStandardGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandardGradeLevel source, ILearningStandardGradeLevel target, Action<ILearningStandardGradeLevel, ILearningStandardGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LearningStandardIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardIdentificationCode = new FullName("edfi", "LearningStandardIdentificationCode");
    
        public static bool SynchronizeTo(this ILearningStandardIdentificationCode source, ILearningStandardIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardIdentificationCode);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandardIdentificationCode source, ILearningStandardIdentificationCode target, Action<ILearningStandardIdentificationCode, ILearningStandardIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardIdentificationCode);
    
            // Copy contextual primary key values
            target.ContentStandardName = source.ContentStandardName;
            target.IdentificationCode = source.IdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LearningStandardCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LearningStandardCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardCategoryDescriptor = new FullName("edfi", "LearningStandardCategoryDescriptor");
    
        public static bool SynchronizeTo(this ILearningStandardCategoryDescriptor source, ILearningStandardCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LearningStandardCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILearningStandardCategoryDescriptor source, ILearningStandardCategoryDescriptor target, Action<ILearningStandardCategoryDescriptor, ILearningStandardCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardCategoryDescriptorId = source.LearningStandardCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LearningStandardEquivalenceAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardEquivalenceAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LearningStandardEquivalenceAssociationMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardEquivalenceAssociation = new FullName("edfi", "LearningStandardEquivalenceAssociation");
    
        public static bool SynchronizeTo(this ILearningStandardEquivalenceAssociation source, ILearningStandardEquivalenceAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardEquivalenceAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardEquivalenceAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SourceLearningStandardId, source.SourceLearningStandardId))
                || (!keyStringComparer.Equals(target.TargetLearningStandardId, source.TargetLearningStandardId)))
            {
                // Disallow PK column updates on LearningStandardEquivalenceAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEffectiveDateSupported != false)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((mappingContract?.IsLearningStandardEquivalenceStrengthDescriptionSupported != false)
                && target.LearningStandardEquivalenceStrengthDescription != source.LearningStandardEquivalenceStrengthDescription)
            {
                target.LearningStandardEquivalenceStrengthDescription = source.LearningStandardEquivalenceStrengthDescription;
                isModified = true;
            }

            if ((mappingContract?.IsLearningStandardEquivalenceStrengthDescriptorSupported != false)
                && target.LearningStandardEquivalenceStrengthDescriptor != source.LearningStandardEquivalenceStrengthDescriptor)
            {
                target.LearningStandardEquivalenceStrengthDescriptor = source.LearningStandardEquivalenceStrengthDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILearningStandardEquivalenceAssociation source, ILearningStandardEquivalenceAssociation target, Action<ILearningStandardEquivalenceAssociation, ILearningStandardEquivalenceAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardEquivalenceAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardEquivalenceAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SourceLearningStandardId = source.SourceLearningStandardId;
            target.TargetLearningStandardId = source.TargetLearningStandardId;

            // Copy non-PK properties

            if (mappingContract?.IsEffectiveDateSupported != false)
                target.EffectiveDate = source.EffectiveDate;

            if (mappingContract?.IsLearningStandardEquivalenceStrengthDescriptionSupported != false)
                target.LearningStandardEquivalenceStrengthDescription = source.LearningStandardEquivalenceStrengthDescription;

            if (mappingContract?.IsLearningStandardEquivalenceStrengthDescriptorSupported != false)
                target.LearningStandardEquivalenceStrengthDescriptor = source.LearningStandardEquivalenceStrengthDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SourceLearningStandardResourceId = source.SourceLearningStandardResourceId;
                target.SourceLearningStandardDiscriminator = source.SourceLearningStandardDiscriminator;
                target.TargetLearningStandardResourceId = source.TargetLearningStandardResourceId;
                target.TargetLearningStandardDiscriminator = source.TargetLearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LearningStandardEquivalenceStrengthDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardEquivalenceStrengthDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LearningStandardEquivalenceStrengthDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardEquivalenceStrengthDescriptor = new FullName("edfi", "LearningStandardEquivalenceStrengthDescriptor");
    
        public static bool SynchronizeTo(this ILearningStandardEquivalenceStrengthDescriptor source, ILearningStandardEquivalenceStrengthDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardEquivalenceStrengthDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardEquivalenceStrengthDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LearningStandardEquivalenceStrengthDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILearningStandardEquivalenceStrengthDescriptor source, ILearningStandardEquivalenceStrengthDescriptor target, Action<ILearningStandardEquivalenceStrengthDescriptor, ILearningStandardEquivalenceStrengthDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardEquivalenceStrengthDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardEquivalenceStrengthDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardEquivalenceStrengthDescriptorId = source.LearningStandardEquivalenceStrengthDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LearningStandardScopeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardScopeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LearningStandardScopeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LearningStandardScopeDescriptor = new FullName("edfi", "LearningStandardScopeDescriptor");
    
        public static bool SynchronizeTo(this ILearningStandardScopeDescriptor source, ILearningStandardScopeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LearningStandardScopeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardScopeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LearningStandardScopeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILearningStandardScopeDescriptor source, ILearningStandardScopeDescriptor target, Action<ILearningStandardScopeDescriptor, ILearningStandardScopeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LearningStandardScopeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LearningStandardScopeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardScopeDescriptorId = source.LearningStandardScopeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LevelOfEducationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LevelOfEducationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LevelOfEducationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LevelOfEducationDescriptor = new FullName("edfi", "LevelOfEducationDescriptor");
    
        public static bool SynchronizeTo(this ILevelOfEducationDescriptor source, ILevelOfEducationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LevelOfEducationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LevelOfEducationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LevelOfEducationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILevelOfEducationDescriptor source, ILevelOfEducationDescriptor target, Action<ILevelOfEducationDescriptor, ILevelOfEducationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LevelOfEducationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LevelOfEducationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LevelOfEducationDescriptorId = source.LevelOfEducationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LicenseStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LicenseStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LicenseStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LicenseStatusDescriptor = new FullName("edfi", "LicenseStatusDescriptor");
    
        public static bool SynchronizeTo(this ILicenseStatusDescriptor source, ILicenseStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LicenseStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LicenseStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LicenseStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILicenseStatusDescriptor source, ILicenseStatusDescriptor target, Action<ILicenseStatusDescriptor, ILicenseStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LicenseStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LicenseStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LicenseStatusDescriptorId = source.LicenseStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LicenseTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LicenseTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LicenseTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LicenseTypeDescriptor = new FullName("edfi", "LicenseTypeDescriptor");
    
        public static bool SynchronizeTo(this ILicenseTypeDescriptor source, ILicenseTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LicenseTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LicenseTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LicenseTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILicenseTypeDescriptor source, ILicenseTypeDescriptor target, Action<ILicenseTypeDescriptor, ILicenseTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LicenseTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LicenseTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LicenseTypeDescriptorId = source.LicenseTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LimitedEnglishProficiencyDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LimitedEnglishProficiencyDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LimitedEnglishProficiencyDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LimitedEnglishProficiencyDescriptor = new FullName("edfi", "LimitedEnglishProficiencyDescriptor");
    
        public static bool SynchronizeTo(this ILimitedEnglishProficiencyDescriptor source, ILimitedEnglishProficiencyDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LimitedEnglishProficiencyDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LimitedEnglishProficiencyDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LimitedEnglishProficiencyDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILimitedEnglishProficiencyDescriptor source, ILimitedEnglishProficiencyDescriptor target, Action<ILimitedEnglishProficiencyDescriptor, ILimitedEnglishProficiencyDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LimitedEnglishProficiencyDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LimitedEnglishProficiencyDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LimitedEnglishProficiencyDescriptorId = source.LimitedEnglishProficiencyDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalAccount

namespace EdFi.Ods.Entities.Common.EdFi //.LocalAccountAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalAccountMapper
    {
        private static readonly FullName _fullName_edfi_LocalAccount = new FullName("edfi", "LocalAccount");
    
        public static bool SynchronizeTo(this ILocalAccount source, ILocalAccount target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalAccountMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalAccount);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on LocalAccount
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAccountNameSupported != false)
                && target.AccountName != source.AccountName)
            {
                target.AccountName = source.AccountName;
                isModified = true;
            }

            if ((mappingContract?.IsChartOfAccountEducationOrganizationIdSupported != false)
                && target.ChartOfAccountEducationOrganizationId != source.ChartOfAccountEducationOrganizationId)
            {
                target.ChartOfAccountEducationOrganizationId = source.ChartOfAccountEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsChartOfAccountIdentifierSupported != false)
                && target.ChartOfAccountIdentifier != source.ChartOfAccountIdentifier)
            {
                target.ChartOfAccountIdentifier = source.ChartOfAccountIdentifier;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsLocalAccountReportingTagsSupported ?? true)
            {
                isModified |=
                    source.LocalAccountReportingTags.SynchronizeCollectionTo(
                        target.LocalAccountReportingTags,
                        onChildAdded: child =>
                            {
                                child.LocalAccount = target;
                            },
                        includeItem: item => mappingContract?.IsLocalAccountReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalAccount source, ILocalAccount target, Action<ILocalAccount, ILocalAccount> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalAccountMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalAccount);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsAccountNameSupported != false)
                target.AccountName = source.AccountName;

            if (mappingContract?.IsChartOfAccountEducationOrganizationIdSupported != false)
                target.ChartOfAccountEducationOrganizationId = source.ChartOfAccountEducationOrganizationId;

            if (mappingContract?.IsChartOfAccountIdentifierSupported != false)
                target.ChartOfAccountIdentifier = source.ChartOfAccountIdentifier;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ChartOfAccountResourceId = source.ChartOfAccountResourceId;
                target.ChartOfAccountDiscriminator = source.ChartOfAccountDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsLocalAccountReportingTagsSupported != false)
            {
                source.LocalAccountReportingTags.MapCollectionTo(target.LocalAccountReportingTags, target, mappingContract?.IsLocalAccountReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LocalAccountReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_LocalAccountReportingTag = new FullName("edfi", "LocalAccountReportingTag");
    
        public static bool SynchronizeTo(this ILocalAccountReportingTag source, ILocalAccountReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalAccountReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalAccountReportingTag);


            // Copy non-PK properties

            if ((mappingContract?.IsTagValueSupported != false)
                && target.TagValue != source.TagValue)
            {
                target.TagValue = source.TagValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalAccountReportingTag source, ILocalAccountReportingTag target, Action<ILocalAccountReportingTag, ILocalAccountReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalAccountReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalAccountReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsTagValueSupported != false)
                target.TagValue = source.TagValue;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalActual

namespace EdFi.Ods.Entities.Common.EdFi //.LocalActualAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalActualMapper
    {
        private static readonly FullName _fullName_edfi_LocalActual = new FullName("edfi", "LocalActual");
    
        public static bool SynchronizeTo(this ILocalActual source, ILocalActual target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalActualMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalActual);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.AsOfDate != source.AsOfDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on LocalActual
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAmountSupported != false)
                && target.Amount != source.Amount)
            {
                target.Amount = source.Amount;
                isModified = true;
            }

            if ((mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                && target.FinancialCollectionDescriptor != source.FinancialCollectionDescriptor)
            {
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalActual source, ILocalActual target, Action<ILocalActual, ILocalActual> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalActualMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalActual);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsAmountSupported != false)
                target.Amount = source.Amount;

            if (mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LocalAccountResourceId = source.LocalAccountResourceId;
                target.LocalAccountDiscriminator = source.LocalAccountDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalBudget

namespace EdFi.Ods.Entities.Common.EdFi //.LocalBudgetAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalBudgetMapper
    {
        private static readonly FullName _fullName_edfi_LocalBudget = new FullName("edfi", "LocalBudget");
    
        public static bool SynchronizeTo(this ILocalBudget source, ILocalBudget target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalBudgetMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalBudget);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.AsOfDate != source.AsOfDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on LocalBudget
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAmountSupported != false)
                && target.Amount != source.Amount)
            {
                target.Amount = source.Amount;
                isModified = true;
            }

            if ((mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                && target.FinancialCollectionDescriptor != source.FinancialCollectionDescriptor)
            {
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalBudget source, ILocalBudget target, Action<ILocalBudget, ILocalBudget> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalBudgetMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalBudget);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsAmountSupported != false)
                target.Amount = source.Amount;

            if (mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LocalAccountResourceId = source.LocalAccountResourceId;
                target.LocalAccountDiscriminator = source.LocalAccountDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalContractedStaff

namespace EdFi.Ods.Entities.Common.EdFi //.LocalContractedStaffAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalContractedStaffMapper
    {
        private static readonly FullName _fullName_edfi_LocalContractedStaff = new FullName("edfi", "LocalContractedStaff");
    
        public static bool SynchronizeTo(this ILocalContractedStaff source, ILocalContractedStaff target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalContractedStaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalContractedStaff);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.AsOfDate != source.AsOfDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on LocalContractedStaff
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAmountSupported != false)
                && target.Amount != source.Amount)
            {
                target.Amount = source.Amount;
                isModified = true;
            }

            if ((mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                && target.FinancialCollectionDescriptor != source.FinancialCollectionDescriptor)
            {
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalContractedStaff source, ILocalContractedStaff target, Action<ILocalContractedStaff, ILocalContractedStaff> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalContractedStaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalContractedStaff);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAmountSupported != false)
                target.Amount = source.Amount;

            if (mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LocalAccountResourceId = source.LocalAccountResourceId;
                target.LocalAccountDiscriminator = source.LocalAccountDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocaleDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LocaleDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocaleDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LocaleDescriptor = new FullName("edfi", "LocaleDescriptor");
    
        public static bool SynchronizeTo(this ILocaleDescriptor source, ILocaleDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocaleDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocaleDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LocaleDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILocaleDescriptor source, ILocaleDescriptor target, Action<ILocaleDescriptor, ILocaleDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocaleDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocaleDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocaleDescriptorId = source.LocaleDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.Common.EdFi //.LocalEducationAgencyAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyMapper
    {
        private static readonly FullName _fullName_edfi_LocalEducationAgency = new FullName("edfi", "LocalEducationAgency");
    
        public static bool SynchronizeTo(this ILocalEducationAgency source, ILocalEducationAgency target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalEducationAgencyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgency);

            // Detect primary key changes
            if (
                 (target.LocalEducationAgencyId != source.LocalEducationAgencyId))
            {
                // Disallow PK column updates on LocalEducationAgency
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsCharterStatusDescriptorSupported != false)
                && target.CharterStatusDescriptor != source.CharterStatusDescriptor)
            {
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEducationServiceCenterIdSupported != false)
                && target.EducationServiceCenterId != source.EducationServiceCenterId)
            {
                target.EducationServiceCenterId = source.EducationServiceCenterId;
                isModified = true;
            }

            if ((mappingContract?.IsLocalEducationAgencyCategoryDescriptorSupported != false)
                && target.LocalEducationAgencyCategoryDescriptor != source.LocalEducationAgencyCategoryDescriptor)
            {
                target.LocalEducationAgencyCategoryDescriptor = source.LocalEducationAgencyCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsParentLocalEducationAgencyIdSupported != false)
                && target.ParentLocalEducationAgencyId != source.ParentLocalEducationAgencyId)
            {
                target.ParentLocalEducationAgencyId = source.ParentLocalEducationAgencyId;
                isModified = true;
            }

            if ((mappingContract?.IsStateEducationAgencyIdSupported != false)
                && target.StateEducationAgencyId != source.StateEducationAgencyId)
            {
                target.StateEducationAgencyId = source.StateEducationAgencyId;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsLocalEducationAgencyAccountabilitiesSupported ?? true)
            {
                isModified |=
                    source.LocalEducationAgencyAccountabilities.SynchronizeCollectionTo(
                        target.LocalEducationAgencyAccountabilities,
                        onChildAdded: child =>
                            {
                                child.LocalEducationAgency = target;
                            },
                        includeItem: item => mappingContract?.IsLocalEducationAgencyAccountabilityIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsLocalEducationAgencyFederalFundsSupported ?? true)
            {
                isModified |=
                    source.LocalEducationAgencyFederalFunds.SynchronizeCollectionTo(
                        target.LocalEducationAgencyFederalFunds,
                        onChildAdded: child =>
                            {
                                child.LocalEducationAgency = target;
                            },
                        includeItem: item => mappingContract?.IsLocalEducationAgencyFederalFundsIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalEducationAgency source, ILocalEducationAgency target, Action<ILocalEducationAgency, ILocalEducationAgency> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalEducationAgencyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgency);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalEducationAgencyId = source.LocalEducationAgencyId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsCharterStatusDescriptorSupported != false)
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;

            if (mappingContract?.IsEducationServiceCenterIdSupported != false)
                target.EducationServiceCenterId = source.EducationServiceCenterId;

            if (mappingContract?.IsLocalEducationAgencyCategoryDescriptorSupported != false)
                target.LocalEducationAgencyCategoryDescriptor = source.LocalEducationAgencyCategoryDescriptor;

            if (mappingContract?.IsParentLocalEducationAgencyIdSupported != false)
                target.ParentLocalEducationAgencyId = source.ParentLocalEducationAgencyId;

            if (mappingContract?.IsStateEducationAgencyIdSupported != false)
                target.StateEducationAgencyId = source.StateEducationAgencyId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationServiceCenterResourceId = source.EducationServiceCenterResourceId;
                target.ParentLocalEducationAgencyResourceId = source.ParentLocalEducationAgencyResourceId;
                target.StateEducationAgencyResourceId = source.StateEducationAgencyResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            if (mappingContract?.IsLocalEducationAgencyAccountabilitiesSupported != false)
            {
                source.LocalEducationAgencyAccountabilities.MapCollectionTo(target.LocalEducationAgencyAccountabilities, target, mappingContract?.IsLocalEducationAgencyAccountabilityIncluded);
            }

            if (mappingContract?.IsLocalEducationAgencyFederalFundsSupported != false)
            {
                source.LocalEducationAgencyFederalFunds.MapCollectionTo(target.LocalEducationAgencyFederalFunds, target, mappingContract?.IsLocalEducationAgencyFederalFundsIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyAccountabilityMapper
    {
        private static readonly FullName _fullName_edfi_LocalEducationAgencyAccountability = new FullName("edfi", "LocalEducationAgencyAccountability");
    
        public static bool SynchronizeTo(this ILocalEducationAgencyAccountability source, ILocalEducationAgencyAccountability target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalEducationAgencyAccountabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgencyAccountability);


            // Copy non-PK properties

            if ((mappingContract?.IsGunFreeSchoolsActReportingStatusDescriptorSupported != false)
                && target.GunFreeSchoolsActReportingStatusDescriptor != source.GunFreeSchoolsActReportingStatusDescriptor)
            {
                target.GunFreeSchoolsActReportingStatusDescriptor = source.GunFreeSchoolsActReportingStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolChoiceImplementStatusDescriptorSupported != false)
                && target.SchoolChoiceImplementStatusDescriptor != source.SchoolChoiceImplementStatusDescriptor)
            {
                target.SchoolChoiceImplementStatusDescriptor = source.SchoolChoiceImplementStatusDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalEducationAgencyAccountability source, ILocalEducationAgencyAccountability target, Action<ILocalEducationAgencyAccountability, ILocalEducationAgencyAccountability> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalEducationAgencyAccountabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgencyAccountability);
    
            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsGunFreeSchoolsActReportingStatusDescriptorSupported != false)
                target.GunFreeSchoolsActReportingStatusDescriptor = source.GunFreeSchoolsActReportingStatusDescriptor;

            if (mappingContract?.IsSchoolChoiceImplementStatusDescriptorSupported != false)
                target.SchoolChoiceImplementStatusDescriptor = source.SchoolChoiceImplementStatusDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyFederalFundsMapper
    {
        private static readonly FullName _fullName_edfi_LocalEducationAgencyFederalFunds = new FullName("edfi", "LocalEducationAgencyFederalFunds");
    
        public static bool SynchronizeTo(this ILocalEducationAgencyFederalFunds source, ILocalEducationAgencyFederalFunds target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalEducationAgencyFederalFundsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgencyFederalFunds);


            // Copy non-PK properties

            if ((mappingContract?.IsInnovativeDollarsSpentSupported != false)
                && target.InnovativeDollarsSpent != source.InnovativeDollarsSpent)
            {
                target.InnovativeDollarsSpent = source.InnovativeDollarsSpent;
                isModified = true;
            }

            if ((mappingContract?.IsInnovativeDollarsSpentStrategicPrioritiesSupported != false)
                && target.InnovativeDollarsSpentStrategicPriorities != source.InnovativeDollarsSpentStrategicPriorities)
            {
                target.InnovativeDollarsSpentStrategicPriorities = source.InnovativeDollarsSpentStrategicPriorities;
                isModified = true;
            }

            if ((mappingContract?.IsInnovativeProgramsFundsReceivedSupported != false)
                && target.InnovativeProgramsFundsReceived != source.InnovativeProgramsFundsReceived)
            {
                target.InnovativeProgramsFundsReceived = source.InnovativeProgramsFundsReceived;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolImprovementAllocationSupported != false)
                && target.SchoolImprovementAllocation != source.SchoolImprovementAllocation)
            {
                target.SchoolImprovementAllocation = source.SchoolImprovementAllocation;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolImprovementReservedFundsPercentageSupported != false)
                && target.SchoolImprovementReservedFundsPercentage != source.SchoolImprovementReservedFundsPercentage)
            {
                target.SchoolImprovementReservedFundsPercentage = source.SchoolImprovementReservedFundsPercentage;
                isModified = true;
            }

            if ((mappingContract?.IsStateAssessmentAdministrationFundingSupported != false)
                && target.StateAssessmentAdministrationFunding != source.StateAssessmentAdministrationFunding)
            {
                target.StateAssessmentAdministrationFunding = source.StateAssessmentAdministrationFunding;
                isModified = true;
            }

            if ((mappingContract?.IsSupplementalEducationalServicesFundsSpentSupported != false)
                && target.SupplementalEducationalServicesFundsSpent != source.SupplementalEducationalServicesFundsSpent)
            {
                target.SupplementalEducationalServicesFundsSpent = source.SupplementalEducationalServicesFundsSpent;
                isModified = true;
            }

            if ((mappingContract?.IsSupplementalEducationalServicesPerPupilExpenditureSupported != false)
                && target.SupplementalEducationalServicesPerPupilExpenditure != source.SupplementalEducationalServicesPerPupilExpenditure)
            {
                target.SupplementalEducationalServicesPerPupilExpenditure = source.SupplementalEducationalServicesPerPupilExpenditure;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalEducationAgencyFederalFunds source, ILocalEducationAgencyFederalFunds target, Action<ILocalEducationAgencyFederalFunds, ILocalEducationAgencyFederalFunds> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalEducationAgencyFederalFundsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgencyFederalFunds);
    
            // Copy contextual primary key values
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsInnovativeDollarsSpentSupported != false)
                target.InnovativeDollarsSpent = source.InnovativeDollarsSpent;

            if (mappingContract?.IsInnovativeDollarsSpentStrategicPrioritiesSupported != false)
                target.InnovativeDollarsSpentStrategicPriorities = source.InnovativeDollarsSpentStrategicPriorities;

            if (mappingContract?.IsInnovativeProgramsFundsReceivedSupported != false)
                target.InnovativeProgramsFundsReceived = source.InnovativeProgramsFundsReceived;

            if (mappingContract?.IsSchoolImprovementAllocationSupported != false)
                target.SchoolImprovementAllocation = source.SchoolImprovementAllocation;

            if (mappingContract?.IsSchoolImprovementReservedFundsPercentageSupported != false)
                target.SchoolImprovementReservedFundsPercentage = source.SchoolImprovementReservedFundsPercentage;

            if (mappingContract?.IsStateAssessmentAdministrationFundingSupported != false)
                target.StateAssessmentAdministrationFunding = source.StateAssessmentAdministrationFunding;

            if (mappingContract?.IsSupplementalEducationalServicesFundsSpentSupported != false)
                target.SupplementalEducationalServicesFundsSpent = source.SupplementalEducationalServicesFundsSpent;

            if (mappingContract?.IsSupplementalEducationalServicesPerPupilExpenditureSupported != false)
                target.SupplementalEducationalServicesPerPupilExpenditure = source.SupplementalEducationalServicesPerPupilExpenditure;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalEducationAgencyCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LocalEducationAgencyCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_LocalEducationAgencyCategoryDescriptor = new FullName("edfi", "LocalEducationAgencyCategoryDescriptor");
    
        public static bool SynchronizeTo(this ILocalEducationAgencyCategoryDescriptor source, ILocalEducationAgencyCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalEducationAgencyCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgencyCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on LocalEducationAgencyCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ILocalEducationAgencyCategoryDescriptor source, ILocalEducationAgencyCategoryDescriptor target, Action<ILocalEducationAgencyCategoryDescriptor, ILocalEducationAgencyCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalEducationAgencyCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEducationAgencyCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalEducationAgencyCategoryDescriptorId = source.LocalEducationAgencyCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalEncumbrance

namespace EdFi.Ods.Entities.Common.EdFi //.LocalEncumbranceAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalEncumbranceMapper
    {
        private static readonly FullName _fullName_edfi_LocalEncumbrance = new FullName("edfi", "LocalEncumbrance");
    
        public static bool SynchronizeTo(this ILocalEncumbrance source, ILocalEncumbrance target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalEncumbranceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEncumbrance);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.AsOfDate != source.AsOfDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on LocalEncumbrance
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAmountSupported != false)
                && target.Amount != source.Amount)
            {
                target.Amount = source.Amount;
                isModified = true;
            }

            if ((mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                && target.FinancialCollectionDescriptor != source.FinancialCollectionDescriptor)
            {
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalEncumbrance source, ILocalEncumbrance target, Action<ILocalEncumbrance, ILocalEncumbrance> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalEncumbranceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalEncumbrance);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsAmountSupported != false)
                target.Amount = source.Amount;

            if (mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LocalAccountResourceId = source.LocalAccountResourceId;
                target.LocalAccountDiscriminator = source.LocalAccountDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: LocalPayroll

namespace EdFi.Ods.Entities.Common.EdFi //.LocalPayrollAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalPayrollMapper
    {
        private static readonly FullName _fullName_edfi_LocalPayroll = new FullName("edfi", "LocalPayroll");
    
        public static bool SynchronizeTo(this ILocalPayroll source, ILocalPayroll target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocalPayrollMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalPayroll);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AccountIdentifier, source.AccountIdentifier))
                || (target.AsOfDate != source.AsOfDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.FiscalYear != source.FiscalYear)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on LocalPayroll
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAmountSupported != false)
                && target.Amount != source.Amount)
            {
                target.Amount = source.Amount;
                isModified = true;
            }

            if ((mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                && target.FinancialCollectionDescriptor != source.FinancialCollectionDescriptor)
            {
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocalPayroll source, ILocalPayroll target, Action<ILocalPayroll, ILocalPayroll> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocalPayrollMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_LocalPayroll);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAmountSupported != false)
                target.Amount = source.Amount;

            if (mappingContract?.IsFinancialCollectionDescriptorSupported != false)
                target.FinancialCollectionDescriptor = source.FinancialCollectionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LocalAccountResourceId = source.LocalAccountResourceId;
                target.LocalAccountDiscriminator = source.LocalAccountDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Location

namespace EdFi.Ods.Entities.Common.EdFi //.LocationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocationMapper
    {
        private static readonly FullName _fullName_edfi_Location = new FullName("edfi", "Location");
    
        public static bool SynchronizeTo(this ILocation source, ILocation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (LocationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Location);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.ClassroomIdentificationCode, source.ClassroomIdentificationCode))
                || (target.SchoolId != source.SchoolId))
            {
                // Allow PK column updates on Location
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.ClassroomIdentificationCode != target.ClassroomIdentificationCode)
                {
                    source.ClassroomIdentificationCode = target.ClassroomIdentificationCode;
                }
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsMaximumNumberOfSeatsSupported != false)
                && target.MaximumNumberOfSeats != source.MaximumNumberOfSeats)
            {
                target.MaximumNumberOfSeats = source.MaximumNumberOfSeats;
                isModified = true;
            }

            if ((mappingContract?.IsOptimalNumberOfSeatsSupported != false)
                && target.OptimalNumberOfSeats != source.OptimalNumberOfSeats)
            {
                target.OptimalNumberOfSeats = source.OptimalNumberOfSeats;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ILocation source, ILocation target, Action<ILocation, ILocation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (LocationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Location);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ClassroomIdentificationCode = source.ClassroomIdentificationCode;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (mappingContract?.IsMaximumNumberOfSeatsSupported != false)
                target.MaximumNumberOfSeats = source.MaximumNumberOfSeats;

            if (mappingContract?.IsOptimalNumberOfSeatsSupported != false)
                target.OptimalNumberOfSeats = source.OptimalNumberOfSeats;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: MagnetSpecialProgramEmphasisSchoolDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MagnetSpecialProgramEmphasisSchoolDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class MagnetSpecialProgramEmphasisSchoolDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_MagnetSpecialProgramEmphasisSchoolDescriptor = new FullName("edfi", "MagnetSpecialProgramEmphasisSchoolDescriptor");
    
        public static bool SynchronizeTo(this IMagnetSpecialProgramEmphasisSchoolDescriptor source, IMagnetSpecialProgramEmphasisSchoolDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (MagnetSpecialProgramEmphasisSchoolDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MagnetSpecialProgramEmphasisSchoolDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on MagnetSpecialProgramEmphasisSchoolDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IMagnetSpecialProgramEmphasisSchoolDescriptor source, IMagnetSpecialProgramEmphasisSchoolDescriptor target, Action<IMagnetSpecialProgramEmphasisSchoolDescriptor, IMagnetSpecialProgramEmphasisSchoolDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (MagnetSpecialProgramEmphasisSchoolDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MagnetSpecialProgramEmphasisSchoolDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MagnetSpecialProgramEmphasisSchoolDescriptorId = source.MagnetSpecialProgramEmphasisSchoolDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: MediumOfInstructionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MediumOfInstructionDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class MediumOfInstructionDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_MediumOfInstructionDescriptor = new FullName("edfi", "MediumOfInstructionDescriptor");
    
        public static bool SynchronizeTo(this IMediumOfInstructionDescriptor source, IMediumOfInstructionDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (MediumOfInstructionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MediumOfInstructionDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on MediumOfInstructionDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IMediumOfInstructionDescriptor source, IMediumOfInstructionDescriptor target, Action<IMediumOfInstructionDescriptor, IMediumOfInstructionDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (MediumOfInstructionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MediumOfInstructionDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MediumOfInstructionDescriptorId = source.MediumOfInstructionDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: MethodCreditEarnedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MethodCreditEarnedDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class MethodCreditEarnedDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_MethodCreditEarnedDescriptor = new FullName("edfi", "MethodCreditEarnedDescriptor");
    
        public static bool SynchronizeTo(this IMethodCreditEarnedDescriptor source, IMethodCreditEarnedDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (MethodCreditEarnedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MethodCreditEarnedDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on MethodCreditEarnedDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IMethodCreditEarnedDescriptor source, IMethodCreditEarnedDescriptor target, Action<IMethodCreditEarnedDescriptor, IMethodCreditEarnedDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (MethodCreditEarnedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MethodCreditEarnedDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MethodCreditEarnedDescriptorId = source.MethodCreditEarnedDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: MigrantEducationProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MigrantEducationProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class MigrantEducationProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_MigrantEducationProgramServiceDescriptor = new FullName("edfi", "MigrantEducationProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this IMigrantEducationProgramServiceDescriptor source, IMigrantEducationProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (MigrantEducationProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MigrantEducationProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on MigrantEducationProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IMigrantEducationProgramServiceDescriptor source, IMigrantEducationProgramServiceDescriptor target, Action<IMigrantEducationProgramServiceDescriptor, IMigrantEducationProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (MigrantEducationProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MigrantEducationProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MigrantEducationProgramServiceDescriptorId = source.MigrantEducationProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ModelEntityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ModelEntityDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ModelEntityDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ModelEntityDescriptor = new FullName("edfi", "ModelEntityDescriptor");
    
        public static bool SynchronizeTo(this IModelEntityDescriptor source, IModelEntityDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ModelEntityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ModelEntityDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ModelEntityDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IModelEntityDescriptor source, IModelEntityDescriptor target, Action<IModelEntityDescriptor, IModelEntityDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ModelEntityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ModelEntityDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ModelEntityDescriptorId = source.ModelEntityDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: MonitoredDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MonitoredDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class MonitoredDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_MonitoredDescriptor = new FullName("edfi", "MonitoredDescriptor");
    
        public static bool SynchronizeTo(this IMonitoredDescriptor source, IMonitoredDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (MonitoredDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MonitoredDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on MonitoredDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IMonitoredDescriptor source, IMonitoredDescriptor target, Action<IMonitoredDescriptor, IMonitoredDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (MonitoredDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_MonitoredDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MonitoredDescriptorId = source.MonitoredDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: NeglectedOrDelinquentProgramDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.NeglectedOrDelinquentProgramDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class NeglectedOrDelinquentProgramDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_NeglectedOrDelinquentProgramDescriptor = new FullName("edfi", "NeglectedOrDelinquentProgramDescriptor");
    
        public static bool SynchronizeTo(this INeglectedOrDelinquentProgramDescriptor source, INeglectedOrDelinquentProgramDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (NeglectedOrDelinquentProgramDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_NeglectedOrDelinquentProgramDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on NeglectedOrDelinquentProgramDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this INeglectedOrDelinquentProgramDescriptor source, INeglectedOrDelinquentProgramDescriptor target, Action<INeglectedOrDelinquentProgramDescriptor, INeglectedOrDelinquentProgramDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (NeglectedOrDelinquentProgramDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_NeglectedOrDelinquentProgramDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.NeglectedOrDelinquentProgramDescriptorId = source.NeglectedOrDelinquentProgramDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: NeglectedOrDelinquentProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.NeglectedOrDelinquentProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class NeglectedOrDelinquentProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_NeglectedOrDelinquentProgramServiceDescriptor = new FullName("edfi", "NeglectedOrDelinquentProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this INeglectedOrDelinquentProgramServiceDescriptor source, INeglectedOrDelinquentProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (NeglectedOrDelinquentProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_NeglectedOrDelinquentProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on NeglectedOrDelinquentProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this INeglectedOrDelinquentProgramServiceDescriptor source, INeglectedOrDelinquentProgramServiceDescriptor target, Action<INeglectedOrDelinquentProgramServiceDescriptor, INeglectedOrDelinquentProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (NeglectedOrDelinquentProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_NeglectedOrDelinquentProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.NeglectedOrDelinquentProgramServiceDescriptorId = source.NeglectedOrDelinquentProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: NetworkPurposeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.NetworkPurposeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class NetworkPurposeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_NetworkPurposeDescriptor = new FullName("edfi", "NetworkPurposeDescriptor");
    
        public static bool SynchronizeTo(this INetworkPurposeDescriptor source, INetworkPurposeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (NetworkPurposeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_NetworkPurposeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on NetworkPurposeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this INetworkPurposeDescriptor source, INetworkPurposeDescriptor target, Action<INetworkPurposeDescriptor, INetworkPurposeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (NetworkPurposeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_NetworkPurposeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.NetworkPurposeDescriptorId = source.NetworkPurposeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ObjectDimension

namespace EdFi.Ods.Entities.Common.EdFi //.ObjectDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ObjectDimensionMapper
    {
        private static readonly FullName _fullName_edfi_ObjectDimension = new FullName("edfi", "ObjectDimension");
    
        public static bool SynchronizeTo(this IObjectDimension source, IObjectDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on ObjectDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsObjectDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.ObjectDimensionReportingTags.SynchronizeCollectionTo(
                        target.ObjectDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.ObjectDimension = target;
                            },
                        includeItem: item => mappingContract?.IsObjectDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectDimension source, IObjectDimension target, Action<IObjectDimension, IObjectDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsObjectDimensionReportingTagsSupported != false)
            {
                source.ObjectDimensionReportingTags.MapCollectionTo(target.ObjectDimensionReportingTags, target, mappingContract?.IsObjectDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ObjectDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_ObjectDimensionReportingTag = new FullName("edfi", "ObjectDimensionReportingTag");
    
        public static bool SynchronizeTo(this IObjectDimensionReportingTag source, IObjectDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectDimensionReportingTag source, IObjectDimensionReportingTag target, Action<IObjectDimensionReportingTag, IObjectDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ObjectiveAssessment

namespace EdFi.Ods.Entities.Common.EdFi //.ObjectiveAssessmentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentMapper
    {
        private static readonly FullName _fullName_edfi_ObjectiveAssessment = new FullName("edfi", "ObjectiveAssessment");
    
        public static bool SynchronizeTo(this IObjectiveAssessment source, IObjectiveAssessment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectiveAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessment);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AssessmentIdentifier, source.AssessmentIdentifier))
                || (!keyStringComparer.Equals(target.IdentificationCode, source.IdentificationCode))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace)))
            {
                // Disallow PK column updates on ObjectiveAssessment
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAcademicSubjectDescriptorSupported != false)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsMaxRawScoreSupported != false)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((mappingContract?.IsNomenclatureSupported != false)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }

            if ((mappingContract?.IsParentIdentificationCodeSupported != false)
                && target.ParentIdentificationCode != source.ParentIdentificationCode)
            {
                target.ParentIdentificationCode = source.ParentIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsPercentOfAssessmentSupported != false)
                && target.PercentOfAssessment != source.PercentOfAssessment)
            {
                target.PercentOfAssessment = source.PercentOfAssessment;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsObjectiveAssessmentAssessmentItemsSupported ?? true)
            {
                isModified |=
                    source.ObjectiveAssessmentAssessmentItems.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentAssessmentItems,
                        onChildAdded: child =>
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsObjectiveAssessmentAssessmentItemIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsObjectiveAssessmentLearningStandardsSupported ?? true)
            {
                isModified |=
                    source.ObjectiveAssessmentLearningStandards.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentLearningStandards,
                        onChildAdded: child =>
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsObjectiveAssessmentLearningStandardIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsObjectiveAssessmentPerformanceLevelsSupported ?? true)
            {
                isModified |=
                    source.ObjectiveAssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentPerformanceLevels,
                        onChildAdded: child =>
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsObjectiveAssessmentPerformanceLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsObjectiveAssessmentScoresSupported ?? true)
            {
                isModified |=
                    source.ObjectiveAssessmentScores.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentScores,
                        onChildAdded: child =>
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsObjectiveAssessmentScoreIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectiveAssessment source, IObjectiveAssessment target, Action<IObjectiveAssessment, IObjectiveAssessment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectiveAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessment);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.IdentificationCode = source.IdentificationCode;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (mappingContract?.IsAcademicSubjectDescriptorSupported != false)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsMaxRawScoreSupported != false)
                target.MaxRawScore = source.MaxRawScore;

            if (mappingContract?.IsNomenclatureSupported != false)
                target.Nomenclature = source.Nomenclature;

            if (mappingContract?.IsParentIdentificationCodeSupported != false)
                target.ParentIdentificationCode = source.ParentIdentificationCode;

            if (mappingContract?.IsPercentOfAssessmentSupported != false)
                target.PercentOfAssessment = source.PercentOfAssessment;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
                target.ParentObjectiveAssessmentResourceId = source.ParentObjectiveAssessmentResourceId;
                target.ParentObjectiveAssessmentDiscriminator = source.ParentObjectiveAssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsObjectiveAssessmentAssessmentItemsSupported != false)
            {
                source.ObjectiveAssessmentAssessmentItems.MapCollectionTo(target.ObjectiveAssessmentAssessmentItems, target, mappingContract?.IsObjectiveAssessmentAssessmentItemIncluded);
            }

            if (mappingContract?.IsObjectiveAssessmentLearningStandardsSupported != false)
            {
                source.ObjectiveAssessmentLearningStandards.MapCollectionTo(target.ObjectiveAssessmentLearningStandards, target, mappingContract?.IsObjectiveAssessmentLearningStandardIncluded);
            }

            if (mappingContract?.IsObjectiveAssessmentPerformanceLevelsSupported != false)
            {
                source.ObjectiveAssessmentPerformanceLevels.MapCollectionTo(target.ObjectiveAssessmentPerformanceLevels, target, mappingContract?.IsObjectiveAssessmentPerformanceLevelIncluded);
            }

            if (mappingContract?.IsObjectiveAssessmentScoresSupported != false)
            {
                source.ObjectiveAssessmentScores.MapCollectionTo(target.ObjectiveAssessmentScores, target, mappingContract?.IsObjectiveAssessmentScoreIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentAssessmentItemMapper
    {
        private static readonly FullName _fullName_edfi_ObjectiveAssessmentAssessmentItem = new FullName("edfi", "ObjectiveAssessmentAssessmentItem");
    
        public static bool SynchronizeTo(this IObjectiveAssessmentAssessmentItem source, IObjectiveAssessmentAssessmentItem target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectiveAssessmentAssessmentItemMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentAssessmentItem);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectiveAssessmentAssessmentItem source, IObjectiveAssessmentAssessmentItem target, Action<IObjectiveAssessmentAssessmentItem, IObjectiveAssessmentAssessmentItem> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectiveAssessmentAssessmentItemMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentAssessmentItem);
    
            // Copy contextual primary key values
            target.AssessmentItemIdentificationCode = source.AssessmentItemIdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentItemResourceId = source.AssessmentItemResourceId;
                target.AssessmentItemDiscriminator = source.AssessmentItemDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_ObjectiveAssessmentLearningStandard = new FullName("edfi", "ObjectiveAssessmentLearningStandard");
    
        public static bool SynchronizeTo(this IObjectiveAssessmentLearningStandard source, IObjectiveAssessmentLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectiveAssessmentLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentLearningStandard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectiveAssessmentLearningStandard source, IObjectiveAssessmentLearningStandard target, Action<IObjectiveAssessmentLearningStandard, IObjectiveAssessmentLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectiveAssessmentLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentLearningStandard);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentPerformanceLevelMapper
    {
        private static readonly FullName _fullName_edfi_ObjectiveAssessmentPerformanceLevel = new FullName("edfi", "ObjectiveAssessmentPerformanceLevel");
    
        public static bool SynchronizeTo(this IObjectiveAssessmentPerformanceLevel source, IObjectiveAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectiveAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentPerformanceLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                && target.PerformanceLevelIndicatorName != source.PerformanceLevelIndicatorName)
            {
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectiveAssessmentPerformanceLevel source, IObjectiveAssessmentPerformanceLevel target, Action<IObjectiveAssessmentPerformanceLevel, IObjectiveAssessmentPerformanceLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectiveAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentPerformanceLevel);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            if (mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentScoreMapper
    {
        private static readonly FullName _fullName_edfi_ObjectiveAssessmentScore = new FullName("edfi", "ObjectiveAssessmentScore");
    
        public static bool SynchronizeTo(this IObjectiveAssessmentScore source, IObjectiveAssessmentScore target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ObjectiveAssessmentScoreMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentScore);


            // Copy non-PK properties

            if ((mappingContract?.IsMaximumScoreSupported != false)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinimumScoreSupported != false)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IObjectiveAssessmentScore source, IObjectiveAssessmentScore target, Action<IObjectiveAssessmentScore, IObjectiveAssessmentScore> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ObjectiveAssessmentScoreMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ObjectiveAssessmentScore);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaximumScoreSupported != false)
                target.MaximumScore = source.MaximumScore;

            if (mappingContract?.IsMinimumScoreSupported != false)
                target.MinimumScore = source.MinimumScore;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.Common.EdFi //.OpenStaffPositionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionMapper
    {
        private static readonly FullName _fullName_edfi_OpenStaffPosition = new FullName("edfi", "OpenStaffPosition");
    
        public static bool SynchronizeTo(this IOpenStaffPosition source, IOpenStaffPosition target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OpenStaffPositionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OpenStaffPosition);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.RequisitionNumber, source.RequisitionNumber)))
            {
                // Disallow PK column updates on OpenStaffPosition
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsDatePostedSupported != false)
                && target.DatePosted != source.DatePosted)
            {
                target.DatePosted = source.DatePosted;
                isModified = true;
            }

            if ((mappingContract?.IsDatePostingRemovedSupported != false)
                && target.DatePostingRemoved != source.DatePostingRemoved)
            {
                target.DatePostingRemoved = source.DatePostingRemoved;
                isModified = true;
            }

            if ((mappingContract?.IsEmploymentStatusDescriptorSupported != false)
                && target.EmploymentStatusDescriptor != source.EmploymentStatusDescriptor)
            {
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPositionTitleSupported != false)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }

            if ((mappingContract?.IsPostingResultDescriptorSupported != false)
                && target.PostingResultDescriptor != source.PostingResultDescriptor)
            {
                target.PostingResultDescriptor = source.PostingResultDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProgramAssignmentDescriptorSupported != false)
                && target.ProgramAssignmentDescriptor != source.ProgramAssignmentDescriptor)
            {
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsStaffClassificationDescriptorSupported != false)
                && target.StaffClassificationDescriptor != source.StaffClassificationDescriptor)
            {
                target.StaffClassificationDescriptor = source.StaffClassificationDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsOpenStaffPositionAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.OpenStaffPositionAcademicSubjects.SynchronizeCollectionTo(
                        target.OpenStaffPositionAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.OpenStaffPosition = target;
                            },
                        includeItem: item => mappingContract?.IsOpenStaffPositionAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsOpenStaffPositionInstructionalGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.OpenStaffPositionInstructionalGradeLevels.SynchronizeCollectionTo(
                        target.OpenStaffPositionInstructionalGradeLevels,
                        onChildAdded: child =>
                            {
                                child.OpenStaffPosition = target;
                            },
                        includeItem: item => mappingContract?.IsOpenStaffPositionInstructionalGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IOpenStaffPosition source, IOpenStaffPosition target, Action<IOpenStaffPosition, IOpenStaffPosition> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OpenStaffPositionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OpenStaffPosition);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (mappingContract?.IsDatePostedSupported != false)
                target.DatePosted = source.DatePosted;

            if (mappingContract?.IsDatePostingRemovedSupported != false)
                target.DatePostingRemoved = source.DatePostingRemoved;

            if (mappingContract?.IsEmploymentStatusDescriptorSupported != false)
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;

            if (mappingContract?.IsPositionTitleSupported != false)
                target.PositionTitle = source.PositionTitle;

            if (mappingContract?.IsPostingResultDescriptorSupported != false)
                target.PostingResultDescriptor = source.PostingResultDescriptor;

            if (mappingContract?.IsProgramAssignmentDescriptorSupported != false)
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;

            if (mappingContract?.IsStaffClassificationDescriptorSupported != false)
                target.StaffClassificationDescriptor = source.StaffClassificationDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsOpenStaffPositionAcademicSubjectsSupported != false)
            {
                source.OpenStaffPositionAcademicSubjects.MapCollectionTo(target.OpenStaffPositionAcademicSubjects, target, mappingContract?.IsOpenStaffPositionAcademicSubjectIncluded);
            }

            if (mappingContract?.IsOpenStaffPositionInstructionalGradeLevelsSupported != false)
            {
                source.OpenStaffPositionInstructionalGradeLevels.MapCollectionTo(target.OpenStaffPositionInstructionalGradeLevels, target, mappingContract?.IsOpenStaffPositionInstructionalGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_OpenStaffPositionAcademicSubject = new FullName("edfi", "OpenStaffPositionAcademicSubject");
    
        public static bool SynchronizeTo(this IOpenStaffPositionAcademicSubject source, IOpenStaffPositionAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OpenStaffPositionAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OpenStaffPositionAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IOpenStaffPositionAcademicSubject source, IOpenStaffPositionAcademicSubject target, Action<IOpenStaffPositionAcademicSubject, IOpenStaffPositionAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OpenStaffPositionAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OpenStaffPositionAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionInstructionalGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_OpenStaffPositionInstructionalGradeLevel = new FullName("edfi", "OpenStaffPositionInstructionalGradeLevel");
    
        public static bool SynchronizeTo(this IOpenStaffPositionInstructionalGradeLevel source, IOpenStaffPositionInstructionalGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OpenStaffPositionInstructionalGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OpenStaffPositionInstructionalGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IOpenStaffPositionInstructionalGradeLevel source, IOpenStaffPositionInstructionalGradeLevel target, Action<IOpenStaffPositionInstructionalGradeLevel, IOpenStaffPositionInstructionalGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OpenStaffPositionInstructionalGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OpenStaffPositionInstructionalGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: OperationalStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.OperationalStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OperationalStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_OperationalStatusDescriptor = new FullName("edfi", "OperationalStatusDescriptor");
    
        public static bool SynchronizeTo(this IOperationalStatusDescriptor source, IOperationalStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OperationalStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OperationalStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on OperationalStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IOperationalStatusDescriptor source, IOperationalStatusDescriptor target, Action<IOperationalStatusDescriptor, IOperationalStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OperationalStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OperationalStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OperationalStatusDescriptorId = source.OperationalStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: OperationalUnitDimension

namespace EdFi.Ods.Entities.Common.EdFi //.OperationalUnitDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OperationalUnitDimensionMapper
    {
        private static readonly FullName _fullName_edfi_OperationalUnitDimension = new FullName("edfi", "OperationalUnitDimension");
    
        public static bool SynchronizeTo(this IOperationalUnitDimension source, IOperationalUnitDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OperationalUnitDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OperationalUnitDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on OperationalUnitDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsOperationalUnitDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.OperationalUnitDimensionReportingTags.SynchronizeCollectionTo(
                        target.OperationalUnitDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.OperationalUnitDimension = target;
                            },
                        includeItem: item => mappingContract?.IsOperationalUnitDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IOperationalUnitDimension source, IOperationalUnitDimension target, Action<IOperationalUnitDimension, IOperationalUnitDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OperationalUnitDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OperationalUnitDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsOperationalUnitDimensionReportingTagsSupported != false)
            {
                source.OperationalUnitDimensionReportingTags.MapCollectionTo(target.OperationalUnitDimensionReportingTags, target, mappingContract?.IsOperationalUnitDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class OperationalUnitDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_OperationalUnitDimensionReportingTag = new FullName("edfi", "OperationalUnitDimensionReportingTag");
    
        public static bool SynchronizeTo(this IOperationalUnitDimensionReportingTag source, IOperationalUnitDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OperationalUnitDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OperationalUnitDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IOperationalUnitDimensionReportingTag source, IOperationalUnitDimensionReportingTag target, Action<IOperationalUnitDimensionReportingTag, IOperationalUnitDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OperationalUnitDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OperationalUnitDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: OrganizationDepartment

namespace EdFi.Ods.Entities.Common.EdFi //.OrganizationDepartmentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OrganizationDepartmentMapper
    {
        private static readonly FullName _fullName_edfi_OrganizationDepartment = new FullName("edfi", "OrganizationDepartment");
    
        public static bool SynchronizeTo(this IOrganizationDepartment source, IOrganizationDepartment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OrganizationDepartmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OrganizationDepartment);

            // Detect primary key changes
            if (
                 (target.OrganizationDepartmentId != source.OrganizationDepartmentId))
            {
                // Disallow PK column updates on OrganizationDepartment
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsAcademicSubjectDescriptorSupported != false)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsParentEducationOrganizationIdSupported != false)
                && target.ParentEducationOrganizationId != source.ParentEducationOrganizationId)
            {
                target.ParentEducationOrganizationId = source.ParentEducationOrganizationId;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IOrganizationDepartment source, IOrganizationDepartment target, Action<IOrganizationDepartment, IOrganizationDepartment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OrganizationDepartmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OrganizationDepartment);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OrganizationDepartmentId = source.OrganizationDepartmentId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsAcademicSubjectDescriptorSupported != false)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            if (mappingContract?.IsParentEducationOrganizationIdSupported != false)
                target.ParentEducationOrganizationId = source.ParentEducationOrganizationId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ParentEducationOrganizationResourceId = source.ParentEducationOrganizationResourceId;
                target.ParentEducationOrganizationDiscriminator = source.ParentEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: OtherNameTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.OtherNameTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OtherNameTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_OtherNameTypeDescriptor = new FullName("edfi", "OtherNameTypeDescriptor");
    
        public static bool SynchronizeTo(this IOtherNameTypeDescriptor source, IOtherNameTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (OtherNameTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OtherNameTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on OtherNameTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IOtherNameTypeDescriptor source, IOtherNameTypeDescriptor target, Action<IOtherNameTypeDescriptor, IOtherNameTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (OtherNameTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_OtherNameTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptorId = source.OtherNameTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ParticipationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ParticipationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ParticipationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ParticipationDescriptor = new FullName("edfi", "ParticipationDescriptor");
    
        public static bool SynchronizeTo(this IParticipationDescriptor source, IParticipationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ParticipationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ParticipationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ParticipationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IParticipationDescriptor source, IParticipationDescriptor target, Action<IParticipationDescriptor, IParticipationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ParticipationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ParticipationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ParticipationDescriptorId = source.ParticipationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ParticipationStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ParticipationStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ParticipationStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ParticipationStatusDescriptor = new FullName("edfi", "ParticipationStatusDescriptor");
    
        public static bool SynchronizeTo(this IParticipationStatusDescriptor source, IParticipationStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ParticipationStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ParticipationStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ParticipationStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IParticipationStatusDescriptor source, IParticipationStatusDescriptor target, Action<IParticipationStatusDescriptor, IParticipationStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ParticipationStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ParticipationStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ParticipationStatusDescriptorId = source.ParticipationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PerformanceBaseConversionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PerformanceBaseConversionDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PerformanceBaseConversionDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PerformanceBaseConversionDescriptor = new FullName("edfi", "PerformanceBaseConversionDescriptor");
    
        public static bool SynchronizeTo(this IPerformanceBaseConversionDescriptor source, IPerformanceBaseConversionDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PerformanceBaseConversionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PerformanceBaseConversionDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PerformanceBaseConversionDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPerformanceBaseConversionDescriptor source, IPerformanceBaseConversionDescriptor target, Action<IPerformanceBaseConversionDescriptor, IPerformanceBaseConversionDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PerformanceBaseConversionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PerformanceBaseConversionDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceBaseConversionDescriptorId = source.PerformanceBaseConversionDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PerformanceLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PerformanceLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PerformanceLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PerformanceLevelDescriptor = new FullName("edfi", "PerformanceLevelDescriptor");
    
        public static bool SynchronizeTo(this IPerformanceLevelDescriptor source, IPerformanceLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PerformanceLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PerformanceLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PerformanceLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPerformanceLevelDescriptor source, IPerformanceLevelDescriptor target, Action<IPerformanceLevelDescriptor, IPerformanceLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PerformanceLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PerformanceLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceLevelDescriptorId = source.PerformanceLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Person

namespace EdFi.Ods.Entities.Common.EdFi //.PersonAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PersonMapper
    {
        private static readonly FullName _fullName_edfi_Person = new FullName("edfi", "Person");
    
        public static bool SynchronizeTo(this IPerson source, IPerson target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PersonMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Person);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.PersonId, source.PersonId))
                || !string.Equals(target.SourceSystemDescriptor, source.SourceSystemDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on Person
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IPerson source, IPerson target, Action<IPerson, IPerson> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PersonMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Person);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PersonalInformationVerificationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PersonalInformationVerificationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PersonalInformationVerificationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PersonalInformationVerificationDescriptor = new FullName("edfi", "PersonalInformationVerificationDescriptor");
    
        public static bool SynchronizeTo(this IPersonalInformationVerificationDescriptor source, IPersonalInformationVerificationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PersonalInformationVerificationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PersonalInformationVerificationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PersonalInformationVerificationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPersonalInformationVerificationDescriptor source, IPersonalInformationVerificationDescriptor target, Action<IPersonalInformationVerificationDescriptor, IPersonalInformationVerificationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PersonalInformationVerificationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PersonalInformationVerificationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PersonalInformationVerificationDescriptorId = source.PersonalInformationVerificationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PlatformTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PlatformTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PlatformTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PlatformTypeDescriptor = new FullName("edfi", "PlatformTypeDescriptor");
    
        public static bool SynchronizeTo(this IPlatformTypeDescriptor source, IPlatformTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PlatformTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PlatformTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PlatformTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPlatformTypeDescriptor source, IPlatformTypeDescriptor target, Action<IPlatformTypeDescriptor, IPlatformTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PlatformTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PlatformTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PlatformTypeDescriptorId = source.PlatformTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PopulationServedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PopulationServedDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PopulationServedDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PopulationServedDescriptor = new FullName("edfi", "PopulationServedDescriptor");
    
        public static bool SynchronizeTo(this IPopulationServedDescriptor source, IPopulationServedDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PopulationServedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PopulationServedDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PopulationServedDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPopulationServedDescriptor source, IPopulationServedDescriptor target, Action<IPopulationServedDescriptor, IPopulationServedDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PopulationServedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PopulationServedDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PopulationServedDescriptorId = source.PopulationServedDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PostingResultDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PostingResultDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PostingResultDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PostingResultDescriptor = new FullName("edfi", "PostingResultDescriptor");
    
        public static bool SynchronizeTo(this IPostingResultDescriptor source, IPostingResultDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PostingResultDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostingResultDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PostingResultDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPostingResultDescriptor source, IPostingResultDescriptor target, Action<IPostingResultDescriptor, IPostingResultDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PostingResultDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostingResultDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostingResultDescriptorId = source.PostingResultDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PostSecondaryEvent

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryEventMapper
    {
        private static readonly FullName _fullName_edfi_PostSecondaryEvent = new FullName("edfi", "PostSecondaryEvent");
    
        public static bool SynchronizeTo(this IPostSecondaryEvent source, IPostSecondaryEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PostSecondaryEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryEvent);

            // Detect primary key changes
            if (
                 (target.EventDate != source.EventDate)
                || !string.Equals(target.PostSecondaryEventCategoryDescriptor, source.PostSecondaryEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on PostSecondaryEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsPostSecondaryInstitutionIdSupported != false)
                && target.PostSecondaryInstitutionId != source.PostSecondaryInstitutionId)
            {
                target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IPostSecondaryEvent source, IPostSecondaryEvent target, Action<IPostSecondaryEvent, IPostSecondaryEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PostSecondaryEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.PostSecondaryEventCategoryDescriptor = source.PostSecondaryEventCategoryDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsPostSecondaryInstitutionIdSupported != false)
                target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PostSecondaryInstitutionResourceId = source.PostSecondaryInstitutionResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PostSecondaryEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryEventCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryEventCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PostSecondaryEventCategoryDescriptor = new FullName("edfi", "PostSecondaryEventCategoryDescriptor");
    
        public static bool SynchronizeTo(this IPostSecondaryEventCategoryDescriptor source, IPostSecondaryEventCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PostSecondaryEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryEventCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PostSecondaryEventCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPostSecondaryEventCategoryDescriptor source, IPostSecondaryEventCategoryDescriptor target, Action<IPostSecondaryEventCategoryDescriptor, IPostSecondaryEventCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PostSecondaryEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryEventCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostSecondaryEventCategoryDescriptorId = source.PostSecondaryEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryInstitutionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionMapper
    {
        private static readonly FullName _fullName_edfi_PostSecondaryInstitution = new FullName("edfi", "PostSecondaryInstitution");
    
        public static bool SynchronizeTo(this IPostSecondaryInstitution source, IPostSecondaryInstitution target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PostSecondaryInstitutionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryInstitution);

            // Detect primary key changes
            if (
                 (target.PostSecondaryInstitutionId != source.PostSecondaryInstitutionId))
            {
                // Disallow PK column updates on PostSecondaryInstitution
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsAdministrativeFundingControlDescriptorSupported != false)
                && target.AdministrativeFundingControlDescriptor != source.AdministrativeFundingControlDescriptor)
            {
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPostSecondaryInstitutionLevelDescriptorSupported != false)
                && target.PostSecondaryInstitutionLevelDescriptor != source.PostSecondaryInstitutionLevelDescriptor)
            {
                target.PostSecondaryInstitutionLevelDescriptor = source.PostSecondaryInstitutionLevelDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsPostSecondaryInstitutionMediumOfInstructionsSupported ?? true)
            {
                isModified |=
                    source.PostSecondaryInstitutionMediumOfInstructions.SynchronizeCollectionTo(
                        target.PostSecondaryInstitutionMediumOfInstructions,
                        onChildAdded: child =>
                            {
                                child.PostSecondaryInstitution = target;
                            },
                        includeItem: item => mappingContract?.IsPostSecondaryInstitutionMediumOfInstructionIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IPostSecondaryInstitution source, IPostSecondaryInstitution target, Action<IPostSecondaryInstitution, IPostSecondaryInstitution> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PostSecondaryInstitutionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryInstitution);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsAdministrativeFundingControlDescriptorSupported != false)
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;

            if (mappingContract?.IsPostSecondaryInstitutionLevelDescriptorSupported != false)
                target.PostSecondaryInstitutionLevelDescriptor = source.PostSecondaryInstitutionLevelDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            if (mappingContract?.IsPostSecondaryInstitutionMediumOfInstructionsSupported != false)
            {
                source.PostSecondaryInstitutionMediumOfInstructions.MapCollectionTo(target.PostSecondaryInstitutionMediumOfInstructions, target, mappingContract?.IsPostSecondaryInstitutionMediumOfInstructionIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionMediumOfInstructionMapper
    {
        private static readonly FullName _fullName_edfi_PostSecondaryInstitutionMediumOfInstruction = new FullName("edfi", "PostSecondaryInstitutionMediumOfInstruction");
    
        public static bool SynchronizeTo(this IPostSecondaryInstitutionMediumOfInstruction source, IPostSecondaryInstitutionMediumOfInstruction target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PostSecondaryInstitutionMediumOfInstructionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryInstitutionMediumOfInstruction);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IPostSecondaryInstitutionMediumOfInstruction source, IPostSecondaryInstitutionMediumOfInstruction target, Action<IPostSecondaryInstitutionMediumOfInstruction, IPostSecondaryInstitutionMediumOfInstruction> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PostSecondaryInstitutionMediumOfInstructionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryInstitutionMediumOfInstruction);
    
            // Copy contextual primary key values
            target.MediumOfInstructionDescriptor = source.MediumOfInstructionDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PostSecondaryInstitutionLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryInstitutionLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PostSecondaryInstitutionLevelDescriptor = new FullName("edfi", "PostSecondaryInstitutionLevelDescriptor");
    
        public static bool SynchronizeTo(this IPostSecondaryInstitutionLevelDescriptor source, IPostSecondaryInstitutionLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PostSecondaryInstitutionLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryInstitutionLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PostSecondaryInstitutionLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPostSecondaryInstitutionLevelDescriptor source, IPostSecondaryInstitutionLevelDescriptor target, Action<IPostSecondaryInstitutionLevelDescriptor, IPostSecondaryInstitutionLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PostSecondaryInstitutionLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PostSecondaryInstitutionLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostSecondaryInstitutionLevelDescriptorId = source.PostSecondaryInstitutionLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PrimaryLearningDeviceAccessDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PrimaryLearningDeviceAccessDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PrimaryLearningDeviceAccessDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PrimaryLearningDeviceAccessDescriptor = new FullName("edfi", "PrimaryLearningDeviceAccessDescriptor");
    
        public static bool SynchronizeTo(this IPrimaryLearningDeviceAccessDescriptor source, IPrimaryLearningDeviceAccessDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PrimaryLearningDeviceAccessDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PrimaryLearningDeviceAccessDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PrimaryLearningDeviceAccessDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPrimaryLearningDeviceAccessDescriptor source, IPrimaryLearningDeviceAccessDescriptor target, Action<IPrimaryLearningDeviceAccessDescriptor, IPrimaryLearningDeviceAccessDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PrimaryLearningDeviceAccessDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PrimaryLearningDeviceAccessDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PrimaryLearningDeviceAccessDescriptorId = source.PrimaryLearningDeviceAccessDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PrimaryLearningDeviceAwayFromSchoolDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PrimaryLearningDeviceAwayFromSchoolDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PrimaryLearningDeviceAwayFromSchoolDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PrimaryLearningDeviceAwayFromSchoolDescriptor = new FullName("edfi", "PrimaryLearningDeviceAwayFromSchoolDescriptor");
    
        public static bool SynchronizeTo(this IPrimaryLearningDeviceAwayFromSchoolDescriptor source, IPrimaryLearningDeviceAwayFromSchoolDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PrimaryLearningDeviceAwayFromSchoolDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PrimaryLearningDeviceAwayFromSchoolDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PrimaryLearningDeviceAwayFromSchoolDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPrimaryLearningDeviceAwayFromSchoolDescriptor source, IPrimaryLearningDeviceAwayFromSchoolDescriptor target, Action<IPrimaryLearningDeviceAwayFromSchoolDescriptor, IPrimaryLearningDeviceAwayFromSchoolDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PrimaryLearningDeviceAwayFromSchoolDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PrimaryLearningDeviceAwayFromSchoolDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PrimaryLearningDeviceAwayFromSchoolDescriptorId = source.PrimaryLearningDeviceAwayFromSchoolDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PrimaryLearningDeviceProviderDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PrimaryLearningDeviceProviderDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PrimaryLearningDeviceProviderDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PrimaryLearningDeviceProviderDescriptor = new FullName("edfi", "PrimaryLearningDeviceProviderDescriptor");
    
        public static bool SynchronizeTo(this IPrimaryLearningDeviceProviderDescriptor source, IPrimaryLearningDeviceProviderDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PrimaryLearningDeviceProviderDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PrimaryLearningDeviceProviderDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PrimaryLearningDeviceProviderDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPrimaryLearningDeviceProviderDescriptor source, IPrimaryLearningDeviceProviderDescriptor target, Action<IPrimaryLearningDeviceProviderDescriptor, IPrimaryLearningDeviceProviderDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PrimaryLearningDeviceProviderDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PrimaryLearningDeviceProviderDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PrimaryLearningDeviceProviderDescriptorId = source.PrimaryLearningDeviceProviderDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProficiencyDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProficiencyDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProficiencyDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProficiencyDescriptor = new FullName("edfi", "ProficiencyDescriptor");
    
        public static bool SynchronizeTo(this IProficiencyDescriptor source, IProficiencyDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProficiencyDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProficiencyDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProficiencyDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProficiencyDescriptor source, IProficiencyDescriptor target, Action<IProficiencyDescriptor, IProficiencyDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProficiencyDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProficiencyDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProficiencyDescriptorId = source.ProficiencyDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Program

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramMapper
    {
        private static readonly FullName _fullName_edfi_Program = new FullName("edfi", "Program");
    
        public static bool SynchronizeTo(this IProgram source, IProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Program);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on Program
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsProgramIdSupported != false)
                && target.ProgramId != source.ProgramId)
            {
                target.ProgramId = source.ProgramId;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsProgramCharacteristicsSupported ?? true)
            {
                isModified |=
                    source.ProgramCharacteristics.SynchronizeCollectionTo(
                        target.ProgramCharacteristics,
                        onChildAdded: child =>
                            {
                                child.Program = target;
                            },
                        includeItem: item => mappingContract?.IsProgramCharacteristicIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsProgramLearningStandardsSupported ?? true)
            {
                isModified |=
                    source.ProgramLearningStandards.SynchronizeCollectionTo(
                        target.ProgramLearningStandards,
                        onChildAdded: child =>
                            {
                                child.Program = target;
                            },
                        includeItem: item => mappingContract?.IsProgramLearningStandardIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsProgramSponsorsSupported ?? true)
            {
                isModified |=
                    source.ProgramSponsors.SynchronizeCollectionTo(
                        target.ProgramSponsors,
                        onChildAdded: child =>
                            {
                                child.Program = target;
                            },
                        includeItem: item => mappingContract?.IsProgramSponsorIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgram source, IProgram target, Action<IProgram, IProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Program);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsProgramIdSupported != false)
                target.ProgramId = source.ProgramId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsProgramCharacteristicsSupported != false)
            {
                source.ProgramCharacteristics.MapCollectionTo(target.ProgramCharacteristics, target, mappingContract?.IsProgramCharacteristicIncluded);
            }

            if (mappingContract?.IsProgramLearningStandardsSupported != false)
            {
                source.ProgramLearningStandards.MapCollectionTo(target.ProgramLearningStandards, target, mappingContract?.IsProgramLearningStandardIncluded);
            }

            if (mappingContract?.IsProgramSponsorsSupported != false)
            {
                source.ProgramSponsors.MapCollectionTo(target.ProgramSponsors, target, mappingContract?.IsProgramSponsorIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramCharacteristicMapper
    {
        private static readonly FullName _fullName_edfi_ProgramCharacteristic = new FullName("edfi", "ProgramCharacteristic");
    
        public static bool SynchronizeTo(this IProgramCharacteristic source, IProgramCharacteristic target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramCharacteristic);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramCharacteristic source, IProgramCharacteristic target, Action<IProgramCharacteristic, IProgramCharacteristic> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramCharacteristic);
    
            // Copy contextual primary key values
            target.ProgramCharacteristicDescriptor = source.ProgramCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramLearningStandardMapper
    {
        private static readonly FullName _fullName_edfi_ProgramLearningStandard = new FullName("edfi", "ProgramLearningStandard");
    
        public static bool SynchronizeTo(this IProgramLearningStandard source, IProgramLearningStandard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramLearningStandard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramLearningStandard source, IProgramLearningStandard target, Action<IProgramLearningStandard, IProgramLearningStandard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramLearningStandardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramLearningStandard);
    
            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramSponsorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramSponsor = new FullName("edfi", "ProgramSponsor");
    
        public static bool SynchronizeTo(this IProgramSponsor source, IProgramSponsor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramSponsorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramSponsor);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramSponsor source, IProgramSponsor target, Action<IProgramSponsor, IProgramSponsor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramSponsorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramSponsor);
    
            // Copy contextual primary key values
            target.ProgramSponsorDescriptor = source.ProgramSponsorDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramAssignmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramAssignmentDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramAssignmentDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramAssignmentDescriptor = new FullName("edfi", "ProgramAssignmentDescriptor");
    
        public static bool SynchronizeTo(this IProgramAssignmentDescriptor source, IProgramAssignmentDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramAssignmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramAssignmentDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramAssignmentDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgramAssignmentDescriptor source, IProgramAssignmentDescriptor target, Action<IProgramAssignmentDescriptor, IProgramAssignmentDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramAssignmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramAssignmentDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramAssignmentDescriptorId = source.ProgramAssignmentDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramCharacteristicDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramCharacteristicDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramCharacteristicDescriptor = new FullName("edfi", "ProgramCharacteristicDescriptor");
    
        public static bool SynchronizeTo(this IProgramCharacteristicDescriptor source, IProgramCharacteristicDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramCharacteristicDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramCharacteristicDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgramCharacteristicDescriptor source, IProgramCharacteristicDescriptor target, Action<IProgramCharacteristicDescriptor, IProgramCharacteristicDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramCharacteristicDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramCharacteristicDescriptorId = source.ProgramCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramDimension

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramDimensionMapper
    {
        private static readonly FullName _fullName_edfi_ProgramDimension = new FullName("edfi", "ProgramDimension");
    
        public static bool SynchronizeTo(this IProgramDimension source, IProgramDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on ProgramDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsProgramDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.ProgramDimensionReportingTags.SynchronizeCollectionTo(
                        target.ProgramDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.ProgramDimension = target;
                            },
                        includeItem: item => mappingContract?.IsProgramDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramDimension source, IProgramDimension target, Action<IProgramDimension, IProgramDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsProgramDimensionReportingTagsSupported != false)
            {
                source.ProgramDimensionReportingTags.MapCollectionTo(target.ProgramDimensionReportingTags, target, mappingContract?.IsProgramDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_ProgramDimensionReportingTag = new FullName("edfi", "ProgramDimensionReportingTag");
    
        public static bool SynchronizeTo(this IProgramDimensionReportingTag source, IProgramDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramDimensionReportingTag source, IProgramDimensionReportingTag target, Action<IProgramDimensionReportingTag, IProgramDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramEvaluation

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramEvaluationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluation = new FullName("edfi", "ProgramEvaluation");
    
        public static bool SynchronizeTo(this IProgramEvaluation source, IProgramEvaluation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || !string.Equals(target.ProgramEvaluationPeriodDescriptor, source.ProgramEvaluationPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramEvaluationTitle, source.ProgramEvaluationTitle))
                || !string.Equals(target.ProgramEvaluationTypeDescriptor, source.ProgramEvaluationTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramEvaluation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEvaluationMaxNumericRatingSupported != false)
                && target.EvaluationMaxNumericRating != source.EvaluationMaxNumericRating)
            {
                target.EvaluationMaxNumericRating = source.EvaluationMaxNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationMinNumericRatingSupported != false)
                && target.EvaluationMinNumericRating != source.EvaluationMinNumericRating)
            {
                target.EvaluationMinNumericRating = source.EvaluationMinNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsProgramEvaluationDescriptionSupported != false)
                && target.ProgramEvaluationDescription != source.ProgramEvaluationDescription)
            {
                target.ProgramEvaluationDescription = source.ProgramEvaluationDescription;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsProgramEvaluationLevelsSupported ?? true)
            {
                isModified |=
                    source.ProgramEvaluationLevels.SynchronizeCollectionTo(
                        target.ProgramEvaluationLevels,
                        onChildAdded: child =>
                            {
                                child.ProgramEvaluation = target;
                            },
                        includeItem: item => mappingContract?.IsProgramEvaluationLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramEvaluation source, IProgramEvaluation target, Action<IProgramEvaluation, IProgramEvaluation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramEvaluationPeriodDescriptor = source.ProgramEvaluationPeriodDescriptor;
            target.ProgramEvaluationTitle = source.ProgramEvaluationTitle;
            target.ProgramEvaluationTypeDescriptor = source.ProgramEvaluationTypeDescriptor;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsEvaluationMaxNumericRatingSupported != false)
                target.EvaluationMaxNumericRating = source.EvaluationMaxNumericRating;

            if (mappingContract?.IsEvaluationMinNumericRatingSupported != false)
                target.EvaluationMinNumericRating = source.EvaluationMinNumericRating;

            if (mappingContract?.IsProgramEvaluationDescriptionSupported != false)
                target.ProgramEvaluationDescription = source.ProgramEvaluationDescription;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsProgramEvaluationLevelsSupported != false)
            {
                source.ProgramEvaluationLevels.MapCollectionTo(target.ProgramEvaluationLevels, target, mappingContract?.IsProgramEvaluationLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationLevelMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationLevel = new FullName("edfi", "ProgramEvaluationLevel");
    
        public static bool SynchronizeTo(this IProgramEvaluationLevel source, IProgramEvaluationLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsMaxNumericRatingSupported != false)
                && target.MaxNumericRating != source.MaxNumericRating)
            {
                target.MaxNumericRating = source.MaxNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsMinNumericRatingSupported != false)
                && target.MinNumericRating != source.MinNumericRating)
            {
                target.MinNumericRating = source.MinNumericRating;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationLevel source, IProgramEvaluationLevel target, Action<IProgramEvaluationLevel, IProgramEvaluationLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationLevel);
    
            // Copy contextual primary key values
            target.RatingLevelDescriptor = source.RatingLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaxNumericRatingSupported != false)
                target.MaxNumericRating = source.MaxNumericRating;

            if (mappingContract?.IsMinNumericRatingSupported != false)
                target.MinNumericRating = source.MinNumericRating;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramEvaluationElement

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramEvaluationElementAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationElementMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationElement = new FullName("edfi", "ProgramEvaluationElement");
    
        public static bool SynchronizeTo(this IProgramEvaluationElement source, IProgramEvaluationElement target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationElementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationElement);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramEvaluationElementTitle, source.ProgramEvaluationElementTitle))
                || !string.Equals(target.ProgramEvaluationPeriodDescriptor, source.ProgramEvaluationPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramEvaluationTitle, source.ProgramEvaluationTitle))
                || !string.Equals(target.ProgramEvaluationTypeDescriptor, source.ProgramEvaluationTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramEvaluationElement
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsElementMaxNumericRatingSupported != false)
                && target.ElementMaxNumericRating != source.ElementMaxNumericRating)
            {
                target.ElementMaxNumericRating = source.ElementMaxNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsElementMinNumericRatingSupported != false)
                && target.ElementMinNumericRating != source.ElementMinNumericRating)
            {
                target.ElementMinNumericRating = source.ElementMinNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsElementSortOrderSupported != false)
                && target.ElementSortOrder != source.ElementSortOrder)
            {
                target.ElementSortOrder = source.ElementSortOrder;
                isModified = true;
            }

            if ((mappingContract?.IsProgramEvaluationElementDescriptionSupported != false)
                && target.ProgramEvaluationElementDescription != source.ProgramEvaluationElementDescription)
            {
                target.ProgramEvaluationElementDescription = source.ProgramEvaluationElementDescription;
                isModified = true;
            }

            if ((mappingContract?.IsProgramEvaluationObjectiveTitleSupported != false)
                && target.ProgramEvaluationObjectiveTitle != source.ProgramEvaluationObjectiveTitle)
            {
                target.ProgramEvaluationObjectiveTitle = source.ProgramEvaluationObjectiveTitle;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsProgramEvaluationElementProgramEvaluationLevelsSupported ?? true)
            {
                isModified |=
                    source.ProgramEvaluationElementProgramEvaluationLevels.SynchronizeCollectionTo(
                        target.ProgramEvaluationElementProgramEvaluationLevels,
                        onChildAdded: child =>
                            {
                                child.ProgramEvaluationElement = target;
                            },
                        includeItem: item => mappingContract?.IsProgramEvaluationElementProgramEvaluationLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationElement source, IProgramEvaluationElement target, Action<IProgramEvaluationElement, IProgramEvaluationElement> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationElementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationElement);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramEvaluationElementTitle = source.ProgramEvaluationElementTitle;
            target.ProgramEvaluationPeriodDescriptor = source.ProgramEvaluationPeriodDescriptor;
            target.ProgramEvaluationTitle = source.ProgramEvaluationTitle;
            target.ProgramEvaluationTypeDescriptor = source.ProgramEvaluationTypeDescriptor;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsElementMaxNumericRatingSupported != false)
                target.ElementMaxNumericRating = source.ElementMaxNumericRating;

            if (mappingContract?.IsElementMinNumericRatingSupported != false)
                target.ElementMinNumericRating = source.ElementMinNumericRating;

            if (mappingContract?.IsElementSortOrderSupported != false)
                target.ElementSortOrder = source.ElementSortOrder;

            if (mappingContract?.IsProgramEvaluationElementDescriptionSupported != false)
                target.ProgramEvaluationElementDescription = source.ProgramEvaluationElementDescription;

            if (mappingContract?.IsProgramEvaluationObjectiveTitleSupported != false)
                target.ProgramEvaluationObjectiveTitle = source.ProgramEvaluationObjectiveTitle;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramEvaluationResourceId = source.ProgramEvaluationResourceId;
                target.ProgramEvaluationDiscriminator = source.ProgramEvaluationDiscriminator;
                target.ProgramEvaluationObjectiveResourceId = source.ProgramEvaluationObjectiveResourceId;
                target.ProgramEvaluationObjectiveDiscriminator = source.ProgramEvaluationObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsProgramEvaluationElementProgramEvaluationLevelsSupported != false)
            {
                source.ProgramEvaluationElementProgramEvaluationLevels.MapCollectionTo(target.ProgramEvaluationElementProgramEvaluationLevels, target, mappingContract?.IsProgramEvaluationElementProgramEvaluationLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationElementProgramEvaluationLevelMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationElementProgramEvaluationLevel = new FullName("edfi", "ProgramEvaluationElementProgramEvaluationLevel");
    
        public static bool SynchronizeTo(this IProgramEvaluationElementProgramEvaluationLevel source, IProgramEvaluationElementProgramEvaluationLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationElementProgramEvaluationLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationElementProgramEvaluationLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsMaxNumericRatingSupported != false)
                && target.MaxNumericRating != source.MaxNumericRating)
            {
                target.MaxNumericRating = source.MaxNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsMinNumericRatingSupported != false)
                && target.MinNumericRating != source.MinNumericRating)
            {
                target.MinNumericRating = source.MinNumericRating;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationElementProgramEvaluationLevel source, IProgramEvaluationElementProgramEvaluationLevel target, Action<IProgramEvaluationElementProgramEvaluationLevel, IProgramEvaluationElementProgramEvaluationLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationElementProgramEvaluationLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationElementProgramEvaluationLevel);
    
            // Copy contextual primary key values
            target.RatingLevelDescriptor = source.RatingLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaxNumericRatingSupported != false)
                target.MaxNumericRating = source.MaxNumericRating;

            if (mappingContract?.IsMinNumericRatingSupported != false)
                target.MinNumericRating = source.MinNumericRating;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramEvaluationObjective

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramEvaluationObjectiveAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationObjectiveMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationObjective = new FullName("edfi", "ProgramEvaluationObjective");
    
        public static bool SynchronizeTo(this IProgramEvaluationObjective source, IProgramEvaluationObjective target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationObjective);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramEvaluationObjectiveTitle, source.ProgramEvaluationObjectiveTitle))
                || !string.Equals(target.ProgramEvaluationPeriodDescriptor, source.ProgramEvaluationPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramEvaluationTitle, source.ProgramEvaluationTitle))
                || !string.Equals(target.ProgramEvaluationTypeDescriptor, source.ProgramEvaluationTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramEvaluationObjective
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsObjectiveMaxNumericRatingSupported != false)
                && target.ObjectiveMaxNumericRating != source.ObjectiveMaxNumericRating)
            {
                target.ObjectiveMaxNumericRating = source.ObjectiveMaxNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsObjectiveMinNumericRatingSupported != false)
                && target.ObjectiveMinNumericRating != source.ObjectiveMinNumericRating)
            {
                target.ObjectiveMinNumericRating = source.ObjectiveMinNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsObjectiveSortOrderSupported != false)
                && target.ObjectiveSortOrder != source.ObjectiveSortOrder)
            {
                target.ObjectiveSortOrder = source.ObjectiveSortOrder;
                isModified = true;
            }

            if ((mappingContract?.IsProgramEvaluationObjectiveDescriptionSupported != false)
                && target.ProgramEvaluationObjectiveDescription != source.ProgramEvaluationObjectiveDescription)
            {
                target.ProgramEvaluationObjectiveDescription = source.ProgramEvaluationObjectiveDescription;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsProgramEvaluationObjectiveProgramEvaluationLevelsSupported ?? true)
            {
                isModified |=
                    source.ProgramEvaluationObjectiveProgramEvaluationLevels.SynchronizeCollectionTo(
                        target.ProgramEvaluationObjectiveProgramEvaluationLevels,
                        onChildAdded: child =>
                            {
                                child.ProgramEvaluationObjective = target;
                            },
                        includeItem: item => mappingContract?.IsProgramEvaluationObjectiveProgramEvaluationLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationObjective source, IProgramEvaluationObjective target, Action<IProgramEvaluationObjective, IProgramEvaluationObjective> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationObjective);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramEvaluationObjectiveTitle = source.ProgramEvaluationObjectiveTitle;
            target.ProgramEvaluationPeriodDescriptor = source.ProgramEvaluationPeriodDescriptor;
            target.ProgramEvaluationTitle = source.ProgramEvaluationTitle;
            target.ProgramEvaluationTypeDescriptor = source.ProgramEvaluationTypeDescriptor;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsObjectiveMaxNumericRatingSupported != false)
                target.ObjectiveMaxNumericRating = source.ObjectiveMaxNumericRating;

            if (mappingContract?.IsObjectiveMinNumericRatingSupported != false)
                target.ObjectiveMinNumericRating = source.ObjectiveMinNumericRating;

            if (mappingContract?.IsObjectiveSortOrderSupported != false)
                target.ObjectiveSortOrder = source.ObjectiveSortOrder;

            if (mappingContract?.IsProgramEvaluationObjectiveDescriptionSupported != false)
                target.ProgramEvaluationObjectiveDescription = source.ProgramEvaluationObjectiveDescription;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramEvaluationResourceId = source.ProgramEvaluationResourceId;
                target.ProgramEvaluationDiscriminator = source.ProgramEvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsProgramEvaluationObjectiveProgramEvaluationLevelsSupported != false)
            {
                source.ProgramEvaluationObjectiveProgramEvaluationLevels.MapCollectionTo(target.ProgramEvaluationObjectiveProgramEvaluationLevels, target, mappingContract?.IsProgramEvaluationObjectiveProgramEvaluationLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationObjectiveProgramEvaluationLevelMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationObjectiveProgramEvaluationLevel = new FullName("edfi", "ProgramEvaluationObjectiveProgramEvaluationLevel");
    
        public static bool SynchronizeTo(this IProgramEvaluationObjectiveProgramEvaluationLevel source, IProgramEvaluationObjectiveProgramEvaluationLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationObjectiveProgramEvaluationLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationObjectiveProgramEvaluationLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsMaxNumericRatingSupported != false)
                && target.MaxNumericRating != source.MaxNumericRating)
            {
                target.MaxNumericRating = source.MaxNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsMinNumericRatingSupported != false)
                && target.MinNumericRating != source.MinNumericRating)
            {
                target.MinNumericRating = source.MinNumericRating;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationObjectiveProgramEvaluationLevel source, IProgramEvaluationObjectiveProgramEvaluationLevel target, Action<IProgramEvaluationObjectiveProgramEvaluationLevel, IProgramEvaluationObjectiveProgramEvaluationLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationObjectiveProgramEvaluationLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationObjectiveProgramEvaluationLevel);
    
            // Copy contextual primary key values
            target.RatingLevelDescriptor = source.RatingLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsMaxNumericRatingSupported != false)
                target.MaxNumericRating = source.MaxNumericRating;

            if (mappingContract?.IsMinNumericRatingSupported != false)
                target.MinNumericRating = source.MinNumericRating;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramEvaluationPeriodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramEvaluationPeriodDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationPeriodDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationPeriodDescriptor = new FullName("edfi", "ProgramEvaluationPeriodDescriptor");
    
        public static bool SynchronizeTo(this IProgramEvaluationPeriodDescriptor source, IProgramEvaluationPeriodDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationPeriodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationPeriodDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramEvaluationPeriodDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationPeriodDescriptor source, IProgramEvaluationPeriodDescriptor target, Action<IProgramEvaluationPeriodDescriptor, IProgramEvaluationPeriodDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationPeriodDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationPeriodDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramEvaluationPeriodDescriptorId = source.ProgramEvaluationPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramEvaluationTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramEvaluationTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramEvaluationTypeDescriptor = new FullName("edfi", "ProgramEvaluationTypeDescriptor");
    
        public static bool SynchronizeTo(this IProgramEvaluationTypeDescriptor source, IProgramEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramEvaluationTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramEvaluationTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgramEvaluationTypeDescriptor source, IProgramEvaluationTypeDescriptor target, Action<IProgramEvaluationTypeDescriptor, IProgramEvaluationTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramEvaluationTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramEvaluationTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramEvaluationTypeDescriptorId = source.ProgramEvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramSponsorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramSponsorDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramSponsorDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramSponsorDescriptor = new FullName("edfi", "ProgramSponsorDescriptor");
    
        public static bool SynchronizeTo(this IProgramSponsorDescriptor source, IProgramSponsorDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramSponsorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramSponsorDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramSponsorDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgramSponsorDescriptor source, IProgramSponsorDescriptor target, Action<IProgramSponsorDescriptor, IProgramSponsorDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramSponsorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramSponsorDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramSponsorDescriptorId = source.ProgramSponsorDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgramTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgramTypeDescriptor = new FullName("edfi", "ProgramTypeDescriptor");
    
        public static bool SynchronizeTo(this IProgramTypeDescriptor source, IProgramTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgramTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgramTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgramTypeDescriptor source, IProgramTypeDescriptor target, Action<IProgramTypeDescriptor, IProgramTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgramTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgramTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramTypeDescriptorId = source.ProgramTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgressDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgressDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgressDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgressDescriptor = new FullName("edfi", "ProgressDescriptor");
    
        public static bool SynchronizeTo(this IProgressDescriptor source, IProgressDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgressDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgressDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgressDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgressDescriptor source, IProgressDescriptor target, Action<IProgressDescriptor, IProgressDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgressDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgressDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgressDescriptorId = source.ProgressDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProgressLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgressLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgressLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProgressLevelDescriptor = new FullName("edfi", "ProgressLevelDescriptor");
    
        public static bool SynchronizeTo(this IProgressLevelDescriptor source, IProgressLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProgressLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgressLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProgressLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProgressLevelDescriptor source, IProgressLevelDescriptor target, Action<IProgressLevelDescriptor, IProgressLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProgressLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProgressLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgressLevelDescriptorId = source.ProgressLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProjectDimension

namespace EdFi.Ods.Entities.Common.EdFi //.ProjectDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProjectDimensionMapper
    {
        private static readonly FullName _fullName_edfi_ProjectDimension = new FullName("edfi", "ProjectDimension");
    
        public static bool SynchronizeTo(this IProjectDimension source, IProjectDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProjectDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProjectDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on ProjectDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsProjectDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.ProjectDimensionReportingTags.SynchronizeCollectionTo(
                        target.ProjectDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.ProjectDimension = target;
                            },
                        includeItem: item => mappingContract?.IsProjectDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProjectDimension source, IProjectDimension target, Action<IProjectDimension, IProjectDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProjectDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProjectDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsProjectDimensionReportingTagsSupported != false)
            {
                source.ProjectDimensionReportingTags.MapCollectionTo(target.ProjectDimensionReportingTags, target, mappingContract?.IsProjectDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ProjectDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_ProjectDimensionReportingTag = new FullName("edfi", "ProjectDimensionReportingTag");
    
        public static bool SynchronizeTo(this IProjectDimensionReportingTag source, IProjectDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProjectDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProjectDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IProjectDimensionReportingTag source, IProjectDimensionReportingTag target, Action<IProjectDimensionReportingTag, IProjectDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProjectDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProjectDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProviderCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProviderCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProviderCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProviderCategoryDescriptor = new FullName("edfi", "ProviderCategoryDescriptor");
    
        public static bool SynchronizeTo(this IProviderCategoryDescriptor source, IProviderCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProviderCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProviderCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProviderCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProviderCategoryDescriptor source, IProviderCategoryDescriptor target, Action<IProviderCategoryDescriptor, IProviderCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProviderCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProviderCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProviderCategoryDescriptorId = source.ProviderCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProviderProfitabilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProviderProfitabilityDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProviderProfitabilityDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProviderProfitabilityDescriptor = new FullName("edfi", "ProviderProfitabilityDescriptor");
    
        public static bool SynchronizeTo(this IProviderProfitabilityDescriptor source, IProviderProfitabilityDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProviderProfitabilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProviderProfitabilityDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProviderProfitabilityDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProviderProfitabilityDescriptor source, IProviderProfitabilityDescriptor target, Action<IProviderProfitabilityDescriptor, IProviderProfitabilityDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProviderProfitabilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProviderProfitabilityDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProviderProfitabilityDescriptorId = source.ProviderProfitabilityDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ProviderStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProviderStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProviderStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ProviderStatusDescriptor = new FullName("edfi", "ProviderStatusDescriptor");
    
        public static bool SynchronizeTo(this IProviderStatusDescriptor source, IProviderStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ProviderStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProviderStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ProviderStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IProviderStatusDescriptor source, IProviderStatusDescriptor target, Action<IProviderStatusDescriptor, IProviderStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ProviderStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ProviderStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProviderStatusDescriptorId = source.ProviderStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: PublicationStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PublicationStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PublicationStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_PublicationStatusDescriptor = new FullName("edfi", "PublicationStatusDescriptor");
    
        public static bool SynchronizeTo(this IPublicationStatusDescriptor source, IPublicationStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (PublicationStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PublicationStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on PublicationStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IPublicationStatusDescriptor source, IPublicationStatusDescriptor target, Action<IPublicationStatusDescriptor, IPublicationStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (PublicationStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_PublicationStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PublicationStatusDescriptorId = source.PublicationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: QuestionFormDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.QuestionFormDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class QuestionFormDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_QuestionFormDescriptor = new FullName("edfi", "QuestionFormDescriptor");
    
        public static bool SynchronizeTo(this IQuestionFormDescriptor source, IQuestionFormDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (QuestionFormDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_QuestionFormDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on QuestionFormDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IQuestionFormDescriptor source, IQuestionFormDescriptor target, Action<IQuestionFormDescriptor, IQuestionFormDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (QuestionFormDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_QuestionFormDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.QuestionFormDescriptorId = source.QuestionFormDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RaceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RaceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RaceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RaceDescriptor = new FullName("edfi", "RaceDescriptor");
    
        public static bool SynchronizeTo(this IRaceDescriptor source, IRaceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RaceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RaceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RaceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRaceDescriptor source, IRaceDescriptor target, Action<IRaceDescriptor, IRaceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RaceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RaceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RaceDescriptorId = source.RaceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RatingLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RatingLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RatingLevelDescriptor = new FullName("edfi", "RatingLevelDescriptor");
    
        public static bool SynchronizeTo(this IRatingLevelDescriptor source, IRatingLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RatingLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RatingLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RatingLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRatingLevelDescriptor source, IRatingLevelDescriptor target, Action<IRatingLevelDescriptor, IRatingLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RatingLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RatingLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RatingLevelDescriptorId = source.RatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ReasonExitedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReasonExitedDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ReasonExitedDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ReasonExitedDescriptor = new FullName("edfi", "ReasonExitedDescriptor");
    
        public static bool SynchronizeTo(this IReasonExitedDescriptor source, IReasonExitedDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReasonExitedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReasonExitedDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ReasonExitedDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IReasonExitedDescriptor source, IReasonExitedDescriptor target, Action<IReasonExitedDescriptor, IReasonExitedDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReasonExitedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReasonExitedDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReasonExitedDescriptorId = source.ReasonExitedDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ReasonNotTestedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReasonNotTestedDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ReasonNotTestedDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ReasonNotTestedDescriptor = new FullName("edfi", "ReasonNotTestedDescriptor");
    
        public static bool SynchronizeTo(this IReasonNotTestedDescriptor source, IReasonNotTestedDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReasonNotTestedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReasonNotTestedDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ReasonNotTestedDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IReasonNotTestedDescriptor source, IReasonNotTestedDescriptor target, Action<IReasonNotTestedDescriptor, IReasonNotTestedDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReasonNotTestedDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReasonNotTestedDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReasonNotTestedDescriptorId = source.ReasonNotTestedDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RecognitionTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RecognitionTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RecognitionTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RecognitionTypeDescriptor = new FullName("edfi", "RecognitionTypeDescriptor");
    
        public static bool SynchronizeTo(this IRecognitionTypeDescriptor source, IRecognitionTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RecognitionTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RecognitionTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RecognitionTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRecognitionTypeDescriptor source, IRecognitionTypeDescriptor target, Action<IRecognitionTypeDescriptor, IRecognitionTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RecognitionTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RecognitionTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RecognitionTypeDescriptorId = source.RecognitionTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RelationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RelationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RelationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RelationDescriptor = new FullName("edfi", "RelationDescriptor");
    
        public static bool SynchronizeTo(this IRelationDescriptor source, IRelationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RelationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RelationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RelationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRelationDescriptor source, IRelationDescriptor target, Action<IRelationDescriptor, IRelationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RelationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RelationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RelationDescriptorId = source.RelationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RepeatIdentifierDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RepeatIdentifierDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RepeatIdentifierDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RepeatIdentifierDescriptor = new FullName("edfi", "RepeatIdentifierDescriptor");
    
        public static bool SynchronizeTo(this IRepeatIdentifierDescriptor source, IRepeatIdentifierDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RepeatIdentifierDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RepeatIdentifierDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RepeatIdentifierDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRepeatIdentifierDescriptor source, IRepeatIdentifierDescriptor target, Action<IRepeatIdentifierDescriptor, IRepeatIdentifierDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RepeatIdentifierDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RepeatIdentifierDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RepeatIdentifierDescriptorId = source.RepeatIdentifierDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ReportCard

namespace EdFi.Ods.Entities.Common.EdFi //.ReportCardAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ReportCardMapper
    {
        private static readonly FullName _fullName_edfi_ReportCard = new FullName("edfi", "ReportCard");
    
        public static bool SynchronizeTo(this IReportCard source, IReportCard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReportCardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCard);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || !string.Equals(target.GradingPeriodDescriptor, source.GradingPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.GradingPeriodName, source.GradingPeriodName))
                || (target.GradingPeriodSchoolId != source.GradingPeriodSchoolId)
                || (target.GradingPeriodSchoolYear != source.GradingPeriodSchoolYear)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on ReportCard
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsNumberOfDaysAbsentSupported != false)
                && target.NumberOfDaysAbsent != source.NumberOfDaysAbsent)
            {
                target.NumberOfDaysAbsent = source.NumberOfDaysAbsent;
                isModified = true;
            }

            if ((mappingContract?.IsNumberOfDaysInAttendanceSupported != false)
                && target.NumberOfDaysInAttendance != source.NumberOfDaysInAttendance)
            {
                target.NumberOfDaysInAttendance = source.NumberOfDaysInAttendance;
                isModified = true;
            }

            if ((mappingContract?.IsNumberOfDaysTardySupported != false)
                && target.NumberOfDaysTardy != source.NumberOfDaysTardy)
            {
                target.NumberOfDaysTardy = source.NumberOfDaysTardy;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsReportCardGradesSupported ?? true)
            {
                isModified |=
                    source.ReportCardGrades.SynchronizeCollectionTo(
                        target.ReportCardGrades,
                        onChildAdded: child =>
                            {
                                child.ReportCard = target;
                            },
                        includeItem: item => mappingContract?.IsReportCardGradeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsReportCardGradePointAveragesSupported ?? true)
            {
                isModified |=
                    source.ReportCardGradePointAverages.SynchronizeCollectionTo(
                        target.ReportCardGradePointAverages,
                        onChildAdded: child =>
                            {
                                child.ReportCard = target;
                            },
                        includeItem: item => mappingContract?.IsReportCardGradePointAverageIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsReportCardStudentCompetencyObjectivesSupported ?? true)
            {
                isModified |=
                    source.ReportCardStudentCompetencyObjectives.SynchronizeCollectionTo(
                        target.ReportCardStudentCompetencyObjectives,
                        onChildAdded: child =>
                            {
                                child.ReportCard = target;
                            },
                        includeItem: item => mappingContract?.IsReportCardStudentCompetencyObjectiveIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IReportCard source, IReportCard target, Action<IReportCard, IReportCard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReportCardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCard);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodName = source.GradingPeriodName;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsNumberOfDaysAbsentSupported != false)
                target.NumberOfDaysAbsent = source.NumberOfDaysAbsent;

            if (mappingContract?.IsNumberOfDaysInAttendanceSupported != false)
                target.NumberOfDaysInAttendance = source.NumberOfDaysInAttendance;

            if (mappingContract?.IsNumberOfDaysTardySupported != false)
                target.NumberOfDaysTardy = source.NumberOfDaysTardy;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsReportCardGradesSupported != false)
            {
                source.ReportCardGrades.MapCollectionTo(target.ReportCardGrades, target, mappingContract?.IsReportCardGradeIncluded);
            }

            if (mappingContract?.IsReportCardGradePointAveragesSupported != false)
            {
                source.ReportCardGradePointAverages.MapCollectionTo(target.ReportCardGradePointAverages, target, mappingContract?.IsReportCardGradePointAverageIncluded);
            }

            if (mappingContract?.IsReportCardStudentCompetencyObjectivesSupported != false)
            {
                source.ReportCardStudentCompetencyObjectives.MapCollectionTo(target.ReportCardStudentCompetencyObjectives, target, mappingContract?.IsReportCardStudentCompetencyObjectiveIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ReportCardGradeMapper
    {
        private static readonly FullName _fullName_edfi_ReportCardGrade = new FullName("edfi", "ReportCardGrade");
    
        public static bool SynchronizeTo(this IReportCardGrade source, IReportCardGrade target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReportCardGradeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCardGrade);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IReportCardGrade source, IReportCardGrade target, Action<IReportCardGrade, IReportCardGrade> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReportCardGradeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCardGrade);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.GradeTypeDescriptor = source.GradeTypeDescriptor;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradeResourceId = source.GradeResourceId;
                target.GradeDiscriminator = source.GradeDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ReportCardGradePointAverageMapper
    {
        private static readonly FullName _fullName_edfi_ReportCardGradePointAverage = new FullName("edfi", "ReportCardGradePointAverage");
    
        public static bool SynchronizeTo(this IReportCardGradePointAverage source, IReportCardGradePointAverage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReportCardGradePointAverageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCardGradePointAverage);


            // Copy non-PK properties

            if ((mappingContract?.IsGradePointAverageValueSupported != false)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((mappingContract?.IsIsCumulativeSupported != false)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((mappingContract?.IsMaxGradePointAverageValueSupported != false)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IReportCardGradePointAverage source, IReportCardGradePointAverage target, Action<IReportCardGradePointAverage, IReportCardGradePointAverage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReportCardGradePointAverageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCardGradePointAverage);
    
            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsGradePointAverageValueSupported != false)
                target.GradePointAverageValue = source.GradePointAverageValue;

            if (mappingContract?.IsIsCumulativeSupported != false)
                target.IsCumulative = source.IsCumulative;

            if (mappingContract?.IsMaxGradePointAverageValueSupported != false)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class ReportCardStudentCompetencyObjectiveMapper
    {
        private static readonly FullName _fullName_edfi_ReportCardStudentCompetencyObjective = new FullName("edfi", "ReportCardStudentCompetencyObjective");
    
        public static bool SynchronizeTo(this IReportCardStudentCompetencyObjective source, IReportCardStudentCompetencyObjective target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReportCardStudentCompetencyObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCardStudentCompetencyObjective);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IReportCardStudentCompetencyObjective source, IReportCardStudentCompetencyObjective target, Action<IReportCardStudentCompetencyObjective, IReportCardStudentCompetencyObjective> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReportCardStudentCompetencyObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportCardStudentCompetencyObjective);
    
            // Copy contextual primary key values
            target.Objective = source.Objective;
            target.ObjectiveEducationOrganizationId = source.ObjectiveEducationOrganizationId;
            target.ObjectiveGradeLevelDescriptor = source.ObjectiveGradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentCompetencyObjectiveResourceId = source.StudentCompetencyObjectiveResourceId;
                target.StudentCompetencyObjectiveDiscriminator = source.StudentCompetencyObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ReporterDescriptionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReporterDescriptionDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ReporterDescriptionDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ReporterDescriptionDescriptor = new FullName("edfi", "ReporterDescriptionDescriptor");
    
        public static bool SynchronizeTo(this IReporterDescriptionDescriptor source, IReporterDescriptionDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReporterDescriptionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReporterDescriptionDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ReporterDescriptionDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IReporterDescriptionDescriptor source, IReporterDescriptionDescriptor target, Action<IReporterDescriptionDescriptor, IReporterDescriptionDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReporterDescriptionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReporterDescriptionDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReporterDescriptionDescriptorId = source.ReporterDescriptionDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ReportingTagDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReportingTagDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ReportingTagDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ReportingTagDescriptor = new FullName("edfi", "ReportingTagDescriptor");
    
        public static bool SynchronizeTo(this IReportingTagDescriptor source, IReportingTagDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ReportingTagDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportingTagDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ReportingTagDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IReportingTagDescriptor source, IReportingTagDescriptor target, Action<IReportingTagDescriptor, IReportingTagDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ReportingTagDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ReportingTagDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReportingTagDescriptorId = source.ReportingTagDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ResidencyStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResidencyStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ResidencyStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ResidencyStatusDescriptor = new FullName("edfi", "ResidencyStatusDescriptor");
    
        public static bool SynchronizeTo(this IResidencyStatusDescriptor source, IResidencyStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ResidencyStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResidencyStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ResidencyStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IResidencyStatusDescriptor source, IResidencyStatusDescriptor target, Action<IResidencyStatusDescriptor, IResidencyStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ResidencyStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResidencyStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResidencyStatusDescriptorId = source.ResidencyStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ResponseIndicatorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResponseIndicatorDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ResponseIndicatorDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ResponseIndicatorDescriptor = new FullName("edfi", "ResponseIndicatorDescriptor");
    
        public static bool SynchronizeTo(this IResponseIndicatorDescriptor source, IResponseIndicatorDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ResponseIndicatorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResponseIndicatorDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ResponseIndicatorDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IResponseIndicatorDescriptor source, IResponseIndicatorDescriptor target, Action<IResponseIndicatorDescriptor, IResponseIndicatorDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ResponseIndicatorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResponseIndicatorDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResponseIndicatorDescriptorId = source.ResponseIndicatorDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ResponsibilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResponsibilityDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ResponsibilityDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ResponsibilityDescriptor = new FullName("edfi", "ResponsibilityDescriptor");
    
        public static bool SynchronizeTo(this IResponsibilityDescriptor source, IResponsibilityDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ResponsibilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResponsibilityDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ResponsibilityDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IResponsibilityDescriptor source, IResponsibilityDescriptor target, Action<IResponsibilityDescriptor, IResponsibilityDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ResponsibilityDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResponsibilityDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResponsibilityDescriptorId = source.ResponsibilityDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RestraintEvent

namespace EdFi.Ods.Entities.Common.EdFi //.RestraintEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RestraintEventMapper
    {
        private static readonly FullName _fullName_edfi_RestraintEvent = new FullName("edfi", "RestraintEvent");
    
        public static bool SynchronizeTo(this IRestraintEvent source, IRestraintEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RestraintEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEvent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.RestraintEventIdentifier, source.RestraintEventIdentifier))
                || (target.SchoolId != source.SchoolId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on RestraintEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEventDateSupported != false)
                && target.EventDate != source.EventDate)
            {
                target.EventDate = source.EventDate;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsRestraintEventProgramsSupported ?? true)
            {
                isModified |=
                    source.RestraintEventPrograms.SynchronizeCollectionTo(
                        target.RestraintEventPrograms,
                        onChildAdded: child =>
                            {
                                child.RestraintEvent = target;
                            },
                        includeItem: item => mappingContract?.IsRestraintEventProgramIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsRestraintEventReasonsSupported ?? true)
            {
                isModified |=
                    source.RestraintEventReasons.SynchronizeCollectionTo(
                        target.RestraintEventReasons,
                        onChildAdded: child =>
                            {
                                child.RestraintEvent = target;
                            },
                        includeItem: item => mappingContract?.IsRestraintEventReasonIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IRestraintEvent source, IRestraintEvent target, Action<IRestraintEvent, IRestraintEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RestraintEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RestraintEventIdentifier = source.RestraintEventIdentifier;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;

            if (mappingContract?.IsEventDateSupported != false)
                target.EventDate = source.EventDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsRestraintEventProgramsSupported != false)
            {
                source.RestraintEventPrograms.MapCollectionTo(target.RestraintEventPrograms, target, mappingContract?.IsRestraintEventProgramIncluded);
            }

            if (mappingContract?.IsRestraintEventReasonsSupported != false)
            {
                source.RestraintEventReasons.MapCollectionTo(target.RestraintEventReasons, target, mappingContract?.IsRestraintEventReasonIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class RestraintEventProgramMapper
    {
        private static readonly FullName _fullName_edfi_RestraintEventProgram = new FullName("edfi", "RestraintEventProgram");
    
        public static bool SynchronizeTo(this IRestraintEventProgram source, IRestraintEventProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RestraintEventProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEventProgram);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IRestraintEventProgram source, IRestraintEventProgram target, Action<IRestraintEventProgram, IRestraintEventProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RestraintEventProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEventProgram);
    
            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class RestraintEventReasonMapper
    {
        private static readonly FullName _fullName_edfi_RestraintEventReason = new FullName("edfi", "RestraintEventReason");
    
        public static bool SynchronizeTo(this IRestraintEventReason source, IRestraintEventReason target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RestraintEventReasonMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEventReason);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IRestraintEventReason source, IRestraintEventReason target, Action<IRestraintEventReason, IRestraintEventReason> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RestraintEventReasonMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEventReason);
    
            // Copy contextual primary key values
            target.RestraintEventReasonDescriptor = source.RestraintEventReasonDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RestraintEventReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RestraintEventReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RestraintEventReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RestraintEventReasonDescriptor = new FullName("edfi", "RestraintEventReasonDescriptor");
    
        public static bool SynchronizeTo(this IRestraintEventReasonDescriptor source, IRestraintEventReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RestraintEventReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEventReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RestraintEventReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRestraintEventReasonDescriptor source, IRestraintEventReasonDescriptor target, Action<IRestraintEventReasonDescriptor, IRestraintEventReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RestraintEventReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RestraintEventReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RestraintEventReasonDescriptorId = source.RestraintEventReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ResultDatatypeTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResultDatatypeTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ResultDatatypeTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ResultDatatypeTypeDescriptor = new FullName("edfi", "ResultDatatypeTypeDescriptor");
    
        public static bool SynchronizeTo(this IResultDatatypeTypeDescriptor source, IResultDatatypeTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ResultDatatypeTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResultDatatypeTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ResultDatatypeTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IResultDatatypeTypeDescriptor source, IResultDatatypeTypeDescriptor target, Action<IResultDatatypeTypeDescriptor, IResultDatatypeTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ResultDatatypeTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ResultDatatypeTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResultDatatypeTypeDescriptorId = source.ResultDatatypeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: RetestIndicatorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RetestIndicatorDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RetestIndicatorDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_RetestIndicatorDescriptor = new FullName("edfi", "RetestIndicatorDescriptor");
    
        public static bool SynchronizeTo(this IRetestIndicatorDescriptor source, IRetestIndicatorDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (RetestIndicatorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RetestIndicatorDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on RetestIndicatorDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IRetestIndicatorDescriptor source, IRetestIndicatorDescriptor target, Action<IRetestIndicatorDescriptor, IRetestIndicatorDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (RetestIndicatorDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_RetestIndicatorDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RetestIndicatorDescriptorId = source.RetestIndicatorDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: School

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolMapper
    {
        private static readonly FullName _fullName_edfi_School = new FullName("edfi", "School");
    
        public static bool SynchronizeTo(this ISchool source, ISchool target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_School);

            // Detect primary key changes
            if (
                 (target.SchoolId != source.SchoolId))
            {
                // Disallow PK column updates on School
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsAdministrativeFundingControlDescriptorSupported != false)
                && target.AdministrativeFundingControlDescriptor != source.AdministrativeFundingControlDescriptor)
            {
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCharterApprovalAgencyTypeDescriptorSupported != false)
                && target.CharterApprovalAgencyTypeDescriptor != source.CharterApprovalAgencyTypeDescriptor)
            {
                target.CharterApprovalAgencyTypeDescriptor = source.CharterApprovalAgencyTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCharterApprovalSchoolYearSupported != false)
                && target.CharterApprovalSchoolYear != source.CharterApprovalSchoolYear)
            {
                target.CharterApprovalSchoolYear = source.CharterApprovalSchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsCharterStatusDescriptorSupported != false)
                && target.CharterStatusDescriptor != source.CharterStatusDescriptor)
            {
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsInternetAccessDescriptorSupported != false)
                && target.InternetAccessDescriptor != source.InternetAccessDescriptor)
            {
                target.InternetAccessDescriptor = source.InternetAccessDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLocalEducationAgencyIdSupported != false)
                && target.LocalEducationAgencyId != source.LocalEducationAgencyId)
            {
                target.LocalEducationAgencyId = source.LocalEducationAgencyId;
                isModified = true;
            }

            if ((mappingContract?.IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported != false)
                && target.MagnetSpecialProgramEmphasisSchoolDescriptor != source.MagnetSpecialProgramEmphasisSchoolDescriptor)
            {
                target.MagnetSpecialProgramEmphasisSchoolDescriptor = source.MagnetSpecialProgramEmphasisSchoolDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolTypeDescriptorSupported != false)
                && target.SchoolTypeDescriptor != source.SchoolTypeDescriptor)
            {
                target.SchoolTypeDescriptor = source.SchoolTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsTitleIPartASchoolDesignationDescriptorSupported != false)
                && target.TitleIPartASchoolDesignationDescriptor != source.TitleIPartASchoolDesignationDescriptor)
            {
                target.TitleIPartASchoolDesignationDescriptor = source.TitleIPartASchoolDesignationDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsSchoolCategoriesSupported ?? true)
            {
                isModified |=
                    source.SchoolCategories.SynchronizeCollectionTo(
                        target.SchoolCategories,
                        onChildAdded: child =>
                            {
                                child.School = target;
                            },
                        includeItem: item => mappingContract?.IsSchoolCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSchoolGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.SchoolGradeLevels.SynchronizeCollectionTo(
                        target.SchoolGradeLevels,
                        onChildAdded: child =>
                            {
                                child.School = target;
                            },
                        includeItem: item => mappingContract?.IsSchoolGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISchool source, ISchool target, Action<ISchool, ISchool> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_School);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            if (mappingContract?.IsAdministrativeFundingControlDescriptorSupported != false)
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;

            if (mappingContract?.IsCharterApprovalAgencyTypeDescriptorSupported != false)
                target.CharterApprovalAgencyTypeDescriptor = source.CharterApprovalAgencyTypeDescriptor;

            if (mappingContract?.IsCharterApprovalSchoolYearSupported != false)
                target.CharterApprovalSchoolYear = source.CharterApprovalSchoolYear;

            if (mappingContract?.IsCharterStatusDescriptorSupported != false)
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;

            if (mappingContract?.IsInternetAccessDescriptorSupported != false)
                target.InternetAccessDescriptor = source.InternetAccessDescriptor;

            if (mappingContract?.IsLocalEducationAgencyIdSupported != false)
                target.LocalEducationAgencyId = source.LocalEducationAgencyId;

            if (mappingContract?.IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported != false)
                target.MagnetSpecialProgramEmphasisSchoolDescriptor = source.MagnetSpecialProgramEmphasisSchoolDescriptor;

            if (mappingContract?.IsSchoolTypeDescriptorSupported != false)
                target.SchoolTypeDescriptor = source.SchoolTypeDescriptor;

            if (mappingContract?.IsTitleIPartASchoolDesignationDescriptorSupported != false)
                target.TitleIPartASchoolDesignationDescriptor = source.TitleIPartASchoolDesignationDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CharterApprovalSchoolYearTypeResourceId = source.CharterApprovalSchoolYearTypeResourceId;
                target.LocalEducationAgencyResourceId = source.LocalEducationAgencyResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            if (mappingContract?.IsSchoolCategoriesSupported != false)
            {
                source.SchoolCategories.MapCollectionTo(target.SchoolCategories, target, mappingContract?.IsSchoolCategoryIncluded);
            }

            if (mappingContract?.IsSchoolGradeLevelsSupported != false)
            {
                source.SchoolGradeLevels.MapCollectionTo(target.SchoolGradeLevels, target, mappingContract?.IsSchoolGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SchoolCategoryMapper
    {
        private static readonly FullName _fullName_edfi_SchoolCategory = new FullName("edfi", "SchoolCategory");
    
        public static bool SynchronizeTo(this ISchoolCategory source, ISchoolCategory target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolCategory);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISchoolCategory source, ISchoolCategory target, Action<ISchoolCategory, ISchoolCategory> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolCategoryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolCategory);
    
            // Copy contextual primary key values
            target.SchoolCategoryDescriptor = source.SchoolCategoryDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SchoolGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_SchoolGradeLevel = new FullName("edfi", "SchoolGradeLevel");
    
        public static bool SynchronizeTo(this ISchoolGradeLevel source, ISchoolGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISchoolGradeLevel source, ISchoolGradeLevel target, Action<ISchoolGradeLevel, ISchoolGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SchoolCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SchoolCategoryDescriptor = new FullName("edfi", "SchoolCategoryDescriptor");
    
        public static bool SynchronizeTo(this ISchoolCategoryDescriptor source, ISchoolCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SchoolCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISchoolCategoryDescriptor source, ISchoolCategoryDescriptor target, Action<ISchoolCategoryDescriptor, ISchoolCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolCategoryDescriptorId = source.SchoolCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SchoolChoiceBasisDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolChoiceBasisDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolChoiceBasisDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SchoolChoiceBasisDescriptor = new FullName("edfi", "SchoolChoiceBasisDescriptor");
    
        public static bool SynchronizeTo(this ISchoolChoiceBasisDescriptor source, ISchoolChoiceBasisDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolChoiceBasisDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolChoiceBasisDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SchoolChoiceBasisDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISchoolChoiceBasisDescriptor source, ISchoolChoiceBasisDescriptor target, Action<ISchoolChoiceBasisDescriptor, ISchoolChoiceBasisDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolChoiceBasisDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolChoiceBasisDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolChoiceBasisDescriptorId = source.SchoolChoiceBasisDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SchoolChoiceImplementStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolChoiceImplementStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolChoiceImplementStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SchoolChoiceImplementStatusDescriptor = new FullName("edfi", "SchoolChoiceImplementStatusDescriptor");
    
        public static bool SynchronizeTo(this ISchoolChoiceImplementStatusDescriptor source, ISchoolChoiceImplementStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolChoiceImplementStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolChoiceImplementStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SchoolChoiceImplementStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISchoolChoiceImplementStatusDescriptor source, ISchoolChoiceImplementStatusDescriptor target, Action<ISchoolChoiceImplementStatusDescriptor, ISchoolChoiceImplementStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolChoiceImplementStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolChoiceImplementStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolChoiceImplementStatusDescriptorId = source.SchoolChoiceImplementStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SchoolFoodServiceProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolFoodServiceProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolFoodServiceProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SchoolFoodServiceProgramServiceDescriptor = new FullName("edfi", "SchoolFoodServiceProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this ISchoolFoodServiceProgramServiceDescriptor source, ISchoolFoodServiceProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolFoodServiceProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolFoodServiceProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SchoolFoodServiceProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISchoolFoodServiceProgramServiceDescriptor source, ISchoolFoodServiceProgramServiceDescriptor target, Action<ISchoolFoodServiceProgramServiceDescriptor, ISchoolFoodServiceProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolFoodServiceProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolFoodServiceProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptorId = source.SchoolFoodServiceProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SchoolTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SchoolTypeDescriptor = new FullName("edfi", "SchoolTypeDescriptor");
    
        public static bool SynchronizeTo(this ISchoolTypeDescriptor source, ISchoolTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SchoolTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISchoolTypeDescriptor source, ISchoolTypeDescriptor target, Action<ISchoolTypeDescriptor, ISchoolTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolTypeDescriptorId = source.SchoolTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SchoolYearType

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolYearTypeAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolYearTypeMapper
    {
        private static readonly FullName _fullName_edfi_SchoolYearType = new FullName("edfi", "SchoolYearType");
    
        public static bool SynchronizeTo(this ISchoolYearType source, ISchoolYearType target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SchoolYearTypeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolYearType);

            // Detect primary key changes
            if (
                 (target.SchoolYear != source.SchoolYear))
            {
                // Disallow PK column updates on SchoolYearType
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCurrentSchoolYearSupported != false)
                && target.CurrentSchoolYear != source.CurrentSchoolYear)
            {
                target.CurrentSchoolYear = source.CurrentSchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolYearDescriptionSupported != false)
                && target.SchoolYearDescription != source.SchoolYearDescription)
            {
                target.SchoolYearDescription = source.SchoolYearDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISchoolYearType source, ISchoolYearType target, Action<ISchoolYearType, ISchoolYearType> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SchoolYearTypeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SchoolYearType);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsCurrentSchoolYearSupported != false)
                target.CurrentSchoolYear = source.CurrentSchoolYear;

            if (mappingContract?.IsSchoolYearDescriptionSupported != false)
                target.SchoolYearDescription = source.SchoolYearDescription;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Section

namespace EdFi.Ods.Entities.Common.EdFi //.SectionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SectionMapper
    {
        private static readonly FullName _fullName_edfi_Section = new FullName("edfi", "Section");
    
        public static bool SynchronizeTo(this ISection source, ISection target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Section);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName)))
            {
                // Allow PK column updates on Section
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.LocalCourseCode != target.LocalCourseCode)
                {
                    source.LocalCourseCode = target.LocalCourseCode;
                }
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
                if (source.SchoolYear != target.SchoolYear)
                {
                    source.SchoolYear = target.SchoolYear;
                }
                if (source.SectionIdentifier != target.SectionIdentifier)
                {
                    source.SectionIdentifier = target.SectionIdentifier;
                }
                if (source.SessionName != target.SessionName)
                {
                    source.SessionName = target.SessionName;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAvailableCreditConversionSupported != false)
                && target.AvailableCreditConversion != source.AvailableCreditConversion)
            {
                target.AvailableCreditConversion = source.AvailableCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsAvailableCreditsSupported != false)
                && target.AvailableCredits != source.AvailableCredits)
            {
                target.AvailableCredits = source.AvailableCredits;
                isModified = true;
            }

            if ((mappingContract?.IsAvailableCreditTypeDescriptorSupported != false)
                && target.AvailableCreditTypeDescriptor != source.AvailableCreditTypeDescriptor)
            {
                target.AvailableCreditTypeDescriptor = source.AvailableCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsInstructionLanguageDescriptorSupported != false)
                && target.InstructionLanguageDescriptor != source.InstructionLanguageDescriptor)
            {
                target.InstructionLanguageDescriptor = source.InstructionLanguageDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLocationClassroomIdentificationCodeSupported != false)
                && target.LocationClassroomIdentificationCode != source.LocationClassroomIdentificationCode)
            {
                target.LocationClassroomIdentificationCode = source.LocationClassroomIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsLocationSchoolIdSupported != false)
                && target.LocationSchoolId != source.LocationSchoolId)
            {
                target.LocationSchoolId = source.LocationSchoolId;
                isModified = true;
            }

            if ((mappingContract?.IsMediumOfInstructionDescriptorSupported != false)
                && target.MediumOfInstructionDescriptor != source.MediumOfInstructionDescriptor)
            {
                target.MediumOfInstructionDescriptor = source.MediumOfInstructionDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsOfficialAttendancePeriodSupported != false)
                && target.OfficialAttendancePeriod != source.OfficialAttendancePeriod)
            {
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;
                isModified = true;
            }

            if ((mappingContract?.IsPopulationServedDescriptorSupported != false)
                && target.PopulationServedDescriptor != source.PopulationServedDescriptor)
            {
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSectionNameSupported != false)
                && target.SectionName != source.SectionName)
            {
                target.SectionName = source.SectionName;
                isModified = true;
            }

            if ((mappingContract?.IsSectionTypeDescriptorSupported != false)
                && target.SectionTypeDescriptor != source.SectionTypeDescriptor)
            {
                target.SectionTypeDescriptor = source.SectionTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSequenceOfCourseSupported != false)
                && target.SequenceOfCourse != source.SequenceOfCourse)
            {
                target.SequenceOfCourse = source.SequenceOfCourse;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsSectionCharacteristicsSupported ?? true)
            {
                isModified |=
                    source.SectionCharacteristics.SynchronizeCollectionTo(
                        target.SectionCharacteristics,
                        onChildAdded: child =>
                            {
                                child.Section = target;
                            },
                        includeItem: item => mappingContract?.IsSectionCharacteristicIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSectionClassPeriodsSupported ?? true)
            {
                isModified |=
                    source.SectionClassPeriods.SynchronizeCollectionTo(
                        target.SectionClassPeriods,
                        onChildAdded: child =>
                            {
                                child.Section = target;
                            },
                        includeItem: item => mappingContract?.IsSectionClassPeriodIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSectionCourseLevelCharacteristicsSupported ?? true)
            {
                isModified |=
                    source.SectionCourseLevelCharacteristics.SynchronizeCollectionTo(
                        target.SectionCourseLevelCharacteristics,
                        onChildAdded: child =>
                            {
                                child.Section = target;
                            },
                        includeItem: item => mappingContract?.IsSectionCourseLevelCharacteristicIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSectionOfferedGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.SectionOfferedGradeLevels.SynchronizeCollectionTo(
                        target.SectionOfferedGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Section = target;
                            },
                        includeItem: item => mappingContract?.IsSectionOfferedGradeLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSectionProgramsSupported ?? true)
            {
                isModified |=
                    source.SectionPrograms.SynchronizeCollectionTo(
                        target.SectionPrograms,
                        onChildAdded: child =>
                            {
                                child.Section = target;
                            },
                        includeItem: item => mappingContract?.IsSectionProgramIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISection source, ISection target, Action<ISection, ISection> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Section);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (mappingContract?.IsAvailableCreditConversionSupported != false)
                target.AvailableCreditConversion = source.AvailableCreditConversion;

            if (mappingContract?.IsAvailableCreditsSupported != false)
                target.AvailableCredits = source.AvailableCredits;

            if (mappingContract?.IsAvailableCreditTypeDescriptorSupported != false)
                target.AvailableCreditTypeDescriptor = source.AvailableCreditTypeDescriptor;

            if (mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;

            if (mappingContract?.IsInstructionLanguageDescriptorSupported != false)
                target.InstructionLanguageDescriptor = source.InstructionLanguageDescriptor;

            if (mappingContract?.IsLocationClassroomIdentificationCodeSupported != false)
                target.LocationClassroomIdentificationCode = source.LocationClassroomIdentificationCode;

            if (mappingContract?.IsLocationSchoolIdSupported != false)
                target.LocationSchoolId = source.LocationSchoolId;

            if (mappingContract?.IsMediumOfInstructionDescriptorSupported != false)
                target.MediumOfInstructionDescriptor = source.MediumOfInstructionDescriptor;

            if (mappingContract?.IsOfficialAttendancePeriodSupported != false)
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;

            if (mappingContract?.IsPopulationServedDescriptorSupported != false)
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            if (mappingContract?.IsSectionNameSupported != false)
                target.SectionName = source.SectionName;

            if (mappingContract?.IsSectionTypeDescriptorSupported != false)
                target.SectionTypeDescriptor = source.SectionTypeDescriptor;

            if (mappingContract?.IsSequenceOfCourseSupported != false)
                target.SequenceOfCourse = source.SequenceOfCourse;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseOfferingResourceId = source.CourseOfferingResourceId;
                target.CourseOfferingDiscriminator = source.CourseOfferingDiscriminator;
                target.LocationResourceId = source.LocationResourceId;
                target.LocationDiscriminator = source.LocationDiscriminator;
                target.LocationSchoolResourceId = source.LocationSchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsSectionCharacteristicsSupported != false)
            {
                source.SectionCharacteristics.MapCollectionTo(target.SectionCharacteristics, target, mappingContract?.IsSectionCharacteristicIncluded);
            }

            if (mappingContract?.IsSectionClassPeriodsSupported != false)
            {
                source.SectionClassPeriods.MapCollectionTo(target.SectionClassPeriods, target, mappingContract?.IsSectionClassPeriodIncluded);
            }

            if (mappingContract?.IsSectionCourseLevelCharacteristicsSupported != false)
            {
                source.SectionCourseLevelCharacteristics.MapCollectionTo(target.SectionCourseLevelCharacteristics, target, mappingContract?.IsSectionCourseLevelCharacteristicIncluded);
            }

            if (mappingContract?.IsSectionOfferedGradeLevelsSupported != false)
            {
                source.SectionOfferedGradeLevels.MapCollectionTo(target.SectionOfferedGradeLevels, target, mappingContract?.IsSectionOfferedGradeLevelIncluded);
            }

            if (mappingContract?.IsSectionProgramsSupported != false)
            {
                source.SectionPrograms.MapCollectionTo(target.SectionPrograms, target, mappingContract?.IsSectionProgramIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SectionCharacteristicMapper
    {
        private static readonly FullName _fullName_edfi_SectionCharacteristic = new FullName("edfi", "SectionCharacteristic");
    
        public static bool SynchronizeTo(this ISectionCharacteristic source, ISectionCharacteristic target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionCharacteristic);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISectionCharacteristic source, ISectionCharacteristic target, Action<ISectionCharacteristic, ISectionCharacteristic> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionCharacteristic);
    
            // Copy contextual primary key values
            target.SectionCharacteristicDescriptor = source.SectionCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SectionClassPeriodMapper
    {
        private static readonly FullName _fullName_edfi_SectionClassPeriod = new FullName("edfi", "SectionClassPeriod");
    
        public static bool SynchronizeTo(this ISectionClassPeriod source, ISectionClassPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionClassPeriod);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISectionClassPeriod source, ISectionClassPeriod target, Action<ISectionClassPeriod, ISectionClassPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionClassPeriod);
    
            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassPeriodResourceId = source.ClassPeriodResourceId;
                target.ClassPeriodDiscriminator = source.ClassPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SectionCourseLevelCharacteristicMapper
    {
        private static readonly FullName _fullName_edfi_SectionCourseLevelCharacteristic = new FullName("edfi", "SectionCourseLevelCharacteristic");
    
        public static bool SynchronizeTo(this ISectionCourseLevelCharacteristic source, ISectionCourseLevelCharacteristic target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionCourseLevelCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionCourseLevelCharacteristic);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISectionCourseLevelCharacteristic source, ISectionCourseLevelCharacteristic target, Action<ISectionCourseLevelCharacteristic, ISectionCourseLevelCharacteristic> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionCourseLevelCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionCourseLevelCharacteristic);
    
            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptor = source.CourseLevelCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SectionOfferedGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_SectionOfferedGradeLevel = new FullName("edfi", "SectionOfferedGradeLevel");
    
        public static bool SynchronizeTo(this ISectionOfferedGradeLevel source, ISectionOfferedGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionOfferedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionOfferedGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISectionOfferedGradeLevel source, ISectionOfferedGradeLevel target, Action<ISectionOfferedGradeLevel, ISectionOfferedGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionOfferedGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionOfferedGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SectionProgramMapper
    {
        private static readonly FullName _fullName_edfi_SectionProgram = new FullName("edfi", "SectionProgram");
    
        public static bool SynchronizeTo(this ISectionProgram source, ISectionProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionProgram);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISectionProgram source, ISectionProgram target, Action<ISectionProgram, ISectionProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionProgram);
    
            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SectionAttendanceTakenEvent

namespace EdFi.Ods.Entities.Common.EdFi //.SectionAttendanceTakenEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SectionAttendanceTakenEventMapper
    {
        private static readonly FullName _fullName_edfi_SectionAttendanceTakenEvent = new FullName("edfi", "SectionAttendanceTakenEvent");
    
        public static bool SynchronizeTo(this ISectionAttendanceTakenEvent source, ISectionAttendanceTakenEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionAttendanceTakenEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionAttendanceTakenEvent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CalendarCode, source.CalendarCode))
                || (target.Date != source.Date)
                || (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName)))
            {
                // Disallow PK column updates on SectionAttendanceTakenEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEventDateSupported != false)
                && target.EventDate != source.EventDate)
            {
                target.EventDate = source.EventDate;
                isModified = true;
            }

            if ((mappingContract?.IsStaffUniqueIdSupported != false)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISectionAttendanceTakenEvent source, ISectionAttendanceTakenEvent target, Action<ISectionAttendanceTakenEvent, ISectionAttendanceTakenEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionAttendanceTakenEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionAttendanceTakenEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarCode = source.CalendarCode;
            target.Date = source.Date;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (mappingContract?.IsEventDateSupported != false)
                target.EventDate = source.EventDate;

            if (mappingContract?.IsStaffUniqueIdSupported != false)
                target.StaffUniqueId = source.StaffUniqueId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarDateResourceId = source.CalendarDateResourceId;
                target.CalendarDateDiscriminator = source.CalendarDateDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SectionCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SectionCharacteristicDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SectionCharacteristicDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SectionCharacteristicDescriptor = new FullName("edfi", "SectionCharacteristicDescriptor");
    
        public static bool SynchronizeTo(this ISectionCharacteristicDescriptor source, ISectionCharacteristicDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionCharacteristicDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SectionCharacteristicDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISectionCharacteristicDescriptor source, ISectionCharacteristicDescriptor target, Action<ISectionCharacteristicDescriptor, ISectionCharacteristicDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionCharacteristicDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SectionCharacteristicDescriptorId = source.SectionCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SectionTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SectionTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SectionTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SectionTypeDescriptor = new FullName("edfi", "SectionTypeDescriptor");
    
        public static bool SynchronizeTo(this ISectionTypeDescriptor source, ISectionTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SectionTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SectionTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISectionTypeDescriptor source, ISectionTypeDescriptor target, Action<ISectionTypeDescriptor, ISectionTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SectionTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SectionTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SectionTypeDescriptorId = source.SectionTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SeparationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SeparationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SeparationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SeparationDescriptor = new FullName("edfi", "SeparationDescriptor");
    
        public static bool SynchronizeTo(this ISeparationDescriptor source, ISeparationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SeparationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SeparationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SeparationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISeparationDescriptor source, ISeparationDescriptor target, Action<ISeparationDescriptor, ISeparationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SeparationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SeparationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SeparationDescriptorId = source.SeparationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SeparationReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SeparationReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SeparationReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SeparationReasonDescriptor = new FullName("edfi", "SeparationReasonDescriptor");
    
        public static bool SynchronizeTo(this ISeparationReasonDescriptor source, ISeparationReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SeparationReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SeparationReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SeparationReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISeparationReasonDescriptor source, ISeparationReasonDescriptor target, Action<ISeparationReasonDescriptor, ISeparationReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SeparationReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SeparationReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SeparationReasonDescriptorId = source.SeparationReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: ServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_ServiceDescriptor = new FullName("edfi", "ServiceDescriptor");
    
        public static bool SynchronizeTo(this IServiceDescriptor source, IServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (ServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on ServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IServiceDescriptor source, IServiceDescriptor target, Action<IServiceDescriptor, IServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (ServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_ServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ServiceDescriptorId = source.ServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Session

namespace EdFi.Ods.Entities.Common.EdFi //.SessionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SessionMapper
    {
        private static readonly FullName _fullName_edfi_Session = new FullName("edfi", "Session");
    
        public static bool SynchronizeTo(this ISession source, ISession target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SessionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Session);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName)))
            {
                // Allow PK column updates on Session
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
                if (source.SchoolYear != target.SchoolYear)
                {
                    source.SchoolYear = target.SchoolYear;
                }
                if (source.SessionName != target.SessionName)
                {
                    source.SessionName = target.SessionName;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsTermDescriptorSupported != false)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsTotalInstructionalDaysSupported != false)
                && target.TotalInstructionalDays != source.TotalInstructionalDays)
            {
                target.TotalInstructionalDays = source.TotalInstructionalDays;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsSessionAcademicWeeksSupported ?? true)
            {
                isModified |=
                    source.SessionAcademicWeeks.SynchronizeCollectionTo(
                        target.SessionAcademicWeeks,
                        onChildAdded: child =>
                            {
                                child.Session = target;
                            },
                        includeItem: item => mappingContract?.IsSessionAcademicWeekIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSessionGradingPeriodsSupported ?? true)
            {
                isModified |=
                    source.SessionGradingPeriods.SynchronizeCollectionTo(
                        target.SessionGradingPeriods,
                        onChildAdded: child =>
                            {
                                child.Session = target;
                            },
                        includeItem: item => mappingContract?.IsSessionGradingPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISession source, ISession target, Action<ISession, ISession> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SessionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Session);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsTermDescriptorSupported != false)
                target.TermDescriptor = source.TermDescriptor;

            if (mappingContract?.IsTotalInstructionalDaysSupported != false)
                target.TotalInstructionalDays = source.TotalInstructionalDays;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsSessionAcademicWeeksSupported != false)
            {
                source.SessionAcademicWeeks.MapCollectionTo(target.SessionAcademicWeeks, target, mappingContract?.IsSessionAcademicWeekIncluded);
            }

            if (mappingContract?.IsSessionGradingPeriodsSupported != false)
            {
                source.SessionGradingPeriods.MapCollectionTo(target.SessionGradingPeriods, target, mappingContract?.IsSessionGradingPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SessionAcademicWeekMapper
    {
        private static readonly FullName _fullName_edfi_SessionAcademicWeek = new FullName("edfi", "SessionAcademicWeek");
    
        public static bool SynchronizeTo(this ISessionAcademicWeek source, ISessionAcademicWeek target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SessionAcademicWeekMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SessionAcademicWeek);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISessionAcademicWeek source, ISessionAcademicWeek target, Action<ISessionAcademicWeek, ISessionAcademicWeek> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SessionAcademicWeekMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SessionAcademicWeek);
    
            // Copy contextual primary key values
            target.WeekIdentifier = source.WeekIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AcademicWeekResourceId = source.AcademicWeekResourceId;
                target.AcademicWeekDiscriminator = source.AcademicWeekDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SessionGradingPeriodMapper
    {
        private static readonly FullName _fullName_edfi_SessionGradingPeriod = new FullName("edfi", "SessionGradingPeriod");
    
        public static bool SynchronizeTo(this ISessionGradingPeriod source, ISessionGradingPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SessionGradingPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SessionGradingPeriod);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISessionGradingPeriod source, ISessionGradingPeriod target, Action<ISessionGradingPeriod, ISessionGradingPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SessionGradingPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SessionGradingPeriod);
    
            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodName = source.GradingPeriodName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SexDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SexDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SexDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SexDescriptor = new FullName("edfi", "SexDescriptor");
    
        public static bool SynchronizeTo(this ISexDescriptor source, ISexDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SexDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SexDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SexDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISexDescriptor source, ISexDescriptor target, Action<ISexDescriptor, ISexDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SexDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SexDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SexDescriptorId = source.SexDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SourceDimension

namespace EdFi.Ods.Entities.Common.EdFi //.SourceDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SourceDimensionMapper
    {
        private static readonly FullName _fullName_edfi_SourceDimension = new FullName("edfi", "SourceDimension");
    
        public static bool SynchronizeTo(this ISourceDimension source, ISourceDimension target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SourceDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SourceDimension);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Code, source.Code))
                || (target.FiscalYear != source.FiscalYear))
            {
                // Disallow PK column updates on SourceDimension
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCodeNameSupported != false)
                && target.CodeName != source.CodeName)
            {
                target.CodeName = source.CodeName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsSourceDimensionReportingTagsSupported ?? true)
            {
                isModified |=
                    source.SourceDimensionReportingTags.SynchronizeCollectionTo(
                        target.SourceDimensionReportingTags,
                        onChildAdded: child =>
                            {
                                child.SourceDimension = target;
                            },
                        includeItem: item => mappingContract?.IsSourceDimensionReportingTagIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISourceDimension source, ISourceDimension target, Action<ISourceDimension, ISourceDimension> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SourceDimensionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SourceDimension);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Code = source.Code;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsCodeNameSupported != false)
                target.CodeName = source.CodeName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsSourceDimensionReportingTagsSupported != false)
            {
                source.SourceDimensionReportingTags.MapCollectionTo(target.SourceDimensionReportingTags, target, mappingContract?.IsSourceDimensionReportingTagIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SourceDimensionReportingTagMapper
    {
        private static readonly FullName _fullName_edfi_SourceDimensionReportingTag = new FullName("edfi", "SourceDimensionReportingTag");
    
        public static bool SynchronizeTo(this ISourceDimensionReportingTag source, ISourceDimensionReportingTag target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SourceDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SourceDimensionReportingTag);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISourceDimensionReportingTag source, ISourceDimensionReportingTag target, Action<ISourceDimensionReportingTag, ISourceDimensionReportingTag> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SourceDimensionReportingTagMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SourceDimensionReportingTag);
    
            // Copy contextual primary key values
            target.ReportingTagDescriptor = source.ReportingTagDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SourceSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SourceSystemDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SourceSystemDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SourceSystemDescriptor = new FullName("edfi", "SourceSystemDescriptor");
    
        public static bool SynchronizeTo(this ISourceSystemDescriptor source, ISourceSystemDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SourceSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SourceSystemDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SourceSystemDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISourceSystemDescriptor source, ISourceSystemDescriptor target, Action<ISourceSystemDescriptor, ISourceSystemDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SourceSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SourceSystemDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SourceSystemDescriptorId = source.SourceSystemDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SpecialEducationExitReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SpecialEducationExitReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SpecialEducationExitReasonDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SpecialEducationExitReasonDescriptor = new FullName("edfi", "SpecialEducationExitReasonDescriptor");
    
        public static bool SynchronizeTo(this ISpecialEducationExitReasonDescriptor source, ISpecialEducationExitReasonDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SpecialEducationExitReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SpecialEducationExitReasonDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SpecialEducationExitReasonDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISpecialEducationExitReasonDescriptor source, ISpecialEducationExitReasonDescriptor target, Action<ISpecialEducationExitReasonDescriptor, ISpecialEducationExitReasonDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SpecialEducationExitReasonDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SpecialEducationExitReasonDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SpecialEducationExitReasonDescriptorId = source.SpecialEducationExitReasonDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SpecialEducationProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SpecialEducationProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SpecialEducationProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SpecialEducationProgramServiceDescriptor = new FullName("edfi", "SpecialEducationProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this ISpecialEducationProgramServiceDescriptor source, ISpecialEducationProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SpecialEducationProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SpecialEducationProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SpecialEducationProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISpecialEducationProgramServiceDescriptor source, ISpecialEducationProgramServiceDescriptor target, Action<ISpecialEducationProgramServiceDescriptor, ISpecialEducationProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SpecialEducationProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SpecialEducationProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SpecialEducationProgramServiceDescriptorId = source.SpecialEducationProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SpecialEducationSettingDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SpecialEducationSettingDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SpecialEducationSettingDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SpecialEducationSettingDescriptor = new FullName("edfi", "SpecialEducationSettingDescriptor");
    
        public static bool SynchronizeTo(this ISpecialEducationSettingDescriptor source, ISpecialEducationSettingDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SpecialEducationSettingDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SpecialEducationSettingDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SpecialEducationSettingDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISpecialEducationSettingDescriptor source, ISpecialEducationSettingDescriptor target, Action<ISpecialEducationSettingDescriptor, ISpecialEducationSettingDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SpecialEducationSettingDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SpecialEducationSettingDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SpecialEducationSettingDescriptorId = source.SpecialEducationSettingDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Staff

namespace EdFi.Ods.Entities.Common.EdFi //.StaffAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffMapper
    {
        private static readonly FullName _fullName_edfi_Staff = new FullName("edfi", "Staff");
    
        public static bool SynchronizeTo(this IStaff source, IStaff target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Staff);

            // Detect primary key changes
            if (
                 (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on Staff
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBirthDateSupported != false)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((mappingContract?.IsCitizenshipStatusDescriptorSupported != false)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsFirstNameSupported != false)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((mappingContract?.IsGenderIdentitySupported != false)
                && target.GenderIdentity != source.GenderIdentity)
            {
                target.GenderIdentity = source.GenderIdentity;
                isModified = true;
            }

            if ((mappingContract?.IsGenerationCodeSuffixSupported != false)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((mappingContract?.IsHighestCompletedLevelOfEducationDescriptorSupported != false)
                && target.HighestCompletedLevelOfEducationDescriptor != source.HighestCompletedLevelOfEducationDescriptor)
            {
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsHighlyQualifiedTeacherSupported != false)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((mappingContract?.IsHispanicLatinoEthnicitySupported != false)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((mappingContract?.IsLastSurnameSupported != false)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsLoginIdSupported != false)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((mappingContract?.IsMaidenNameSupported != false)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((mappingContract?.IsMiddleNameSupported != false)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((mappingContract?.IsPersonalTitlePrefixSupported != false)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((mappingContract?.IsPersonIdSupported != false)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((mappingContract?.IsPreferredFirstNameSupported != false)
                && target.PreferredFirstName != source.PreferredFirstName)
            {
                target.PreferredFirstName = source.PreferredFirstName;
                isModified = true;
            }

            if ((mappingContract?.IsPreferredLastSurnameSupported != false)
                && target.PreferredLastSurname != source.PreferredLastSurname)
            {
                target.PreferredLastSurname = source.PreferredLastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsSexDescriptorSupported != false)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSourceSystemDescriptorSupported != false)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsStaffUniqueIdSupported != false)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }

            if ((mappingContract?.IsYearsOfPriorProfessionalExperienceSupported != false)
                && target.YearsOfPriorProfessionalExperience != source.YearsOfPriorProfessionalExperience)
            {
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
                isModified = true;
            }

            if ((mappingContract?.IsYearsOfPriorTeachingExperienceSupported != false)
                && target.YearsOfPriorTeachingExperience != source.YearsOfPriorTeachingExperience)
            {
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStaffAddressesSupported ?? true)
            {
                isModified |=
                    source.StaffAddresses.SynchronizeCollectionTo(
                        target.StaffAddresses,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffAncestryEthnicOriginsSupported ?? true)
            {
                isModified |=
                    source.StaffAncestryEthnicOrigins.SynchronizeCollectionTo(
                        target.StaffAncestryEthnicOrigins,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffAncestryEthnicOriginIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffCredentialsSupported ?? true)
            {
                isModified |=
                    source.StaffCredentials.SynchronizeCollectionTo(
                        target.StaffCredentials,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffCredentialIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffElectronicMailsSupported ?? true)
            {
                isModified |=
                    source.StaffElectronicMails.SynchronizeCollectionTo(
                        target.StaffElectronicMails,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffElectronicMailIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffIdentificationCodesSupported ?? true)
            {
                isModified |=
                    source.StaffIdentificationCodes.SynchronizeCollectionTo(
                        target.StaffIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffIdentificationDocumentsSupported ?? true)
            {
                isModified |=
                    source.StaffIdentificationDocuments.SynchronizeCollectionTo(
                        target.StaffIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffIdentificationDocumentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffInternationalAddressesSupported ?? true)
            {
                isModified |=
                    source.StaffInternationalAddresses.SynchronizeCollectionTo(
                        target.StaffInternationalAddresses,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffInternationalAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffLanguagesSupported ?? true)
            {
                isModified |=
                    source.StaffLanguages.SynchronizeCollectionTo(
                        target.StaffLanguages,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffLanguageIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffOtherNamesSupported ?? true)
            {
                isModified |=
                    source.StaffOtherNames.SynchronizeCollectionTo(
                        target.StaffOtherNames,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffOtherNameIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffPersonalIdentificationDocumentsSupported ?? true)
            {
                isModified |=
                    source.StaffPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.StaffPersonalIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffPersonalIdentificationDocumentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffRacesSupported ?? true)
            {
                isModified |=
                    source.StaffRaces.SynchronizeCollectionTo(
                        target.StaffRaces,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffRaceIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffRecognitionsSupported ?? true)
            {
                isModified |=
                    source.StaffRecognitions.SynchronizeCollectionTo(
                        target.StaffRecognitions,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffRecognitionIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffTelephonesSupported ?? true)
            {
                isModified |=
                    source.StaffTelephones.SynchronizeCollectionTo(
                        target.StaffTelephones,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffTribalAffiliationsSupported ?? true)
            {
                isModified |=
                    source.StaffTribalAffiliations.SynchronizeCollectionTo(
                        target.StaffTribalAffiliations,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffTribalAffiliationIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffVisasSupported ?? true)
            {
                isModified |=
                    source.StaffVisas.SynchronizeCollectionTo(
                        target.StaffVisas,
                        onChildAdded: child =>
                            {
                                child.Staff = target;
                            },
                        includeItem: item => mappingContract?.IsStaffVisaIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaff source, IStaff target, Action<IStaff, IStaff> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Staff);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsBirthDateSupported != false)
                target.BirthDate = source.BirthDate;

            if (mappingContract?.IsCitizenshipStatusDescriptorSupported != false)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;

            if (mappingContract?.IsFirstNameSupported != false)
                target.FirstName = source.FirstName;

            if (mappingContract?.IsGenderIdentitySupported != false)
                target.GenderIdentity = source.GenderIdentity;

            if (mappingContract?.IsGenerationCodeSuffixSupported != false)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;

            if (mappingContract?.IsHighestCompletedLevelOfEducationDescriptorSupported != false)
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;

            if (mappingContract?.IsHighlyQualifiedTeacherSupported != false)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;

            if (mappingContract?.IsHispanicLatinoEthnicitySupported != false)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;

            if (mappingContract?.IsLastSurnameSupported != false)
                target.LastSurname = source.LastSurname;

            if (mappingContract?.IsLoginIdSupported != false)
                target.LoginId = source.LoginId;

            if (mappingContract?.IsMaidenNameSupported != false)
                target.MaidenName = source.MaidenName;

            if (mappingContract?.IsMiddleNameSupported != false)
                target.MiddleName = source.MiddleName;

            if (mappingContract?.IsPersonalTitlePrefixSupported != false)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;

            if (mappingContract?.IsPersonIdSupported != false)
                target.PersonId = source.PersonId;

            if (mappingContract?.IsPreferredFirstNameSupported != false)
                target.PreferredFirstName = source.PreferredFirstName;

            if (mappingContract?.IsPreferredLastSurnameSupported != false)
                target.PreferredLastSurname = source.PreferredLastSurname;

            if (mappingContract?.IsSexDescriptorSupported != false)
                target.SexDescriptor = source.SexDescriptor;

            if (mappingContract?.IsSourceSystemDescriptorSupported != false)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            if (mappingContract?.IsStaffUniqueIdSupported != false)
                target.StaffUniqueId = source.StaffUniqueId;

            if (mappingContract?.IsYearsOfPriorProfessionalExperienceSupported != false)
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;

            if (mappingContract?.IsYearsOfPriorTeachingExperienceSupported != false)
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStaffAddressesSupported != false)
            {
                source.StaffAddresses.MapCollectionTo(target.StaffAddresses, target, mappingContract?.IsStaffAddressIncluded);
            }

            if (mappingContract?.IsStaffAncestryEthnicOriginsSupported != false)
            {
                source.StaffAncestryEthnicOrigins.MapCollectionTo(target.StaffAncestryEthnicOrigins, target, mappingContract?.IsStaffAncestryEthnicOriginIncluded);
            }

            if (mappingContract?.IsStaffCredentialsSupported != false)
            {
                source.StaffCredentials.MapCollectionTo(target.StaffCredentials, target, mappingContract?.IsStaffCredentialIncluded);
            }

            if (mappingContract?.IsStaffElectronicMailsSupported != false)
            {
                source.StaffElectronicMails.MapCollectionTo(target.StaffElectronicMails, target, mappingContract?.IsStaffElectronicMailIncluded);
            }

            if (mappingContract?.IsStaffIdentificationCodesSupported != false)
            {
                source.StaffIdentificationCodes.MapCollectionTo(target.StaffIdentificationCodes, target, mappingContract?.IsStaffIdentificationCodeIncluded);
            }

            if (mappingContract?.IsStaffIdentificationDocumentsSupported != false)
            {
                source.StaffIdentificationDocuments.MapCollectionTo(target.StaffIdentificationDocuments, target, mappingContract?.IsStaffIdentificationDocumentIncluded);
            }

            if (mappingContract?.IsStaffInternationalAddressesSupported != false)
            {
                source.StaffInternationalAddresses.MapCollectionTo(target.StaffInternationalAddresses, target, mappingContract?.IsStaffInternationalAddressIncluded);
            }

            if (mappingContract?.IsStaffLanguagesSupported != false)
            {
                source.StaffLanguages.MapCollectionTo(target.StaffLanguages, target, mappingContract?.IsStaffLanguageIncluded);
            }

            if (mappingContract?.IsStaffOtherNamesSupported != false)
            {
                source.StaffOtherNames.MapCollectionTo(target.StaffOtherNames, target, mappingContract?.IsStaffOtherNameIncluded);
            }

            if (mappingContract?.IsStaffPersonalIdentificationDocumentsSupported != false)
            {
                source.StaffPersonalIdentificationDocuments.MapCollectionTo(target.StaffPersonalIdentificationDocuments, target, mappingContract?.IsStaffPersonalIdentificationDocumentIncluded);
            }

            if (mappingContract?.IsStaffRacesSupported != false)
            {
                source.StaffRaces.MapCollectionTo(target.StaffRaces, target, mappingContract?.IsStaffRaceIncluded);
            }

            if (mappingContract?.IsStaffRecognitionsSupported != false)
            {
                source.StaffRecognitions.MapCollectionTo(target.StaffRecognitions, target, mappingContract?.IsStaffRecognitionIncluded);
            }

            if (mappingContract?.IsStaffTelephonesSupported != false)
            {
                source.StaffTelephones.MapCollectionTo(target.StaffTelephones, target, mappingContract?.IsStaffTelephoneIncluded);
            }

            if (mappingContract?.IsStaffTribalAffiliationsSupported != false)
            {
                source.StaffTribalAffiliations.MapCollectionTo(target.StaffTribalAffiliations, target, mappingContract?.IsStaffTribalAffiliationIncluded);
            }

            if (mappingContract?.IsStaffVisasSupported != false)
            {
                source.StaffVisas.MapCollectionTo(target.StaffVisas, target, mappingContract?.IsStaffVisaIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffAddressMapper
    {
        private static readonly FullName _fullName_edfi_StaffAddress = new FullName("edfi", "StaffAddress");
    
        public static bool SynchronizeTo(this IStaffAddress source, IStaffAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsBuildingSiteNumberSupported != false)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsCongressionalDistrictSupported != false)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((mappingContract?.IsCountyFIPSCodeSupported != false)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLocaleDescriptorSupported != false)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((mappingContract?.IsNameOfCountySupported != false)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStaffAddressPeriodsSupported ?? true)
            {
                isModified |=
                    source.StaffAddressPeriods.SynchronizeCollectionTo(
                        target.StaffAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.StaffAddress = target;
                            },
                        includeItem: item => mappingContract?.IsStaffAddressPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffAddress source, IStaffAddress target, Action<IStaffAddress, IStaffAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;

            if (mappingContract?.IsBuildingSiteNumberSupported != false)
                target.BuildingSiteNumber = source.BuildingSiteNumber;

            if (mappingContract?.IsCongressionalDistrictSupported != false)
                target.CongressionalDistrict = source.CongressionalDistrict;

            if (mappingContract?.IsCountyFIPSCodeSupported != false)
                target.CountyFIPSCode = source.CountyFIPSCode;

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLocaleDescriptorSupported != false)
                target.LocaleDescriptor = source.LocaleDescriptor;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            if (mappingContract?.IsNameOfCountySupported != false)
                target.NameOfCounty = source.NameOfCounty;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStaffAddressPeriodsSupported != false)
            {
                source.StaffAddressPeriods.MapCollectionTo(target.StaffAddressPeriods, target, mappingContract?.IsStaffAddressPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffAddressPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StaffAddressPeriod = new FullName("edfi", "StaffAddressPeriod");
    
        public static bool SynchronizeTo(this IStaffAddressPeriod source, IStaffAddressPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAddressPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffAddressPeriod source, IStaffAddressPeriod target, Action<IStaffAddressPeriod, IStaffAddressPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAddressPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffAncestryEthnicOriginMapper
    {
        private static readonly FullName _fullName_edfi_StaffAncestryEthnicOrigin = new FullName("edfi", "StaffAncestryEthnicOrigin");
    
        public static bool SynchronizeTo(this IStaffAncestryEthnicOrigin source, IStaffAncestryEthnicOrigin target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffAncestryEthnicOriginMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAncestryEthnicOrigin);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffAncestryEthnicOrigin source, IStaffAncestryEthnicOrigin target, Action<IStaffAncestryEthnicOrigin, IStaffAncestryEthnicOrigin> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffAncestryEthnicOriginMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAncestryEthnicOrigin);
    
            // Copy contextual primary key values
            target.AncestryEthnicOriginDescriptor = source.AncestryEthnicOriginDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffCredentialMapper
    {
        private static readonly FullName _fullName_edfi_StaffCredential = new FullName("edfi", "StaffCredential");
    
        public static bool SynchronizeTo(this IStaffCredential source, IStaffCredential target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffCredentialMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffCredential);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffCredential source, IStaffCredential target, Action<IStaffCredential, IStaffCredential> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffCredentialMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffCredential);
    
            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffElectronicMailMapper
    {
        private static readonly FullName _fullName_edfi_StaffElectronicMail = new FullName("edfi", "StaffElectronicMail");
    
        public static bool SynchronizeTo(this IStaffElectronicMail source, IStaffElectronicMail target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffElectronicMailMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffElectronicMail);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryEmailAddressIndicatorSupported != false)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffElectronicMail source, IStaffElectronicMail target, Action<IStaffElectronicMail, IStaffElectronicMail> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffElectronicMailMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffElectronicMail);
    
            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsPrimaryEmailAddressIndicatorSupported != false)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_StaffIdentificationCode = new FullName("edfi", "StaffIdentificationCode");
    
        public static bool SynchronizeTo(this IStaffIdentificationCode source, IStaffIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffIdentificationCode);


            // Copy non-PK properties

            if ((mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffIdentificationCode source, IStaffIdentificationCode target, Action<IStaffIdentificationCode, IStaffIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffIdentificationCode);
    
            // Copy contextual primary key values
            target.StaffIdentificationSystemDescriptor = source.StaffIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAssigningOrganizationIdentificationCodeSupported != false)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffIdentificationDocumentMapper
    {
        private static readonly FullName _fullName_edfi_StaffIdentificationDocument = new FullName("edfi", "StaffIdentificationDocument");
    
        public static bool SynchronizeTo(this IStaffIdentificationDocument source, IStaffIdentificationDocument target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffIdentificationDocument);


            // Copy non-PK properties

            if ((mappingContract?.IsDocumentExpirationDateSupported != false)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsDocumentTitleSupported != false)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerCountryDescriptorSupported != false)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffIdentificationDocument source, IStaffIdentificationDocument target, Action<IStaffIdentificationDocument, IStaffIdentificationDocument> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffIdentificationDocument);
    
            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDocumentExpirationDateSupported != false)
                target.DocumentExpirationDate = source.DocumentExpirationDate;

            if (mappingContract?.IsDocumentTitleSupported != false)
                target.DocumentTitle = source.DocumentTitle;

            if (mappingContract?.IsIssuerCountryDescriptorSupported != false)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;

            if (mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffInternationalAddressMapper
    {
        private static readonly FullName _fullName_edfi_StaffInternationalAddress = new FullName("edfi", "StaffInternationalAddress");
    
        public static bool SynchronizeTo(this IStaffInternationalAddress source, IStaffInternationalAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffInternationalAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsAddressLine1Supported != false)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine2Supported != false)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine3Supported != false)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine4Supported != false)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsCountryDescriptorSupported != false)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffInternationalAddress source, IStaffInternationalAddress target, Action<IStaffInternationalAddress, IStaffInternationalAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffInternationalAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAddressLine1Supported != false)
                target.AddressLine1 = source.AddressLine1;

            if (mappingContract?.IsAddressLine2Supported != false)
                target.AddressLine2 = source.AddressLine2;

            if (mappingContract?.IsAddressLine3Supported != false)
                target.AddressLine3 = source.AddressLine3;

            if (mappingContract?.IsAddressLine4Supported != false)
                target.AddressLine4 = source.AddressLine4;

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsCountryDescriptorSupported != false)
                target.CountryDescriptor = source.CountryDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffLanguageMapper
    {
        private static readonly FullName _fullName_edfi_StaffLanguage = new FullName("edfi", "StaffLanguage");
    
        public static bool SynchronizeTo(this IStaffLanguage source, IStaffLanguage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLanguage);


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsStaffLanguageUsesSupported ?? true)
            {
                isModified |=
                    source.StaffLanguageUses.SynchronizeCollectionTo(
                        target.StaffLanguageUses,
                        onChildAdded: child =>
                            {
                                child.StaffLanguage = target;
                            },
                        includeItem: item => mappingContract?.IsStaffLanguageUseIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffLanguage source, IStaffLanguage target, Action<IStaffLanguage, IStaffLanguage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLanguage);
    
            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStaffLanguageUsesSupported != false)
            {
                source.StaffLanguageUses.MapCollectionTo(target.StaffLanguageUses, target, mappingContract?.IsStaffLanguageUseIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffLanguageUseMapper
    {
        private static readonly FullName _fullName_edfi_StaffLanguageUse = new FullName("edfi", "StaffLanguageUse");
    
        public static bool SynchronizeTo(this IStaffLanguageUse source, IStaffLanguageUse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffLanguageUseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLanguageUse);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffLanguageUse source, IStaffLanguageUse target, Action<IStaffLanguageUse, IStaffLanguageUse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffLanguageUseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLanguageUse);
    
            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffOtherNameMapper
    {
        private static readonly FullName _fullName_edfi_StaffOtherName = new FullName("edfi", "StaffOtherName");
    
        public static bool SynchronizeTo(this IStaffOtherName source, IStaffOtherName target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffOtherNameMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffOtherName);


            // Copy non-PK properties

            if ((mappingContract?.IsFirstNameSupported != false)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((mappingContract?.IsGenerationCodeSuffixSupported != false)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((mappingContract?.IsLastSurnameSupported != false)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsMiddleNameSupported != false)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((mappingContract?.IsPersonalTitlePrefixSupported != false)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffOtherName source, IStaffOtherName target, Action<IStaffOtherName, IStaffOtherName> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffOtherNameMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffOtherName);
    
            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsFirstNameSupported != false)
                target.FirstName = source.FirstName;

            if (mappingContract?.IsGenerationCodeSuffixSupported != false)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;

            if (mappingContract?.IsLastSurnameSupported != false)
                target.LastSurname = source.LastSurname;

            if (mappingContract?.IsMiddleNameSupported != false)
                target.MiddleName = source.MiddleName;

            if (mappingContract?.IsPersonalTitlePrefixSupported != false)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffPersonalIdentificationDocumentMapper
    {
        private static readonly FullName _fullName_edfi_StaffPersonalIdentificationDocument = new FullName("edfi", "StaffPersonalIdentificationDocument");
    
        public static bool SynchronizeTo(this IStaffPersonalIdentificationDocument source, IStaffPersonalIdentificationDocument target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffPersonalIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffPersonalIdentificationDocument);


            // Copy non-PK properties

            if ((mappingContract?.IsDocumentExpirationDateSupported != false)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsDocumentTitleSupported != false)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerCountryDescriptorSupported != false)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffPersonalIdentificationDocument source, IStaffPersonalIdentificationDocument target, Action<IStaffPersonalIdentificationDocument, IStaffPersonalIdentificationDocument> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffPersonalIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffPersonalIdentificationDocument);
    
            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDocumentExpirationDateSupported != false)
                target.DocumentExpirationDate = source.DocumentExpirationDate;

            if (mappingContract?.IsDocumentTitleSupported != false)
                target.DocumentTitle = source.DocumentTitle;

            if (mappingContract?.IsIssuerCountryDescriptorSupported != false)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;

            if (mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffRaceMapper
    {
        private static readonly FullName _fullName_edfi_StaffRace = new FullName("edfi", "StaffRace");
    
        public static bool SynchronizeTo(this IStaffRace source, IStaffRace target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffRaceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffRace);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffRace source, IStaffRace target, Action<IStaffRace, IStaffRace> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffRaceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffRace);
    
            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffRecognitionMapper
    {
        private static readonly FullName _fullName_edfi_StaffRecognition = new FullName("edfi", "StaffRecognition");
    
        public static bool SynchronizeTo(this IStaffRecognition source, IStaffRecognition target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffRecognitionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffRecognition);


            // Copy non-PK properties

            if ((mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementCategorySystemSupported != false)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementTitleSupported != false)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaSupported != false)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaURLSupported != false)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((mappingContract?.IsEvidenceStatementSupported != false)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((mappingContract?.IsImageURLSupported != false)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerOriginURLSupported != false)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }

            if ((mappingContract?.IsRecognitionAwardDateSupported != false)
                && target.RecognitionAwardDate != source.RecognitionAwardDate)
            {
                target.RecognitionAwardDate = source.RecognitionAwardDate;
                isModified = true;
            }

            if ((mappingContract?.IsRecognitionAwardExpiresDateSupported != false)
                && target.RecognitionAwardExpiresDate != source.RecognitionAwardExpiresDate)
            {
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
                isModified = true;
            }

            if ((mappingContract?.IsRecognitionDescriptionSupported != false)
                && target.RecognitionDescription != source.RecognitionDescription)
            {
                target.RecognitionDescription = source.RecognitionDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffRecognition source, IStaffRecognition target, Action<IStaffRecognition, IStaffRecognition> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffRecognitionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffRecognition);
    
            // Copy contextual primary key values
            target.RecognitionTypeDescriptor = source.RecognitionTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;

            if (mappingContract?.IsAchievementCategorySystemSupported != false)
                target.AchievementCategorySystem = source.AchievementCategorySystem;

            if (mappingContract?.IsAchievementTitleSupported != false)
                target.AchievementTitle = source.AchievementTitle;

            if (mappingContract?.IsCriteriaSupported != false)
                target.Criteria = source.Criteria;

            if (mappingContract?.IsCriteriaURLSupported != false)
                target.CriteriaURL = source.CriteriaURL;

            if (mappingContract?.IsEvidenceStatementSupported != false)
                target.EvidenceStatement = source.EvidenceStatement;

            if (mappingContract?.IsImageURLSupported != false)
                target.ImageURL = source.ImageURL;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            if (mappingContract?.IsIssuerOriginURLSupported != false)
                target.IssuerOriginURL = source.IssuerOriginURL;

            if (mappingContract?.IsRecognitionAwardDateSupported != false)
                target.RecognitionAwardDate = source.RecognitionAwardDate;

            if (mappingContract?.IsRecognitionAwardExpiresDateSupported != false)
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;

            if (mappingContract?.IsRecognitionDescriptionSupported != false)
                target.RecognitionDescription = source.RecognitionDescription;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffTelephoneMapper
    {
        private static readonly FullName _fullName_edfi_StaffTelephone = new FullName("edfi", "StaffTelephone");
    
        public static bool SynchronizeTo(this IStaffTelephone source, IStaffTelephone target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffTelephone);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfPrioritySupported != false)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffTelephone source, IStaffTelephone target, Action<IStaffTelephone, IStaffTelephone> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffTelephone);
    
            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsOrderOfPrioritySupported != false)
                target.OrderOfPriority = source.OrderOfPriority;

            if (mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffTribalAffiliationMapper
    {
        private static readonly FullName _fullName_edfi_StaffTribalAffiliation = new FullName("edfi", "StaffTribalAffiliation");
    
        public static bool SynchronizeTo(this IStaffTribalAffiliation source, IStaffTribalAffiliation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffTribalAffiliationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffTribalAffiliation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffTribalAffiliation source, IStaffTribalAffiliation target, Action<IStaffTribalAffiliation, IStaffTribalAffiliation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffTribalAffiliationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffTribalAffiliation);
    
            // Copy contextual primary key values
            target.TribalAffiliationDescriptor = source.TribalAffiliationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffVisaMapper
    {
        private static readonly FullName _fullName_edfi_StaffVisa = new FullName("edfi", "StaffVisa");
    
        public static bool SynchronizeTo(this IStaffVisa source, IStaffVisa target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffVisaMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffVisa);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffVisa source, IStaffVisa target, Action<IStaffVisa, IStaffVisa> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffVisaMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffVisa);
    
            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffAbsenceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StaffAbsenceEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffAbsenceEventMapper
    {
        private static readonly FullName _fullName_edfi_StaffAbsenceEvent = new FullName("edfi", "StaffAbsenceEvent");
    
        public static bool SynchronizeTo(this IStaffAbsenceEvent source, IStaffAbsenceEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffAbsenceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAbsenceEvent);

            // Detect primary key changes
            if (
                 !string.Equals(target.AbsenceEventCategoryDescriptor, source.AbsenceEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.EventDate != source.EventDate)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffAbsenceEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAbsenceEventReasonSupported != false)
                && target.AbsenceEventReason != source.AbsenceEventReason)
            {
                target.AbsenceEventReason = source.AbsenceEventReason;
                isModified = true;
            }

            if ((mappingContract?.IsHoursAbsentSupported != false)
                && target.HoursAbsent != source.HoursAbsent)
            {
                target.HoursAbsent = source.HoursAbsent;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffAbsenceEvent source, IStaffAbsenceEvent target, Action<IStaffAbsenceEvent, IStaffAbsenceEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffAbsenceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffAbsenceEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AbsenceEventCategoryDescriptor = source.AbsenceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAbsenceEventReasonSupported != false)
                target.AbsenceEventReason = source.AbsenceEventReason;

            if (mappingContract?.IsHoursAbsentSupported != false)
                target.HoursAbsent = source.HoursAbsent;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffClassificationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StaffClassificationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffClassificationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StaffClassificationDescriptor = new FullName("edfi", "StaffClassificationDescriptor");
    
        public static bool SynchronizeTo(this IStaffClassificationDescriptor source, IStaffClassificationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffClassificationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffClassificationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StaffClassificationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStaffClassificationDescriptor source, IStaffClassificationDescriptor target, Action<IStaffClassificationDescriptor, IStaffClassificationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffClassificationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffClassificationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffClassificationDescriptorId = source.StaffClassificationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffCohortAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffCohortAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffCohortAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffCohortAssociation = new FullName("edfi", "StaffCohortAssociation");
    
        public static bool SynchronizeTo(this IStaffCohortAssociation source, IStaffCohortAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffCohortAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffCohortAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (!keyStringComparer.Equals(target.CohortIdentifier, source.CohortIdentifier))
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffCohortAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsStudentRecordAccessSupported != false)
                && target.StudentRecordAccess != source.StudentRecordAccess)
            {
                target.StudentRecordAccess = source.StudentRecordAccess;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffCohortAssociation source, IStaffCohortAssociation target, Action<IStaffCohortAssociation, IStaffCohortAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffCohortAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffCohortAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.CohortIdentifier = source.CohortIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsStudentRecordAccessSupported != false)
                target.StudentRecordAccess = source.StudentRecordAccess;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CohortResourceId = source.CohortResourceId;
                target.CohortDiscriminator = source.CohortDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffDisciplineIncidentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffDisciplineIncidentAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffDisciplineIncidentAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffDisciplineIncidentAssociation = new FullName("edfi", "StaffDisciplineIncidentAssociation");
    
        public static bool SynchronizeTo(this IStaffDisciplineIncidentAssociation source, IStaffDisciplineIncidentAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffDisciplineIncidentAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffDisciplineIncidentAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.IncidentIdentifier, source.IncidentIdentifier))
                || (target.SchoolId != source.SchoolId)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffDisciplineIncidentAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported ?? true)
            {
                isModified |=
                    source.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes.SynchronizeCollectionTo(
                        target.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes,
                        onChildAdded: child =>
                            {
                                child.StaffDisciplineIncidentAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffDisciplineIncidentAssociation source, IStaffDisciplineIncidentAssociation target, Action<IStaffDisciplineIncidentAssociation, IStaffDisciplineIncidentAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffDisciplineIncidentAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffDisciplineIncidentAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DisciplineIncidentResourceId = source.DisciplineIncidentResourceId;
                target.DisciplineIncidentDiscriminator = source.DisciplineIncidentDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported != false)
            {
                source.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes.MapCollectionTo(target.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes, target, mappingContract?.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeMapper
    {
        private static readonly FullName _fullName_edfi_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode = new FullName("edfi", "StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode");
    
        public static bool SynchronizeTo(this IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode source, IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode source, IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode target, Action<IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode, IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode);
    
            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptor = source.DisciplineIncidentParticipationCodeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffEducationOrganizationAssignmentAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationAssignmentAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffEducationOrganizationAssignmentAssociation = new FullName("edfi", "StaffEducationOrganizationAssignmentAssociation");
    
        public static bool SynchronizeTo(this IStaffEducationOrganizationAssignmentAssociation source, IStaffEducationOrganizationAssignmentAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffEducationOrganizationAssignmentAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationAssignmentAssociation);

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || !string.Equals(target.StaffClassificationDescriptor, source.StaffClassificationDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffEducationOrganizationAssignmentAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCredentialIdentifierSupported != false)
                && target.CredentialIdentifier != source.CredentialIdentifier)
            {
                target.CredentialIdentifier = source.CredentialIdentifier;
                isModified = true;
            }

            if ((mappingContract?.IsEmploymentEducationOrganizationIdSupported != false)
                && target.EmploymentEducationOrganizationId != source.EmploymentEducationOrganizationId)
            {
                target.EmploymentEducationOrganizationId = source.EmploymentEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsEmploymentHireDateSupported != false)
                && target.EmploymentHireDate != source.EmploymentHireDate)
            {
                target.EmploymentHireDate = source.EmploymentHireDate;
                isModified = true;
            }

            if ((mappingContract?.IsEmploymentStatusDescriptorSupported != false)
                && target.EmploymentStatusDescriptor != source.EmploymentStatusDescriptor)
            {
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsFullTimeEquivalencySupported != false)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfAssignmentSupported != false)
                && target.OrderOfAssignment != source.OrderOfAssignment)
            {
                target.OrderOfAssignment = source.OrderOfAssignment;
                isModified = true;
            }

            if ((mappingContract?.IsPositionTitleSupported != false)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }

            if ((mappingContract?.IsStateOfIssueStateAbbreviationDescriptorSupported != false)
                && target.StateOfIssueStateAbbreviationDescriptor != source.StateOfIssueStateAbbreviationDescriptor)
            {
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffEducationOrganizationAssignmentAssociation source, IStaffEducationOrganizationAssignmentAssociation target, Action<IStaffEducationOrganizationAssignmentAssociation, IStaffEducationOrganizationAssignmentAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffEducationOrganizationAssignmentAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationAssignmentAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffClassificationDescriptor = source.StaffClassificationDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsCredentialIdentifierSupported != false)
                target.CredentialIdentifier = source.CredentialIdentifier;

            if (mappingContract?.IsEmploymentEducationOrganizationIdSupported != false)
                target.EmploymentEducationOrganizationId = source.EmploymentEducationOrganizationId;

            if (mappingContract?.IsEmploymentHireDateSupported != false)
                target.EmploymentHireDate = source.EmploymentHireDate;

            if (mappingContract?.IsEmploymentStatusDescriptorSupported != false)
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsFullTimeEquivalencySupported != false)
                target.FullTimeEquivalency = source.FullTimeEquivalency;

            if (mappingContract?.IsOrderOfAssignmentSupported != false)
                target.OrderOfAssignment = source.OrderOfAssignment;

            if (mappingContract?.IsPositionTitleSupported != false)
                target.PositionTitle = source.PositionTitle;

            if (mappingContract?.IsStateOfIssueStateAbbreviationDescriptorSupported != false)
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.EmploymentStaffEducationOrganizationEmploymentAssociationResourceId = source.EmploymentStaffEducationOrganizationEmploymentAssociationResourceId;
                target.EmploymentStaffEducationOrganizationEmploymentAssociationDiscriminator = source.EmploymentStaffEducationOrganizationEmploymentAssociationDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffEducationOrganizationContactAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffEducationOrganizationContactAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffEducationOrganizationContactAssociation = new FullName("edfi", "StaffEducationOrganizationContactAssociation");
    
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociation source, IStaffEducationOrganizationContactAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffEducationOrganizationContactAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.ContactTitle, source.ContactTitle))
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffEducationOrganizationContactAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsContactTypeDescriptorSupported != false)
                && target.ContactTypeDescriptor != source.ContactTypeDescriptor)
            {
                target.ContactTypeDescriptor = source.ContactTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsElectronicMailAddressSupported != false)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // StaffEducationOrganizationContactAssociationAddress (StaffEducationOrganizationContactAssociationAddress)
            if (mappingContract?.IsStaffEducationOrganizationContactAssociationAddressSupported != false)
            {
                if (source.StaffEducationOrganizationContactAssociationAddress == null)
                {
                    if (target.StaffEducationOrganizationContactAssociationAddress != null)
                    {
                        target.StaffEducationOrganizationContactAssociationAddress = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffEducationOrganizationContactAssociationAddress == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffEducationOrganizationContactAssociationAddress").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffEducationOrganizationContactAssociationAddress = (IStaffEducationOrganizationContactAssociationAddress) newItem;
                    }

                    isModified |= source.StaffEducationOrganizationContactAssociationAddress.Synchronize(target.StaffEducationOrganizationContactAssociationAddress);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (mappingContract?.IsStaffEducationOrganizationContactAssociationTelephonesSupported ?? true)
            {
                isModified |=
                    source.StaffEducationOrganizationContactAssociationTelephones.SynchronizeCollectionTo(
                        target.StaffEducationOrganizationContactAssociationTelephones,
                        onChildAdded: child =>
                            {
                                child.StaffEducationOrganizationContactAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStaffEducationOrganizationContactAssociationTelephoneIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffEducationOrganizationContactAssociation source, IStaffEducationOrganizationContactAssociation target, Action<IStaffEducationOrganizationContactAssociation, IStaffEducationOrganizationContactAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffEducationOrganizationContactAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContactTitle = source.ContactTitle;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsContactTypeDescriptorSupported != false)
                target.ContactTypeDescriptor = source.ContactTypeDescriptor;

            if (mappingContract?.IsElectronicMailAddressSupported != false)
                target.ElectronicMailAddress = source.ElectronicMailAddress;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffEducationOrganizationContactAssociationAddress (StaffEducationOrganizationContactAssociationAddress) (Source)
            if (mappingContract?.IsStaffEducationOrganizationContactAssociationAddressSupported != false)
            {
                var itemProperty = target.GetType().GetProperty("StaffEducationOrganizationContactAssociationAddress");

                if (itemProperty != null)
                {
                    if (source.StaffEducationOrganizationContactAssociationAddress == null)
                    {
                        target.StaffEducationOrganizationContactAssociationAddress = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffEducationOrganizationContactAssociationAddress = Activator.CreateInstance(itemType);
                        (targetStaffEducationOrganizationContactAssociationAddress as IChildEntity)?.SetParent(target);
                        source.StaffEducationOrganizationContactAssociationAddress.Map(targetStaffEducationOrganizationContactAssociationAddress);

                        // Update the target reference appropriately
                        target.StaffEducationOrganizationContactAssociationAddress = (IStaffEducationOrganizationContactAssociationAddress) targetStaffEducationOrganizationContactAssociationAddress;
                    }
                }
            }
            // -------------------------------------------------------------

            // Map lists

            if (mappingContract?.IsStaffEducationOrganizationContactAssociationTelephonesSupported != false)
            {
                source.StaffEducationOrganizationContactAssociationTelephones.MapCollectionTo(target.StaffEducationOrganizationContactAssociationTelephones, target, mappingContract?.IsStaffEducationOrganizationContactAssociationTelephoneIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationAddressMapper
    {
        private static readonly FullName _fullName_edfi_StaffEducationOrganizationContactAssociationAddress = new FullName("edfi", "StaffEducationOrganizationContactAssociationAddress");
    
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociationAddress source, IStaffEducationOrganizationContactAssociationAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffEducationOrganizationContactAssociationAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociationAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsAddressTypeDescriptorSupported != false)
                && target.AddressTypeDescriptor != source.AddressTypeDescriptor)
            {
                target.AddressTypeDescriptor = source.AddressTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsBuildingSiteNumberSupported != false)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsCitySupported != false)
                && target.City != source.City)
            {
                target.City = source.City;
                isModified = true;
            }

            if ((mappingContract?.IsCongressionalDistrictSupported != false)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((mappingContract?.IsCountyFIPSCodeSupported != false)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLocaleDescriptorSupported != false)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((mappingContract?.IsNameOfCountySupported != false)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }

            if ((mappingContract?.IsPostalCodeSupported != false)
                && target.PostalCode != source.PostalCode)
            {
                target.PostalCode = source.PostalCode;
                isModified = true;
            }

            if ((mappingContract?.IsStateAbbreviationDescriptorSupported != false)
                && target.StateAbbreviationDescriptor != source.StateAbbreviationDescriptor)
            {
                target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsStreetNumberNameSupported != false)
                && target.StreetNumberName != source.StreetNumberName)
            {
                target.StreetNumberName = source.StreetNumberName;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported ?? true)
            {
                isModified |=
                    source.StaffEducationOrganizationContactAssociationAddressPeriods.SynchronizeCollectionTo(
                        target.StaffEducationOrganizationContactAssociationAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.StaffEducationOrganizationContactAssociationAddress = target;
                            },
                        includeItem: item => mappingContract?.IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffEducationOrganizationContactAssociationAddress source, IStaffEducationOrganizationContactAssociationAddress target, Action<IStaffEducationOrganizationContactAssociationAddress, IStaffEducationOrganizationContactAssociationAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffEducationOrganizationContactAssociationAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociationAddress);
    
            // Copy contextual primary key values

            // Copy non-PK properties

            if (mappingContract?.IsAddressTypeDescriptorSupported != false)
                target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            if (mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;

            if (mappingContract?.IsBuildingSiteNumberSupported != false)
                target.BuildingSiteNumber = source.BuildingSiteNumber;

            if (mappingContract?.IsCitySupported != false)
                target.City = source.City;

            if (mappingContract?.IsCongressionalDistrictSupported != false)
                target.CongressionalDistrict = source.CongressionalDistrict;

            if (mappingContract?.IsCountyFIPSCodeSupported != false)
                target.CountyFIPSCode = source.CountyFIPSCode;

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLocaleDescriptorSupported != false)
                target.LocaleDescriptor = source.LocaleDescriptor;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            if (mappingContract?.IsNameOfCountySupported != false)
                target.NameOfCounty = source.NameOfCounty;

            if (mappingContract?.IsPostalCodeSupported != false)
                target.PostalCode = source.PostalCode;

            if (mappingContract?.IsStateAbbreviationDescriptorSupported != false)
                target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;

            if (mappingContract?.IsStreetNumberNameSupported != false)
                target.StreetNumberName = source.StreetNumberName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported != false)
            {
                source.StaffEducationOrganizationContactAssociationAddressPeriods.MapCollectionTo(target.StaffEducationOrganizationContactAssociationAddressPeriods, target, mappingContract?.IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationAddressPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StaffEducationOrganizationContactAssociationAddressPeriod = new FullName("edfi", "StaffEducationOrganizationContactAssociationAddressPeriod");
    
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociationAddressPeriod source, IStaffEducationOrganizationContactAssociationAddressPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffEducationOrganizationContactAssociationAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociationAddressPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffEducationOrganizationContactAssociationAddressPeriod source, IStaffEducationOrganizationContactAssociationAddressPeriod target, Action<IStaffEducationOrganizationContactAssociationAddressPeriod, IStaffEducationOrganizationContactAssociationAddressPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffEducationOrganizationContactAssociationAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociationAddressPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationTelephoneMapper
    {
        private static readonly FullName _fullName_edfi_StaffEducationOrganizationContactAssociationTelephone = new FullName("edfi", "StaffEducationOrganizationContactAssociationTelephone");
    
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociationTelephone source, IStaffEducationOrganizationContactAssociationTelephone target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffEducationOrganizationContactAssociationTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociationTelephone);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfPrioritySupported != false)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffEducationOrganizationContactAssociationTelephone source, IStaffEducationOrganizationContactAssociationTelephone target, Action<IStaffEducationOrganizationContactAssociationTelephone, IStaffEducationOrganizationContactAssociationTelephone> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffEducationOrganizationContactAssociationTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationContactAssociationTelephone);
    
            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsOrderOfPrioritySupported != false)
                target.OrderOfPriority = source.OrderOfPriority;

            if (mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffEducationOrganizationEmploymentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffEducationOrganizationEmploymentAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationEmploymentAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffEducationOrganizationEmploymentAssociation = new FullName("edfi", "StaffEducationOrganizationEmploymentAssociation");
    
        public static bool SynchronizeTo(this IStaffEducationOrganizationEmploymentAssociation source, IStaffEducationOrganizationEmploymentAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffEducationOrganizationEmploymentAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationEmploymentAssociation);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || !string.Equals(target.EmploymentStatusDescriptor, source.EmploymentStatusDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.HireDate != source.HireDate)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffEducationOrganizationEmploymentAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAnnualWageSupported != false)
                && target.AnnualWage != source.AnnualWage)
            {
                target.AnnualWage = source.AnnualWage;
                isModified = true;
            }

            if ((mappingContract?.IsCredentialIdentifierSupported != false)
                && target.CredentialIdentifier != source.CredentialIdentifier)
            {
                target.CredentialIdentifier = source.CredentialIdentifier;
                isModified = true;
            }

            if ((mappingContract?.IsDepartmentSupported != false)
                && target.Department != source.Department)
            {
                target.Department = source.Department;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsFullTimeEquivalencySupported != false)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((mappingContract?.IsHourlyWageSupported != false)
                && target.HourlyWage != source.HourlyWage)
            {
                target.HourlyWage = source.HourlyWage;
                isModified = true;
            }

            if ((mappingContract?.IsOfferDateSupported != false)
                && target.OfferDate != source.OfferDate)
            {
                target.OfferDate = source.OfferDate;
                isModified = true;
            }

            if ((mappingContract?.IsSeparationDescriptorSupported != false)
                && target.SeparationDescriptor != source.SeparationDescriptor)
            {
                target.SeparationDescriptor = source.SeparationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSeparationReasonDescriptorSupported != false)
                && target.SeparationReasonDescriptor != source.SeparationReasonDescriptor)
            {
                target.SeparationReasonDescriptor = source.SeparationReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsStateOfIssueStateAbbreviationDescriptorSupported != false)
                && target.StateOfIssueStateAbbreviationDescriptor != source.StateOfIssueStateAbbreviationDescriptor)
            {
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffEducationOrganizationEmploymentAssociation source, IStaffEducationOrganizationEmploymentAssociation target, Action<IStaffEducationOrganizationEmploymentAssociation, IStaffEducationOrganizationEmploymentAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffEducationOrganizationEmploymentAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffEducationOrganizationEmploymentAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
            target.HireDate = source.HireDate;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAnnualWageSupported != false)
                target.AnnualWage = source.AnnualWage;

            if (mappingContract?.IsCredentialIdentifierSupported != false)
                target.CredentialIdentifier = source.CredentialIdentifier;

            if (mappingContract?.IsDepartmentSupported != false)
                target.Department = source.Department;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsFullTimeEquivalencySupported != false)
                target.FullTimeEquivalency = source.FullTimeEquivalency;

            if (mappingContract?.IsHourlyWageSupported != false)
                target.HourlyWage = source.HourlyWage;

            if (mappingContract?.IsOfferDateSupported != false)
                target.OfferDate = source.OfferDate;

            if (mappingContract?.IsSeparationDescriptorSupported != false)
                target.SeparationDescriptor = source.SeparationDescriptor;

            if (mappingContract?.IsSeparationReasonDescriptorSupported != false)
                target.SeparationReasonDescriptor = source.SeparationReasonDescriptor;

            if (mappingContract?.IsStateOfIssueStateAbbreviationDescriptorSupported != false)
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StaffIdentificationSystemDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffIdentificationSystemDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StaffIdentificationSystemDescriptor = new FullName("edfi", "StaffIdentificationSystemDescriptor");
    
        public static bool SynchronizeTo(this IStaffIdentificationSystemDescriptor source, IStaffIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffIdentificationSystemDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StaffIdentificationSystemDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStaffIdentificationSystemDescriptor source, IStaffIdentificationSystemDescriptor target, Action<IStaffIdentificationSystemDescriptor, IStaffIdentificationSystemDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffIdentificationSystemDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffIdentificationSystemDescriptorId = source.StaffIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffLeave

namespace EdFi.Ods.Entities.Common.EdFi //.StaffLeaveAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffLeaveMapper
    {
        private static readonly FullName _fullName_edfi_StaffLeave = new FullName("edfi", "StaffLeave");
    
        public static bool SynchronizeTo(this IStaffLeave source, IStaffLeave target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffLeaveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLeave);

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || !string.Equals(target.StaffLeaveEventCategoryDescriptor, source.StaffLeaveEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffLeave
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonSupported != false)
                && target.Reason != source.Reason)
            {
                target.Reason = source.Reason;
                isModified = true;
            }

            if ((mappingContract?.IsSubstituteAssignedSupported != false)
                && target.SubstituteAssigned != source.SubstituteAssigned)
            {
                target.SubstituteAssigned = source.SubstituteAssigned;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffLeave source, IStaffLeave target, Action<IStaffLeave, IStaffLeave> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffLeaveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLeave);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.StaffLeaveEventCategoryDescriptor = source.StaffLeaveEventCategoryDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonSupported != false)
                target.Reason = source.Reason;

            if (mappingContract?.IsSubstituteAssignedSupported != false)
                target.SubstituteAssigned = source.SubstituteAssigned;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffLeaveEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StaffLeaveEventCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffLeaveEventCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StaffLeaveEventCategoryDescriptor = new FullName("edfi", "StaffLeaveEventCategoryDescriptor");
    
        public static bool SynchronizeTo(this IStaffLeaveEventCategoryDescriptor source, IStaffLeaveEventCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffLeaveEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLeaveEventCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StaffLeaveEventCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStaffLeaveEventCategoryDescriptor source, IStaffLeaveEventCategoryDescriptor target, Action<IStaffLeaveEventCategoryDescriptor, IStaffLeaveEventCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffLeaveEventCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffLeaveEventCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffLeaveEventCategoryDescriptorId = source.StaffLeaveEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffProgramAssociation = new FullName("edfi", "StaffProgramAssociation");
    
        public static bool SynchronizeTo(this IStaffProgramAssociation source, IStaffProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsStudentRecordAccessSupported != false)
                && target.StudentRecordAccess != source.StudentRecordAccess)
            {
                target.StudentRecordAccess = source.StudentRecordAccess;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffProgramAssociation source, IStaffProgramAssociation target, Action<IStaffProgramAssociation, IStaffProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsStudentRecordAccessSupported != false)
                target.StudentRecordAccess = source.StudentRecordAccess;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffSchoolAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffSchoolAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffSchoolAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffSchoolAssociation = new FullName("edfi", "StaffSchoolAssociation");
    
        public static bool SynchronizeTo(this IStaffSchoolAssociation source, IStaffSchoolAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffSchoolAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSchoolAssociation);

            // Detect primary key changes
            if (
                 !string.Equals(target.ProgramAssignmentDescriptor, source.ProgramAssignmentDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.SchoolId != source.SchoolId)
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffSchoolAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCalendarCodeSupported != false)
                && target.CalendarCode != source.CalendarCode)
            {
                target.CalendarCode = source.CalendarCode;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolYearSupported != false)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStaffSchoolAssociationAcademicSubjectsSupported ?? true)
            {
                isModified |=
                    source.StaffSchoolAssociationAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffSchoolAssociationAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.StaffSchoolAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStaffSchoolAssociationAcademicSubjectIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStaffSchoolAssociationGradeLevelsSupported ?? true)
            {
                isModified |=
                    source.StaffSchoolAssociationGradeLevels.SynchronizeCollectionTo(
                        target.StaffSchoolAssociationGradeLevels,
                        onChildAdded: child =>
                            {
                                child.StaffSchoolAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStaffSchoolAssociationGradeLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffSchoolAssociation source, IStaffSchoolAssociation target, Action<IStaffSchoolAssociation, IStaffSchoolAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffSchoolAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSchoolAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
            target.SchoolId = source.SchoolId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsCalendarCodeSupported != false)
                target.CalendarCode = source.CalendarCode;

            if (mappingContract?.IsSchoolYearSupported != false)
                target.SchoolYear = source.SchoolYear;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarResourceId = source.CalendarResourceId;
                target.CalendarDiscriminator = source.CalendarDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStaffSchoolAssociationAcademicSubjectsSupported != false)
            {
                source.StaffSchoolAssociationAcademicSubjects.MapCollectionTo(target.StaffSchoolAssociationAcademicSubjects, target, mappingContract?.IsStaffSchoolAssociationAcademicSubjectIncluded);
            }

            if (mappingContract?.IsStaffSchoolAssociationGradeLevelsSupported != false)
            {
                source.StaffSchoolAssociationGradeLevels.MapCollectionTo(target.StaffSchoolAssociationGradeLevels, target, mappingContract?.IsStaffSchoolAssociationGradeLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffSchoolAssociationAcademicSubjectMapper
    {
        private static readonly FullName _fullName_edfi_StaffSchoolAssociationAcademicSubject = new FullName("edfi", "StaffSchoolAssociationAcademicSubject");
    
        public static bool SynchronizeTo(this IStaffSchoolAssociationAcademicSubject source, IStaffSchoolAssociationAcademicSubject target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffSchoolAssociationAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSchoolAssociationAcademicSubject);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffSchoolAssociationAcademicSubject source, IStaffSchoolAssociationAcademicSubject target, Action<IStaffSchoolAssociationAcademicSubject, IStaffSchoolAssociationAcademicSubject> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffSchoolAssociationAcademicSubjectMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSchoolAssociationAcademicSubject);
    
            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffSchoolAssociationGradeLevelMapper
    {
        private static readonly FullName _fullName_edfi_StaffSchoolAssociationGradeLevel = new FullName("edfi", "StaffSchoolAssociationGradeLevel");
    
        public static bool SynchronizeTo(this IStaffSchoolAssociationGradeLevel source, IStaffSchoolAssociationGradeLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffSchoolAssociationGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSchoolAssociationGradeLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffSchoolAssociationGradeLevel source, IStaffSchoolAssociationGradeLevel target, Action<IStaffSchoolAssociationGradeLevel, IStaffSchoolAssociationGradeLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffSchoolAssociationGradeLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSchoolAssociationGradeLevel);
    
            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StaffSectionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffSectionAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffSectionAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StaffSectionAssociation = new FullName("edfi", "StaffSectionAssociation");
    
        public static bool SynchronizeTo(this IStaffSectionAssociation source, IStaffSectionAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StaffSectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSectionAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName))
                || (target.StaffUniqueId != source.StaffUniqueId))
            {
                // Disallow PK column updates on StaffSectionAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsClassroomPositionDescriptorSupported != false)
                && target.ClassroomPositionDescriptor != source.ClassroomPositionDescriptor)
            {
                target.ClassroomPositionDescriptor = source.ClassroomPositionDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsHighlyQualifiedTeacherSupported != false)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((mappingContract?.IsPercentageContributionSupported != false)
                && target.PercentageContribution != source.PercentageContribution)
            {
                target.PercentageContribution = source.PercentageContribution;
                isModified = true;
            }

            if ((mappingContract?.IsTeacherStudentDataLinkExclusionSupported != false)
                && target.TeacherStudentDataLinkExclusion != source.TeacherStudentDataLinkExclusion)
            {
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStaffSectionAssociation source, IStaffSectionAssociation target, Action<IStaffSectionAssociation, IStaffSectionAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StaffSectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StaffSectionAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsClassroomPositionDescriptorSupported != false)
                target.ClassroomPositionDescriptor = source.ClassroomPositionDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsHighlyQualifiedTeacherSupported != false)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;

            if (mappingContract?.IsPercentageContributionSupported != false)
                target.PercentageContribution = source.PercentageContribution;

            if (mappingContract?.IsTeacherStudentDataLinkExclusionSupported != false)
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StateAbbreviationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StateAbbreviationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StateAbbreviationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StateAbbreviationDescriptor = new FullName("edfi", "StateAbbreviationDescriptor");
    
        public static bool SynchronizeTo(this IStateAbbreviationDescriptor source, IStateAbbreviationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StateAbbreviationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateAbbreviationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StateAbbreviationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStateAbbreviationDescriptor source, IStateAbbreviationDescriptor target, Action<IStateAbbreviationDescriptor, IStateAbbreviationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StateAbbreviationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateAbbreviationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StateAbbreviationDescriptorId = source.StateAbbreviationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.Common.EdFi //.StateEducationAgencyAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyMapper
    {
        private static readonly FullName _fullName_edfi_StateEducationAgency = new FullName("edfi", "StateEducationAgency");
    
        public static bool SynchronizeTo(this IStateEducationAgency source, IStateEducationAgency target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StateEducationAgencyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateEducationAgency);

            // Detect primary key changes
            if (
                 (target.StateEducationAgencyId != source.StateEducationAgencyId))
            {
                // Disallow PK column updates on StateEducationAgency
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsNameOfInstitutionSupported != false)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsOperationalStatusDescriptorSupported != false)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsShortNameOfInstitutionSupported != false)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((mappingContract?.IsWebSiteSupported != false)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists
            if (mappingContract?.IsEducationOrganizationAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationCategories.SynchronizeCollectionTo(
                        target.EducationOrganizationCategories, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationCategoryIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(
                        target.EducationOrganizationIdentificationCodes, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationIndicators.SynchronizeCollectionTo(
                        target.EducationOrganizationIndicators, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(
                        target.EducationOrganizationInstitutionTelephones, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported ?? true)
            {
                isModified |= 
                    source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(
                        target.EducationOrganizationInternationalAddresses, 
                        onChildAdded: child => child.EducationOrganization = target,
                        includeItem: item => mappingContract?.IsEducationOrganizationInternationalAddressIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStateEducationAgencyAccountabilitiesSupported ?? true)
            {
                isModified |=
                    source.StateEducationAgencyAccountabilities.SynchronizeCollectionTo(
                        target.StateEducationAgencyAccountabilities,
                        onChildAdded: child =>
                            {
                                child.StateEducationAgency = target;
                            },
                        includeItem: item => mappingContract?.IsStateEducationAgencyAccountabilityIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStateEducationAgencyFederalFundsSupported ?? true)
            {
                isModified |=
                    source.StateEducationAgencyFederalFunds.SynchronizeCollectionTo(
                        target.StateEducationAgencyFederalFunds,
                        onChildAdded: child =>
                            {
                                child.StateEducationAgency = target;
                            },
                        includeItem: item => mappingContract?.IsStateEducationAgencyFederalFundsIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStateEducationAgency source, IStateEducationAgency target, Action<IStateEducationAgency, IStateEducationAgency> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StateEducationAgencyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateEducationAgency);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StateEducationAgencyId = source.StateEducationAgencyId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsNameOfInstitutionSupported != false)
                target.NameOfInstitution = source.NameOfInstitution;

            if (mappingContract?.IsOperationalStatusDescriptorSupported != false)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;

            if (mappingContract?.IsShortNameOfInstitutionSupported != false)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;

            if (mappingContract?.IsWebSiteSupported != false)
                target.WebSite = source.WebSite;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsEducationOrganizationAddressesSupported != false)
            {
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target, mappingContract?.IsEducationOrganizationAddressIncluded);
            }

            if (mappingContract?.IsEducationOrganizationCategoriesSupported != false)
            {
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target, mappingContract?.IsEducationOrganizationCategoryIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIdentificationCodesSupported != false)
            {
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target, mappingContract?.IsEducationOrganizationIdentificationCodeIncluded);
            }

            if (mappingContract?.IsEducationOrganizationIndicatorsSupported != false)
            {
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target, mappingContract?.IsEducationOrganizationIndicatorIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInstitutionTelephonesSupported != false)
            {
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target, mappingContract?.IsEducationOrganizationInstitutionTelephoneIncluded);
            }

            if (mappingContract?.IsEducationOrganizationInternationalAddressesSupported != false)
            {
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target, mappingContract?.IsEducationOrganizationInternationalAddressIncluded);
            }

            // Map lists

            if (mappingContract?.IsStateEducationAgencyAccountabilitiesSupported != false)
            {
                source.StateEducationAgencyAccountabilities.MapCollectionTo(target.StateEducationAgencyAccountabilities, target, mappingContract?.IsStateEducationAgencyAccountabilityIncluded);
            }

            if (mappingContract?.IsStateEducationAgencyFederalFundsSupported != false)
            {
                source.StateEducationAgencyFederalFunds.MapCollectionTo(target.StateEducationAgencyFederalFunds, target, mappingContract?.IsStateEducationAgencyFederalFundsIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyAccountabilityMapper
    {
        private static readonly FullName _fullName_edfi_StateEducationAgencyAccountability = new FullName("edfi", "StateEducationAgencyAccountability");
    
        public static bool SynchronizeTo(this IStateEducationAgencyAccountability source, IStateEducationAgencyAccountability target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StateEducationAgencyAccountabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateEducationAgencyAccountability);


            // Copy non-PK properties

            if ((mappingContract?.IsCTEGraduationRateInclusionSupported != false)
                && target.CTEGraduationRateInclusion != source.CTEGraduationRateInclusion)
            {
                target.CTEGraduationRateInclusion = source.CTEGraduationRateInclusion;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStateEducationAgencyAccountability source, IStateEducationAgencyAccountability target, Action<IStateEducationAgencyAccountability, IStateEducationAgencyAccountability> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StateEducationAgencyAccountabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateEducationAgencyAccountability);
    
            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsCTEGraduationRateInclusionSupported != false)
                target.CTEGraduationRateInclusion = source.CTEGraduationRateInclusion;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyFederalFundsMapper
    {
        private static readonly FullName _fullName_edfi_StateEducationAgencyFederalFunds = new FullName("edfi", "StateEducationAgencyFederalFunds");
    
        public static bool SynchronizeTo(this IStateEducationAgencyFederalFunds source, IStateEducationAgencyFederalFunds target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StateEducationAgencyFederalFundsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateEducationAgencyFederalFunds);


            // Copy non-PK properties

            if ((mappingContract?.IsFederalProgramsFundingAllocationSupported != false)
                && target.FederalProgramsFundingAllocation != source.FederalProgramsFundingAllocation)
            {
                target.FederalProgramsFundingAllocation = source.FederalProgramsFundingAllocation;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStateEducationAgencyFederalFunds source, IStateEducationAgencyFederalFunds target, Action<IStateEducationAgencyFederalFunds, IStateEducationAgencyFederalFunds> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StateEducationAgencyFederalFundsMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StateEducationAgencyFederalFunds);
    
            // Copy contextual primary key values
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (mappingContract?.IsFederalProgramsFundingAllocationSupported != false)
                target.FederalProgramsFundingAllocation = source.FederalProgramsFundingAllocation;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Student

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentMapper
    {
        private static readonly FullName _fullName_edfi_Student = new FullName("edfi", "Student");
    
        public static bool SynchronizeTo(this IStudent source, IStudent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Student);

            // Detect primary key changes
            if (
                 (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on Student
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBirthCitySupported != false)
                && target.BirthCity != source.BirthCity)
            {
                target.BirthCity = source.BirthCity;
                isModified = true;
            }

            if ((mappingContract?.IsBirthCountryDescriptorSupported != false)
                && target.BirthCountryDescriptor != source.BirthCountryDescriptor)
            {
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsBirthDateSupported != false)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((mappingContract?.IsBirthInternationalProvinceSupported != false)
                && target.BirthInternationalProvince != source.BirthInternationalProvince)
            {
                target.BirthInternationalProvince = source.BirthInternationalProvince;
                isModified = true;
            }

            if ((mappingContract?.IsBirthSexDescriptorSupported != false)
                && target.BirthSexDescriptor != source.BirthSexDescriptor)
            {
                target.BirthSexDescriptor = source.BirthSexDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsBirthStateAbbreviationDescriptorSupported != false)
                && target.BirthStateAbbreviationDescriptor != source.BirthStateAbbreviationDescriptor)
            {
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCitizenshipStatusDescriptorSupported != false)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDateEnteredUSSupported != false)
                && target.DateEnteredUS != source.DateEnteredUS)
            {
                target.DateEnteredUS = source.DateEnteredUS;
                isModified = true;
            }

            if ((mappingContract?.IsFirstNameSupported != false)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((mappingContract?.IsGenerationCodeSuffixSupported != false)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((mappingContract?.IsLastSurnameSupported != false)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsMaidenNameSupported != false)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((mappingContract?.IsMiddleNameSupported != false)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((mappingContract?.IsMultipleBirthStatusSupported != false)
                && target.MultipleBirthStatus != source.MultipleBirthStatus)
            {
                target.MultipleBirthStatus = source.MultipleBirthStatus;
                isModified = true;
            }

            if ((mappingContract?.IsPersonalTitlePrefixSupported != false)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((mappingContract?.IsPersonIdSupported != false)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((mappingContract?.IsPreferredFirstNameSupported != false)
                && target.PreferredFirstName != source.PreferredFirstName)
            {
                target.PreferredFirstName = source.PreferredFirstName;
                isModified = true;
            }

            if ((mappingContract?.IsPreferredLastSurnameSupported != false)
                && target.PreferredLastSurname != source.PreferredLastSurname)
            {
                target.PreferredLastSurname = source.PreferredLastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsSourceSystemDescriptorSupported != false)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsStudentUniqueIdSupported != false)
                && target.StudentUniqueId != source.StudentUniqueId)
            {
                target.StudentUniqueId = source.StudentUniqueId;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentIdentificationDocumentsSupported ?? true)
            {
                isModified |=
                    source.StudentIdentificationDocuments.SynchronizeCollectionTo(
                        target.StudentIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Student = target;
                            },
                        includeItem: item => mappingContract?.IsStudentIdentificationDocumentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentOtherNamesSupported ?? true)
            {
                isModified |=
                    source.StudentOtherNames.SynchronizeCollectionTo(
                        target.StudentOtherNames,
                        onChildAdded: child =>
                            {
                                child.Student = target;
                            },
                        includeItem: item => mappingContract?.IsStudentOtherNameIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentPersonalIdentificationDocumentsSupported ?? true)
            {
                isModified |=
                    source.StudentPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.StudentPersonalIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Student = target;
                            },
                        includeItem: item => mappingContract?.IsStudentPersonalIdentificationDocumentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentVisasSupported ?? true)
            {
                isModified |=
                    source.StudentVisas.SynchronizeCollectionTo(
                        target.StudentVisas,
                        onChildAdded: child =>
                            {
                                child.Student = target;
                            },
                        includeItem: item => mappingContract?.IsStudentVisaIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudent source, IStudent target, Action<IStudent, IStudent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Student);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsBirthCitySupported != false)
                target.BirthCity = source.BirthCity;

            if (mappingContract?.IsBirthCountryDescriptorSupported != false)
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;

            if (mappingContract?.IsBirthDateSupported != false)
                target.BirthDate = source.BirthDate;

            if (mappingContract?.IsBirthInternationalProvinceSupported != false)
                target.BirthInternationalProvince = source.BirthInternationalProvince;

            if (mappingContract?.IsBirthSexDescriptorSupported != false)
                target.BirthSexDescriptor = source.BirthSexDescriptor;

            if (mappingContract?.IsBirthStateAbbreviationDescriptorSupported != false)
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;

            if (mappingContract?.IsCitizenshipStatusDescriptorSupported != false)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;

            if (mappingContract?.IsDateEnteredUSSupported != false)
                target.DateEnteredUS = source.DateEnteredUS;

            if (mappingContract?.IsFirstNameSupported != false)
                target.FirstName = source.FirstName;

            if (mappingContract?.IsGenerationCodeSuffixSupported != false)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;

            if (mappingContract?.IsLastSurnameSupported != false)
                target.LastSurname = source.LastSurname;

            if (mappingContract?.IsMaidenNameSupported != false)
                target.MaidenName = source.MaidenName;

            if (mappingContract?.IsMiddleNameSupported != false)
                target.MiddleName = source.MiddleName;

            if (mappingContract?.IsMultipleBirthStatusSupported != false)
                target.MultipleBirthStatus = source.MultipleBirthStatus;

            if (mappingContract?.IsPersonalTitlePrefixSupported != false)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;

            if (mappingContract?.IsPersonIdSupported != false)
                target.PersonId = source.PersonId;

            if (mappingContract?.IsPreferredFirstNameSupported != false)
                target.PreferredFirstName = source.PreferredFirstName;

            if (mappingContract?.IsPreferredLastSurnameSupported != false)
                target.PreferredLastSurname = source.PreferredLastSurname;

            if (mappingContract?.IsSourceSystemDescriptorSupported != false)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            if (mappingContract?.IsStudentUniqueIdSupported != false)
                target.StudentUniqueId = source.StudentUniqueId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentIdentificationDocumentsSupported != false)
            {
                source.StudentIdentificationDocuments.MapCollectionTo(target.StudentIdentificationDocuments, target, mappingContract?.IsStudentIdentificationDocumentIncluded);
            }

            if (mappingContract?.IsStudentOtherNamesSupported != false)
            {
                source.StudentOtherNames.MapCollectionTo(target.StudentOtherNames, target, mappingContract?.IsStudentOtherNameIncluded);
            }

            if (mappingContract?.IsStudentPersonalIdentificationDocumentsSupported != false)
            {
                source.StudentPersonalIdentificationDocuments.MapCollectionTo(target.StudentPersonalIdentificationDocuments, target, mappingContract?.IsStudentPersonalIdentificationDocumentIncluded);
            }

            if (mappingContract?.IsStudentVisasSupported != false)
            {
                source.StudentVisas.MapCollectionTo(target.StudentVisas, target, mappingContract?.IsStudentVisaIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentIdentificationDocumentMapper
    {
        private static readonly FullName _fullName_edfi_StudentIdentificationDocument = new FullName("edfi", "StudentIdentificationDocument");
    
        public static bool SynchronizeTo(this IStudentIdentificationDocument source, IStudentIdentificationDocument target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentIdentificationDocument);


            // Copy non-PK properties

            if ((mappingContract?.IsDocumentExpirationDateSupported != false)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsDocumentTitleSupported != false)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerCountryDescriptorSupported != false)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentIdentificationDocument source, IStudentIdentificationDocument target, Action<IStudentIdentificationDocument, IStudentIdentificationDocument> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentIdentificationDocument);
    
            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDocumentExpirationDateSupported != false)
                target.DocumentExpirationDate = source.DocumentExpirationDate;

            if (mappingContract?.IsDocumentTitleSupported != false)
                target.DocumentTitle = source.DocumentTitle;

            if (mappingContract?.IsIssuerCountryDescriptorSupported != false)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;

            if (mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentOtherNameMapper
    {
        private static readonly FullName _fullName_edfi_StudentOtherName = new FullName("edfi", "StudentOtherName");
    
        public static bool SynchronizeTo(this IStudentOtherName source, IStudentOtherName target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentOtherNameMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentOtherName);


            // Copy non-PK properties

            if ((mappingContract?.IsFirstNameSupported != false)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((mappingContract?.IsGenerationCodeSuffixSupported != false)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((mappingContract?.IsLastSurnameSupported != false)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((mappingContract?.IsMiddleNameSupported != false)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((mappingContract?.IsPersonalTitlePrefixSupported != false)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentOtherName source, IStudentOtherName target, Action<IStudentOtherName, IStudentOtherName> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentOtherNameMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentOtherName);
    
            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsFirstNameSupported != false)
                target.FirstName = source.FirstName;

            if (mappingContract?.IsGenerationCodeSuffixSupported != false)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;

            if (mappingContract?.IsLastSurnameSupported != false)
                target.LastSurname = source.LastSurname;

            if (mappingContract?.IsMiddleNameSupported != false)
                target.MiddleName = source.MiddleName;

            if (mappingContract?.IsPersonalTitlePrefixSupported != false)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentPersonalIdentificationDocumentMapper
    {
        private static readonly FullName _fullName_edfi_StudentPersonalIdentificationDocument = new FullName("edfi", "StudentPersonalIdentificationDocument");
    
        public static bool SynchronizeTo(this IStudentPersonalIdentificationDocument source, IStudentPersonalIdentificationDocument target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentPersonalIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentPersonalIdentificationDocument);


            // Copy non-PK properties

            if ((mappingContract?.IsDocumentExpirationDateSupported != false)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsDocumentTitleSupported != false)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerCountryDescriptorSupported != false)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentPersonalIdentificationDocument source, IStudentPersonalIdentificationDocument target, Action<IStudentPersonalIdentificationDocument, IStudentPersonalIdentificationDocument> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentPersonalIdentificationDocumentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentPersonalIdentificationDocument);
    
            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDocumentExpirationDateSupported != false)
                target.DocumentExpirationDate = source.DocumentExpirationDate;

            if (mappingContract?.IsDocumentTitleSupported != false)
                target.DocumentTitle = source.DocumentTitle;

            if (mappingContract?.IsIssuerCountryDescriptorSupported != false)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;

            if (mappingContract?.IsIssuerDocumentIdentificationCodeSupported != false)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentVisaMapper
    {
        private static readonly FullName _fullName_edfi_StudentVisa = new FullName("edfi", "StudentVisa");
    
        public static bool SynchronizeTo(this IStudentVisa source, IStudentVisa target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentVisaMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentVisa);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentVisa source, IStudentVisa target, Action<IStudentVisa, IStudentVisa> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentVisaMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentVisa);
    
            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentAcademicRecord

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAcademicRecordAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecord = new FullName("edfi", "StudentAcademicRecord");
    
        public static bool SynchronizeTo(this IStudentAcademicRecord source, IStudentAcademicRecord target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecord);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.StudentUniqueId != source.StudentUniqueId)
                || !string.Equals(target.TermDescriptor, source.TermDescriptor, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StudentAcademicRecord
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCumulativeAttemptedCreditConversionSupported != false)
                && target.CumulativeAttemptedCreditConversion != source.CumulativeAttemptedCreditConversion)
            {
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsCumulativeAttemptedCreditsSupported != false)
                && target.CumulativeAttemptedCredits != source.CumulativeAttemptedCredits)
            {
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsCumulativeAttemptedCreditTypeDescriptorSupported != false)
                && target.CumulativeAttemptedCreditTypeDescriptor != source.CumulativeAttemptedCreditTypeDescriptor)
            {
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCumulativeEarnedCreditConversionSupported != false)
                && target.CumulativeEarnedCreditConversion != source.CumulativeEarnedCreditConversion)
            {
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsCumulativeEarnedCreditsSupported != false)
                && target.CumulativeEarnedCredits != source.CumulativeEarnedCredits)
            {
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsCumulativeEarnedCreditTypeDescriptorSupported != false)
                && target.CumulativeEarnedCreditTypeDescriptor != source.CumulativeEarnedCreditTypeDescriptor)
            {
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProjectedGraduationDateSupported != false)
                && target.ProjectedGraduationDate != source.ProjectedGraduationDate)
            {
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
                isModified = true;
            }

            if ((mappingContract?.IsSessionAttemptedCreditConversionSupported != false)
                && target.SessionAttemptedCreditConversion != source.SessionAttemptedCreditConversion)
            {
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsSessionAttemptedCreditsSupported != false)
                && target.SessionAttemptedCredits != source.SessionAttemptedCredits)
            {
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsSessionAttemptedCreditTypeDescriptorSupported != false)
                && target.SessionAttemptedCreditTypeDescriptor != source.SessionAttemptedCreditTypeDescriptor)
            {
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSessionEarnedCreditConversionSupported != false)
                && target.SessionEarnedCreditConversion != source.SessionEarnedCreditConversion)
            {
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
                isModified = true;
            }

            if ((mappingContract?.IsSessionEarnedCreditsSupported != false)
                && target.SessionEarnedCredits != source.SessionEarnedCredits)
            {
                target.SessionEarnedCredits = source.SessionEarnedCredits;
                isModified = true;
            }

            if ((mappingContract?.IsSessionEarnedCreditTypeDescriptorSupported != false)
                && target.SessionEarnedCreditTypeDescriptor != source.SessionEarnedCreditTypeDescriptor)
            {
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // StudentAcademicRecordClassRanking (StudentAcademicRecordClassRanking)
            if (mappingContract?.IsStudentAcademicRecordClassRankingSupported != false)
            {
                if (source.StudentAcademicRecordClassRanking == null)
                {
                    if (target.StudentAcademicRecordClassRanking != null)
                    {
                        target.StudentAcademicRecordClassRanking = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StudentAcademicRecordClassRanking == null)
                    {
                        var itemType = target.GetType().GetProperty("StudentAcademicRecordClassRanking").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StudentAcademicRecordClassRanking = (IStudentAcademicRecordClassRanking) newItem;
                    }

                    isModified |= source.StudentAcademicRecordClassRanking.Synchronize(target.StudentAcademicRecordClassRanking);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (mappingContract?.IsStudentAcademicRecordAcademicHonorsSupported ?? true)
            {
                isModified |=
                    source.StudentAcademicRecordAcademicHonors.SynchronizeCollectionTo(
                        target.StudentAcademicRecordAcademicHonors,
                        onChildAdded: child =>
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAcademicRecordAcademicHonorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAcademicRecordDiplomasSupported ?? true)
            {
                isModified |=
                    source.StudentAcademicRecordDiplomas.SynchronizeCollectionTo(
                        target.StudentAcademicRecordDiplomas,
                        onChildAdded: child =>
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAcademicRecordDiplomaIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAcademicRecordGradePointAveragesSupported ?? true)
            {
                isModified |=
                    source.StudentAcademicRecordGradePointAverages.SynchronizeCollectionTo(
                        target.StudentAcademicRecordGradePointAverages,
                        onChildAdded: child =>
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAcademicRecordGradePointAverageIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAcademicRecordRecognitionsSupported ?? true)
            {
                isModified |=
                    source.StudentAcademicRecordRecognitions.SynchronizeCollectionTo(
                        target.StudentAcademicRecordRecognitions,
                        onChildAdded: child =>
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAcademicRecordRecognitionIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAcademicRecordReportCardsSupported ?? true)
            {
                isModified |=
                    source.StudentAcademicRecordReportCards.SynchronizeCollectionTo(
                        target.StudentAcademicRecordReportCards,
                        onChildAdded: child =>
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAcademicRecordReportCardIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecord source, IStudentAcademicRecord target, Action<IStudentAcademicRecord, IStudentAcademicRecord> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecord);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCumulativeAttemptedCreditConversionSupported != false)
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;

            if (mappingContract?.IsCumulativeAttemptedCreditsSupported != false)
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;

            if (mappingContract?.IsCumulativeAttemptedCreditTypeDescriptorSupported != false)
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;

            if (mappingContract?.IsCumulativeEarnedCreditConversionSupported != false)
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;

            if (mappingContract?.IsCumulativeEarnedCreditsSupported != false)
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;

            if (mappingContract?.IsCumulativeEarnedCreditTypeDescriptorSupported != false)
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;

            if (mappingContract?.IsProjectedGraduationDateSupported != false)
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;

            if (mappingContract?.IsSessionAttemptedCreditConversionSupported != false)
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;

            if (mappingContract?.IsSessionAttemptedCreditsSupported != false)
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;

            if (mappingContract?.IsSessionAttemptedCreditTypeDescriptorSupported != false)
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;

            if (mappingContract?.IsSessionEarnedCreditConversionSupported != false)
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;

            if (mappingContract?.IsSessionEarnedCreditsSupported != false)
                target.SessionEarnedCredits = source.SessionEarnedCredits;

            if (mappingContract?.IsSessionEarnedCreditTypeDescriptorSupported != false)
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StudentAcademicRecordClassRanking (StudentAcademicRecordClassRanking) (Source)
            if (mappingContract?.IsStudentAcademicRecordClassRankingSupported != false)
            {
                var itemProperty = target.GetType().GetProperty("StudentAcademicRecordClassRanking");

                if (itemProperty != null)
                {
                    if (source.StudentAcademicRecordClassRanking == null)
                    {
                        target.StudentAcademicRecordClassRanking = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStudentAcademicRecordClassRanking = Activator.CreateInstance(itemType);
                        (targetStudentAcademicRecordClassRanking as IChildEntity)?.SetParent(target);
                        source.StudentAcademicRecordClassRanking.Map(targetStudentAcademicRecordClassRanking);

                        // Update the target reference appropriately
                        target.StudentAcademicRecordClassRanking = (IStudentAcademicRecordClassRanking) targetStudentAcademicRecordClassRanking;
                    }
                }
            }
            // -------------------------------------------------------------

            // Map lists

            if (mappingContract?.IsStudentAcademicRecordAcademicHonorsSupported != false)
            {
                source.StudentAcademicRecordAcademicHonors.MapCollectionTo(target.StudentAcademicRecordAcademicHonors, target, mappingContract?.IsStudentAcademicRecordAcademicHonorIncluded);
            }

            if (mappingContract?.IsStudentAcademicRecordDiplomasSupported != false)
            {
                source.StudentAcademicRecordDiplomas.MapCollectionTo(target.StudentAcademicRecordDiplomas, target, mappingContract?.IsStudentAcademicRecordDiplomaIncluded);
            }

            if (mappingContract?.IsStudentAcademicRecordGradePointAveragesSupported != false)
            {
                source.StudentAcademicRecordGradePointAverages.MapCollectionTo(target.StudentAcademicRecordGradePointAverages, target, mappingContract?.IsStudentAcademicRecordGradePointAverageIncluded);
            }

            if (mappingContract?.IsStudentAcademicRecordRecognitionsSupported != false)
            {
                source.StudentAcademicRecordRecognitions.MapCollectionTo(target.StudentAcademicRecordRecognitions, target, mappingContract?.IsStudentAcademicRecordRecognitionIncluded);
            }

            if (mappingContract?.IsStudentAcademicRecordReportCardsSupported != false)
            {
                source.StudentAcademicRecordReportCards.MapCollectionTo(target.StudentAcademicRecordReportCards, target, mappingContract?.IsStudentAcademicRecordReportCardIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordAcademicHonorMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecordAcademicHonor = new FullName("edfi", "StudentAcademicRecordAcademicHonor");
    
        public static bool SynchronizeTo(this IStudentAcademicRecordAcademicHonor source, IStudentAcademicRecordAcademicHonor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordAcademicHonorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordAcademicHonor);


            // Copy non-PK properties

            if ((mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementCategorySystemSupported != false)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementTitleSupported != false)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaSupported != false)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaURLSupported != false)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((mappingContract?.IsEvidenceStatementSupported != false)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((mappingContract?.IsHonorAwardDateSupported != false)
                && target.HonorAwardDate != source.HonorAwardDate)
            {
                target.HonorAwardDate = source.HonorAwardDate;
                isModified = true;
            }

            if ((mappingContract?.IsHonorAwardExpiresDateSupported != false)
                && target.HonorAwardExpiresDate != source.HonorAwardExpiresDate)
            {
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
                isModified = true;
            }

            if ((mappingContract?.IsImageURLSupported != false)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerOriginURLSupported != false)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecordAcademicHonor source, IStudentAcademicRecordAcademicHonor target, Action<IStudentAcademicRecordAcademicHonor, IStudentAcademicRecordAcademicHonor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordAcademicHonorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordAcademicHonor);
    
            // Copy contextual primary key values
            target.AcademicHonorCategoryDescriptor = source.AcademicHonorCategoryDescriptor;
            target.HonorDescription = source.HonorDescription;

            // Copy non-PK properties

            if (mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;

            if (mappingContract?.IsAchievementCategorySystemSupported != false)
                target.AchievementCategorySystem = source.AchievementCategorySystem;

            if (mappingContract?.IsAchievementTitleSupported != false)
                target.AchievementTitle = source.AchievementTitle;

            if (mappingContract?.IsCriteriaSupported != false)
                target.Criteria = source.Criteria;

            if (mappingContract?.IsCriteriaURLSupported != false)
                target.CriteriaURL = source.CriteriaURL;

            if (mappingContract?.IsEvidenceStatementSupported != false)
                target.EvidenceStatement = source.EvidenceStatement;

            if (mappingContract?.IsHonorAwardDateSupported != false)
                target.HonorAwardDate = source.HonorAwardDate;

            if (mappingContract?.IsHonorAwardExpiresDateSupported != false)
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;

            if (mappingContract?.IsImageURLSupported != false)
                target.ImageURL = source.ImageURL;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            if (mappingContract?.IsIssuerOriginURLSupported != false)
                target.IssuerOriginURL = source.IssuerOriginURL;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordClassRankingMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecordClassRanking = new FullName("edfi", "StudentAcademicRecordClassRanking");
    
        public static bool SynchronizeTo(this IStudentAcademicRecordClassRanking source, IStudentAcademicRecordClassRanking target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordClassRankingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordClassRanking);


            // Copy non-PK properties

            if ((mappingContract?.IsClassRankSupported != false)
                && target.ClassRank != source.ClassRank)
            {
                target.ClassRank = source.ClassRank;
                isModified = true;
            }

            if ((mappingContract?.IsClassRankingDateSupported != false)
                && target.ClassRankingDate != source.ClassRankingDate)
            {
                target.ClassRankingDate = source.ClassRankingDate;
                isModified = true;
            }

            if ((mappingContract?.IsPercentageRankingSupported != false)
                && target.PercentageRanking != source.PercentageRanking)
            {
                target.PercentageRanking = source.PercentageRanking;
                isModified = true;
            }

            if ((mappingContract?.IsTotalNumberInClassSupported != false)
                && target.TotalNumberInClass != source.TotalNumberInClass)
            {
                target.TotalNumberInClass = source.TotalNumberInClass;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecordClassRanking source, IStudentAcademicRecordClassRanking target, Action<IStudentAcademicRecordClassRanking, IStudentAcademicRecordClassRanking> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordClassRankingMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordClassRanking);
    
            // Copy contextual primary key values

            // Copy non-PK properties

            if (mappingContract?.IsClassRankSupported != false)
                target.ClassRank = source.ClassRank;

            if (mappingContract?.IsClassRankingDateSupported != false)
                target.ClassRankingDate = source.ClassRankingDate;

            if (mappingContract?.IsPercentageRankingSupported != false)
                target.PercentageRanking = source.PercentageRanking;

            if (mappingContract?.IsTotalNumberInClassSupported != false)
                target.TotalNumberInClass = source.TotalNumberInClass;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordDiplomaMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecordDiploma = new FullName("edfi", "StudentAcademicRecordDiploma");
    
        public static bool SynchronizeTo(this IStudentAcademicRecordDiploma source, IStudentAcademicRecordDiploma target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordDiplomaMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordDiploma);


            // Copy non-PK properties

            if ((mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementCategorySystemSupported != false)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementTitleSupported != false)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaSupported != false)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaURLSupported != false)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((mappingContract?.IsCTECompleterSupported != false)
                && target.CTECompleter != source.CTECompleter)
            {
                target.CTECompleter = source.CTECompleter;
                isModified = true;
            }

            if ((mappingContract?.IsDiplomaAwardExpiresDateSupported != false)
                && target.DiplomaAwardExpiresDate != source.DiplomaAwardExpiresDate)
            {
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
                isModified = true;
            }

            if ((mappingContract?.IsDiplomaDescriptionSupported != false)
                && target.DiplomaDescription != source.DiplomaDescription)
            {
                target.DiplomaDescription = source.DiplomaDescription;
                isModified = true;
            }

            if ((mappingContract?.IsDiplomaLevelDescriptorSupported != false)
                && target.DiplomaLevelDescriptor != source.DiplomaLevelDescriptor)
            {
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEvidenceStatementSupported != false)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((mappingContract?.IsImageURLSupported != false)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerOriginURLSupported != false)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecordDiploma source, IStudentAcademicRecordDiploma target, Action<IStudentAcademicRecordDiploma, IStudentAcademicRecordDiploma> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordDiplomaMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordDiploma);
    
            // Copy contextual primary key values
            target.DiplomaAwardDate = source.DiplomaAwardDate;
            target.DiplomaTypeDescriptor = source.DiplomaTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;

            if (mappingContract?.IsAchievementCategorySystemSupported != false)
                target.AchievementCategorySystem = source.AchievementCategorySystem;

            if (mappingContract?.IsAchievementTitleSupported != false)
                target.AchievementTitle = source.AchievementTitle;

            if (mappingContract?.IsCriteriaSupported != false)
                target.Criteria = source.Criteria;

            if (mappingContract?.IsCriteriaURLSupported != false)
                target.CriteriaURL = source.CriteriaURL;

            if (mappingContract?.IsCTECompleterSupported != false)
                target.CTECompleter = source.CTECompleter;

            if (mappingContract?.IsDiplomaAwardExpiresDateSupported != false)
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;

            if (mappingContract?.IsDiplomaDescriptionSupported != false)
                target.DiplomaDescription = source.DiplomaDescription;

            if (mappingContract?.IsDiplomaLevelDescriptorSupported != false)
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;

            if (mappingContract?.IsEvidenceStatementSupported != false)
                target.EvidenceStatement = source.EvidenceStatement;

            if (mappingContract?.IsImageURLSupported != false)
                target.ImageURL = source.ImageURL;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            if (mappingContract?.IsIssuerOriginURLSupported != false)
                target.IssuerOriginURL = source.IssuerOriginURL;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordGradePointAverageMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecordGradePointAverage = new FullName("edfi", "StudentAcademicRecordGradePointAverage");
    
        public static bool SynchronizeTo(this IStudentAcademicRecordGradePointAverage source, IStudentAcademicRecordGradePointAverage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordGradePointAverageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordGradePointAverage);


            // Copy non-PK properties

            if ((mappingContract?.IsGradePointAverageValueSupported != false)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((mappingContract?.IsIsCumulativeSupported != false)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((mappingContract?.IsMaxGradePointAverageValueSupported != false)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecordGradePointAverage source, IStudentAcademicRecordGradePointAverage target, Action<IStudentAcademicRecordGradePointAverage, IStudentAcademicRecordGradePointAverage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordGradePointAverageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordGradePointAverage);
    
            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsGradePointAverageValueSupported != false)
                target.GradePointAverageValue = source.GradePointAverageValue;

            if (mappingContract?.IsIsCumulativeSupported != false)
                target.IsCumulative = source.IsCumulative;

            if (mappingContract?.IsMaxGradePointAverageValueSupported != false)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordRecognitionMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecordRecognition = new FullName("edfi", "StudentAcademicRecordRecognition");
    
        public static bool SynchronizeTo(this IStudentAcademicRecordRecognition source, IStudentAcademicRecordRecognition target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordRecognitionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordRecognition);


            // Copy non-PK properties

            if ((mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementCategorySystemSupported != false)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((mappingContract?.IsAchievementTitleSupported != false)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaSupported != false)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((mappingContract?.IsCriteriaURLSupported != false)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((mappingContract?.IsEvidenceStatementSupported != false)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((mappingContract?.IsImageURLSupported != false)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerNameSupported != false)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((mappingContract?.IsIssuerOriginURLSupported != false)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }

            if ((mappingContract?.IsRecognitionAwardDateSupported != false)
                && target.RecognitionAwardDate != source.RecognitionAwardDate)
            {
                target.RecognitionAwardDate = source.RecognitionAwardDate;
                isModified = true;
            }

            if ((mappingContract?.IsRecognitionAwardExpiresDateSupported != false)
                && target.RecognitionAwardExpiresDate != source.RecognitionAwardExpiresDate)
            {
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
                isModified = true;
            }

            if ((mappingContract?.IsRecognitionDescriptionSupported != false)
                && target.RecognitionDescription != source.RecognitionDescription)
            {
                target.RecognitionDescription = source.RecognitionDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecordRecognition source, IStudentAcademicRecordRecognition target, Action<IStudentAcademicRecordRecognition, IStudentAcademicRecordRecognition> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordRecognitionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordRecognition);
    
            // Copy contextual primary key values
            target.RecognitionTypeDescriptor = source.RecognitionTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAchievementCategoryDescriptorSupported != false)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;

            if (mappingContract?.IsAchievementCategorySystemSupported != false)
                target.AchievementCategorySystem = source.AchievementCategorySystem;

            if (mappingContract?.IsAchievementTitleSupported != false)
                target.AchievementTitle = source.AchievementTitle;

            if (mappingContract?.IsCriteriaSupported != false)
                target.Criteria = source.Criteria;

            if (mappingContract?.IsCriteriaURLSupported != false)
                target.CriteriaURL = source.CriteriaURL;

            if (mappingContract?.IsEvidenceStatementSupported != false)
                target.EvidenceStatement = source.EvidenceStatement;

            if (mappingContract?.IsImageURLSupported != false)
                target.ImageURL = source.ImageURL;

            if (mappingContract?.IsIssuerNameSupported != false)
                target.IssuerName = source.IssuerName;

            if (mappingContract?.IsIssuerOriginURLSupported != false)
                target.IssuerOriginURL = source.IssuerOriginURL;

            if (mappingContract?.IsRecognitionAwardDateSupported != false)
                target.RecognitionAwardDate = source.RecognitionAwardDate;

            if (mappingContract?.IsRecognitionAwardExpiresDateSupported != false)
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;

            if (mappingContract?.IsRecognitionDescriptionSupported != false)
                target.RecognitionDescription = source.RecognitionDescription;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordReportCardMapper
    {
        private static readonly FullName _fullName_edfi_StudentAcademicRecordReportCard = new FullName("edfi", "StudentAcademicRecordReportCard");
    
        public static bool SynchronizeTo(this IStudentAcademicRecordReportCard source, IStudentAcademicRecordReportCard target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAcademicRecordReportCardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordReportCard);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAcademicRecordReportCard source, IStudentAcademicRecordReportCard target, Action<IStudentAcademicRecordReportCard, IStudentAcademicRecordReportCard> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAcademicRecordReportCardMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAcademicRecordReportCard);
    
            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodName = source.GradingPeriodName;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ReportCardResourceId = source.ReportCardResourceId;
                target.ReportCardDiscriminator = source.ReportCardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentAssessment

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAssessmentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessment = new FullName("edfi", "StudentAssessment");
    
        public static bool SynchronizeTo(this IStudentAssessment source, IStudentAssessment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessment);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AssessmentIdentifier, source.AssessmentIdentifier))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.StudentAssessmentIdentifier, source.StudentAssessmentIdentifier))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentAssessment
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAdministrationDateSupported != false)
                && target.AdministrationDate != source.AdministrationDate)
            {
                target.AdministrationDate = source.AdministrationDate;
                isModified = true;
            }

            if ((mappingContract?.IsAdministrationEndDateSupported != false)
                && target.AdministrationEndDate != source.AdministrationEndDate)
            {
                target.AdministrationEndDate = source.AdministrationEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsAdministrationEnvironmentDescriptorSupported != false)
                && target.AdministrationEnvironmentDescriptor != source.AdministrationEnvironmentDescriptor)
            {
                target.AdministrationEnvironmentDescriptor = source.AdministrationEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAdministrationLanguageDescriptorSupported != false)
                && target.AdministrationLanguageDescriptor != source.AdministrationLanguageDescriptor)
            {
                target.AdministrationLanguageDescriptor = source.AdministrationLanguageDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAssessedMinutesSupported != false)
                && target.AssessedMinutes != source.AssessedMinutes)
            {
                target.AssessedMinutes = source.AssessedMinutes;
                isModified = true;
            }

            if ((mappingContract?.IsEventCircumstanceDescriptorSupported != false)
                && target.EventCircumstanceDescriptor != source.EventCircumstanceDescriptor)
            {
                target.EventCircumstanceDescriptor = source.EventCircumstanceDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEventDescriptionSupported != false)
                && target.EventDescription != source.EventDescription)
            {
                target.EventDescription = source.EventDescription;
                isModified = true;
            }

            if ((mappingContract?.IsPlatformTypeDescriptorSupported != false)
                && target.PlatformTypeDescriptor != source.PlatformTypeDescriptor)
            {
                target.PlatformTypeDescriptor = source.PlatformTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsReasonNotTestedDescriptorSupported != false)
                && target.ReasonNotTestedDescriptor != source.ReasonNotTestedDescriptor)
            {
                target.ReasonNotTestedDescriptor = source.ReasonNotTestedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsReportedSchoolIdSupported != false)
                && target.ReportedSchoolId != source.ReportedSchoolId)
            {
                target.ReportedSchoolId = source.ReportedSchoolId;
                isModified = true;
            }

            if ((mappingContract?.IsReportedSchoolIdentifierSupported != false)
                && target.ReportedSchoolIdentifier != source.ReportedSchoolIdentifier)
            {
                target.ReportedSchoolIdentifier = source.ReportedSchoolIdentifier;
                isModified = true;
            }

            if ((mappingContract?.IsRetestIndicatorDescriptorSupported != false)
                && target.RetestIndicatorDescriptor != source.RetestIndicatorDescriptor)
            {
                target.RetestIndicatorDescriptor = source.RetestIndicatorDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolYearSupported != false)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsSerialNumberSupported != false)
                && target.SerialNumber != source.SerialNumber)
            {
                target.SerialNumber = source.SerialNumber;
                isModified = true;
            }

            if ((mappingContract?.IsWhenAssessedGradeLevelDescriptorSupported != false)
                && target.WhenAssessedGradeLevelDescriptor != source.WhenAssessedGradeLevelDescriptor)
            {
                target.WhenAssessedGradeLevelDescriptor = source.WhenAssessedGradeLevelDescriptor;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // StudentAssessmentPeriod (StudentAssessmentPeriod)
            if (mappingContract?.IsStudentAssessmentPeriodSupported != false)
            {
                if (source.StudentAssessmentPeriod == null)
                {
                    if (target.StudentAssessmentPeriod != null)
                    {
                        target.StudentAssessmentPeriod = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StudentAssessmentPeriod == null)
                    {
                        var itemType = target.GetType().GetProperty("StudentAssessmentPeriod").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StudentAssessmentPeriod = (IStudentAssessmentPeriod) newItem;
                    }

                    isModified |= source.StudentAssessmentPeriod.Synchronize(target.StudentAssessmentPeriod);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (mappingContract?.IsStudentAssessmentAccommodationsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentAccommodations.SynchronizeCollectionTo(
                        target.StudentAssessmentAccommodations,
                        onChildAdded: child =>
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentAccommodationIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAssessmentItemsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentItems.SynchronizeCollectionTo(
                        target.StudentAssessmentItems,
                        onChildAdded: child =>
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentItemIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAssessmentPerformanceLevelsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.StudentAssessmentPerformanceLevels,
                        onChildAdded: child =>
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentPerformanceLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAssessmentScoreResultsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentScoreResults.SynchronizeCollectionTo(
                        target.StudentAssessmentScoreResults,
                        onChildAdded: child =>
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentScoreResultIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentStudentObjectiveAssessments.SynchronizeCollectionTo(
                        target.StudentAssessmentStudentObjectiveAssessments,
                        onChildAdded: child =>
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessment source, IStudentAssessment target, Action<IStudentAssessment, IStudentAssessment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessment);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;
            target.StudentAssessmentIdentifier = source.StudentAssessmentIdentifier;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAdministrationDateSupported != false)
                target.AdministrationDate = source.AdministrationDate;

            if (mappingContract?.IsAdministrationEndDateSupported != false)
                target.AdministrationEndDate = source.AdministrationEndDate;

            if (mappingContract?.IsAdministrationEnvironmentDescriptorSupported != false)
                target.AdministrationEnvironmentDescriptor = source.AdministrationEnvironmentDescriptor;

            if (mappingContract?.IsAdministrationLanguageDescriptorSupported != false)
                target.AdministrationLanguageDescriptor = source.AdministrationLanguageDescriptor;

            if (mappingContract?.IsAssessedMinutesSupported != false)
                target.AssessedMinutes = source.AssessedMinutes;

            if (mappingContract?.IsEventCircumstanceDescriptorSupported != false)
                target.EventCircumstanceDescriptor = source.EventCircumstanceDescriptor;

            if (mappingContract?.IsEventDescriptionSupported != false)
                target.EventDescription = source.EventDescription;

            if (mappingContract?.IsPlatformTypeDescriptorSupported != false)
                target.PlatformTypeDescriptor = source.PlatformTypeDescriptor;

            if (mappingContract?.IsReasonNotTestedDescriptorSupported != false)
                target.ReasonNotTestedDescriptor = source.ReasonNotTestedDescriptor;

            if (mappingContract?.IsReportedSchoolIdSupported != false)
                target.ReportedSchoolId = source.ReportedSchoolId;

            if (mappingContract?.IsReportedSchoolIdentifierSupported != false)
                target.ReportedSchoolIdentifier = source.ReportedSchoolIdentifier;

            if (mappingContract?.IsRetestIndicatorDescriptorSupported != false)
                target.RetestIndicatorDescriptor = source.RetestIndicatorDescriptor;

            if (mappingContract?.IsSchoolYearSupported != false)
                target.SchoolYear = source.SchoolYear;

            if (mappingContract?.IsSerialNumberSupported != false)
                target.SerialNumber = source.SerialNumber;

            if (mappingContract?.IsWhenAssessedGradeLevelDescriptorSupported != false)
                target.WhenAssessedGradeLevelDescriptor = source.WhenAssessedGradeLevelDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
                target.ReportedSchoolResourceId = source.ReportedSchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StudentAssessmentPeriod (StudentAssessmentPeriod) (Source)
            if (mappingContract?.IsStudentAssessmentPeriodSupported != false)
            {
                var itemProperty = target.GetType().GetProperty("StudentAssessmentPeriod");

                if (itemProperty != null)
                {
                    if (source.StudentAssessmentPeriod == null)
                    {
                        target.StudentAssessmentPeriod = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStudentAssessmentPeriod = Activator.CreateInstance(itemType);
                        (targetStudentAssessmentPeriod as IChildEntity)?.SetParent(target);
                        source.StudentAssessmentPeriod.Map(targetStudentAssessmentPeriod);

                        // Update the target reference appropriately
                        target.StudentAssessmentPeriod = (IStudentAssessmentPeriod) targetStudentAssessmentPeriod;
                    }
                }
            }
            // -------------------------------------------------------------

            // Map lists

            if (mappingContract?.IsStudentAssessmentAccommodationsSupported != false)
            {
                source.StudentAssessmentAccommodations.MapCollectionTo(target.StudentAssessmentAccommodations, target, mappingContract?.IsStudentAssessmentAccommodationIncluded);
            }

            if (mappingContract?.IsStudentAssessmentItemsSupported != false)
            {
                source.StudentAssessmentItems.MapCollectionTo(target.StudentAssessmentItems, target, mappingContract?.IsStudentAssessmentItemIncluded);
            }

            if (mappingContract?.IsStudentAssessmentPerformanceLevelsSupported != false)
            {
                source.StudentAssessmentPerformanceLevels.MapCollectionTo(target.StudentAssessmentPerformanceLevels, target, mappingContract?.IsStudentAssessmentPerformanceLevelIncluded);
            }

            if (mappingContract?.IsStudentAssessmentScoreResultsSupported != false)
            {
                source.StudentAssessmentScoreResults.MapCollectionTo(target.StudentAssessmentScoreResults, target, mappingContract?.IsStudentAssessmentScoreResultIncluded);
            }

            if (mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentsSupported != false)
            {
                source.StudentAssessmentStudentObjectiveAssessments.MapCollectionTo(target.StudentAssessmentStudentObjectiveAssessments, target, mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentAccommodationMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentAccommodation = new FullName("edfi", "StudentAssessmentAccommodation");
    
        public static bool SynchronizeTo(this IStudentAssessmentAccommodation source, IStudentAssessmentAccommodation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentAccommodationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentAccommodation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentAccommodation source, IStudentAssessmentAccommodation target, Action<IStudentAssessmentAccommodation, IStudentAssessmentAccommodation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentAccommodationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentAccommodation);
    
            // Copy contextual primary key values
            target.AccommodationDescriptor = source.AccommodationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentItemMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentItem = new FullName("edfi", "StudentAssessmentItem");
    
        public static bool SynchronizeTo(this IStudentAssessmentItem source, IStudentAssessmentItem target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentItemMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentItem);


            // Copy non-PK properties

            if ((mappingContract?.IsAssessmentItemResultDescriptorSupported != false)
                && target.AssessmentItemResultDescriptor != source.AssessmentItemResultDescriptor)
            {
                target.AssessmentItemResultDescriptor = source.AssessmentItemResultDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsAssessmentResponseSupported != false)
                && target.AssessmentResponse != source.AssessmentResponse)
            {
                target.AssessmentResponse = source.AssessmentResponse;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptiveFeedbackSupported != false)
                && target.DescriptiveFeedback != source.DescriptiveFeedback)
            {
                target.DescriptiveFeedback = source.DescriptiveFeedback;
                isModified = true;
            }

            if ((mappingContract?.IsItemNumberSupported != false)
                && target.ItemNumber != source.ItemNumber)
            {
                target.ItemNumber = source.ItemNumber;
                isModified = true;
            }

            if ((mappingContract?.IsRawScoreResultSupported != false)
                && target.RawScoreResult != source.RawScoreResult)
            {
                target.RawScoreResult = source.RawScoreResult;
                isModified = true;
            }

            if ((mappingContract?.IsResponseIndicatorDescriptorSupported != false)
                && target.ResponseIndicatorDescriptor != source.ResponseIndicatorDescriptor)
            {
                target.ResponseIndicatorDescriptor = source.ResponseIndicatorDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsTimeAssessedSupported != false)
                && target.TimeAssessed != source.TimeAssessed)
            {
                target.TimeAssessed = source.TimeAssessed;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentItem source, IStudentAssessmentItem target, Action<IStudentAssessmentItem, IStudentAssessmentItem> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentItemMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentItem);
    
            // Copy contextual primary key values
            target.IdentificationCode = source.IdentificationCode;

            // Copy non-PK properties

            if (mappingContract?.IsAssessmentItemResultDescriptorSupported != false)
                target.AssessmentItemResultDescriptor = source.AssessmentItemResultDescriptor;

            if (mappingContract?.IsAssessmentResponseSupported != false)
                target.AssessmentResponse = source.AssessmentResponse;

            if (mappingContract?.IsDescriptiveFeedbackSupported != false)
                target.DescriptiveFeedback = source.DescriptiveFeedback;

            if (mappingContract?.IsItemNumberSupported != false)
                target.ItemNumber = source.ItemNumber;

            if (mappingContract?.IsRawScoreResultSupported != false)
                target.RawScoreResult = source.RawScoreResult;

            if (mappingContract?.IsResponseIndicatorDescriptorSupported != false)
                target.ResponseIndicatorDescriptor = source.ResponseIndicatorDescriptor;

            if (mappingContract?.IsTimeAssessedSupported != false)
                target.TimeAssessed = source.TimeAssessed;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentItemResourceId = source.AssessmentItemResourceId;
                target.AssessmentItemDiscriminator = source.AssessmentItemDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentPerformanceLevelMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentPerformanceLevel = new FullName("edfi", "StudentAssessmentPerformanceLevel");
    
        public static bool SynchronizeTo(this IStudentAssessmentPerformanceLevel source, IStudentAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentPerformanceLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                && target.PerformanceLevelIndicatorName != source.PerformanceLevelIndicatorName)
            {
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentPerformanceLevel source, IStudentAssessmentPerformanceLevel target, Action<IStudentAssessmentPerformanceLevel, IStudentAssessmentPerformanceLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentPerformanceLevel);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentPeriod = new FullName("edfi", "StudentAssessmentPeriod");
    
        public static bool SynchronizeTo(this IStudentAssessmentPeriod source, IStudentAssessmentPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsAssessmentPeriodDescriptorSupported != false)
                && target.AssessmentPeriodDescriptor != source.AssessmentPeriodDescriptor)
            {
                target.AssessmentPeriodDescriptor = source.AssessmentPeriodDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentPeriod source, IStudentAssessmentPeriod target, Action<IStudentAssessmentPeriod, IStudentAssessmentPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentPeriod);
    
            // Copy contextual primary key values

            // Copy non-PK properties

            if (mappingContract?.IsAssessmentPeriodDescriptorSupported != false)
                target.AssessmentPeriodDescriptor = source.AssessmentPeriodDescriptor;

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentScoreResultMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentScoreResult = new FullName("edfi", "StudentAssessmentScoreResult");
    
        public static bool SynchronizeTo(this IStudentAssessmentScoreResult source, IStudentAssessmentScoreResult target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentScoreResultMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentScoreResult);


            // Copy non-PK properties

            if ((mappingContract?.IsResultSupported != false)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentScoreResult source, IStudentAssessmentScoreResult target, Action<IStudentAssessmentScoreResult, IStudentAssessmentScoreResult> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentScoreResultMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentScoreResult);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsResultSupported != false)
                target.Result = source.Result;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentStudentObjectiveAssessmentMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentStudentObjectiveAssessment = new FullName("edfi", "StudentAssessmentStudentObjectiveAssessment");
    
        public static bool SynchronizeTo(this IStudentAssessmentStudentObjectiveAssessment source, IStudentAssessmentStudentObjectiveAssessment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentStudentObjectiveAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentStudentObjectiveAssessment);


            // Copy non-PK properties

            if ((mappingContract?.IsAdministrationDateSupported != false)
                && target.AdministrationDate != source.AdministrationDate)
            {
                target.AdministrationDate = source.AdministrationDate;
                isModified = true;
            }

            if ((mappingContract?.IsAdministrationEndDateSupported != false)
                && target.AdministrationEndDate != source.AdministrationEndDate)
            {
                target.AdministrationEndDate = source.AdministrationEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsAssessedMinutesSupported != false)
                && target.AssessedMinutes != source.AssessedMinutes)
            {
                target.AssessedMinutes = source.AssessedMinutes;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels,
                        onChildAdded: child =>
                            {
                                child.StudentAssessmentStudentObjectiveAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported ?? true)
            {
                isModified |=
                    source.StudentAssessmentStudentObjectiveAssessmentScoreResults.SynchronizeCollectionTo(
                        target.StudentAssessmentStudentObjectiveAssessmentScoreResults,
                        onChildAdded: child =>
                            {
                                child.StudentAssessmentStudentObjectiveAssessment = target;
                            },
                        includeItem: item => mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentStudentObjectiveAssessment source, IStudentAssessmentStudentObjectiveAssessment target, Action<IStudentAssessmentStudentObjectiveAssessment, IStudentAssessmentStudentObjectiveAssessment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentStudentObjectiveAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentStudentObjectiveAssessment);
    
            // Copy contextual primary key values
            target.IdentificationCode = source.IdentificationCode;

            // Copy non-PK properties

            if (mappingContract?.IsAdministrationDateSupported != false)
                target.AdministrationDate = source.AdministrationDate;

            if (mappingContract?.IsAdministrationEndDateSupported != false)
                target.AdministrationEndDate = source.AdministrationEndDate;

            if (mappingContract?.IsAssessedMinutesSupported != false)
                target.AssessedMinutes = source.AssessedMinutes;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ObjectiveAssessmentResourceId = source.ObjectiveAssessmentResourceId;
                target.ObjectiveAssessmentDiscriminator = source.ObjectiveAssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported != false)
            {
                source.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels.MapCollectionTo(target.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels, target, mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded);
            }

            if (mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported != false)
            {
                source.StudentAssessmentStudentObjectiveAssessmentScoreResults.MapCollectionTo(target.StudentAssessmentStudentObjectiveAssessmentScoreResults, target, mappingContract?.IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentStudentObjectiveAssessmentPerformanceLevelMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel = new FullName("edfi", "StudentAssessmentStudentObjectiveAssessmentPerformanceLevel");
    
        public static bool SynchronizeTo(this IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel source, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentStudentObjectiveAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel);


            // Copy non-PK properties

            if ((mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                && target.PerformanceLevelIndicatorName != source.PerformanceLevelIndicatorName)
            {
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel source, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel target, Action<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentStudentObjectiveAssessmentPerformanceLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPerformanceLevelIndicatorNameSupported != false)
                target.PerformanceLevelIndicatorName = source.PerformanceLevelIndicatorName;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentStudentObjectiveAssessmentScoreResultMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentStudentObjectiveAssessmentScoreResult = new FullName("edfi", "StudentAssessmentStudentObjectiveAssessmentScoreResult");
    
        public static bool SynchronizeTo(this IStudentAssessmentStudentObjectiveAssessmentScoreResult source, IStudentAssessmentStudentObjectiveAssessmentScoreResult target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentStudentObjectiveAssessmentScoreResultMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentStudentObjectiveAssessmentScoreResult);


            // Copy non-PK properties

            if ((mappingContract?.IsResultSupported != false)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentStudentObjectiveAssessmentScoreResult source, IStudentAssessmentStudentObjectiveAssessmentScoreResult target, Action<IStudentAssessmentStudentObjectiveAssessmentScoreResult, IStudentAssessmentStudentObjectiveAssessmentScoreResult> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentStudentObjectiveAssessmentScoreResultMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentStudentObjectiveAssessmentScoreResult);
    
            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsResultSupported != false)
                target.Result = source.Result;

            if (mappingContract?.IsResultDatatypeTypeDescriptorSupported != false)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentAssessmentEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAssessmentEducationOrganizationAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentEducationOrganizationAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentAssessmentEducationOrganizationAssociation = new FullName("edfi", "StudentAssessmentEducationOrganizationAssociation");
    
        public static bool SynchronizeTo(this IStudentAssessmentEducationOrganizationAssociation source, IStudentAssessmentEducationOrganizationAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentAssessmentEducationOrganizationAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentEducationOrganizationAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.AssessmentIdentifier, source.AssessmentIdentifier))
                || !string.Equals(target.EducationOrganizationAssociationTypeDescriptor, source.EducationOrganizationAssociationTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.StudentAssessmentIdentifier, source.StudentAssessmentIdentifier))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentAssessmentEducationOrganizationAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsSchoolYearSupported != false)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentAssessmentEducationOrganizationAssociation source, IStudentAssessmentEducationOrganizationAssociation target, Action<IStudentAssessmentEducationOrganizationAssociation, IStudentAssessmentEducationOrganizationAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentAssessmentEducationOrganizationAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentAssessmentEducationOrganizationAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.EducationOrganizationAssociationTypeDescriptor = source.EducationOrganizationAssociationTypeDescriptor;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.StudentAssessmentIdentifier = source.StudentAssessmentIdentifier;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsSchoolYearSupported != false)
                target.SchoolYear = source.SchoolYear;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentAssessmentResourceId = source.StudentAssessmentResourceId;
                target.StudentAssessmentDiscriminator = source.StudentAssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCharacteristicDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentCharacteristicDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StudentCharacteristicDescriptor = new FullName("edfi", "StudentCharacteristicDescriptor");
    
        public static bool SynchronizeTo(this IStudentCharacteristicDescriptor source, IStudentCharacteristicDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCharacteristicDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StudentCharacteristicDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStudentCharacteristicDescriptor source, IStudentCharacteristicDescriptor target, Action<IStudentCharacteristicDescriptor, IStudentCharacteristicDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCharacteristicDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCharacteristicDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptorId = source.StudentCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentCohortAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCohortAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentCohortAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentCohortAssociation = new FullName("edfi", "StudentCohortAssociation");
    
        public static bool SynchronizeTo(this IStudentCohortAssociation source, IStudentCohortAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCohortAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCohortAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (!keyStringComparer.Equals(target.CohortIdentifier, source.CohortIdentifier))
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentCohortAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentCohortAssociationSectionsSupported ?? true)
            {
                isModified |=
                    source.StudentCohortAssociationSections.SynchronizeCollectionTo(
                        target.StudentCohortAssociationSections,
                        onChildAdded: child =>
                            {
                                child.StudentCohortAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentCohortAssociationSectionIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentCohortAssociation source, IStudentCohortAssociation target, Action<IStudentCohortAssociation, IStudentCohortAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCohortAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCohortAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.CohortIdentifier = source.CohortIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CohortResourceId = source.CohortResourceId;
                target.CohortDiscriminator = source.CohortDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentCohortAssociationSectionsSupported != false)
            {
                source.StudentCohortAssociationSections.MapCollectionTo(target.StudentCohortAssociationSections, target, mappingContract?.IsStudentCohortAssociationSectionIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentCohortAssociationSectionMapper
    {
        private static readonly FullName _fullName_edfi_StudentCohortAssociationSection = new FullName("edfi", "StudentCohortAssociationSection");
    
        public static bool SynchronizeTo(this IStudentCohortAssociationSection source, IStudentCohortAssociationSection target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCohortAssociationSectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCohortAssociationSection);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentCohortAssociationSection source, IStudentCohortAssociationSection target, Action<IStudentCohortAssociationSection, IStudentCohortAssociationSection> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCohortAssociationSectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCohortAssociationSection);
    
            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentCompetencyObjective

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCompetencyObjectiveAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentCompetencyObjectiveMapper
    {
        private static readonly FullName _fullName_edfi_StudentCompetencyObjective = new FullName("edfi", "StudentCompetencyObjective");
    
        public static bool SynchronizeTo(this IStudentCompetencyObjective source, IStudentCompetencyObjective target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCompetencyObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCompetencyObjective);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.GradingPeriodDescriptor, source.GradingPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.GradingPeriodName, source.GradingPeriodName))
                || (target.GradingPeriodSchoolId != source.GradingPeriodSchoolId)
                || (target.GradingPeriodSchoolYear != source.GradingPeriodSchoolYear)
                || (!keyStringComparer.Equals(target.Objective, source.Objective))
                || (target.ObjectiveEducationOrganizationId != source.ObjectiveEducationOrganizationId)
                || !string.Equals(target.ObjectiveGradeLevelDescriptor, source.ObjectiveGradeLevelDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentCompetencyObjective
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCompetencyLevelDescriptorSupported != false)
                && target.CompetencyLevelDescriptor != source.CompetencyLevelDescriptor)
            {
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDiagnosticStatementSupported != false)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported ?? true)
            {
                isModified |=
                    source.StudentCompetencyObjectiveGeneralStudentProgramAssociations.SynchronizeCollectionTo(
                        target.StudentCompetencyObjectiveGeneralStudentProgramAssociations,
                        onChildAdded: child =>
                            {
                                child.StudentCompetencyObjective = target;
                            },
                        includeItem: item => mappingContract?.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentCompetencyObjectiveStudentSectionAssociationsSupported ?? true)
            {
                isModified |=
                    source.StudentCompetencyObjectiveStudentSectionAssociations.SynchronizeCollectionTo(
                        target.StudentCompetencyObjectiveStudentSectionAssociations,
                        onChildAdded: child =>
                            {
                                child.StudentCompetencyObjective = target;
                            },
                        includeItem: item => mappingContract?.IsStudentCompetencyObjectiveStudentSectionAssociationIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentCompetencyObjective source, IStudentCompetencyObjective target, Action<IStudentCompetencyObjective, IStudentCompetencyObjective> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCompetencyObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCompetencyObjective);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodName = source.GradingPeriodName;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.Objective = source.Objective;
            target.ObjectiveEducationOrganizationId = source.ObjectiveEducationOrganizationId;
            target.ObjectiveGradeLevelDescriptor = source.ObjectiveGradeLevelDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsCompetencyLevelDescriptorSupported != false)
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;

            if (mappingContract?.IsDiagnosticStatementSupported != false)
                target.DiagnosticStatement = source.DiagnosticStatement;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.ObjectiveCompetencyObjectiveResourceId = source.ObjectiveCompetencyObjectiveResourceId;
                target.ObjectiveCompetencyObjectiveDiscriminator = source.ObjectiveCompetencyObjectiveDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported != false)
            {
                source.StudentCompetencyObjectiveGeneralStudentProgramAssociations.MapCollectionTo(target.StudentCompetencyObjectiveGeneralStudentProgramAssociations, target, mappingContract?.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded);
            }

            if (mappingContract?.IsStudentCompetencyObjectiveStudentSectionAssociationsSupported != false)
            {
                source.StudentCompetencyObjectiveStudentSectionAssociations.MapCollectionTo(target.StudentCompetencyObjectiveStudentSectionAssociations, target, mappingContract?.IsStudentCompetencyObjectiveStudentSectionAssociationIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentCompetencyObjectiveGeneralStudentProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentCompetencyObjectiveGeneralStudentProgramAssociation = new FullName("edfi", "StudentCompetencyObjectiveGeneralStudentProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentCompetencyObjectiveGeneralStudentProgramAssociation source, IStudentCompetencyObjectiveGeneralStudentProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCompetencyObjectiveGeneralStudentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCompetencyObjectiveGeneralStudentProgramAssociation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentCompetencyObjectiveGeneralStudentProgramAssociation source, IStudentCompetencyObjectiveGeneralStudentProgramAssociation target, Action<IStudentCompetencyObjectiveGeneralStudentProgramAssociation, IStudentCompetencyObjectiveGeneralStudentProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCompetencyObjectiveGeneralStudentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCompetencyObjectiveGeneralStudentProgramAssociation);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GeneralStudentProgramAssociationResourceId = source.GeneralStudentProgramAssociationResourceId;
                target.GeneralStudentProgramAssociationDiscriminator = source.GeneralStudentProgramAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentCompetencyObjectiveStudentSectionAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentCompetencyObjectiveStudentSectionAssociation = new FullName("edfi", "StudentCompetencyObjectiveStudentSectionAssociation");
    
        public static bool SynchronizeTo(this IStudentCompetencyObjectiveStudentSectionAssociation source, IStudentCompetencyObjectiveStudentSectionAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCompetencyObjectiveStudentSectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCompetencyObjectiveStudentSectionAssociation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentCompetencyObjectiveStudentSectionAssociation source, IStudentCompetencyObjectiveStudentSectionAssociation target, Action<IStudentCompetencyObjectiveStudentSectionAssociation, IStudentCompetencyObjectiveStudentSectionAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCompetencyObjectiveStudentSectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCompetencyObjectiveStudentSectionAssociation);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentSectionAssociationResourceId = source.StudentSectionAssociationResourceId;
                target.StudentSectionAssociationDiscriminator = source.StudentSectionAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentContactAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentContactAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentContactAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentContactAssociation = new FullName("edfi", "StudentContactAssociation");
    
        public static bool SynchronizeTo(this IStudentContactAssociation source, IStudentContactAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentContactAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentContactAssociation);

            // Detect primary key changes
            if (
                 (target.ContactUniqueId != source.ContactUniqueId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentContactAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsContactPrioritySupported != false)
                && target.ContactPriority != source.ContactPriority)
            {
                target.ContactPriority = source.ContactPriority;
                isModified = true;
            }

            if ((mappingContract?.IsContactRestrictionsSupported != false)
                && target.ContactRestrictions != source.ContactRestrictions)
            {
                target.ContactRestrictions = source.ContactRestrictions;
                isModified = true;
            }

            if ((mappingContract?.IsEmergencyContactStatusSupported != false)
                && target.EmergencyContactStatus != source.EmergencyContactStatus)
            {
                target.EmergencyContactStatus = source.EmergencyContactStatus;
                isModified = true;
            }

            if ((mappingContract?.IsLegalGuardianSupported != false)
                && target.LegalGuardian != source.LegalGuardian)
            {
                target.LegalGuardian = source.LegalGuardian;
                isModified = true;
            }

            if ((mappingContract?.IsLivesWithSupported != false)
                && target.LivesWith != source.LivesWith)
            {
                target.LivesWith = source.LivesWith;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryContactStatusSupported != false)
                && target.PrimaryContactStatus != source.PrimaryContactStatus)
            {
                target.PrimaryContactStatus = source.PrimaryContactStatus;
                isModified = true;
            }

            if ((mappingContract?.IsRelationDescriptorSupported != false)
                && target.RelationDescriptor != source.RelationDescriptor)
            {
                target.RelationDescriptor = source.RelationDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentContactAssociation source, IStudentContactAssociation target, Action<IStudentContactAssociation, IStudentContactAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentContactAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentContactAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContactUniqueId = source.ContactUniqueId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsContactPrioritySupported != false)
                target.ContactPriority = source.ContactPriority;

            if (mappingContract?.IsContactRestrictionsSupported != false)
                target.ContactRestrictions = source.ContactRestrictions;

            if (mappingContract?.IsEmergencyContactStatusSupported != false)
                target.EmergencyContactStatus = source.EmergencyContactStatus;

            if (mappingContract?.IsLegalGuardianSupported != false)
                target.LegalGuardian = source.LegalGuardian;

            if (mappingContract?.IsLivesWithSupported != false)
                target.LivesWith = source.LivesWith;

            if (mappingContract?.IsPrimaryContactStatusSupported != false)
                target.PrimaryContactStatus = source.PrimaryContactStatus;

            if (mappingContract?.IsRelationDescriptorSupported != false)
                target.RelationDescriptor = source.RelationDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ContactResourceId = source.ContactResourceId;
                target.ContactDiscriminator = source.ContactDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentCTEProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCTEProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentCTEProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentCTEProgramAssociation = new FullName("edfi", "StudentCTEProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentCTEProgramAssociation source, IStudentCTEProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCTEProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCTEProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentCTEProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsNonTraditionalGenderStatusSupported != false)
                && target.NonTraditionalGenderStatus != source.NonTraditionalGenderStatus)
            {
                target.NonTraditionalGenderStatus = source.NonTraditionalGenderStatus;
                isModified = true;
            }

            if ((mappingContract?.IsPrivateCTEProgramSupported != false)
                && target.PrivateCTEProgram != source.PrivateCTEProgram)
            {
                target.PrivateCTEProgram = source.PrivateCTEProgram;
                isModified = true;
            }

            if ((mappingContract?.IsTechnicalSkillsAssessmentDescriptorSupported != false)
                && target.TechnicalSkillsAssessmentDescriptor != source.TechnicalSkillsAssessmentDescriptor)
            {
                target.TechnicalSkillsAssessmentDescriptor = source.TechnicalSkillsAssessmentDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentCTEProgramAssociationCTEProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentCTEProgramAssociationCTEProgramServices.SynchronizeCollectionTo(
                        target.StudentCTEProgramAssociationCTEProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentCTEProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentCTEProgramAssociationCTEProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentCTEProgramAssociation source, IStudentCTEProgramAssociation target, Action<IStudentCTEProgramAssociation, IStudentCTEProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCTEProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCTEProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsNonTraditionalGenderStatusSupported != false)
                target.NonTraditionalGenderStatus = source.NonTraditionalGenderStatus;

            if (mappingContract?.IsPrivateCTEProgramSupported != false)
                target.PrivateCTEProgram = source.PrivateCTEProgram;

            if (mappingContract?.IsTechnicalSkillsAssessmentDescriptorSupported != false)
                target.TechnicalSkillsAssessmentDescriptor = source.TechnicalSkillsAssessmentDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentCTEProgramAssociationCTEProgramServicesSupported != false)
            {
                source.StudentCTEProgramAssociationCTEProgramServices.MapCollectionTo(target.StudentCTEProgramAssociationCTEProgramServices, target, mappingContract?.IsStudentCTEProgramAssociationCTEProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentCTEProgramAssociationCTEProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentCTEProgramAssociationCTEProgramService = new FullName("edfi", "StudentCTEProgramAssociationCTEProgramService");
    
        public static bool SynchronizeTo(this IStudentCTEProgramAssociationCTEProgramService source, IStudentCTEProgramAssociationCTEProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentCTEProgramAssociationCTEProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCTEProgramAssociationCTEProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsCIPCodeSupported != false)
                && target.CIPCode != source.CIPCode)
            {
                target.CIPCode = source.CIPCode;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentCTEProgramAssociationCTEProgramService source, IStudentCTEProgramAssociationCTEProgramService target, Action<IStudentCTEProgramAssociationCTEProgramService, IStudentCTEProgramAssociationCTEProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentCTEProgramAssociationCTEProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentCTEProgramAssociationCTEProgramService);
    
            // Copy contextual primary key values
            target.CTEProgramServiceDescriptor = source.CTEProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsCIPCodeSupported != false)
                target.CIPCode = source.CIPCode;

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentDisciplineIncidentBehaviorAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentDisciplineIncidentBehaviorAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentDisciplineIncidentBehaviorAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentDisciplineIncidentBehaviorAssociation = new FullName("edfi", "StudentDisciplineIncidentBehaviorAssociation");
    
        public static bool SynchronizeTo(this IStudentDisciplineIncidentBehaviorAssociation source, IStudentDisciplineIncidentBehaviorAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentDisciplineIncidentBehaviorAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentBehaviorAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.BehaviorDescriptor, source.BehaviorDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.IncidentIdentifier, source.IncidentIdentifier))
                || (target.SchoolId != source.SchoolId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentDisciplineIncidentBehaviorAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBehaviorDetailedDescriptionSupported != false)
                && target.BehaviorDetailedDescription != source.BehaviorDetailedDescription)
            {
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported ?? true)
            {
                isModified |=
                    source.StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes.SynchronizeCollectionTo(
                        target.StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes,
                        onChildAdded: child =>
                            {
                                child.StudentDisciplineIncidentBehaviorAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentDisciplineIncidentBehaviorAssociation source, IStudentDisciplineIncidentBehaviorAssociation target, Action<IStudentDisciplineIncidentBehaviorAssociation, IStudentDisciplineIncidentBehaviorAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentDisciplineIncidentBehaviorAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentBehaviorAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BehaviorDescriptor = source.BehaviorDescriptor;
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsBehaviorDetailedDescriptionSupported != false)
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DisciplineIncidentResourceId = source.DisciplineIncidentResourceId;
                target.DisciplineIncidentDiscriminator = source.DisciplineIncidentDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodesSupported != false)
            {
                source.StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes.MapCollectionTo(target.StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodes, target, mappingContract?.IsStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeMapper
    {
        private static readonly FullName _fullName_edfi_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode = new FullName("edfi", "StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode");
    
        public static bool SynchronizeTo(this IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode source, IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode source, IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode target, Action<IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode, IStudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode);
    
            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptor = source.DisciplineIncidentParticipationCodeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentDisciplineIncidentNonOffenderAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentDisciplineIncidentNonOffenderAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentDisciplineIncidentNonOffenderAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentDisciplineIncidentNonOffenderAssociation = new FullName("edfi", "StudentDisciplineIncidentNonOffenderAssociation");
    
        public static bool SynchronizeTo(this IStudentDisciplineIncidentNonOffenderAssociation source, IStudentDisciplineIncidentNonOffenderAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentDisciplineIncidentNonOffenderAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentNonOffenderAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.IncidentIdentifier, source.IncidentIdentifier))
                || (target.SchoolId != source.SchoolId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentDisciplineIncidentNonOffenderAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported ?? true)
            {
                isModified |=
                    source.StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes.SynchronizeCollectionTo(
                        target.StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes,
                        onChildAdded: child =>
                            {
                                child.StudentDisciplineIncidentNonOffenderAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentDisciplineIncidentNonOffenderAssociation source, IStudentDisciplineIncidentNonOffenderAssociation target, Action<IStudentDisciplineIncidentNonOffenderAssociation, IStudentDisciplineIncidentNonOffenderAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentDisciplineIncidentNonOffenderAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentNonOffenderAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DisciplineIncidentResourceId = source.DisciplineIncidentResourceId;
                target.DisciplineIncidentDiscriminator = source.DisciplineIncidentDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodesSupported != false)
            {
                source.StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes.MapCollectionTo(target.StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodes, target, mappingContract?.IsStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeMapper
    {
        private static readonly FullName _fullName_edfi_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode = new FullName("edfi", "StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode");
    
        public static bool SynchronizeTo(this IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode source, IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode source, IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode target, Action<IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode, IStudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode);
    
            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptor = source.DisciplineIncidentParticipationCodeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentEducationOrganizationAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociation = new FullName("edfi", "StudentEducationOrganizationAssociation");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociation source, IStudentEducationOrganizationAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociation);

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentEducationOrganizationAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsBarrierToInternetAccessInResidenceDescriptorSupported != false)
                && target.BarrierToInternetAccessInResidenceDescriptor != source.BarrierToInternetAccessInResidenceDescriptor)
            {
                target.BarrierToInternetAccessInResidenceDescriptor = source.BarrierToInternetAccessInResidenceDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsGenderIdentitySupported != false)
                && target.GenderIdentity != source.GenderIdentity)
            {
                target.GenderIdentity = source.GenderIdentity;
                isModified = true;
            }

            if ((mappingContract?.IsHispanicLatinoEthnicitySupported != false)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((mappingContract?.IsInternetAccessInResidenceSupported != false)
                && target.InternetAccessInResidence != source.InternetAccessInResidence)
            {
                target.InternetAccessInResidence = source.InternetAccessInResidence;
                isModified = true;
            }

            if ((mappingContract?.IsInternetAccessTypeInResidenceDescriptorSupported != false)
                && target.InternetAccessTypeInResidenceDescriptor != source.InternetAccessTypeInResidenceDescriptor)
            {
                target.InternetAccessTypeInResidenceDescriptor = source.InternetAccessTypeInResidenceDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsInternetPerformanceInResidenceDescriptorSupported != false)
                && target.InternetPerformanceInResidenceDescriptor != source.InternetPerformanceInResidenceDescriptor)
            {
                target.InternetPerformanceInResidenceDescriptor = source.InternetPerformanceInResidenceDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLimitedEnglishProficiencyDescriptorSupported != false)
                && target.LimitedEnglishProficiencyDescriptor != source.LimitedEnglishProficiencyDescriptor)
            {
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLoginIdSupported != false)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryLearningDeviceAccessDescriptorSupported != false)
                && target.PrimaryLearningDeviceAccessDescriptor != source.PrimaryLearningDeviceAccessDescriptor)
            {
                target.PrimaryLearningDeviceAccessDescriptor = source.PrimaryLearningDeviceAccessDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryLearningDeviceAwayFromSchoolDescriptorSupported != false)
                && target.PrimaryLearningDeviceAwayFromSchoolDescriptor != source.PrimaryLearningDeviceAwayFromSchoolDescriptor)
            {
                target.PrimaryLearningDeviceAwayFromSchoolDescriptor = source.PrimaryLearningDeviceAwayFromSchoolDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryLearningDeviceProviderDescriptorSupported != false)
                && target.PrimaryLearningDeviceProviderDescriptor != source.PrimaryLearningDeviceProviderDescriptor)
            {
                target.PrimaryLearningDeviceProviderDescriptor = source.PrimaryLearningDeviceProviderDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProfileThumbnailSupported != false)
                && target.ProfileThumbnail != source.ProfileThumbnail)
            {
                target.ProfileThumbnail = source.ProfileThumbnail;
                isModified = true;
            }

            if ((mappingContract?.IsSexDescriptorSupported != false)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSupporterMilitaryConnectionDescriptorSupported != false)
                && target.SupporterMilitaryConnectionDescriptor != source.SupporterMilitaryConnectionDescriptor)
            {
                target.SupporterMilitaryConnectionDescriptor = source.SupporterMilitaryConnectionDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentEducationOrganizationAssociationAddressesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationAddresses.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationAddresses,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationAncestryEthnicOrigins.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationAncestryEthnicOrigins,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationAncestryEthnicOriginIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationCohortYearsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationCohortYears.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationCohortYears,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationCohortYearIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationDisabilitiesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationDisabilities.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationDisabilities,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationDisabilityIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationElectronicMailsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationElectronicMails.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationElectronicMails,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationElectronicMailIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationInternationalAddressesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationInternationalAddresses.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationInternationalAddresses,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationInternationalAddressIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationLanguagesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationLanguages.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationLanguages,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationLanguageIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationRacesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationRaces.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationRaces,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationRaceIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationStudentCharacteristics.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentCharacteristics,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationStudentIdentificationCodes.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationStudentIndicators.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentIndicators,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationTelephonesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationTelephones.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationTelephones,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationTelephoneIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationTribalAffiliationsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationTribalAffiliations.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationTribalAffiliations,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationTribalAffiliationIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociation source, IStudentEducationOrganizationAssociation target, Action<IStudentEducationOrganizationAssociation, IStudentEducationOrganizationAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsBarrierToInternetAccessInResidenceDescriptorSupported != false)
                target.BarrierToInternetAccessInResidenceDescriptor = source.BarrierToInternetAccessInResidenceDescriptor;

            if (mappingContract?.IsGenderIdentitySupported != false)
                target.GenderIdentity = source.GenderIdentity;

            if (mappingContract?.IsHispanicLatinoEthnicitySupported != false)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;

            if (mappingContract?.IsInternetAccessInResidenceSupported != false)
                target.InternetAccessInResidence = source.InternetAccessInResidence;

            if (mappingContract?.IsInternetAccessTypeInResidenceDescriptorSupported != false)
                target.InternetAccessTypeInResidenceDescriptor = source.InternetAccessTypeInResidenceDescriptor;

            if (mappingContract?.IsInternetPerformanceInResidenceDescriptorSupported != false)
                target.InternetPerformanceInResidenceDescriptor = source.InternetPerformanceInResidenceDescriptor;

            if (mappingContract?.IsLimitedEnglishProficiencyDescriptorSupported != false)
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;

            if (mappingContract?.IsLoginIdSupported != false)
                target.LoginId = source.LoginId;

            if (mappingContract?.IsPrimaryLearningDeviceAccessDescriptorSupported != false)
                target.PrimaryLearningDeviceAccessDescriptor = source.PrimaryLearningDeviceAccessDescriptor;

            if (mappingContract?.IsPrimaryLearningDeviceAwayFromSchoolDescriptorSupported != false)
                target.PrimaryLearningDeviceAwayFromSchoolDescriptor = source.PrimaryLearningDeviceAwayFromSchoolDescriptor;

            if (mappingContract?.IsPrimaryLearningDeviceProviderDescriptorSupported != false)
                target.PrimaryLearningDeviceProviderDescriptor = source.PrimaryLearningDeviceProviderDescriptor;

            if (mappingContract?.IsProfileThumbnailSupported != false)
                target.ProfileThumbnail = source.ProfileThumbnail;

            if (mappingContract?.IsSexDescriptorSupported != false)
                target.SexDescriptor = source.SexDescriptor;

            if (mappingContract?.IsSupporterMilitaryConnectionDescriptorSupported != false)
                target.SupporterMilitaryConnectionDescriptor = source.SupporterMilitaryConnectionDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentEducationOrganizationAssociationAddressesSupported != false)
            {
                source.StudentEducationOrganizationAssociationAddresses.MapCollectionTo(target.StudentEducationOrganizationAssociationAddresses, target, mappingContract?.IsStudentEducationOrganizationAssociationAddressIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationAncestryEthnicOriginsSupported != false)
            {
                source.StudentEducationOrganizationAssociationAncestryEthnicOrigins.MapCollectionTo(target.StudentEducationOrganizationAssociationAncestryEthnicOrigins, target, mappingContract?.IsStudentEducationOrganizationAssociationAncestryEthnicOriginIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationCohortYearsSupported != false)
            {
                source.StudentEducationOrganizationAssociationCohortYears.MapCollectionTo(target.StudentEducationOrganizationAssociationCohortYears, target, mappingContract?.IsStudentEducationOrganizationAssociationCohortYearIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationDisabilitiesSupported != false)
            {
                source.StudentEducationOrganizationAssociationDisabilities.MapCollectionTo(target.StudentEducationOrganizationAssociationDisabilities, target, mappingContract?.IsStudentEducationOrganizationAssociationDisabilityIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationElectronicMailsSupported != false)
            {
                source.StudentEducationOrganizationAssociationElectronicMails.MapCollectionTo(target.StudentEducationOrganizationAssociationElectronicMails, target, mappingContract?.IsStudentEducationOrganizationAssociationElectronicMailIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationInternationalAddressesSupported != false)
            {
                source.StudentEducationOrganizationAssociationInternationalAddresses.MapCollectionTo(target.StudentEducationOrganizationAssociationInternationalAddresses, target, mappingContract?.IsStudentEducationOrganizationAssociationInternationalAddressIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationLanguagesSupported != false)
            {
                source.StudentEducationOrganizationAssociationLanguages.MapCollectionTo(target.StudentEducationOrganizationAssociationLanguages, target, mappingContract?.IsStudentEducationOrganizationAssociationLanguageIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationRacesSupported != false)
            {
                source.StudentEducationOrganizationAssociationRaces.MapCollectionTo(target.StudentEducationOrganizationAssociationRaces, target, mappingContract?.IsStudentEducationOrganizationAssociationRaceIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported != false)
            {
                source.StudentEducationOrganizationAssociationStudentCharacteristics.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentCharacteristics, target, mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported != false)
            {
                source.StudentEducationOrganizationAssociationStudentIdentificationCodes.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentIdentificationCodes, target, mappingContract?.IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorsSupported != false)
            {
                source.StudentEducationOrganizationAssociationStudentIndicators.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentIndicators, target, mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationTelephonesSupported != false)
            {
                source.StudentEducationOrganizationAssociationTelephones.MapCollectionTo(target.StudentEducationOrganizationAssociationTelephones, target, mappingContract?.IsStudentEducationOrganizationAssociationTelephoneIncluded);
            }

            if (mappingContract?.IsStudentEducationOrganizationAssociationTribalAffiliationsSupported != false)
            {
                source.StudentEducationOrganizationAssociationTribalAffiliations.MapCollectionTo(target.StudentEducationOrganizationAssociationTribalAffiliations, target, mappingContract?.IsStudentEducationOrganizationAssociationTribalAffiliationIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationAddressMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationAddress = new FullName("edfi", "StudentEducationOrganizationAssociationAddress");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationAddress source, IStudentEducationOrganizationAssociationAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsBuildingSiteNumberSupported != false)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((mappingContract?.IsCongressionalDistrictSupported != false)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((mappingContract?.IsCountyFIPSCodeSupported != false)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLocaleDescriptorSupported != false)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((mappingContract?.IsNameOfCountySupported != false)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentEducationOrganizationAssociationAddressPeriodsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationAddressPeriods.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociationAddress = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationAddressPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationAddress source, IStudentEducationOrganizationAssociationAddress target, Action<IStudentEducationOrganizationAssociationAddress, IStudentEducationOrganizationAssociationAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (mappingContract?.IsApartmentRoomSuiteNumberSupported != false)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;

            if (mappingContract?.IsBuildingSiteNumberSupported != false)
                target.BuildingSiteNumber = source.BuildingSiteNumber;

            if (mappingContract?.IsCongressionalDistrictSupported != false)
                target.CongressionalDistrict = source.CongressionalDistrict;

            if (mappingContract?.IsCountyFIPSCodeSupported != false)
                target.CountyFIPSCode = source.CountyFIPSCode;

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLocaleDescriptorSupported != false)
                target.LocaleDescriptor = source.LocaleDescriptor;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            if (mappingContract?.IsNameOfCountySupported != false)
                target.NameOfCounty = source.NameOfCounty;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentEducationOrganizationAssociationAddressPeriodsSupported != false)
            {
                source.StudentEducationOrganizationAssociationAddressPeriods.MapCollectionTo(target.StudentEducationOrganizationAssociationAddressPeriods, target, mappingContract?.IsStudentEducationOrganizationAssociationAddressPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationAddressPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationAddressPeriod = new FullName("edfi", "StudentEducationOrganizationAssociationAddressPeriod");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationAddressPeriod source, IStudentEducationOrganizationAssociationAddressPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationAddressPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationAddressPeriod source, IStudentEducationOrganizationAssociationAddressPeriod target, Action<IStudentEducationOrganizationAssociationAddressPeriod, IStudentEducationOrganizationAssociationAddressPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationAddressPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationAddressPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationAncestryEthnicOriginMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationAncestryEthnicOrigin = new FullName("edfi", "StudentEducationOrganizationAssociationAncestryEthnicOrigin");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationAncestryEthnicOrigin source, IStudentEducationOrganizationAssociationAncestryEthnicOrigin target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationAncestryEthnicOriginMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationAncestryEthnicOrigin);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationAncestryEthnicOrigin source, IStudentEducationOrganizationAssociationAncestryEthnicOrigin target, Action<IStudentEducationOrganizationAssociationAncestryEthnicOrigin, IStudentEducationOrganizationAssociationAncestryEthnicOrigin> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationAncestryEthnicOriginMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationAncestryEthnicOrigin);
    
            // Copy contextual primary key values
            target.AncestryEthnicOriginDescriptor = source.AncestryEthnicOriginDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationCohortYearMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationCohortYear = new FullName("edfi", "StudentEducationOrganizationAssociationCohortYear");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationCohortYear source, IStudentEducationOrganizationAssociationCohortYear target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationCohortYearMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationCohortYear);


            // Copy non-PK properties

            if ((mappingContract?.IsTermDescriptorSupported != false)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationCohortYear source, IStudentEducationOrganizationAssociationCohortYear target, Action<IStudentEducationOrganizationAssociationCohortYear, IStudentEducationOrganizationAssociationCohortYear> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationCohortYearMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationCohortYear);
    
            // Copy contextual primary key values
            target.CohortYearTypeDescriptor = source.CohortYearTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsTermDescriptorSupported != false)
                target.TermDescriptor = source.TermDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationDisabilityMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationDisability = new FullName("edfi", "StudentEducationOrganizationAssociationDisability");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationDisability source, IStudentEducationOrganizationAssociationDisability target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationDisabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationDisability);


            // Copy non-PK properties

            if ((mappingContract?.IsDisabilityDeterminationSourceTypeDescriptorSupported != false)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDisabilityDiagnosisSupported != false)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfDisabilitySupported != false)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationDisabilityDesignations.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationDisabilityDesignations,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociationDisability = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationDisability source, IStudentEducationOrganizationAssociationDisability target, Action<IStudentEducationOrganizationAssociationDisability, IStudentEducationOrganizationAssociationDisability> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationDisabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationDisability);
    
            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDisabilityDeterminationSourceTypeDescriptorSupported != false)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;

            if (mappingContract?.IsDisabilityDiagnosisSupported != false)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;

            if (mappingContract?.IsOrderOfDisabilitySupported != false)
                target.OrderOfDisability = source.OrderOfDisability;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported != false)
            {
                source.StudentEducationOrganizationAssociationDisabilityDesignations.MapCollectionTo(target.StudentEducationOrganizationAssociationDisabilityDesignations, target, mappingContract?.IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationDisabilityDesignationMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationDisabilityDesignation = new FullName("edfi", "StudentEducationOrganizationAssociationDisabilityDesignation");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationDisabilityDesignation source, IStudentEducationOrganizationAssociationDisabilityDesignation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationDisabilityDesignationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationDisabilityDesignation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationDisabilityDesignation source, IStudentEducationOrganizationAssociationDisabilityDesignation target, Action<IStudentEducationOrganizationAssociationDisabilityDesignation, IStudentEducationOrganizationAssociationDisabilityDesignation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationDisabilityDesignationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationDisabilityDesignation);
    
            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationElectronicMailMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationElectronicMail = new FullName("edfi", "StudentEducationOrganizationAssociationElectronicMail");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationElectronicMail source, IStudentEducationOrganizationAssociationElectronicMail target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationElectronicMailMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationElectronicMail);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsPrimaryEmailAddressIndicatorSupported != false)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationElectronicMail source, IStudentEducationOrganizationAssociationElectronicMail target, Action<IStudentEducationOrganizationAssociationElectronicMail, IStudentEducationOrganizationAssociationElectronicMail> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationElectronicMailMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationElectronicMail);
    
            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsPrimaryEmailAddressIndicatorSupported != false)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationInternationalAddressMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationInternationalAddress = new FullName("edfi", "StudentEducationOrganizationAssociationInternationalAddress");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationInternationalAddress source, IStudentEducationOrganizationAssociationInternationalAddress target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationInternationalAddress);


            // Copy non-PK properties

            if ((mappingContract?.IsAddressLine1Supported != false)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine2Supported != false)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine3Supported != false)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((mappingContract?.IsAddressLine4Supported != false)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((mappingContract?.IsBeginDateSupported != false)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsCountryDescriptorSupported != false)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsLatitudeSupported != false)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((mappingContract?.IsLongitudeSupported != false)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationInternationalAddress source, IStudentEducationOrganizationAssociationInternationalAddress target, Action<IStudentEducationOrganizationAssociationInternationalAddress, IStudentEducationOrganizationAssociationInternationalAddress> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationInternationalAddressMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationInternationalAddress);
    
            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsAddressLine1Supported != false)
                target.AddressLine1 = source.AddressLine1;

            if (mappingContract?.IsAddressLine2Supported != false)
                target.AddressLine2 = source.AddressLine2;

            if (mappingContract?.IsAddressLine3Supported != false)
                target.AddressLine3 = source.AddressLine3;

            if (mappingContract?.IsAddressLine4Supported != false)
                target.AddressLine4 = source.AddressLine4;

            if (mappingContract?.IsBeginDateSupported != false)
                target.BeginDate = source.BeginDate;

            if (mappingContract?.IsCountryDescriptorSupported != false)
                target.CountryDescriptor = source.CountryDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsLatitudeSupported != false)
                target.Latitude = source.Latitude;

            if (mappingContract?.IsLongitudeSupported != false)
                target.Longitude = source.Longitude;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationLanguageMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationLanguage = new FullName("edfi", "StudentEducationOrganizationAssociationLanguage");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationLanguage source, IStudentEducationOrganizationAssociationLanguage target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationLanguage);


            // Copy non-PK properties


            // Sync lists
            if (mappingContract?.IsStudentEducationOrganizationAssociationLanguageUsesSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationLanguageUses.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationLanguageUses,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociationLanguage = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationLanguageUseIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationLanguage source, IStudentEducationOrganizationAssociationLanguage target, Action<IStudentEducationOrganizationAssociationLanguage, IStudentEducationOrganizationAssociationLanguage> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationLanguageMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationLanguage);
    
            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentEducationOrganizationAssociationLanguageUsesSupported != false)
            {
                source.StudentEducationOrganizationAssociationLanguageUses.MapCollectionTo(target.StudentEducationOrganizationAssociationLanguageUses, target, mappingContract?.IsStudentEducationOrganizationAssociationLanguageUseIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationLanguageUseMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationLanguageUse = new FullName("edfi", "StudentEducationOrganizationAssociationLanguageUse");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationLanguageUse source, IStudentEducationOrganizationAssociationLanguageUse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationLanguageUseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationLanguageUse);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationLanguageUse source, IStudentEducationOrganizationAssociationLanguageUse target, Action<IStudentEducationOrganizationAssociationLanguageUse, IStudentEducationOrganizationAssociationLanguageUse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationLanguageUseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationLanguageUse);
    
            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationRaceMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationRace = new FullName("edfi", "StudentEducationOrganizationAssociationRace");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationRace source, IStudentEducationOrganizationAssociationRace target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationRaceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationRace);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationRace source, IStudentEducationOrganizationAssociationRace target, Action<IStudentEducationOrganizationAssociationRace, IStudentEducationOrganizationAssociationRace> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationRaceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationRace);
    
            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentCharacteristicMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationStudentCharacteristic = new FullName("edfi", "StudentEducationOrganizationAssociationStudentCharacteristic");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentCharacteristic source, IStudentEducationOrganizationAssociationStudentCharacteristic target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationStudentCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentCharacteristic);


            // Copy non-PK properties

            if ((mappingContract?.IsDesignatedBySupported != false)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationStudentCharacteristicPeriods.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentCharacteristicPeriods,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociationStudentCharacteristic = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationStudentCharacteristic source, IStudentEducationOrganizationAssociationStudentCharacteristic target, Action<IStudentEducationOrganizationAssociationStudentCharacteristic, IStudentEducationOrganizationAssociationStudentCharacteristic> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationStudentCharacteristicMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentCharacteristic);
    
            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDesignatedBySupported != false)
                target.DesignatedBy = source.DesignatedBy;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported != false)
            {
                source.StudentEducationOrganizationAssociationStudentCharacteristicPeriods.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentCharacteristicPeriods, target, mappingContract?.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentCharacteristicPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationStudentCharacteristicPeriod = new FullName("edfi", "StudentEducationOrganizationAssociationStudentCharacteristicPeriod");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentCharacteristicPeriod source, IStudentEducationOrganizationAssociationStudentCharacteristicPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationStudentCharacteristicPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentCharacteristicPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationStudentCharacteristicPeriod source, IStudentEducationOrganizationAssociationStudentCharacteristicPeriod target, Action<IStudentEducationOrganizationAssociationStudentCharacteristicPeriod, IStudentEducationOrganizationAssociationStudentCharacteristicPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationStudentCharacteristicPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentCharacteristicPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentIdentificationCodeMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationStudentIdentificationCode = new FullName("edfi", "StudentEducationOrganizationAssociationStudentIdentificationCode");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentIdentificationCode source, IStudentEducationOrganizationAssociationStudentIdentificationCode target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationStudentIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentIdentificationCode);


            // Copy non-PK properties

            if ((mappingContract?.IsIdentificationCodeSupported != false)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationStudentIdentificationCode source, IStudentEducationOrganizationAssociationStudentIdentificationCode target, Action<IStudentEducationOrganizationAssociationStudentIdentificationCode, IStudentEducationOrganizationAssociationStudentIdentificationCode> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationStudentIdentificationCodeMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentIdentificationCode);
    
            // Copy contextual primary key values
            target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            target.StudentIdentificationSystemDescriptor = source.StudentIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsIdentificationCodeSupported != false)
                target.IdentificationCode = source.IdentificationCode;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentIndicatorMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationStudentIndicator = new FullName("edfi", "StudentEducationOrganizationAssociationStudentIndicator");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentIndicator source, IStudentEducationOrganizationAssociationStudentIndicator target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationStudentIndicatorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentIndicator);


            // Copy non-PK properties

            if ((mappingContract?.IsDesignatedBySupported != false)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((mappingContract?.IsIndicatorSupported != false)
                && target.Indicator != source.Indicator)
            {
                target.Indicator = source.Indicator;
                isModified = true;
            }

            if ((mappingContract?.IsIndicatorGroupSupported != false)
                && target.IndicatorGroup != source.IndicatorGroup)
            {
                target.IndicatorGroup = source.IndicatorGroup;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported ?? true)
            {
                isModified |=
                    source.StudentEducationOrganizationAssociationStudentIndicatorPeriods.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentIndicatorPeriods,
                        onChildAdded: child =>
                            {
                                child.StudentEducationOrganizationAssociationStudentIndicator = target;
                            },
                        includeItem: item => mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationStudentIndicator source, IStudentEducationOrganizationAssociationStudentIndicator target, Action<IStudentEducationOrganizationAssociationStudentIndicator, IStudentEducationOrganizationAssociationStudentIndicator> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationStudentIndicatorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentIndicator);
    
            // Copy contextual primary key values
            target.IndicatorName = source.IndicatorName;

            // Copy non-PK properties

            if (mappingContract?.IsDesignatedBySupported != false)
                target.DesignatedBy = source.DesignatedBy;

            if (mappingContract?.IsIndicatorSupported != false)
                target.Indicator = source.Indicator;

            if (mappingContract?.IsIndicatorGroupSupported != false)
                target.IndicatorGroup = source.IndicatorGroup;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported != false)
            {
                source.StudentEducationOrganizationAssociationStudentIndicatorPeriods.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentIndicatorPeriods, target, mappingContract?.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentIndicatorPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationStudentIndicatorPeriod = new FullName("edfi", "StudentEducationOrganizationAssociationStudentIndicatorPeriod");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentIndicatorPeriod source, IStudentEducationOrganizationAssociationStudentIndicatorPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationStudentIndicatorPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentIndicatorPeriod);


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationStudentIndicatorPeriod source, IStudentEducationOrganizationAssociationStudentIndicatorPeriod target, Action<IStudentEducationOrganizationAssociationStudentIndicatorPeriod, IStudentEducationOrganizationAssociationStudentIndicatorPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationStudentIndicatorPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationStudentIndicatorPeriod);
    
            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationTelephoneMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationTelephone = new FullName("edfi", "StudentEducationOrganizationAssociationTelephone");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationTelephone source, IStudentEducationOrganizationAssociationTelephone target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationTelephone);


            // Copy non-PK properties

            if ((mappingContract?.IsDoNotPublishIndicatorSupported != false)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfPrioritySupported != false)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationTelephone source, IStudentEducationOrganizationAssociationTelephone target, Action<IStudentEducationOrganizationAssociationTelephone, IStudentEducationOrganizationAssociationTelephone> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationTelephoneMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationTelephone);
    
            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDoNotPublishIndicatorSupported != false)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;

            if (mappingContract?.IsOrderOfPrioritySupported != false)
                target.OrderOfPriority = source.OrderOfPriority;

            if (mappingContract?.IsTextMessageCapabilityIndicatorSupported != false)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationTribalAffiliationMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationAssociationTribalAffiliation = new FullName("edfi", "StudentEducationOrganizationAssociationTribalAffiliation");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationTribalAffiliation source, IStudentEducationOrganizationAssociationTribalAffiliation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationAssociationTribalAffiliationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationTribalAffiliation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationAssociationTribalAffiliation source, IStudentEducationOrganizationAssociationTribalAffiliation target, Action<IStudentEducationOrganizationAssociationTribalAffiliation, IStudentEducationOrganizationAssociationTribalAffiliation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationAssociationTribalAffiliationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationAssociationTribalAffiliation);
    
            // Copy contextual primary key values
            target.TribalAffiliationDescriptor = source.TribalAffiliationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentEducationOrganizationResponsibilityAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentEducationOrganizationResponsibilityAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationResponsibilityAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentEducationOrganizationResponsibilityAssociation = new FullName("edfi", "StudentEducationOrganizationResponsibilityAssociation");
    
        public static bool SynchronizeTo(this IStudentEducationOrganizationResponsibilityAssociation source, IStudentEducationOrganizationResponsibilityAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentEducationOrganizationResponsibilityAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationResponsibilityAssociation);

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || !string.Equals(target.ResponsibilityDescriptor, source.ResponsibilityDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentEducationOrganizationResponsibilityAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentEducationOrganizationResponsibilityAssociation source, IStudentEducationOrganizationResponsibilityAssociation target, Action<IStudentEducationOrganizationResponsibilityAssociation, IStudentEducationOrganizationResponsibilityAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentEducationOrganizationResponsibilityAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentEducationOrganizationResponsibilityAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ResponsibilityDescriptor = source.ResponsibilityDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.Common.EdFi //.StudentGradebookEntryAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentGradebookEntryMapper
    {
        private static readonly FullName _fullName_edfi_StudentGradebookEntry = new FullName("edfi", "StudentGradebookEntry");
    
        public static bool SynchronizeTo(this IStudentGradebookEntry source, IStudentGradebookEntry target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentGradebookEntryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentGradebookEntry);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.GradebookEntryIdentifier, source.GradebookEntryIdentifier))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentGradebookEntry
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAssignmentLateStatusDescriptorSupported != false)
                && target.AssignmentLateStatusDescriptor != source.AssignmentLateStatusDescriptor)
            {
                target.AssignmentLateStatusDescriptor = source.AssignmentLateStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsCompetencyLevelDescriptorSupported != false)
                && target.CompetencyLevelDescriptor != source.CompetencyLevelDescriptor)
            {
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDateFulfilledSupported != false)
                && target.DateFulfilled != source.DateFulfilled)
            {
                target.DateFulfilled = source.DateFulfilled;
                isModified = true;
            }

            if ((mappingContract?.IsDiagnosticStatementSupported != false)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((mappingContract?.IsLetterGradeEarnedSupported != false)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsNumericGradeEarnedSupported != false)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }

            if ((mappingContract?.IsPointsEarnedSupported != false)
                && target.PointsEarned != source.PointsEarned)
            {
                target.PointsEarned = source.PointsEarned;
                isModified = true;
            }

            if ((mappingContract?.IsSubmissionStatusDescriptorSupported != false)
                && target.SubmissionStatusDescriptor != source.SubmissionStatusDescriptor)
            {
                target.SubmissionStatusDescriptor = source.SubmissionStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsTimeFulfilledSupported != false)
                && target.TimeFulfilled != source.TimeFulfilled)
            {
                target.TimeFulfilled = source.TimeFulfilled;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentGradebookEntry source, IStudentGradebookEntry target, Action<IStudentGradebookEntry, IStudentGradebookEntry> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentGradebookEntryMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentGradebookEntry);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradebookEntryIdentifier = source.GradebookEntryIdentifier;
            target.Namespace = source.Namespace;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAssignmentLateStatusDescriptorSupported != false)
                target.AssignmentLateStatusDescriptor = source.AssignmentLateStatusDescriptor;

            if (mappingContract?.IsCompetencyLevelDescriptorSupported != false)
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;

            if (mappingContract?.IsDateFulfilledSupported != false)
                target.DateFulfilled = source.DateFulfilled;

            if (mappingContract?.IsDiagnosticStatementSupported != false)
                target.DiagnosticStatement = source.DiagnosticStatement;

            if (mappingContract?.IsLetterGradeEarnedSupported != false)
                target.LetterGradeEarned = source.LetterGradeEarned;

            if (mappingContract?.IsNumericGradeEarnedSupported != false)
                target.NumericGradeEarned = source.NumericGradeEarned;

            if (mappingContract?.IsPointsEarnedSupported != false)
                target.PointsEarned = source.PointsEarned;

            if (mappingContract?.IsSubmissionStatusDescriptorSupported != false)
                target.SubmissionStatusDescriptor = source.SubmissionStatusDescriptor;

            if (mappingContract?.IsTimeFulfilledSupported != false)
                target.TimeFulfilled = source.TimeFulfilled;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradebookEntryResourceId = source.GradebookEntryResourceId;
                target.GradebookEntryDiscriminator = source.GradebookEntryDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentHomelessProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentHomelessProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentHomelessProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentHomelessProgramAssociation = new FullName("edfi", "StudentHomelessProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentHomelessProgramAssociation source, IStudentHomelessProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentHomelessProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentHomelessProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentHomelessProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsAwaitingFosterCareSupported != false)
                && target.AwaitingFosterCare != source.AwaitingFosterCare)
            {
                target.AwaitingFosterCare = source.AwaitingFosterCare;
                isModified = true;
            }

            if ((mappingContract?.IsHomelessPrimaryNighttimeResidenceDescriptorSupported != false)
                && target.HomelessPrimaryNighttimeResidenceDescriptor != source.HomelessPrimaryNighttimeResidenceDescriptor)
            {
                target.HomelessPrimaryNighttimeResidenceDescriptor = source.HomelessPrimaryNighttimeResidenceDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsHomelessUnaccompaniedYouthSupported != false)
                && target.HomelessUnaccompaniedYouth != source.HomelessUnaccompaniedYouth)
            {
                target.HomelessUnaccompaniedYouth = source.HomelessUnaccompaniedYouth;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentHomelessProgramAssociationHomelessProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentHomelessProgramAssociationHomelessProgramServices.SynchronizeCollectionTo(
                        target.StudentHomelessProgramAssociationHomelessProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentHomelessProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentHomelessProgramAssociation source, IStudentHomelessProgramAssociation target, Action<IStudentHomelessProgramAssociation, IStudentHomelessProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentHomelessProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentHomelessProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsAwaitingFosterCareSupported != false)
                target.AwaitingFosterCare = source.AwaitingFosterCare;

            if (mappingContract?.IsHomelessPrimaryNighttimeResidenceDescriptorSupported != false)
                target.HomelessPrimaryNighttimeResidenceDescriptor = source.HomelessPrimaryNighttimeResidenceDescriptor;

            if (mappingContract?.IsHomelessUnaccompaniedYouthSupported != false)
                target.HomelessUnaccompaniedYouth = source.HomelessUnaccompaniedYouth;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentHomelessProgramAssociationHomelessProgramServicesSupported != false)
            {
                source.StudentHomelessProgramAssociationHomelessProgramServices.MapCollectionTo(target.StudentHomelessProgramAssociationHomelessProgramServices, target, mappingContract?.IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentHomelessProgramAssociationHomelessProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentHomelessProgramAssociationHomelessProgramService = new FullName("edfi", "StudentHomelessProgramAssociationHomelessProgramService");
    
        public static bool SynchronizeTo(this IStudentHomelessProgramAssociationHomelessProgramService source, IStudentHomelessProgramAssociationHomelessProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentHomelessProgramAssociationHomelessProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentHomelessProgramAssociationHomelessProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentHomelessProgramAssociationHomelessProgramService source, IStudentHomelessProgramAssociationHomelessProgramService target, Action<IStudentHomelessProgramAssociationHomelessProgramService, IStudentHomelessProgramAssociationHomelessProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentHomelessProgramAssociationHomelessProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentHomelessProgramAssociationHomelessProgramService);
    
            // Copy contextual primary key values
            target.HomelessProgramServiceDescriptor = source.HomelessProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StudentIdentificationSystemDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentIdentificationSystemDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StudentIdentificationSystemDescriptor = new FullName("edfi", "StudentIdentificationSystemDescriptor");
    
        public static bool SynchronizeTo(this IStudentIdentificationSystemDescriptor source, IStudentIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentIdentificationSystemDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StudentIdentificationSystemDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStudentIdentificationSystemDescriptor source, IStudentIdentificationSystemDescriptor target, Action<IStudentIdentificationSystemDescriptor, IStudentIdentificationSystemDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentIdentificationSystemDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentIdentificationSystemDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentIdentificationSystemDescriptorId = source.StudentIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentInterventionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentInterventionAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentInterventionAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentInterventionAssociation = new FullName("edfi", "StudentInterventionAssociation");
    
        public static bool SynchronizeTo(this IStudentInterventionAssociation source, IStudentInterventionAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentInterventionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentInterventionAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.InterventionIdentificationCode, source.InterventionIdentificationCode))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentInterventionAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCohortEducationOrganizationIdSupported != false)
                && target.CohortEducationOrganizationId != source.CohortEducationOrganizationId)
            {
                target.CohortEducationOrganizationId = source.CohortEducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsCohortIdentifierSupported != false)
                && target.CohortIdentifier != source.CohortIdentifier)
            {
                target.CohortIdentifier = source.CohortIdentifier;
                isModified = true;
            }

            if ((mappingContract?.IsDiagnosticStatementSupported != false)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((mappingContract?.IsDosageSupported != false)
                && target.Dosage != source.Dosage)
            {
                target.Dosage = source.Dosage;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentInterventionAssociationInterventionEffectivenessesSupported ?? true)
            {
                isModified |=
                    source.StudentInterventionAssociationInterventionEffectivenesses.SynchronizeCollectionTo(
                        target.StudentInterventionAssociationInterventionEffectivenesses,
                        onChildAdded: child =>
                            {
                                child.StudentInterventionAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentInterventionAssociationInterventionEffectivenessIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentInterventionAssociation source, IStudentInterventionAssociation target, Action<IStudentInterventionAssociation, IStudentInterventionAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentInterventionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentInterventionAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionIdentificationCode = source.InterventionIdentificationCode;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsCohortEducationOrganizationIdSupported != false)
                target.CohortEducationOrganizationId = source.CohortEducationOrganizationId;

            if (mappingContract?.IsCohortIdentifierSupported != false)
                target.CohortIdentifier = source.CohortIdentifier;

            if (mappingContract?.IsDiagnosticStatementSupported != false)
                target.DiagnosticStatement = source.DiagnosticStatement;

            if (mappingContract?.IsDosageSupported != false)
                target.Dosage = source.Dosage;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CohortResourceId = source.CohortResourceId;
                target.CohortDiscriminator = source.CohortDiscriminator;
                target.InterventionResourceId = source.InterventionResourceId;
                target.InterventionDiscriminator = source.InterventionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentInterventionAssociationInterventionEffectivenessesSupported != false)
            {
                source.StudentInterventionAssociationInterventionEffectivenesses.MapCollectionTo(target.StudentInterventionAssociationInterventionEffectivenesses, target, mappingContract?.IsStudentInterventionAssociationInterventionEffectivenessIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentInterventionAssociationInterventionEffectivenessMapper
    {
        private static readonly FullName _fullName_edfi_StudentInterventionAssociationInterventionEffectiveness = new FullName("edfi", "StudentInterventionAssociationInterventionEffectiveness");
    
        public static bool SynchronizeTo(this IStudentInterventionAssociationInterventionEffectiveness source, IStudentInterventionAssociationInterventionEffectiveness target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentInterventionAssociationInterventionEffectivenessMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentInterventionAssociationInterventionEffectiveness);


            // Copy non-PK properties

            if ((mappingContract?.IsImprovementIndexSupported != false)
                && target.ImprovementIndex != source.ImprovementIndex)
            {
                target.ImprovementIndex = source.ImprovementIndex;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionEffectivenessRatingDescriptorSupported != false)
                && target.InterventionEffectivenessRatingDescriptor != source.InterventionEffectivenessRatingDescriptor)
            {
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentInterventionAssociationInterventionEffectiveness source, IStudentInterventionAssociationInterventionEffectiveness target, Action<IStudentInterventionAssociationInterventionEffectiveness, IStudentInterventionAssociationInterventionEffectiveness> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentInterventionAssociationInterventionEffectivenessMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentInterventionAssociationInterventionEffectiveness);
    
            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsImprovementIndexSupported != false)
                target.ImprovementIndex = source.ImprovementIndex;

            if (mappingContract?.IsInterventionEffectivenessRatingDescriptorSupported != false)
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentInterventionAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentInterventionAttendanceEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentInterventionAttendanceEventMapper
    {
        private static readonly FullName _fullName_edfi_StudentInterventionAttendanceEvent = new FullName("edfi", "StudentInterventionAttendanceEvent");
    
        public static bool SynchronizeTo(this IStudentInterventionAttendanceEvent source, IStudentInterventionAttendanceEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentInterventionAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentInterventionAttendanceEvent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.AttendanceEventCategoryDescriptor, source.AttendanceEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.EventDate != source.EventDate)
                || (!keyStringComparer.Equals(target.InterventionIdentificationCode, source.InterventionIdentificationCode))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentInterventionAttendanceEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAttendanceEventReasonSupported != false)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEventDurationSupported != false)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((mappingContract?.IsInterventionDurationSupported != false)
                && target.InterventionDuration != source.InterventionDuration)
            {
                target.InterventionDuration = source.InterventionDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentInterventionAttendanceEvent source, IStudentInterventionAttendanceEvent target, Action<IStudentInterventionAttendanceEvent, IStudentInterventionAttendanceEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentInterventionAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentInterventionAttendanceEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.InterventionIdentificationCode = source.InterventionIdentificationCode;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAttendanceEventReasonSupported != false)
                target.AttendanceEventReason = source.AttendanceEventReason;

            if (mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;

            if (mappingContract?.IsEventDurationSupported != false)
                target.EventDuration = source.EventDuration;

            if (mappingContract?.IsInterventionDurationSupported != false)
                target.InterventionDuration = source.InterventionDuration;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.InterventionResourceId = source.InterventionResourceId;
                target.InterventionDiscriminator = source.InterventionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentLanguageInstructionProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentLanguageInstructionProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentLanguageInstructionProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentLanguageInstructionProgramAssociation = new FullName("edfi", "StudentLanguageInstructionProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentLanguageInstructionProgramAssociation source, IStudentLanguageInstructionProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentLanguageInstructionProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentLanguageInstructionProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentLanguageInstructionProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsDosageSupported != false)
                && target.Dosage != source.Dosage)
            {
                target.Dosage = source.Dosage;
                isModified = true;
            }

            if ((mappingContract?.IsEnglishLearnerParticipationSupported != false)
                && target.EnglishLearnerParticipation != source.EnglishLearnerParticipation)
            {
                target.EnglishLearnerParticipation = source.EnglishLearnerParticipation;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported ?? true)
            {
                isModified |=
                    source.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments.SynchronizeCollectionTo(
                        target.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments,
                        onChildAdded: child =>
                            {
                                child.StudentLanguageInstructionProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices.SynchronizeCollectionTo(
                        target.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentLanguageInstructionProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentLanguageInstructionProgramAssociation source, IStudentLanguageInstructionProgramAssociation target, Action<IStudentLanguageInstructionProgramAssociation, IStudentLanguageInstructionProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentLanguageInstructionProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentLanguageInstructionProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsDosageSupported != false)
                target.Dosage = source.Dosage;

            if (mappingContract?.IsEnglishLearnerParticipationSupported != false)
                target.EnglishLearnerParticipation = source.EnglishLearnerParticipation;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported != false)
            {
                source.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments.MapCollectionTo(target.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments, target, mappingContract?.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded);
            }

            if (mappingContract?.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported != false)
            {
                source.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices.MapCollectionTo(target.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices, target, mappingContract?.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentMapper
    {
        private static readonly FullName _fullName_edfi_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment = new FullName("edfi", "StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment");
    
        public static bool SynchronizeTo(this IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment source, IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment);


            // Copy non-PK properties

            if ((mappingContract?.IsMonitoredDescriptorSupported != false)
                && target.MonitoredDescriptor != source.MonitoredDescriptor)
            {
                target.MonitoredDescriptor = source.MonitoredDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsParticipationDescriptorSupported != false)
                && target.ParticipationDescriptor != source.ParticipationDescriptor)
            {
                target.ParticipationDescriptor = source.ParticipationDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProficiencyDescriptorSupported != false)
                && target.ProficiencyDescriptor != source.ProficiencyDescriptor)
            {
                target.ProficiencyDescriptor = source.ProficiencyDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsProgressDescriptorSupported != false)
                && target.ProgressDescriptor != source.ProgressDescriptor)
            {
                target.ProgressDescriptor = source.ProgressDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment source, IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment target, Action<IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment);
    
            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (mappingContract?.IsMonitoredDescriptorSupported != false)
                target.MonitoredDescriptor = source.MonitoredDescriptor;

            if (mappingContract?.IsParticipationDescriptorSupported != false)
                target.ParticipationDescriptor = source.ParticipationDescriptor;

            if (mappingContract?.IsProficiencyDescriptorSupported != false)
                target.ProficiencyDescriptor = source.ProficiencyDescriptor;

            if (mappingContract?.IsProgressDescriptorSupported != false)
                target.ProgressDescriptor = source.ProgressDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService = new FullName("edfi", "StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService");
    
        public static bool SynchronizeTo(this IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService source, IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService source, IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService target, Action<IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService);
    
            // Copy contextual primary key values
            target.LanguageInstructionProgramServiceDescriptor = source.LanguageInstructionProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentMigrantEducationProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentMigrantEducationProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentMigrantEducationProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentMigrantEducationProgramAssociation = new FullName("edfi", "StudentMigrantEducationProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentMigrantEducationProgramAssociation source, IStudentMigrantEducationProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentMigrantEducationProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentMigrantEducationProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentMigrantEducationProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsContinuationOfServicesReasonDescriptorSupported != false)
                && target.ContinuationOfServicesReasonDescriptor != source.ContinuationOfServicesReasonDescriptor)
            {
                target.ContinuationOfServicesReasonDescriptor = source.ContinuationOfServicesReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEligibilityExpirationDateSupported != false)
                && target.EligibilityExpirationDate != source.EligibilityExpirationDate)
            {
                target.EligibilityExpirationDate = source.EligibilityExpirationDate;
                isModified = true;
            }

            if ((mappingContract?.IsLastQualifyingMoveSupported != false)
                && target.LastQualifyingMove != source.LastQualifyingMove)
            {
                target.LastQualifyingMove = source.LastQualifyingMove;
                isModified = true;
            }

            if ((mappingContract?.IsPriorityForServicesSupported != false)
                && target.PriorityForServices != source.PriorityForServices)
            {
                target.PriorityForServices = source.PriorityForServices;
                isModified = true;
            }

            if ((mappingContract?.IsQualifyingArrivalDateSupported != false)
                && target.QualifyingArrivalDate != source.QualifyingArrivalDate)
            {
                target.QualifyingArrivalDate = source.QualifyingArrivalDate;
                isModified = true;
            }

            if ((mappingContract?.IsStateResidencyDateSupported != false)
                && target.StateResidencyDate != source.StateResidencyDate)
            {
                target.StateResidencyDate = source.StateResidencyDate;
                isModified = true;
            }

            if ((mappingContract?.IsUSInitialEntrySupported != false)
                && target.USInitialEntry != source.USInitialEntry)
            {
                target.USInitialEntry = source.USInitialEntry;
                isModified = true;
            }

            if ((mappingContract?.IsUSInitialSchoolEntrySupported != false)
                && target.USInitialSchoolEntry != source.USInitialSchoolEntry)
            {
                target.USInitialSchoolEntry = source.USInitialSchoolEntry;
                isModified = true;
            }

            if ((mappingContract?.IsUSMostRecentEntrySupported != false)
                && target.USMostRecentEntry != source.USMostRecentEntry)
            {
                target.USMostRecentEntry = source.USMostRecentEntry;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices.SynchronizeCollectionTo(
                        target.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentMigrantEducationProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentMigrantEducationProgramAssociation source, IStudentMigrantEducationProgramAssociation target, Action<IStudentMigrantEducationProgramAssociation, IStudentMigrantEducationProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentMigrantEducationProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentMigrantEducationProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsContinuationOfServicesReasonDescriptorSupported != false)
                target.ContinuationOfServicesReasonDescriptor = source.ContinuationOfServicesReasonDescriptor;

            if (mappingContract?.IsEligibilityExpirationDateSupported != false)
                target.EligibilityExpirationDate = source.EligibilityExpirationDate;

            if (mappingContract?.IsLastQualifyingMoveSupported != false)
                target.LastQualifyingMove = source.LastQualifyingMove;

            if (mappingContract?.IsPriorityForServicesSupported != false)
                target.PriorityForServices = source.PriorityForServices;

            if (mappingContract?.IsQualifyingArrivalDateSupported != false)
                target.QualifyingArrivalDate = source.QualifyingArrivalDate;

            if (mappingContract?.IsStateResidencyDateSupported != false)
                target.StateResidencyDate = source.StateResidencyDate;

            if (mappingContract?.IsUSInitialEntrySupported != false)
                target.USInitialEntry = source.USInitialEntry;

            if (mappingContract?.IsUSInitialSchoolEntrySupported != false)
                target.USInitialSchoolEntry = source.USInitialSchoolEntry;

            if (mappingContract?.IsUSMostRecentEntrySupported != false)
                target.USMostRecentEntry = source.USMostRecentEntry;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported != false)
            {
                source.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices.MapCollectionTo(target.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices, target, mappingContract?.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentMigrantEducationProgramAssociationMigrantEducationProgramService = new FullName("edfi", "StudentMigrantEducationProgramAssociationMigrantEducationProgramService");
    
        public static bool SynchronizeTo(this IStudentMigrantEducationProgramAssociationMigrantEducationProgramService source, IStudentMigrantEducationProgramAssociationMigrantEducationProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentMigrantEducationProgramAssociationMigrantEducationProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentMigrantEducationProgramAssociationMigrantEducationProgramService source, IStudentMigrantEducationProgramAssociationMigrantEducationProgramService target, Action<IStudentMigrantEducationProgramAssociationMigrantEducationProgramService, IStudentMigrantEducationProgramAssociationMigrantEducationProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentMigrantEducationProgramAssociationMigrantEducationProgramService);
    
            // Copy contextual primary key values
            target.MigrantEducationProgramServiceDescriptor = source.MigrantEducationProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentNeglectedOrDelinquentProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentNeglectedOrDelinquentProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentNeglectedOrDelinquentProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentNeglectedOrDelinquentProgramAssociation = new FullName("edfi", "StudentNeglectedOrDelinquentProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentNeglectedOrDelinquentProgramAssociation source, IStudentNeglectedOrDelinquentProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentNeglectedOrDelinquentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentNeglectedOrDelinquentProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentNeglectedOrDelinquentProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsELAProgressLevelDescriptorSupported != false)
                && target.ELAProgressLevelDescriptor != source.ELAProgressLevelDescriptor)
            {
                target.ELAProgressLevelDescriptor = source.ELAProgressLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsMathematicsProgressLevelDescriptorSupported != false)
                && target.MathematicsProgressLevelDescriptor != source.MathematicsProgressLevelDescriptor)
            {
                target.MathematicsProgressLevelDescriptor = source.MathematicsProgressLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsNeglectedOrDelinquentProgramDescriptorSupported != false)
                && target.NeglectedOrDelinquentProgramDescriptor != source.NeglectedOrDelinquentProgramDescriptor)
            {
                target.NeglectedOrDelinquentProgramDescriptor = source.NeglectedOrDelinquentProgramDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices.SynchronizeCollectionTo(
                        target.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentNeglectedOrDelinquentProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentNeglectedOrDelinquentProgramAssociation source, IStudentNeglectedOrDelinquentProgramAssociation target, Action<IStudentNeglectedOrDelinquentProgramAssociation, IStudentNeglectedOrDelinquentProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentNeglectedOrDelinquentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentNeglectedOrDelinquentProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsELAProgressLevelDescriptorSupported != false)
                target.ELAProgressLevelDescriptor = source.ELAProgressLevelDescriptor;

            if (mappingContract?.IsMathematicsProgressLevelDescriptorSupported != false)
                target.MathematicsProgressLevelDescriptor = source.MathematicsProgressLevelDescriptor;

            if (mappingContract?.IsNeglectedOrDelinquentProgramDescriptorSupported != false)
                target.NeglectedOrDelinquentProgramDescriptor = source.NeglectedOrDelinquentProgramDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported != false)
            {
                source.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices.MapCollectionTo(target.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices, target, mappingContract?.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService = new FullName("edfi", "StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService");
    
        public static bool SynchronizeTo(this IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService source, IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService source, IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService target, Action<IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService, IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService);
    
            // Copy contextual primary key values
            target.NeglectedOrDelinquentProgramServiceDescriptor = source.NeglectedOrDelinquentProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentParticipationCodeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StudentParticipationCodeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentParticipationCodeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_StudentParticipationCodeDescriptor = new FullName("edfi", "StudentParticipationCodeDescriptor");
    
        public static bool SynchronizeTo(this IStudentParticipationCodeDescriptor source, IStudentParticipationCodeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentParticipationCodeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentParticipationCodeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on StudentParticipationCodeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IStudentParticipationCodeDescriptor source, IStudentParticipationCodeDescriptor target, Action<IStudentParticipationCodeDescriptor, IStudentParticipationCodeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentParticipationCodeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentParticipationCodeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentParticipationCodeDescriptorId = source.StudentParticipationCodeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramAssociation = new FullName("edfi", "StudentProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentProgramAssociation source, IStudentProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentProgramAssociationServicesSupported ?? true)
            {
                isModified |=
                    source.StudentProgramAssociationServices.SynchronizeCollectionTo(
                        target.StudentProgramAssociationServices,
                        onChildAdded: child =>
                            {
                                child.StudentProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentProgramAssociationServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentProgramAssociation source, IStudentProgramAssociation target, Action<IStudentProgramAssociation, IStudentProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentProgramAssociationServicesSupported != false)
            {
                source.StudentProgramAssociationServices.MapCollectionTo(target.StudentProgramAssociationServices, target, mappingContract?.IsStudentProgramAssociationServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentProgramAssociationServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramAssociationService = new FullName("edfi", "StudentProgramAssociationService");
    
        public static bool SynchronizeTo(this IStudentProgramAssociationService source, IStudentProgramAssociationService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramAssociationServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramAssociationService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentProgramAssociationService source, IStudentProgramAssociationService target, Action<IStudentProgramAssociationService, IStudentProgramAssociationService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramAssociationServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramAssociationService);
    
            // Copy contextual primary key values
            target.ServiceDescriptor = source.ServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentProgramAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentProgramAttendanceEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentProgramAttendanceEventMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramAttendanceEvent = new FullName("edfi", "StudentProgramAttendanceEvent");
    
        public static bool SynchronizeTo(this IStudentProgramAttendanceEvent source, IStudentProgramAttendanceEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramAttendanceEvent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.AttendanceEventCategoryDescriptor, source.AttendanceEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.EventDate != source.EventDate)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentProgramAttendanceEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAttendanceEventReasonSupported != false)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEventDurationSupported != false)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((mappingContract?.IsProgramAttendanceDurationSupported != false)
                && target.ProgramAttendanceDuration != source.ProgramAttendanceDuration)
            {
                target.ProgramAttendanceDuration = source.ProgramAttendanceDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentProgramAttendanceEvent source, IStudentProgramAttendanceEvent target, Action<IStudentProgramAttendanceEvent, IStudentProgramAttendanceEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramAttendanceEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAttendanceEventReasonSupported != false)
                target.AttendanceEventReason = source.AttendanceEventReason;

            if (mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;

            if (mappingContract?.IsEventDurationSupported != false)
                target.EventDuration = source.EventDuration;

            if (mappingContract?.IsProgramAttendanceDurationSupported != false)
                target.ProgramAttendanceDuration = source.ProgramAttendanceDuration;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentProgramEvaluation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentProgramEvaluationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentProgramEvaluationMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramEvaluation = new FullName("edfi", "StudentProgramEvaluation");
    
        public static bool SynchronizeTo(this IStudentProgramEvaluation source, IStudentProgramEvaluation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramEvaluationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EvaluationDate != source.EvaluationDate)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || !string.Equals(target.ProgramEvaluationPeriodDescriptor, source.ProgramEvaluationPeriodDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramEvaluationTitle, source.ProgramEvaluationTitle))
                || !string.Equals(target.ProgramEvaluationTypeDescriptor, source.ProgramEvaluationTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentProgramEvaluation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEducationOrganizationIdSupported != false)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationDurationSupported != false)
                && target.EvaluationDuration != source.EvaluationDuration)
            {
                target.EvaluationDuration = source.EvaluationDuration;
                isModified = true;
            }

            if ((mappingContract?.IsStaffEvaluatorStaffUniqueIdSupported != false)
                && target.StaffEvaluatorStaffUniqueId != source.StaffEvaluatorStaffUniqueId)
            {
                target.StaffEvaluatorStaffUniqueId = source.StaffEvaluatorStaffUniqueId;
                isModified = true;
            }

            if ((mappingContract?.IsSummaryEvaluationCommentSupported != false)
                && target.SummaryEvaluationComment != source.SummaryEvaluationComment)
            {
                target.SummaryEvaluationComment = source.SummaryEvaluationComment;
                isModified = true;
            }

            if ((mappingContract?.IsSummaryEvaluationNumericRatingSupported != false)
                && target.SummaryEvaluationNumericRating != source.SummaryEvaluationNumericRating)
            {
                target.SummaryEvaluationNumericRating = source.SummaryEvaluationNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsSummaryEvaluationRatingLevelDescriptorSupported != false)
                && target.SummaryEvaluationRatingLevelDescriptor != source.SummaryEvaluationRatingLevelDescriptor)
            {
                target.SummaryEvaluationRatingLevelDescriptor = source.SummaryEvaluationRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentProgramEvaluationExternalEvaluatorsSupported ?? true)
            {
                isModified |=
                    source.StudentProgramEvaluationExternalEvaluators.SynchronizeCollectionTo(
                        target.StudentProgramEvaluationExternalEvaluators,
                        onChildAdded: child =>
                            {
                                child.StudentProgramEvaluation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentProgramEvaluationExternalEvaluatorIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentProgramEvaluationStudentEvaluationElementsSupported ?? true)
            {
                isModified |=
                    source.StudentProgramEvaluationStudentEvaluationElements.SynchronizeCollectionTo(
                        target.StudentProgramEvaluationStudentEvaluationElements,
                        onChildAdded: child =>
                            {
                                child.StudentProgramEvaluation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentProgramEvaluationStudentEvaluationElementIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentProgramEvaluationStudentEvaluationObjectivesSupported ?? true)
            {
                isModified |=
                    source.StudentProgramEvaluationStudentEvaluationObjectives.SynchronizeCollectionTo(
                        target.StudentProgramEvaluationStudentEvaluationObjectives,
                        onChildAdded: child =>
                            {
                                child.StudentProgramEvaluation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentProgramEvaluationStudentEvaluationObjectiveIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentProgramEvaluation source, IStudentProgramEvaluation target, Action<IStudentProgramEvaluation, IStudentProgramEvaluation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramEvaluationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationDate = source.EvaluationDate;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramEvaluationPeriodDescriptor = source.ProgramEvaluationPeriodDescriptor;
            target.ProgramEvaluationTitle = source.ProgramEvaluationTitle;
            target.ProgramEvaluationTypeDescriptor = source.ProgramEvaluationTypeDescriptor;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsEducationOrganizationIdSupported != false)
                target.EducationOrganizationId = source.EducationOrganizationId;

            if (mappingContract?.IsEvaluationDurationSupported != false)
                target.EvaluationDuration = source.EvaluationDuration;

            if (mappingContract?.IsStaffEvaluatorStaffUniqueIdSupported != false)
                target.StaffEvaluatorStaffUniqueId = source.StaffEvaluatorStaffUniqueId;

            if (mappingContract?.IsSummaryEvaluationCommentSupported != false)
                target.SummaryEvaluationComment = source.SummaryEvaluationComment;

            if (mappingContract?.IsSummaryEvaluationNumericRatingSupported != false)
                target.SummaryEvaluationNumericRating = source.SummaryEvaluationNumericRating;

            if (mappingContract?.IsSummaryEvaluationRatingLevelDescriptorSupported != false)
                target.SummaryEvaluationRatingLevelDescriptor = source.SummaryEvaluationRatingLevelDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramEvaluationResourceId = source.ProgramEvaluationResourceId;
                target.ProgramEvaluationDiscriminator = source.ProgramEvaluationDiscriminator;
                target.StaffEvaluatorStaffResourceId = source.StaffEvaluatorStaffResourceId;
                target.StaffEvaluatorStaffDiscriminator = source.StaffEvaluatorStaffDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentProgramEvaluationExternalEvaluatorsSupported != false)
            {
                source.StudentProgramEvaluationExternalEvaluators.MapCollectionTo(target.StudentProgramEvaluationExternalEvaluators, target, mappingContract?.IsStudentProgramEvaluationExternalEvaluatorIncluded);
            }

            if (mappingContract?.IsStudentProgramEvaluationStudentEvaluationElementsSupported != false)
            {
                source.StudentProgramEvaluationStudentEvaluationElements.MapCollectionTo(target.StudentProgramEvaluationStudentEvaluationElements, target, mappingContract?.IsStudentProgramEvaluationStudentEvaluationElementIncluded);
            }

            if (mappingContract?.IsStudentProgramEvaluationStudentEvaluationObjectivesSupported != false)
            {
                source.StudentProgramEvaluationStudentEvaluationObjectives.MapCollectionTo(target.StudentProgramEvaluationStudentEvaluationObjectives, target, mappingContract?.IsStudentProgramEvaluationStudentEvaluationObjectiveIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentProgramEvaluationExternalEvaluatorMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramEvaluationExternalEvaluator = new FullName("edfi", "StudentProgramEvaluationExternalEvaluator");
    
        public static bool SynchronizeTo(this IStudentProgramEvaluationExternalEvaluator source, IStudentProgramEvaluationExternalEvaluator target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramEvaluationExternalEvaluatorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluationExternalEvaluator);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentProgramEvaluationExternalEvaluator source, IStudentProgramEvaluationExternalEvaluator target, Action<IStudentProgramEvaluationExternalEvaluator, IStudentProgramEvaluationExternalEvaluator> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramEvaluationExternalEvaluatorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluationExternalEvaluator);
    
            // Copy contextual primary key values
            target.ExternalEvaluator = source.ExternalEvaluator;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentProgramEvaluationStudentEvaluationElementMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramEvaluationStudentEvaluationElement = new FullName("edfi", "StudentProgramEvaluationStudentEvaluationElement");
    
        public static bool SynchronizeTo(this IStudentProgramEvaluationStudentEvaluationElement source, IStudentProgramEvaluationStudentEvaluationElement target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramEvaluationStudentEvaluationElementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluationStudentEvaluationElement);


            // Copy non-PK properties

            if ((mappingContract?.IsEvaluationElementNumericRatingSupported != false)
                && target.EvaluationElementNumericRating != source.EvaluationElementNumericRating)
            {
                target.EvaluationElementNumericRating = source.EvaluationElementNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationElementRatingLevelDescriptorSupported != false)
                && target.EvaluationElementRatingLevelDescriptor != source.EvaluationElementRatingLevelDescriptor)
            {
                target.EvaluationElementRatingLevelDescriptor = source.EvaluationElementRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentProgramEvaluationStudentEvaluationElement source, IStudentProgramEvaluationStudentEvaluationElement target, Action<IStudentProgramEvaluationStudentEvaluationElement, IStudentProgramEvaluationStudentEvaluationElement> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramEvaluationStudentEvaluationElementMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluationStudentEvaluationElement);
    
            // Copy contextual primary key values
            target.ProgramEvaluationElementTitle = source.ProgramEvaluationElementTitle;

            // Copy non-PK properties

            if (mappingContract?.IsEvaluationElementNumericRatingSupported != false)
                target.EvaluationElementNumericRating = source.EvaluationElementNumericRating;

            if (mappingContract?.IsEvaluationElementRatingLevelDescriptorSupported != false)
                target.EvaluationElementRatingLevelDescriptor = source.EvaluationElementRatingLevelDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramEvaluationElementResourceId = source.ProgramEvaluationElementResourceId;
                target.ProgramEvaluationElementDiscriminator = source.ProgramEvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentProgramEvaluationStudentEvaluationObjectiveMapper
    {
        private static readonly FullName _fullName_edfi_StudentProgramEvaluationStudentEvaluationObjective = new FullName("edfi", "StudentProgramEvaluationStudentEvaluationObjective");
    
        public static bool SynchronizeTo(this IStudentProgramEvaluationStudentEvaluationObjective source, IStudentProgramEvaluationStudentEvaluationObjective target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentProgramEvaluationStudentEvaluationObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluationStudentEvaluationObjective);


            // Copy non-PK properties

            if ((mappingContract?.IsEvaluationObjectiveNumericRatingSupported != false)
                && target.EvaluationObjectiveNumericRating != source.EvaluationObjectiveNumericRating)
            {
                target.EvaluationObjectiveNumericRating = source.EvaluationObjectiveNumericRating;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationObjectiveRatingLevelDescriptorSupported != false)
                && target.EvaluationObjectiveRatingLevelDescriptor != source.EvaluationObjectiveRatingLevelDescriptor)
            {
                target.EvaluationObjectiveRatingLevelDescriptor = source.EvaluationObjectiveRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentProgramEvaluationStudentEvaluationObjective source, IStudentProgramEvaluationStudentEvaluationObjective target, Action<IStudentProgramEvaluationStudentEvaluationObjective, IStudentProgramEvaluationStudentEvaluationObjective> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentProgramEvaluationStudentEvaluationObjectiveMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentProgramEvaluationStudentEvaluationObjective);
    
            // Copy contextual primary key values
            target.ProgramEvaluationObjectiveTitle = source.ProgramEvaluationObjectiveTitle;

            // Copy non-PK properties

            if (mappingContract?.IsEvaluationObjectiveNumericRatingSupported != false)
                target.EvaluationObjectiveNumericRating = source.EvaluationObjectiveNumericRating;

            if (mappingContract?.IsEvaluationObjectiveRatingLevelDescriptorSupported != false)
                target.EvaluationObjectiveRatingLevelDescriptor = source.EvaluationObjectiveRatingLevelDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramEvaluationObjectiveResourceId = source.ProgramEvaluationObjectiveResourceId;
                target.ProgramEvaluationObjectiveDiscriminator = source.ProgramEvaluationObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSchoolAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSchoolAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentSchoolAssociation = new FullName("edfi", "StudentSchoolAssociation");
    
        public static bool SynchronizeTo(this IStudentSchoolAssociation source, IStudentSchoolAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSchoolAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAssociation);

            // Detect primary key changes
            if (
                 (target.EntryDate != source.EntryDate)
                || (target.SchoolId != source.SchoolId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Allow PK column updates on StudentSchoolAssociation
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.EntryDate != target.EntryDate)
                {
                    source.EntryDate = target.EntryDate;
                }
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
                if (source.StudentUniqueId != target.StudentUniqueId)
                {
                    source.StudentUniqueId = target.StudentUniqueId;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCalendarCodeSupported != false)
                && target.CalendarCode != source.CalendarCode)
            {
                target.CalendarCode = source.CalendarCode;
                isModified = true;
            }

            if ((mappingContract?.IsClassOfSchoolYearSupported != false)
                && target.ClassOfSchoolYear != source.ClassOfSchoolYear)
            {
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsEducationOrganizationIdSupported != false)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsEmployedWhileEnrolledSupported != false)
                && target.EmployedWhileEnrolled != source.EmployedWhileEnrolled)
            {
                target.EmployedWhileEnrolled = source.EmployedWhileEnrolled;
                isModified = true;
            }

            if ((mappingContract?.IsEnrollmentTypeDescriptorSupported != false)
                && target.EnrollmentTypeDescriptor != source.EnrollmentTypeDescriptor)
            {
                target.EnrollmentTypeDescriptor = source.EnrollmentTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEntryGradeLevelDescriptorSupported != false)
                && target.EntryGradeLevelDescriptor != source.EntryGradeLevelDescriptor)
            {
                target.EntryGradeLevelDescriptor = source.EntryGradeLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEntryGradeLevelReasonDescriptorSupported != false)
                && target.EntryGradeLevelReasonDescriptor != source.EntryGradeLevelReasonDescriptor)
            {
                target.EntryGradeLevelReasonDescriptor = source.EntryGradeLevelReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEntryTypeDescriptorSupported != false)
                && target.EntryTypeDescriptor != source.EntryTypeDescriptor)
            {
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsExitWithdrawDateSupported != false)
                && target.ExitWithdrawDate != source.ExitWithdrawDate)
            {
                target.ExitWithdrawDate = source.ExitWithdrawDate;
                isModified = true;
            }

            if ((mappingContract?.IsExitWithdrawTypeDescriptorSupported != false)
                && target.ExitWithdrawTypeDescriptor != source.ExitWithdrawTypeDescriptor)
            {
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsFullTimeEquivalencySupported != false)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((mappingContract?.IsGraduationPlanTypeDescriptorSupported != false)
                && target.GraduationPlanTypeDescriptor != source.GraduationPlanTypeDescriptor)
            {
                target.GraduationPlanTypeDescriptor = source.GraduationPlanTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsGraduationSchoolYearSupported != false)
                && target.GraduationSchoolYear != source.GraduationSchoolYear)
            {
                target.GraduationSchoolYear = source.GraduationSchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsNextYearGradeLevelDescriptorSupported != false)
                && target.NextYearGradeLevelDescriptor != source.NextYearGradeLevelDescriptor)
            {
                target.NextYearGradeLevelDescriptor = source.NextYearGradeLevelDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsNextYearSchoolIdSupported != false)
                && target.NextYearSchoolId != source.NextYearSchoolId)
            {
                target.NextYearSchoolId = source.NextYearSchoolId;
                isModified = true;
            }

            if ((mappingContract?.IsPrimarySchoolSupported != false)
                && target.PrimarySchool != source.PrimarySchool)
            {
                target.PrimarySchool = source.PrimarySchool;
                isModified = true;
            }

            if ((mappingContract?.IsRepeatGradeIndicatorSupported != false)
                && target.RepeatGradeIndicator != source.RepeatGradeIndicator)
            {
                target.RepeatGradeIndicator = source.RepeatGradeIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsResidencyStatusDescriptorSupported != false)
                && target.ResidencyStatusDescriptor != source.ResidencyStatusDescriptor)
            {
                target.ResidencyStatusDescriptor = source.ResidencyStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolChoiceSupported != false)
                && target.SchoolChoice != source.SchoolChoice)
            {
                target.SchoolChoice = source.SchoolChoice;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolChoiceBasisDescriptorSupported != false)
                && target.SchoolChoiceBasisDescriptor != source.SchoolChoiceBasisDescriptor)
            {
                target.SchoolChoiceBasisDescriptor = source.SchoolChoiceBasisDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolChoiceTransferSupported != false)
                && target.SchoolChoiceTransfer != source.SchoolChoiceTransfer)
            {
                target.SchoolChoiceTransfer = source.SchoolChoiceTransfer;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolYearSupported != false)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsTermCompletionIndicatorSupported != false)
                && target.TermCompletionIndicator != source.TermCompletionIndicator)
            {
                target.TermCompletionIndicator = source.TermCompletionIndicator;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentSchoolAssociationAlternativeGraduationPlansSupported ?? true)
            {
                isModified |=
                    source.StudentSchoolAssociationAlternativeGraduationPlans.SynchronizeCollectionTo(
                        target.StudentSchoolAssociationAlternativeGraduationPlans,
                        onChildAdded: child =>
                            {
                                child.StudentSchoolAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSchoolAssociationAlternativeGraduationPlanIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentSchoolAssociationEducationPlansSupported ?? true)
            {
                isModified |=
                    source.StudentSchoolAssociationEducationPlans.SynchronizeCollectionTo(
                        target.StudentSchoolAssociationEducationPlans,
                        onChildAdded: child =>
                            {
                                child.StudentSchoolAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSchoolAssociationEducationPlanIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSchoolAssociation source, IStudentSchoolAssociation target, Action<IStudentSchoolAssociation, IStudentSchoolAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSchoolAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryDate = source.EntryDate;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsCalendarCodeSupported != false)
                target.CalendarCode = source.CalendarCode;

            if (mappingContract?.IsClassOfSchoolYearSupported != false)
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;

            if (mappingContract?.IsEducationOrganizationIdSupported != false)
                target.EducationOrganizationId = source.EducationOrganizationId;

            if (mappingContract?.IsEmployedWhileEnrolledSupported != false)
                target.EmployedWhileEnrolled = source.EmployedWhileEnrolled;

            if (mappingContract?.IsEnrollmentTypeDescriptorSupported != false)
                target.EnrollmentTypeDescriptor = source.EnrollmentTypeDescriptor;

            if (mappingContract?.IsEntryGradeLevelDescriptorSupported != false)
                target.EntryGradeLevelDescriptor = source.EntryGradeLevelDescriptor;

            if (mappingContract?.IsEntryGradeLevelReasonDescriptorSupported != false)
                target.EntryGradeLevelReasonDescriptor = source.EntryGradeLevelReasonDescriptor;

            if (mappingContract?.IsEntryTypeDescriptorSupported != false)
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;

            if (mappingContract?.IsExitWithdrawDateSupported != false)
                target.ExitWithdrawDate = source.ExitWithdrawDate;

            if (mappingContract?.IsExitWithdrawTypeDescriptorSupported != false)
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;

            if (mappingContract?.IsFullTimeEquivalencySupported != false)
                target.FullTimeEquivalency = source.FullTimeEquivalency;

            if (mappingContract?.IsGraduationPlanTypeDescriptorSupported != false)
                target.GraduationPlanTypeDescriptor = source.GraduationPlanTypeDescriptor;

            if (mappingContract?.IsGraduationSchoolYearSupported != false)
                target.GraduationSchoolYear = source.GraduationSchoolYear;

            if (mappingContract?.IsNextYearGradeLevelDescriptorSupported != false)
                target.NextYearGradeLevelDescriptor = source.NextYearGradeLevelDescriptor;

            if (mappingContract?.IsNextYearSchoolIdSupported != false)
                target.NextYearSchoolId = source.NextYearSchoolId;

            if (mappingContract?.IsPrimarySchoolSupported != false)
                target.PrimarySchool = source.PrimarySchool;

            if (mappingContract?.IsRepeatGradeIndicatorSupported != false)
                target.RepeatGradeIndicator = source.RepeatGradeIndicator;

            if (mappingContract?.IsResidencyStatusDescriptorSupported != false)
                target.ResidencyStatusDescriptor = source.ResidencyStatusDescriptor;

            if (mappingContract?.IsSchoolChoiceSupported != false)
                target.SchoolChoice = source.SchoolChoice;

            if (mappingContract?.IsSchoolChoiceBasisDescriptorSupported != false)
                target.SchoolChoiceBasisDescriptor = source.SchoolChoiceBasisDescriptor;

            if (mappingContract?.IsSchoolChoiceTransferSupported != false)
                target.SchoolChoiceTransfer = source.SchoolChoiceTransfer;

            if (mappingContract?.IsSchoolYearSupported != false)
                target.SchoolYear = source.SchoolYear;

            if (mappingContract?.IsTermCompletionIndicatorSupported != false)
                target.TermCompletionIndicator = source.TermCompletionIndicator;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarResourceId = source.CalendarResourceId;
                target.CalendarDiscriminator = source.CalendarDiscriminator;
                target.ClassOfSchoolYearTypeResourceId = source.ClassOfSchoolYearTypeResourceId;
                target.GraduationPlanResourceId = source.GraduationPlanResourceId;
                target.GraduationPlanDiscriminator = source.GraduationPlanDiscriminator;
                target.NextYearSchoolResourceId = source.NextYearSchoolResourceId;
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentSchoolAssociationAlternativeGraduationPlansSupported != false)
            {
                source.StudentSchoolAssociationAlternativeGraduationPlans.MapCollectionTo(target.StudentSchoolAssociationAlternativeGraduationPlans, target, mappingContract?.IsStudentSchoolAssociationAlternativeGraduationPlanIncluded);
            }

            if (mappingContract?.IsStudentSchoolAssociationEducationPlansSupported != false)
            {
                source.StudentSchoolAssociationEducationPlans.MapCollectionTo(target.StudentSchoolAssociationEducationPlans, target, mappingContract?.IsStudentSchoolAssociationEducationPlanIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAssociationAlternativeGraduationPlanMapper
    {
        private static readonly FullName _fullName_edfi_StudentSchoolAssociationAlternativeGraduationPlan = new FullName("edfi", "StudentSchoolAssociationAlternativeGraduationPlan");
    
        public static bool SynchronizeTo(this IStudentSchoolAssociationAlternativeGraduationPlan source, IStudentSchoolAssociationAlternativeGraduationPlan target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSchoolAssociationAlternativeGraduationPlanMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAssociationAlternativeGraduationPlan);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSchoolAssociationAlternativeGraduationPlan source, IStudentSchoolAssociationAlternativeGraduationPlan target, Action<IStudentSchoolAssociationAlternativeGraduationPlan, IStudentSchoolAssociationAlternativeGraduationPlan> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSchoolAssociationAlternativeGraduationPlanMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAssociationAlternativeGraduationPlan);
    
            // Copy contextual primary key values
            target.AlternativeEducationOrganizationId = source.AlternativeEducationOrganizationId;
            target.AlternativeGraduationPlanTypeDescriptor = source.AlternativeGraduationPlanTypeDescriptor;
            target.AlternativeGraduationSchoolYear = source.AlternativeGraduationSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AlternativeGraduationPlanResourceId = source.AlternativeGraduationPlanResourceId;
                target.AlternativeGraduationPlanDiscriminator = source.AlternativeGraduationPlanDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAssociationEducationPlanMapper
    {
        private static readonly FullName _fullName_edfi_StudentSchoolAssociationEducationPlan = new FullName("edfi", "StudentSchoolAssociationEducationPlan");
    
        public static bool SynchronizeTo(this IStudentSchoolAssociationEducationPlan source, IStudentSchoolAssociationEducationPlan target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSchoolAssociationEducationPlanMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAssociationEducationPlan);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSchoolAssociationEducationPlan source, IStudentSchoolAssociationEducationPlan target, Action<IStudentSchoolAssociationEducationPlan, IStudentSchoolAssociationEducationPlan> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSchoolAssociationEducationPlanMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAssociationEducationPlan);
    
            // Copy contextual primary key values
            target.EducationPlanDescriptor = source.EducationPlanDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSchoolAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSchoolAttendanceEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAttendanceEventMapper
    {
        private static readonly FullName _fullName_edfi_StudentSchoolAttendanceEvent = new FullName("edfi", "StudentSchoolAttendanceEvent");
    
        public static bool SynchronizeTo(this IStudentSchoolAttendanceEvent source, IStudentSchoolAttendanceEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSchoolAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAttendanceEvent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.AttendanceEventCategoryDescriptor, source.AttendanceEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.EventDate != source.EventDate)
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentSchoolAttendanceEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsArrivalTimeSupported != false)
                && target.ArrivalTime != source.ArrivalTime)
            {
                target.ArrivalTime = source.ArrivalTime;
                isModified = true;
            }

            if ((mappingContract?.IsAttendanceEventReasonSupported != false)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((mappingContract?.IsDepartureTimeSupported != false)
                && target.DepartureTime != source.DepartureTime)
            {
                target.DepartureTime = source.DepartureTime;
                isModified = true;
            }

            if ((mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEventDurationSupported != false)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolAttendanceDurationSupported != false)
                && target.SchoolAttendanceDuration != source.SchoolAttendanceDuration)
            {
                target.SchoolAttendanceDuration = source.SchoolAttendanceDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSchoolAttendanceEvent source, IStudentSchoolAttendanceEvent target, Action<IStudentSchoolAttendanceEvent, IStudentSchoolAttendanceEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSchoolAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolAttendanceEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsArrivalTimeSupported != false)
                target.ArrivalTime = source.ArrivalTime;

            if (mappingContract?.IsAttendanceEventReasonSupported != false)
                target.AttendanceEventReason = source.AttendanceEventReason;

            if (mappingContract?.IsDepartureTimeSupported != false)
                target.DepartureTime = source.DepartureTime;

            if (mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;

            if (mappingContract?.IsEventDurationSupported != false)
                target.EventDuration = source.EventDuration;

            if (mappingContract?.IsSchoolAttendanceDurationSupported != false)
                target.SchoolAttendanceDuration = source.SchoolAttendanceDuration;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SessionResourceId = source.SessionResourceId;
                target.SessionDiscriminator = source.SessionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSchoolFoodServiceProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSchoolFoodServiceProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolFoodServiceProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentSchoolFoodServiceProgramAssociation = new FullName("edfi", "StudentSchoolFoodServiceProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentSchoolFoodServiceProgramAssociation source, IStudentSchoolFoodServiceProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSchoolFoodServiceProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolFoodServiceProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentSchoolFoodServiceProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsDirectCertificationSupported != false)
                && target.DirectCertification != source.DirectCertification)
            {
                target.DirectCertification = source.DirectCertification;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices.SynchronizeCollectionTo(
                        target.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentSchoolFoodServiceProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentSchoolFoodServiceProgramAssociation source, IStudentSchoolFoodServiceProgramAssociation target, Action<IStudentSchoolFoodServiceProgramAssociation, IStudentSchoolFoodServiceProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSchoolFoodServiceProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolFoodServiceProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsDirectCertificationSupported != false)
                target.DirectCertification = source.DirectCertification;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported != false)
            {
                source.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices.MapCollectionTo(target.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices, target, mappingContract?.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService = new FullName("edfi", "StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService");
    
        public static bool SynchronizeTo(this IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService source, IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService source, IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService target, Action<IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService, IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService);
    
            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptor = source.SchoolFoodServiceProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSectionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSectionAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSectionAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentSectionAssociation = new FullName("edfi", "StudentSectionAssociation");
    
        public static bool SynchronizeTo(this IStudentSectionAssociation source, IStudentSectionAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Allow PK column updates on StudentSectionAssociation
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }

                // Copy the persistent entity's PK values to the transient source entity (we'll handle key updates later)
                if (source.BeginDate != target.BeginDate)
                {
                    source.BeginDate = target.BeginDate;
                }
                if (source.LocalCourseCode != target.LocalCourseCode)
                {
                    source.LocalCourseCode = target.LocalCourseCode;
                }
                if (source.SchoolId != target.SchoolId)
                {
                    source.SchoolId = target.SchoolId;
                }
                if (source.SchoolYear != target.SchoolYear)
                {
                    source.SchoolYear = target.SchoolYear;
                }
                if (source.SectionIdentifier != target.SectionIdentifier)
                {
                    source.SectionIdentifier = target.SectionIdentifier;
                }
                if (source.SessionName != target.SessionName)
                {
                    source.SessionName = target.SessionName;
                }
                if (source.StudentUniqueId != target.StudentUniqueId)
                {
                    source.StudentUniqueId = target.StudentUniqueId;
                }
            }


            // Copy non-PK properties

            if ((mappingContract?.IsAttemptStatusDescriptorSupported != false)
                && target.AttemptStatusDescriptor != source.AttemptStatusDescriptor)
            {
                target.AttemptStatusDescriptor = source.AttemptStatusDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsHomeroomIndicatorSupported != false)
                && target.HomeroomIndicator != source.HomeroomIndicator)
            {
                target.HomeroomIndicator = source.HomeroomIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsRepeatIdentifierDescriptorSupported != false)
                && target.RepeatIdentifierDescriptor != source.RepeatIdentifierDescriptor)
            {
                target.RepeatIdentifierDescriptor = source.RepeatIdentifierDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsTeacherStudentDataLinkExclusionSupported != false)
                && target.TeacherStudentDataLinkExclusion != source.TeacherStudentDataLinkExclusion)
            {
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentSectionAssociationProgramsSupported ?? true)
            {
                isModified |=
                    source.StudentSectionAssociationPrograms.SynchronizeCollectionTo(
                        target.StudentSectionAssociationPrograms,
                        onChildAdded: child =>
                            {
                                child.StudentSectionAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSectionAssociationProgramIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSectionAssociation source, IStudentSectionAssociation target, Action<IStudentSectionAssociation, IStudentSectionAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsAttemptStatusDescriptorSupported != false)
                target.AttemptStatusDescriptor = source.AttemptStatusDescriptor;

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsHomeroomIndicatorSupported != false)
                target.HomeroomIndicator = source.HomeroomIndicator;

            if (mappingContract?.IsRepeatIdentifierDescriptorSupported != false)
                target.RepeatIdentifierDescriptor = source.RepeatIdentifierDescriptor;

            if (mappingContract?.IsTeacherStudentDataLinkExclusionSupported != false)
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentSectionAssociationProgramsSupported != false)
            {
                source.StudentSectionAssociationPrograms.MapCollectionTo(target.StudentSectionAssociationPrograms, target, mappingContract?.IsStudentSectionAssociationProgramIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSectionAssociationProgramMapper
    {
        private static readonly FullName _fullName_edfi_StudentSectionAssociationProgram = new FullName("edfi", "StudentSectionAssociationProgram");
    
        public static bool SynchronizeTo(this IStudentSectionAssociationProgram source, IStudentSectionAssociationProgram target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSectionAssociationProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAssociationProgram);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSectionAssociationProgram source, IStudentSectionAssociationProgram target, Action<IStudentSectionAssociationProgram, IStudentSectionAssociationProgram> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSectionAssociationProgramMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAssociationProgram);
    
            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSectionAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSectionAttendanceEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSectionAttendanceEventMapper
    {
        private static readonly FullName _fullName_edfi_StudentSectionAttendanceEvent = new FullName("edfi", "StudentSectionAttendanceEvent");
    
        public static bool SynchronizeTo(this IStudentSectionAttendanceEvent source, IStudentSectionAttendanceEvent target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSectionAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAttendanceEvent);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 !string.Equals(target.AttendanceEventCategoryDescriptor, source.AttendanceEventCategoryDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.EventDate != source.EventDate)
                || (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName))
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentSectionAttendanceEvent
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsArrivalTimeSupported != false)
                && target.ArrivalTime != source.ArrivalTime)
            {
                target.ArrivalTime = source.ArrivalTime;
                isModified = true;
            }

            if ((mappingContract?.IsAttendanceEventReasonSupported != false)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((mappingContract?.IsDepartureTimeSupported != false)
                && target.DepartureTime != source.DepartureTime)
            {
                target.DepartureTime = source.DepartureTime;
                isModified = true;
            }

            if ((mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEventDurationSupported != false)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((mappingContract?.IsSectionAttendanceDurationSupported != false)
                && target.SectionAttendanceDuration != source.SectionAttendanceDuration)
            {
                target.SectionAttendanceDuration = source.SectionAttendanceDuration;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentSectionAttendanceEventClassPeriodsSupported ?? true)
            {
                isModified |=
                    source.StudentSectionAttendanceEventClassPeriods.SynchronizeCollectionTo(
                        target.StudentSectionAttendanceEventClassPeriods,
                        onChildAdded: child =>
                            {
                                child.StudentSectionAttendanceEvent = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSectionAttendanceEventClassPeriodIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSectionAttendanceEvent source, IStudentSectionAttendanceEvent target, Action<IStudentSectionAttendanceEvent, IStudentSectionAttendanceEvent> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSectionAttendanceEventMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAttendanceEvent);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsArrivalTimeSupported != false)
                target.ArrivalTime = source.ArrivalTime;

            if (mappingContract?.IsAttendanceEventReasonSupported != false)
                target.AttendanceEventReason = source.AttendanceEventReason;

            if (mappingContract?.IsDepartureTimeSupported != false)
                target.DepartureTime = source.DepartureTime;

            if (mappingContract?.IsEducationalEnvironmentDescriptorSupported != false)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;

            if (mappingContract?.IsEventDurationSupported != false)
                target.EventDuration = source.EventDuration;

            if (mappingContract?.IsSectionAttendanceDurationSupported != false)
                target.SectionAttendanceDuration = source.SectionAttendanceDuration;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentSectionAttendanceEventClassPeriodsSupported != false)
            {
                source.StudentSectionAttendanceEventClassPeriods.MapCollectionTo(target.StudentSectionAttendanceEventClassPeriods, target, mappingContract?.IsStudentSectionAttendanceEventClassPeriodIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSectionAttendanceEventClassPeriodMapper
    {
        private static readonly FullName _fullName_edfi_StudentSectionAttendanceEventClassPeriod = new FullName("edfi", "StudentSectionAttendanceEventClassPeriod");
    
        public static bool SynchronizeTo(this IStudentSectionAttendanceEventClassPeriod source, IStudentSectionAttendanceEventClassPeriod target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSectionAttendanceEventClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAttendanceEventClassPeriod);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSectionAttendanceEventClassPeriod source, IStudentSectionAttendanceEventClassPeriod target, Action<IStudentSectionAttendanceEventClassPeriod, IStudentSectionAttendanceEventClassPeriod> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSectionAttendanceEventClassPeriodMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSectionAttendanceEventClassPeriod);
    
            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassPeriodResourceId = source.ClassPeriodResourceId;
                target.ClassPeriodDiscriminator = source.ClassPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSpecialEducationProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSpecialEducationProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramAssociation = new FullName("edfi", "StudentSpecialEducationProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociation source, IStudentSpecialEducationProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentSpecialEducationProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsIdeaEligibilitySupported != false)
                && target.IdeaEligibility != source.IdeaEligibility)
            {
                target.IdeaEligibility = source.IdeaEligibility;
                isModified = true;
            }

            if ((mappingContract?.IsIEPBeginDateSupported != false)
                && target.IEPBeginDate != source.IEPBeginDate)
            {
                target.IEPBeginDate = source.IEPBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsIEPEndDateSupported != false)
                && target.IEPEndDate != source.IEPEndDate)
            {
                target.IEPEndDate = source.IEPEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsIEPReviewDateSupported != false)
                && target.IEPReviewDate != source.IEPReviewDate)
            {
                target.IEPReviewDate = source.IEPReviewDate;
                isModified = true;
            }

            if ((mappingContract?.IsLastEvaluationDateSupported != false)
                && target.LastEvaluationDate != source.LastEvaluationDate)
            {
                target.LastEvaluationDate = source.LastEvaluationDate;
                isModified = true;
            }

            if ((mappingContract?.IsMedicallyFragileSupported != false)
                && target.MedicallyFragile != source.MedicallyFragile)
            {
                target.MedicallyFragile = source.MedicallyFragile;
                isModified = true;
            }

            if ((mappingContract?.IsMultiplyDisabledSupported != false)
                && target.MultiplyDisabled != source.MultiplyDisabled)
            {
                target.MultiplyDisabled = source.MultiplyDisabled;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolHoursPerWeekSupported != false)
                && target.SchoolHoursPerWeek != source.SchoolHoursPerWeek)
            {
                target.SchoolHoursPerWeek = source.SchoolHoursPerWeek;
                isModified = true;
            }

            if ((mappingContract?.IsSpecialEducationExitDateSupported != false)
                && target.SpecialEducationExitDate != source.SpecialEducationExitDate)
            {
                target.SpecialEducationExitDate = source.SpecialEducationExitDate;
                isModified = true;
            }

            if ((mappingContract?.IsSpecialEducationExitExplainedSupported != false)
                && target.SpecialEducationExitExplained != source.SpecialEducationExitExplained)
            {
                target.SpecialEducationExitExplained = source.SpecialEducationExitExplained;
                isModified = true;
            }

            if ((mappingContract?.IsSpecialEducationExitReasonDescriptorSupported != false)
                && target.SpecialEducationExitReasonDescriptor != source.SpecialEducationExitReasonDescriptor)
            {
                target.SpecialEducationExitReasonDescriptor = source.SpecialEducationExitReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSpecialEducationHoursPerWeekSupported != false)
                && target.SpecialEducationHoursPerWeek != source.SpecialEducationHoursPerWeek)
            {
                target.SpecialEducationHoursPerWeek = source.SpecialEducationHoursPerWeek;
                isModified = true;
            }

            if ((mappingContract?.IsSpecialEducationSettingDescriptorSupported != false)
                && target.SpecialEducationSettingDescriptor != source.SpecialEducationSettingDescriptor)
            {
                target.SpecialEducationSettingDescriptor = source.SpecialEducationSettingDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilitiesSupported ?? true)
            {
                isModified |=
                    source.StudentSpecialEducationProgramAssociationDisabilities.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationDisabilities,
                        onChildAdded: child =>
                            {
                                child.StudentSpecialEducationProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilityIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationServiceProvidersSupported ?? true)
            {
                isModified |=
                    source.StudentSpecialEducationProgramAssociationServiceProviders.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationServiceProviders,
                        onChildAdded: child =>
                            {
                                child.StudentSpecialEducationProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSpecialEducationProgramAssociationServiceProviderIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentSpecialEducationProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentSpecialEducationProgramAssociation source, IStudentSpecialEducationProgramAssociation target, Action<IStudentSpecialEducationProgramAssociation, IStudentSpecialEducationProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsIdeaEligibilitySupported != false)
                target.IdeaEligibility = source.IdeaEligibility;

            if (mappingContract?.IsIEPBeginDateSupported != false)
                target.IEPBeginDate = source.IEPBeginDate;

            if (mappingContract?.IsIEPEndDateSupported != false)
                target.IEPEndDate = source.IEPEndDate;

            if (mappingContract?.IsIEPReviewDateSupported != false)
                target.IEPReviewDate = source.IEPReviewDate;

            if (mappingContract?.IsLastEvaluationDateSupported != false)
                target.LastEvaluationDate = source.LastEvaluationDate;

            if (mappingContract?.IsMedicallyFragileSupported != false)
                target.MedicallyFragile = source.MedicallyFragile;

            if (mappingContract?.IsMultiplyDisabledSupported != false)
                target.MultiplyDisabled = source.MultiplyDisabled;

            if (mappingContract?.IsSchoolHoursPerWeekSupported != false)
                target.SchoolHoursPerWeek = source.SchoolHoursPerWeek;

            if (mappingContract?.IsSpecialEducationExitDateSupported != false)
                target.SpecialEducationExitDate = source.SpecialEducationExitDate;

            if (mappingContract?.IsSpecialEducationExitExplainedSupported != false)
                target.SpecialEducationExitExplained = source.SpecialEducationExitExplained;

            if (mappingContract?.IsSpecialEducationExitReasonDescriptorSupported != false)
                target.SpecialEducationExitReasonDescriptor = source.SpecialEducationExitReasonDescriptor;

            if (mappingContract?.IsSpecialEducationHoursPerWeekSupported != false)
                target.SpecialEducationHoursPerWeek = source.SpecialEducationHoursPerWeek;

            if (mappingContract?.IsSpecialEducationSettingDescriptorSupported != false)
                target.SpecialEducationSettingDescriptor = source.SpecialEducationSettingDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilitiesSupported != false)
            {
                source.StudentSpecialEducationProgramAssociationDisabilities.MapCollectionTo(target.StudentSpecialEducationProgramAssociationDisabilities, target, mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilityIncluded);
            }

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationServiceProvidersSupported != false)
            {
                source.StudentSpecialEducationProgramAssociationServiceProviders.MapCollectionTo(target.StudentSpecialEducationProgramAssociationServiceProviders, target, mappingContract?.IsStudentSpecialEducationProgramAssociationServiceProviderIncluded);
            }

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported != false)
            {
                source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices.MapCollectionTo(target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices, target, mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationDisabilityMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramAssociationDisability = new FullName("edfi", "StudentSpecialEducationProgramAssociationDisability");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationDisability source, IStudentSpecialEducationProgramAssociationDisability target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramAssociationDisabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationDisability);


            // Copy non-PK properties

            if ((mappingContract?.IsDisabilityDeterminationSourceTypeDescriptorSupported != false)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsDisabilityDiagnosisSupported != false)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((mappingContract?.IsOrderOfDisabilitySupported != false)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported ?? true)
            {
                isModified |=
                    source.StudentSpecialEducationProgramAssociationDisabilityDesignations.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationDisabilityDesignations,
                        onChildAdded: child =>
                            {
                                child.StudentSpecialEducationProgramAssociationDisability = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSpecialEducationProgramAssociationDisability source, IStudentSpecialEducationProgramAssociationDisability target, Action<IStudentSpecialEducationProgramAssociationDisability, IStudentSpecialEducationProgramAssociationDisability> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramAssociationDisabilityMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationDisability);
    
            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsDisabilityDeterminationSourceTypeDescriptorSupported != false)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;

            if (mappingContract?.IsDisabilityDiagnosisSupported != false)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;

            if (mappingContract?.IsOrderOfDisabilitySupported != false)
                target.OrderOfDisability = source.OrderOfDisability;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported != false)
            {
                source.StudentSpecialEducationProgramAssociationDisabilityDesignations.MapCollectionTo(target.StudentSpecialEducationProgramAssociationDisabilityDesignations, target, mappingContract?.IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationDisabilityDesignationMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramAssociationDisabilityDesignation = new FullName("edfi", "StudentSpecialEducationProgramAssociationDisabilityDesignation");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationDisabilityDesignation source, IStudentSpecialEducationProgramAssociationDisabilityDesignation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramAssociationDisabilityDesignationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationDisabilityDesignation);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSpecialEducationProgramAssociationDisabilityDesignation source, IStudentSpecialEducationProgramAssociationDisabilityDesignation target, Action<IStudentSpecialEducationProgramAssociationDisabilityDesignation, IStudentSpecialEducationProgramAssociationDisabilityDesignation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramAssociationDisabilityDesignationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationDisabilityDesignation);
    
            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationServiceProviderMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramAssociationServiceProvider = new FullName("edfi", "StudentSpecialEducationProgramAssociationServiceProvider");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationServiceProvider source, IStudentSpecialEducationProgramAssociationServiceProvider target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramAssociationServiceProviderMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationServiceProvider);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryProviderSupported != false)
                && target.PrimaryProvider != source.PrimaryProvider)
            {
                target.PrimaryProvider = source.PrimaryProvider;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSpecialEducationProgramAssociationServiceProvider source, IStudentSpecialEducationProgramAssociationServiceProvider target, Action<IStudentSpecialEducationProgramAssociationServiceProvider, IStudentSpecialEducationProgramAssociationServiceProvider> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramAssociationServiceProviderMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationServiceProvider);
    
            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryProviderSupported != false)
                target.PrimaryProvider = source.PrimaryProvider;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramAssociationSpecialEducationProgramService = new FullName("edfi", "StudentSpecialEducationProgramAssociationSpecialEducationProgramService");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramService source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationSpecialEducationProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported ?? true)
            {
                isModified |=
                    source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders,
                        onChildAdded: child =>
                            {
                                child.StudentSpecialEducationProgramAssociationSpecialEducationProgramService = target;
                            },
                        includeItem: item => mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramService source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramService target, Action<IStudentSpecialEducationProgramAssociationSpecialEducationProgramService, IStudentSpecialEducationProgramAssociationSpecialEducationProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationSpecialEducationProgramService);
    
            // Copy contextual primary key values
            target.SpecialEducationProgramServiceDescriptor = source.SpecialEducationProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported != false)
            {
                source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders.MapCollectionTo(target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders, target, mappingContract?.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider = new FullName("edfi", "StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryProviderSupported != false)
                && target.PrimaryProvider != source.PrimaryProvider)
            {
                target.PrimaryProvider = source.PrimaryProvider;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider target, Action<IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider, IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider);
    
            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryProviderSupported != false)
                target.PrimaryProvider = source.PrimaryProvider;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentSpecialEducationProgramEligibilityAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSpecialEducationProgramEligibilityAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramEligibilityAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentSpecialEducationProgramEligibilityAssociation = new FullName("edfi", "StudentSpecialEducationProgramEligibilityAssociation");
    
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramEligibilityAssociation source, IStudentSpecialEducationProgramEligibilityAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentSpecialEducationProgramEligibilityAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramEligibilityAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.ConsentToEvaluationReceivedDate != source.ConsentToEvaluationReceivedDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentSpecialEducationProgramEligibilityAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsConsentToEvaluationDateSupported != false)
                && target.ConsentToEvaluationDate != source.ConsentToEvaluationDate)
            {
                target.ConsentToEvaluationDate = source.ConsentToEvaluationDate;
                isModified = true;
            }

            if ((mappingContract?.IsEligibilityConferenceDateSupported != false)
                && target.EligibilityConferenceDate != source.EligibilityConferenceDate)
            {
                target.EligibilityConferenceDate = source.EligibilityConferenceDate;
                isModified = true;
            }

            if ((mappingContract?.IsEligibilityDelayReasonDescriptorSupported != false)
                && target.EligibilityDelayReasonDescriptor != source.EligibilityDelayReasonDescriptor)
            {
                target.EligibilityDelayReasonDescriptor = source.EligibilityDelayReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEligibilityDeterminationDateSupported != false)
                && target.EligibilityDeterminationDate != source.EligibilityDeterminationDate)
            {
                target.EligibilityDeterminationDate = source.EligibilityDeterminationDate;
                isModified = true;
            }

            if ((mappingContract?.IsEligibilityEvaluationDateSupported != false)
                && target.EligibilityEvaluationDate != source.EligibilityEvaluationDate)
            {
                target.EligibilityEvaluationDate = source.EligibilityEvaluationDate;
                isModified = true;
            }

            if ((mappingContract?.IsEligibilityEvaluationTypeDescriptorSupported != false)
                && target.EligibilityEvaluationTypeDescriptor != source.EligibilityEvaluationTypeDescriptor)
            {
                target.EligibilityEvaluationTypeDescriptor = source.EligibilityEvaluationTypeDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationCompleteIndicatorSupported != false)
                && target.EvaluationCompleteIndicator != source.EvaluationCompleteIndicator)
            {
                target.EvaluationCompleteIndicator = source.EvaluationCompleteIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationDelayDaysSupported != false)
                && target.EvaluationDelayDays != source.EvaluationDelayDays)
            {
                target.EvaluationDelayDays = source.EvaluationDelayDays;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationDelayReasonDescriptorSupported != false)
                && target.EvaluationDelayReasonDescriptor != source.EvaluationDelayReasonDescriptor)
            {
                target.EvaluationDelayReasonDescriptor = source.EvaluationDelayReasonDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsEvaluationLateReasonSupported != false)
                && target.EvaluationLateReason != source.EvaluationLateReason)
            {
                target.EvaluationLateReason = source.EvaluationLateReason;
                isModified = true;
            }

            if ((mappingContract?.IsIDEAIndicatorSupported != false)
                && target.IDEAIndicator != source.IDEAIndicator)
            {
                target.IDEAIndicator = source.IDEAIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsIDEAPartDescriptorSupported != false)
                && target.IDEAPartDescriptor != source.IDEAPartDescriptor)
            {
                target.IDEAPartDescriptor = source.IDEAPartDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsOriginalECIServicesDateSupported != false)
                && target.OriginalECIServicesDate != source.OriginalECIServicesDate)
            {
                target.OriginalECIServicesDate = source.OriginalECIServicesDate;
                isModified = true;
            }

            if ((mappingContract?.IsTransitionConferenceDateSupported != false)
                && target.TransitionConferenceDate != source.TransitionConferenceDate)
            {
                target.TransitionConferenceDate = source.TransitionConferenceDate;
                isModified = true;
            }

            if ((mappingContract?.IsTransitionNotificationDateSupported != false)
                && target.TransitionNotificationDate != source.TransitionNotificationDate)
            {
                target.TransitionNotificationDate = source.TransitionNotificationDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentSpecialEducationProgramEligibilityAssociation source, IStudentSpecialEducationProgramEligibilityAssociation target, Action<IStudentSpecialEducationProgramEligibilityAssociation, IStudentSpecialEducationProgramEligibilityAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentSpecialEducationProgramEligibilityAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentSpecialEducationProgramEligibilityAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ConsentToEvaluationReceivedDate = source.ConsentToEvaluationReceivedDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (mappingContract?.IsConsentToEvaluationDateSupported != false)
                target.ConsentToEvaluationDate = source.ConsentToEvaluationDate;

            if (mappingContract?.IsEligibilityConferenceDateSupported != false)
                target.EligibilityConferenceDate = source.EligibilityConferenceDate;

            if (mappingContract?.IsEligibilityDelayReasonDescriptorSupported != false)
                target.EligibilityDelayReasonDescriptor = source.EligibilityDelayReasonDescriptor;

            if (mappingContract?.IsEligibilityDeterminationDateSupported != false)
                target.EligibilityDeterminationDate = source.EligibilityDeterminationDate;

            if (mappingContract?.IsEligibilityEvaluationDateSupported != false)
                target.EligibilityEvaluationDate = source.EligibilityEvaluationDate;

            if (mappingContract?.IsEligibilityEvaluationTypeDescriptorSupported != false)
                target.EligibilityEvaluationTypeDescriptor = source.EligibilityEvaluationTypeDescriptor;

            if (mappingContract?.IsEvaluationCompleteIndicatorSupported != false)
                target.EvaluationCompleteIndicator = source.EvaluationCompleteIndicator;

            if (mappingContract?.IsEvaluationDelayDaysSupported != false)
                target.EvaluationDelayDays = source.EvaluationDelayDays;

            if (mappingContract?.IsEvaluationDelayReasonDescriptorSupported != false)
                target.EvaluationDelayReasonDescriptor = source.EvaluationDelayReasonDescriptor;

            if (mappingContract?.IsEvaluationLateReasonSupported != false)
                target.EvaluationLateReason = source.EvaluationLateReason;

            if (mappingContract?.IsIDEAIndicatorSupported != false)
                target.IDEAIndicator = source.IDEAIndicator;

            if (mappingContract?.IsIDEAPartDescriptorSupported != false)
                target.IDEAPartDescriptor = source.IDEAPartDescriptor;

            if (mappingContract?.IsOriginalECIServicesDateSupported != false)
                target.OriginalECIServicesDate = source.OriginalECIServicesDate;

            if (mappingContract?.IsTransitionConferenceDateSupported != false)
                target.TransitionConferenceDate = source.TransitionConferenceDate;

            if (mappingContract?.IsTransitionNotificationDateSupported != false)
                target.TransitionNotificationDate = source.TransitionNotificationDate;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: StudentTitleIPartAProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentTitleIPartAProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentTitleIPartAProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_StudentTitleIPartAProgramAssociation = new FullName("edfi", "StudentTitleIPartAProgramAssociation");
    
        public static bool SynchronizeTo(this IStudentTitleIPartAProgramAssociation source, IStudentTitleIPartAProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentTitleIPartAProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentTitleIPartAProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (target.ProgramEducationOrganizationId != source.ProgramEducationOrganizationId)
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {
                // Disallow PK column updates on StudentTitleIPartAProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsEndDateSupported != false)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((mappingContract?.IsReasonExitedDescriptorSupported != false)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((mappingContract?.IsTitleIPartAParticipantDescriptorSupported != false)
                && target.TitleIPartAParticipantDescriptor != source.TitleIPartAParticipantDescriptor)
            {
                target.TitleIPartAParticipantDescriptor = source.TitleIPartAParticipantDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported ?? true)
            {
                isModified |= 
                    source.GeneralStudentProgramAssociationProgramParticipationStatuses.SynchronizeCollectionTo(
                        target.GeneralStudentProgramAssociationProgramParticipationStatuses, 
                        onChildAdded: child => child.GeneralStudentProgramAssociation = target,
                        includeItem: item => mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded?.Invoke(item) ?? true);
            }


            // Sync lists
            if (mappingContract?.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported ?? true)
            {
                isModified |=
                    source.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices.SynchronizeCollectionTo(
                        target.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices,
                        onChildAdded: child =>
                            {
                                child.StudentTitleIPartAProgramAssociation = target;
                            },
                        includeItem: item => mappingContract?.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapDerivedTo(this IStudentTitleIPartAProgramAssociation source, IStudentTitleIPartAProgramAssociation target, Action<IStudentTitleIPartAProgramAssociation, IStudentTitleIPartAProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentTitleIPartAProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentTitleIPartAProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsEndDateSupported != false)
                target.EndDate = source.EndDate;

            if (mappingContract?.IsReasonExitedDescriptorSupported != false)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;

            if (mappingContract?.IsServedOutsideOfRegularSessionSupported != false)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;

            // Copy non-PK properties

            if (mappingContract?.IsTitleIPartAParticipantDescriptorSupported != false)
                target.TitleIPartAParticipantDescriptor = source.TitleIPartAParticipantDescriptor;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusesSupported != false)
            {
                source.GeneralStudentProgramAssociationProgramParticipationStatuses.MapCollectionTo(target.GeneralStudentProgramAssociationProgramParticipationStatuses, target, mappingContract?.IsGeneralStudentProgramAssociationProgramParticipationStatusIncluded);
            }

            // Map lists

            if (mappingContract?.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported != false)
            {
                source.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices.MapCollectionTo(target.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices, target, mappingContract?.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class StudentTitleIPartAProgramAssociationTitleIPartAProgramServiceMapper
    {
        private static readonly FullName _fullName_edfi_StudentTitleIPartAProgramAssociationTitleIPartAProgramService = new FullName("edfi", "StudentTitleIPartAProgramAssociationTitleIPartAProgramService");
    
        public static bool SynchronizeTo(this IStudentTitleIPartAProgramAssociationTitleIPartAProgramService source, IStudentTitleIPartAProgramAssociationTitleIPartAProgramService target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (StudentTitleIPartAProgramAssociationTitleIPartAProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentTitleIPartAProgramAssociationTitleIPartAProgramService);


            // Copy non-PK properties

            if ((mappingContract?.IsPrimaryIndicatorSupported != false)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((mappingContract?.IsServiceBeginDateSupported != false)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsServiceEndDateSupported != false)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this IStudentTitleIPartAProgramAssociationTitleIPartAProgramService source, IStudentTitleIPartAProgramAssociationTitleIPartAProgramService target, Action<IStudentTitleIPartAProgramAssociationTitleIPartAProgramService, IStudentTitleIPartAProgramAssociationTitleIPartAProgramService> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (StudentTitleIPartAProgramAssociationTitleIPartAProgramServiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_StudentTitleIPartAProgramAssociationTitleIPartAProgramService);
    
            // Copy contextual primary key values
            target.TitleIPartAProgramServiceDescriptor = source.TitleIPartAProgramServiceDescriptor;

            // Copy non-PK properties

            if (mappingContract?.IsPrimaryIndicatorSupported != false)
                target.PrimaryIndicator = source.PrimaryIndicator;

            if (mappingContract?.IsServiceBeginDateSupported != false)
                target.ServiceBeginDate = source.ServiceBeginDate;

            if (mappingContract?.IsServiceEndDateSupported != false)
                target.ServiceEndDate = source.ServiceEndDate;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SubmissionStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SubmissionStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SubmissionStatusDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SubmissionStatusDescriptor = new FullName("edfi", "SubmissionStatusDescriptor");
    
        public static bool SynchronizeTo(this ISubmissionStatusDescriptor source, ISubmissionStatusDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SubmissionStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SubmissionStatusDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SubmissionStatusDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISubmissionStatusDescriptor source, ISubmissionStatusDescriptor target, Action<ISubmissionStatusDescriptor, ISubmissionStatusDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SubmissionStatusDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SubmissionStatusDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SubmissionStatusDescriptorId = source.SubmissionStatusDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SupporterMilitaryConnectionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SupporterMilitaryConnectionDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SupporterMilitaryConnectionDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SupporterMilitaryConnectionDescriptor = new FullName("edfi", "SupporterMilitaryConnectionDescriptor");
    
        public static bool SynchronizeTo(this ISupporterMilitaryConnectionDescriptor source, ISupporterMilitaryConnectionDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SupporterMilitaryConnectionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SupporterMilitaryConnectionDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SupporterMilitaryConnectionDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISupporterMilitaryConnectionDescriptor source, ISupporterMilitaryConnectionDescriptor target, Action<ISupporterMilitaryConnectionDescriptor, ISupporterMilitaryConnectionDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SupporterMilitaryConnectionDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SupporterMilitaryConnectionDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SupporterMilitaryConnectionDescriptorId = source.SupporterMilitaryConnectionDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: Survey

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyMapper
    {
        private static readonly FullName _fullName_edfi_Survey = new FullName("edfi", "Survey");
    
        public static bool SynchronizeTo(this ISurvey source, ISurvey target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Survey);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier)))
            {
                // Disallow PK column updates on Survey
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsEducationOrganizationIdSupported != false)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((mappingContract?.IsNumberAdministeredSupported != false)
                && target.NumberAdministered != source.NumberAdministered)
            {
                target.NumberAdministered = source.NumberAdministered;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolIdSupported != false)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((mappingContract?.IsSchoolYearSupported != false)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((mappingContract?.IsSessionNameSupported != false)
                && target.SessionName != source.SessionName)
            {
                target.SessionName = source.SessionName;
                isModified = true;
            }

            if ((mappingContract?.IsSurveyCategoryDescriptorSupported != false)
                && target.SurveyCategoryDescriptor != source.SurveyCategoryDescriptor)
            {
                target.SurveyCategoryDescriptor = source.SurveyCategoryDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsSurveyTitleSupported != false)
                && target.SurveyTitle != source.SurveyTitle)
            {
                target.SurveyTitle = source.SurveyTitle;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurvey source, ISurvey target, Action<ISurvey, ISurvey> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_Survey);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsEducationOrganizationIdSupported != false)
                target.EducationOrganizationId = source.EducationOrganizationId;

            if (mappingContract?.IsNumberAdministeredSupported != false)
                target.NumberAdministered = source.NumberAdministered;

            if (mappingContract?.IsSchoolIdSupported != false)
                target.SchoolId = source.SchoolId;

            if (mappingContract?.IsSchoolYearSupported != false)
                target.SchoolYear = source.SchoolYear;

            if (mappingContract?.IsSessionNameSupported != false)
                target.SessionName = source.SessionName;

            if (mappingContract?.IsSurveyCategoryDescriptorSupported != false)
                target.SurveyCategoryDescriptor = source.SurveyCategoryDescriptor;

            if (mappingContract?.IsSurveyTitleSupported != false)
                target.SurveyTitle = source.SurveyTitle;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.SessionResourceId = source.SessionResourceId;
                target.SessionDiscriminator = source.SessionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyCategoryDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyCategoryDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SurveyCategoryDescriptor = new FullName("edfi", "SurveyCategoryDescriptor");
    
        public static bool SynchronizeTo(this ISurveyCategoryDescriptor source, ISurveyCategoryDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyCategoryDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SurveyCategoryDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISurveyCategoryDescriptor source, ISurveyCategoryDescriptor target, Action<ISurveyCategoryDescriptor, ISurveyCategoryDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyCategoryDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyCategoryDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SurveyCategoryDescriptorId = source.SurveyCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyCourseAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyCourseAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyCourseAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveyCourseAssociation = new FullName("edfi", "SurveyCourseAssociation");
    
        public static bool SynchronizeTo(this ISurveyCourseAssociation source, ISurveyCourseAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyCourseAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyCourseAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.CourseCode, source.CourseCode))
                || (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier)))
            {
                // Disallow PK column updates on SurveyCourseAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyCourseAssociation source, ISurveyCourseAssociation target, Action<ISurveyCourseAssociation, ISurveyCourseAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyCourseAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyCourseAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyLevelDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_SurveyLevelDescriptor = new FullName("edfi", "SurveyLevelDescriptor");
    
        public static bool SynchronizeTo(this ISurveyLevelDescriptor source, ISurveyLevelDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyLevelDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on SurveyLevelDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ISurveyLevelDescriptor source, ISurveyLevelDescriptor target, Action<ISurveyLevelDescriptor, ISurveyLevelDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyLevelDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyLevelDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SurveyLevelDescriptorId = source.SurveyLevelDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyProgramAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveyProgramAssociation = new FullName("edfi", "SurveyProgramAssociation");
    
        public static bool SynchronizeTo(this ISurveyProgramAssociation source, ISurveyProgramAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyProgramAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.ProgramName, source.ProgramName))
                || !string.Equals(target.ProgramTypeDescriptor, source.ProgramTypeDescriptor, StringComparison.OrdinalIgnoreCase)
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier)))
            {
                // Disallow PK column updates on SurveyProgramAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyProgramAssociation source, ISurveyProgramAssociation target, Action<ISurveyProgramAssociation, ISurveyProgramAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyProgramAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyProgramAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyQuestion

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyQuestionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionMapper
    {
        private static readonly FullName _fullName_edfi_SurveyQuestion = new FullName("edfi", "SurveyQuestion");
    
        public static bool SynchronizeTo(this ISurveyQuestion source, ISurveyQuestion target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyQuestionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestion);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.QuestionCode, source.QuestionCode))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier)))
            {
                // Disallow PK column updates on SurveyQuestion
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsQuestionFormDescriptorSupported != false)
                && target.QuestionFormDescriptor != source.QuestionFormDescriptor)
            {
                target.QuestionFormDescriptor = source.QuestionFormDescriptor;
                isModified = true;
            }

            if ((mappingContract?.IsQuestionTextSupported != false)
                && target.QuestionText != source.QuestionText)
            {
                target.QuestionText = source.QuestionText;
                isModified = true;
            }

            if ((mappingContract?.IsSurveySectionTitleSupported != false)
                && target.SurveySectionTitle != source.SurveySectionTitle)
            {
                target.SurveySectionTitle = source.SurveySectionTitle;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsSurveyQuestionMatricesSupported ?? true)
            {
                isModified |=
                    source.SurveyQuestionMatrices.SynchronizeCollectionTo(
                        target.SurveyQuestionMatrices,
                        onChildAdded: child =>
                            {
                                child.SurveyQuestion = target;
                            },
                        includeItem: item => mappingContract?.IsSurveyQuestionMatrixIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSurveyQuestionResponseChoicesSupported ?? true)
            {
                isModified |=
                    source.SurveyQuestionResponseChoices.SynchronizeCollectionTo(
                        target.SurveyQuestionResponseChoices,
                        onChildAdded: child =>
                            {
                                child.SurveyQuestion = target;
                            },
                        includeItem: item => mappingContract?.IsSurveyQuestionResponseChoiceIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyQuestion source, ISurveyQuestion target, Action<ISurveyQuestion, ISurveyQuestion> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyQuestionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestion);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.QuestionCode = source.QuestionCode;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsQuestionFormDescriptorSupported != false)
                target.QuestionFormDescriptor = source.QuestionFormDescriptor;

            if (mappingContract?.IsQuestionTextSupported != false)
                target.QuestionText = source.QuestionText;

            if (mappingContract?.IsSurveySectionTitleSupported != false)
                target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
                target.SurveySectionResourceId = source.SurveySectionResourceId;
                target.SurveySectionDiscriminator = source.SurveySectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsSurveyQuestionMatricesSupported != false)
            {
                source.SurveyQuestionMatrices.MapCollectionTo(target.SurveyQuestionMatrices, target, mappingContract?.IsSurveyQuestionMatrixIncluded);
            }

            if (mappingContract?.IsSurveyQuestionResponseChoicesSupported != false)
            {
                source.SurveyQuestionResponseChoices.MapCollectionTo(target.SurveyQuestionResponseChoices, target, mappingContract?.IsSurveyQuestionResponseChoiceIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionMatrixMapper
    {
        private static readonly FullName _fullName_edfi_SurveyQuestionMatrix = new FullName("edfi", "SurveyQuestionMatrix");
    
        public static bool SynchronizeTo(this ISurveyQuestionMatrix source, ISurveyQuestionMatrix target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyQuestionMatrixMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionMatrix);


            // Copy non-PK properties

            if ((mappingContract?.IsMaxRawScoreSupported != false)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((mappingContract?.IsMinRawScoreSupported != false)
                && target.MinRawScore != source.MinRawScore)
            {
                target.MinRawScore = source.MinRawScore;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyQuestionMatrix source, ISurveyQuestionMatrix target, Action<ISurveyQuestionMatrix, ISurveyQuestionMatrix> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyQuestionMatrixMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionMatrix);
    
            // Copy contextual primary key values
            target.MatrixElement = source.MatrixElement;

            // Copy non-PK properties

            if (mappingContract?.IsMaxRawScoreSupported != false)
                target.MaxRawScore = source.MaxRawScore;

            if (mappingContract?.IsMinRawScoreSupported != false)
                target.MinRawScore = source.MinRawScore;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseChoiceMapper
    {
        private static readonly FullName _fullName_edfi_SurveyQuestionResponseChoice = new FullName("edfi", "SurveyQuestionResponseChoice");
    
        public static bool SynchronizeTo(this ISurveyQuestionResponseChoice source, ISurveyQuestionResponseChoice target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyQuestionResponseChoiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponseChoice);


            // Copy non-PK properties

            if ((mappingContract?.IsNumericValueSupported != false)
                && target.NumericValue != source.NumericValue)
            {
                target.NumericValue = source.NumericValue;
                isModified = true;
            }

            if ((mappingContract?.IsTextValueSupported != false)
                && target.TextValue != source.TextValue)
            {
                target.TextValue = source.TextValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyQuestionResponseChoice source, ISurveyQuestionResponseChoice target, Action<ISurveyQuestionResponseChoice, ISurveyQuestionResponseChoice> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyQuestionResponseChoiceMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponseChoice);
    
            // Copy contextual primary key values
            target.SortOrder = source.SortOrder;

            // Copy non-PK properties

            if (mappingContract?.IsNumericValueSupported != false)
                target.NumericValue = source.NumericValue;

            if (mappingContract?.IsTextValueSupported != false)
                target.TextValue = source.TextValue;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyQuestionResponse

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyQuestionResponseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseMapper
    {
        private static readonly FullName _fullName_edfi_SurveyQuestionResponse = new FullName("edfi", "SurveyQuestionResponse");
    
        public static bool SynchronizeTo(this ISurveyQuestionResponse source, ISurveyQuestionResponse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyQuestionResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponse);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.QuestionCode, source.QuestionCode))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier)))
            {
                // Disallow PK column updates on SurveyQuestionResponse
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsCommentSupported != false)
                && target.Comment != source.Comment)
            {
                target.Comment = source.Comment;
                isModified = true;
            }

            if ((mappingContract?.IsNoResponseSupported != false)
                && target.NoResponse != source.NoResponse)
            {
                target.NoResponse = source.NoResponse;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported ?? true)
            {
                isModified |=
                    source.SurveyQuestionResponseSurveyQuestionMatrixElementResponses.SynchronizeCollectionTo(
                        target.SurveyQuestionResponseSurveyQuestionMatrixElementResponses,
                        onChildAdded: child =>
                            {
                                child.SurveyQuestionResponse = target;
                            },
                        includeItem: item => mappingContract?.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded?.Invoke(item) ?? true);
            }

            if (mappingContract?.IsSurveyQuestionResponseValuesSupported ?? true)
            {
                isModified |=
                    source.SurveyQuestionResponseValues.SynchronizeCollectionTo(
                        target.SurveyQuestionResponseValues,
                        onChildAdded: child =>
                            {
                                child.SurveyQuestionResponse = target;
                            },
                        includeItem: item => mappingContract?.IsSurveyQuestionResponseValueIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyQuestionResponse source, ISurveyQuestionResponse target, Action<ISurveyQuestionResponse, ISurveyQuestionResponse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyQuestionResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponse);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.QuestionCode = source.QuestionCode;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsCommentSupported != false)
                target.Comment = source.Comment;

            if (mappingContract?.IsNoResponseSupported != false)
                target.NoResponse = source.NoResponse;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyQuestionResourceId = source.SurveyQuestionResourceId;
                target.SurveyQuestionDiscriminator = source.SurveyQuestionDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported != false)
            {
                source.SurveyQuestionResponseSurveyQuestionMatrixElementResponses.MapCollectionTo(target.SurveyQuestionResponseSurveyQuestionMatrixElementResponses, target, mappingContract?.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded);
            }

            if (mappingContract?.IsSurveyQuestionResponseValuesSupported != false)
            {
                source.SurveyQuestionResponseValues.MapCollectionTo(target.SurveyQuestionResponseValues, target, mappingContract?.IsSurveyQuestionResponseValueIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseSurveyQuestionMatrixElementResponseMapper
    {
        private static readonly FullName _fullName_edfi_SurveyQuestionResponseSurveyQuestionMatrixElementResponse = new FullName("edfi", "SurveyQuestionResponseSurveyQuestionMatrixElementResponse");
    
        public static bool SynchronizeTo(this ISurveyQuestionResponseSurveyQuestionMatrixElementResponse source, ISurveyQuestionResponseSurveyQuestionMatrixElementResponse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyQuestionResponseSurveyQuestionMatrixElementResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponseSurveyQuestionMatrixElementResponse);


            // Copy non-PK properties

            if ((mappingContract?.IsMaxNumericResponseSupported != false)
                && target.MaxNumericResponse != source.MaxNumericResponse)
            {
                target.MaxNumericResponse = source.MaxNumericResponse;
                isModified = true;
            }

            if ((mappingContract?.IsMinNumericResponseSupported != false)
                && target.MinNumericResponse != source.MinNumericResponse)
            {
                target.MinNumericResponse = source.MinNumericResponse;
                isModified = true;
            }

            if ((mappingContract?.IsNoResponseSupported != false)
                && target.NoResponse != source.NoResponse)
            {
                target.NoResponse = source.NoResponse;
                isModified = true;
            }

            if ((mappingContract?.IsNumericResponseSupported != false)
                && target.NumericResponse != source.NumericResponse)
            {
                target.NumericResponse = source.NumericResponse;
                isModified = true;
            }

            if ((mappingContract?.IsTextResponseSupported != false)
                && target.TextResponse != source.TextResponse)
            {
                target.TextResponse = source.TextResponse;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyQuestionResponseSurveyQuestionMatrixElementResponse source, ISurveyQuestionResponseSurveyQuestionMatrixElementResponse target, Action<ISurveyQuestionResponseSurveyQuestionMatrixElementResponse, ISurveyQuestionResponseSurveyQuestionMatrixElementResponse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyQuestionResponseSurveyQuestionMatrixElementResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponseSurveyQuestionMatrixElementResponse);
    
            // Copy contextual primary key values
            target.MatrixElement = source.MatrixElement;

            // Copy non-PK properties

            if (mappingContract?.IsMaxNumericResponseSupported != false)
                target.MaxNumericResponse = source.MaxNumericResponse;

            if (mappingContract?.IsMinNumericResponseSupported != false)
                target.MinNumericResponse = source.MinNumericResponse;

            if (mappingContract?.IsNoResponseSupported != false)
                target.NoResponse = source.NoResponse;

            if (mappingContract?.IsNumericResponseSupported != false)
                target.NumericResponse = source.NumericResponse;

            if (mappingContract?.IsTextResponseSupported != false)
                target.TextResponse = source.TextResponse;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseValueMapper
    {
        private static readonly FullName _fullName_edfi_SurveyQuestionResponseValue = new FullName("edfi", "SurveyQuestionResponseValue");
    
        public static bool SynchronizeTo(this ISurveyQuestionResponseValue source, ISurveyQuestionResponseValue target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyQuestionResponseValueMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponseValue);


            // Copy non-PK properties

            if ((mappingContract?.IsNumericResponseSupported != false)
                && target.NumericResponse != source.NumericResponse)
            {
                target.NumericResponse = source.NumericResponse;
                isModified = true;
            }

            if ((mappingContract?.IsTextResponseSupported != false)
                && target.TextResponse != source.TextResponse)
            {
                target.TextResponse = source.TextResponse;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyQuestionResponseValue source, ISurveyQuestionResponseValue target, Action<ISurveyQuestionResponseValue, ISurveyQuestionResponseValue> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyQuestionResponseValueMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyQuestionResponseValue);
    
            // Copy contextual primary key values
            target.SurveyQuestionResponseValueIdentifier = source.SurveyQuestionResponseValueIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsNumericResponseSupported != false)
                target.NumericResponse = source.NumericResponse;

            if (mappingContract?.IsTextResponseSupported != false)
                target.TextResponse = source.TextResponse;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyResponseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseMapper
    {
        private static readonly FullName _fullName_edfi_SurveyResponse = new FullName("edfi", "SurveyResponse");
    
        public static bool SynchronizeTo(this ISurveyResponse source, ISurveyResponse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponse);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier)))
            {
                // Disallow PK column updates on SurveyResponse
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsContactUniqueIdSupported != false)
                && target.ContactUniqueId != source.ContactUniqueId)
            {
                target.ContactUniqueId = source.ContactUniqueId;
                isModified = true;
            }

            if ((mappingContract?.IsElectronicMailAddressSupported != false)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            if ((mappingContract?.IsFullNameSupported != false)
                && target.FullName != source.FullName)
            {
                target.FullName = source.FullName;
                isModified = true;
            }

            if ((mappingContract?.IsLocationSupported != false)
                && target.Location != source.Location)
            {
                target.Location = source.Location;
                isModified = true;
            }

            if ((mappingContract?.IsResponseDateSupported != false)
                && target.ResponseDate != source.ResponseDate)
            {
                target.ResponseDate = source.ResponseDate;
                isModified = true;
            }

            if ((mappingContract?.IsResponseTimeSupported != false)
                && target.ResponseTime != source.ResponseTime)
            {
                target.ResponseTime = source.ResponseTime;
                isModified = true;
            }

            if ((mappingContract?.IsStaffUniqueIdSupported != false)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }

            if ((mappingContract?.IsStudentUniqueIdSupported != false)
                && target.StudentUniqueId != source.StudentUniqueId)
            {
                target.StudentUniqueId = source.StudentUniqueId;
                isModified = true;
            }


            // Sync lists
            if (mappingContract?.IsSurveyResponseSurveyLevelsSupported ?? true)
            {
                isModified |=
                    source.SurveyResponseSurveyLevels.SynchronizeCollectionTo(
                        target.SurveyResponseSurveyLevels,
                        onChildAdded: child =>
                            {
                                child.SurveyResponse = target;
                            },
                        includeItem: item => mappingContract?.IsSurveyResponseSurveyLevelIncluded?.Invoke(item) ?? true);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyResponse source, ISurveyResponse target, Action<ISurveyResponse, ISurveyResponse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponse);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            if (mappingContract?.IsContactUniqueIdSupported != false)
                target.ContactUniqueId = source.ContactUniqueId;

            if (mappingContract?.IsElectronicMailAddressSupported != false)
                target.ElectronicMailAddress = source.ElectronicMailAddress;

            if (mappingContract?.IsFullNameSupported != false)
                target.FullName = source.FullName;

            if (mappingContract?.IsLocationSupported != false)
                target.Location = source.Location;

            if (mappingContract?.IsResponseDateSupported != false)
                target.ResponseDate = source.ResponseDate;

            if (mappingContract?.IsResponseTimeSupported != false)
                target.ResponseTime = source.ResponseTime;

            if (mappingContract?.IsStaffUniqueIdSupported != false)
                target.StaffUniqueId = source.StaffUniqueId;

            if (mappingContract?.IsStudentUniqueIdSupported != false)
                target.StudentUniqueId = source.StudentUniqueId;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ContactResourceId = source.ContactResourceId;
                target.ContactDiscriminator = source.ContactDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (mappingContract?.IsSurveyResponseSurveyLevelsSupported != false)
            {
                source.SurveyResponseSurveyLevels.MapCollectionTo(target.SurveyResponseSurveyLevels, target, mappingContract?.IsSurveyResponseSurveyLevelIncluded);
            }

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    public static class SurveyResponseSurveyLevelMapper
    {
        private static readonly FullName _fullName_edfi_SurveyResponseSurveyLevel = new FullName("edfi", "SurveyResponseSurveyLevel");
    
        public static bool SynchronizeTo(this ISurveyResponseSurveyLevel source, ISurveyResponseSurveyLevel target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyResponseSurveyLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponseSurveyLevel);


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyResponseSurveyLevel source, ISurveyResponseSurveyLevel target, Action<ISurveyResponseSurveyLevel, ISurveyResponseSurveyLevel> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyResponseSurveyLevelMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponseSurveyLevel);
    
            // Copy contextual primary key values
            target.SurveyLevelDescriptor = source.SurveyLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyResponseEducationOrganizationTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyResponseEducationOrganizationTargetAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseEducationOrganizationTargetAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveyResponseEducationOrganizationTargetAssociation = new FullName("edfi", "SurveyResponseEducationOrganizationTargetAssociation");
    
        public static bool SynchronizeTo(this ISurveyResponseEducationOrganizationTargetAssociation source, ISurveyResponseEducationOrganizationTargetAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyResponseEducationOrganizationTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponseEducationOrganizationTargetAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier)))
            {
                // Disallow PK column updates on SurveyResponseEducationOrganizationTargetAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyResponseEducationOrganizationTargetAssociation source, ISurveyResponseEducationOrganizationTargetAssociation target, Action<ISurveyResponseEducationOrganizationTargetAssociation, ISurveyResponseEducationOrganizationTargetAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyResponseEducationOrganizationTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponseEducationOrganizationTargetAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveyResponseStaffTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyResponseStaffTargetAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseStaffTargetAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveyResponseStaffTargetAssociation = new FullName("edfi", "SurveyResponseStaffTargetAssociation");
    
        public static bool SynchronizeTo(this ISurveyResponseStaffTargetAssociation source, ISurveyResponseStaffTargetAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveyResponseStaffTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponseStaffTargetAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (target.StaffUniqueId != source.StaffUniqueId)
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier)))
            {
                // Disallow PK column updates on SurveyResponseStaffTargetAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveyResponseStaffTargetAssociation source, ISurveyResponseStaffTargetAssociation target, Action<ISurveyResponseStaffTargetAssociation, ISurveyResponseStaffTargetAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveyResponseStaffTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveyResponseStaffTargetAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.StaffUniqueId = source.StaffUniqueId;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveySection

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionMapper
    {
        private static readonly FullName _fullName_edfi_SurveySection = new FullName("edfi", "SurveySection");
    
        public static bool SynchronizeTo(this ISurveySection source, ISurveySection target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveySectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySection);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveySectionTitle, source.SurveySectionTitle)))
            {
                // Disallow PK column updates on SurveySection
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveySection source, ISurveySection target, Action<ISurveySection, ISurveySection> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveySectionMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySection);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveySectionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveySectionAssociation = new FullName("edfi", "SurveySectionAssociation");
    
        public static bool SynchronizeTo(this ISurveySectionAssociation source, ISurveySectionAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveySectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.LocalCourseCode, source.LocalCourseCode))
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (!keyStringComparer.Equals(target.SectionIdentifier, source.SectionIdentifier))
                || (!keyStringComparer.Equals(target.SessionName, source.SessionName))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier)))
            {
                // Disallow PK column updates on SurveySectionAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveySectionAssociation source, ISurveySectionAssociation target, Action<ISurveySectionAssociation, ISurveySectionAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveySectionAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.Namespace = source.Namespace;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveySectionResponse

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionResponseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseMapper
    {
        private static readonly FullName _fullName_edfi_SurveySectionResponse = new FullName("edfi", "SurveySectionResponse");
    
        public static bool SynchronizeTo(this ISurveySectionResponse source, ISurveySectionResponse target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveySectionResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionResponse);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier))
                || (!keyStringComparer.Equals(target.SurveySectionTitle, source.SurveySectionTitle)))
            {
                // Disallow PK column updates on SurveySectionResponse
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties

            if ((mappingContract?.IsSectionRatingSupported != false)
                && target.SectionRating != source.SectionRating)
            {
                target.SectionRating = source.SectionRating;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveySectionResponse source, ISurveySectionResponse target, Action<ISurveySectionResponse, ISurveySectionResponse> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveySectionResponseMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionResponse);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            if (mappingContract?.IsSectionRatingSupported != false)
                target.SectionRating = source.SectionRating;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
                target.SurveySectionResourceId = source.SurveySectionResourceId;
                target.SurveySectionDiscriminator = source.SurveySectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveySectionResponseEducationOrganizationTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionResponseEducationOrganizationTargetAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseEducationOrganizationTargetAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveySectionResponseEducationOrganizationTargetAssociation = new FullName("edfi", "SurveySectionResponseEducationOrganizationTargetAssociation");
    
        public static bool SynchronizeTo(this ISurveySectionResponseEducationOrganizationTargetAssociation source, ISurveySectionResponseEducationOrganizationTargetAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveySectionResponseEducationOrganizationTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionResponseEducationOrganizationTargetAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (target.EducationOrganizationId != source.EducationOrganizationId)
                || (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier))
                || (!keyStringComparer.Equals(target.SurveySectionTitle, source.SurveySectionTitle)))
            {
                // Disallow PK column updates on SurveySectionResponseEducationOrganizationTargetAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveySectionResponseEducationOrganizationTargetAssociation source, ISurveySectionResponseEducationOrganizationTargetAssociation target, Action<ISurveySectionResponseEducationOrganizationTargetAssociation, ISurveySectionResponseEducationOrganizationTargetAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveySectionResponseEducationOrganizationTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionResponseEducationOrganizationTargetAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SurveySectionResponseResourceId = source.SurveySectionResponseResourceId;
                target.SurveySectionResponseDiscriminator = source.SurveySectionResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: SurveySectionResponseStaffTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionResponseStaffTargetAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseStaffTargetAssociationMapper
    {
        private static readonly FullName _fullName_edfi_SurveySectionResponseStaffTargetAssociation = new FullName("edfi", "SurveySectionResponseStaffTargetAssociation");
    
        public static bool SynchronizeTo(this ISurveySectionResponseStaffTargetAssociation source, ISurveySectionResponseStaffTargetAssociation target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (SurveySectionResponseStaffTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionResponseStaffTargetAssociation);

            var keyStringComparer = GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer;

            // Detect primary key changes
            if (
                 (!keyStringComparer.Equals(target.Namespace, source.Namespace))
                || (target.StaffUniqueId != source.StaffUniqueId)
                || (!keyStringComparer.Equals(target.SurveyIdentifier, source.SurveyIdentifier))
                || (!keyStringComparer.Equals(target.SurveyResponseIdentifier, source.SurveyResponseIdentifier))
                || (!keyStringComparer.Equals(target.SurveySectionTitle, source.SurveySectionTitle)))
            {
                // Disallow PK column updates on SurveySectionResponseStaffTargetAssociation
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target, mappingContract);

            return isModified;
        }

        public static void MapTo(this ISurveySectionResponseStaffTargetAssociation source, ISurveySectionResponseStaffTargetAssociation target, Action<ISurveySectionResponseStaffTargetAssociation, ISurveySectionResponseStaffTargetAssociation> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (SurveySectionResponseStaffTargetAssociationMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_SurveySectionResponseStaffTargetAssociation);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.StaffUniqueId = source.StaffUniqueId;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.SurveySectionResponseResourceId = source.SurveySectionResponseResourceId;
                target.SurveySectionResponseDiscriminator = source.SurveySectionResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target, mappingContract);

            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TeachingCredentialBasisDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TeachingCredentialBasisDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TeachingCredentialBasisDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TeachingCredentialBasisDescriptor = new FullName("edfi", "TeachingCredentialBasisDescriptor");
    
        public static bool SynchronizeTo(this ITeachingCredentialBasisDescriptor source, ITeachingCredentialBasisDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TeachingCredentialBasisDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TeachingCredentialBasisDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TeachingCredentialBasisDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITeachingCredentialBasisDescriptor source, ITeachingCredentialBasisDescriptor target, Action<ITeachingCredentialBasisDescriptor, ITeachingCredentialBasisDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TeachingCredentialBasisDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TeachingCredentialBasisDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeachingCredentialBasisDescriptorId = source.TeachingCredentialBasisDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TeachingCredentialDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TeachingCredentialDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TeachingCredentialDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TeachingCredentialDescriptor = new FullName("edfi", "TeachingCredentialDescriptor");
    
        public static bool SynchronizeTo(this ITeachingCredentialDescriptor source, ITeachingCredentialDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TeachingCredentialDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TeachingCredentialDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TeachingCredentialDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITeachingCredentialDescriptor source, ITeachingCredentialDescriptor target, Action<ITeachingCredentialDescriptor, ITeachingCredentialDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TeachingCredentialDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TeachingCredentialDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeachingCredentialDescriptorId = source.TeachingCredentialDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TechnicalSkillsAssessmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TechnicalSkillsAssessmentDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TechnicalSkillsAssessmentDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TechnicalSkillsAssessmentDescriptor = new FullName("edfi", "TechnicalSkillsAssessmentDescriptor");
    
        public static bool SynchronizeTo(this ITechnicalSkillsAssessmentDescriptor source, ITechnicalSkillsAssessmentDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TechnicalSkillsAssessmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TechnicalSkillsAssessmentDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TechnicalSkillsAssessmentDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITechnicalSkillsAssessmentDescriptor source, ITechnicalSkillsAssessmentDescriptor target, Action<ITechnicalSkillsAssessmentDescriptor, ITechnicalSkillsAssessmentDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TechnicalSkillsAssessmentDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TechnicalSkillsAssessmentDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TechnicalSkillsAssessmentDescriptorId = source.TechnicalSkillsAssessmentDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TelephoneNumberTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TelephoneNumberTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TelephoneNumberTypeDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TelephoneNumberTypeDescriptor = new FullName("edfi", "TelephoneNumberTypeDescriptor");
    
        public static bool SynchronizeTo(this ITelephoneNumberTypeDescriptor source, ITelephoneNumberTypeDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TelephoneNumberTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TelephoneNumberTypeDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TelephoneNumberTypeDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITelephoneNumberTypeDescriptor source, ITelephoneNumberTypeDescriptor target, Action<ITelephoneNumberTypeDescriptor, ITelephoneNumberTypeDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TelephoneNumberTypeDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TelephoneNumberTypeDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TelephoneNumberTypeDescriptorId = source.TelephoneNumberTypeDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TermDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TermDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TermDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TermDescriptor = new FullName("edfi", "TermDescriptor");
    
        public static bool SynchronizeTo(this ITermDescriptor source, ITermDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TermDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TermDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TermDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITermDescriptor source, ITermDescriptor target, Action<ITermDescriptor, ITermDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TermDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TermDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TermDescriptorId = source.TermDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TitleIPartAParticipantDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TitleIPartAParticipantDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TitleIPartAParticipantDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TitleIPartAParticipantDescriptor = new FullName("edfi", "TitleIPartAParticipantDescriptor");
    
        public static bool SynchronizeTo(this ITitleIPartAParticipantDescriptor source, ITitleIPartAParticipantDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TitleIPartAParticipantDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TitleIPartAParticipantDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TitleIPartAParticipantDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITitleIPartAParticipantDescriptor source, ITitleIPartAParticipantDescriptor target, Action<ITitleIPartAParticipantDescriptor, ITitleIPartAParticipantDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TitleIPartAParticipantDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TitleIPartAParticipantDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TitleIPartAParticipantDescriptorId = source.TitleIPartAParticipantDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TitleIPartAProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TitleIPartAProgramServiceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TitleIPartAProgramServiceDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TitleIPartAProgramServiceDescriptor = new FullName("edfi", "TitleIPartAProgramServiceDescriptor");
    
        public static bool SynchronizeTo(this ITitleIPartAProgramServiceDescriptor source, ITitleIPartAProgramServiceDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TitleIPartAProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TitleIPartAProgramServiceDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TitleIPartAProgramServiceDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITitleIPartAProgramServiceDescriptor source, ITitleIPartAProgramServiceDescriptor target, Action<ITitleIPartAProgramServiceDescriptor, ITitleIPartAProgramServiceDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TitleIPartAProgramServiceDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TitleIPartAProgramServiceDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TitleIPartAProgramServiceDescriptorId = source.TitleIPartAProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TitleIPartASchoolDesignationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TitleIPartASchoolDesignationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TitleIPartASchoolDesignationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TitleIPartASchoolDesignationDescriptor = new FullName("edfi", "TitleIPartASchoolDesignationDescriptor");
    
        public static bool SynchronizeTo(this ITitleIPartASchoolDesignationDescriptor source, ITitleIPartASchoolDesignationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TitleIPartASchoolDesignationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TitleIPartASchoolDesignationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TitleIPartASchoolDesignationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITitleIPartASchoolDesignationDescriptor source, ITitleIPartASchoolDesignationDescriptor target, Action<ITitleIPartASchoolDesignationDescriptor, ITitleIPartASchoolDesignationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TitleIPartASchoolDesignationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TitleIPartASchoolDesignationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TitleIPartASchoolDesignationDescriptorId = source.TitleIPartASchoolDesignationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: TribalAffiliationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TribalAffiliationDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class TribalAffiliationDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_TribalAffiliationDescriptor = new FullName("edfi", "TribalAffiliationDescriptor");
    
        public static bool SynchronizeTo(this ITribalAffiliationDescriptor source, ITribalAffiliationDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (TribalAffiliationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TribalAffiliationDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on TribalAffiliationDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this ITribalAffiliationDescriptor source, ITribalAffiliationDescriptor target, Action<ITribalAffiliationDescriptor, ITribalAffiliationDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (TribalAffiliationDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_TribalAffiliationDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TribalAffiliationDescriptorId = source.TribalAffiliationDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: VisaDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.VisaDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class VisaDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_VisaDescriptor = new FullName("edfi", "VisaDescriptor");
    
        public static bool SynchronizeTo(this IVisaDescriptor source, IVisaDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (VisaDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_VisaDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on VisaDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IVisaDescriptor source, IVisaDescriptor target, Action<IVisaDescriptor, IVisaDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (VisaDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_VisaDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.VisaDescriptorId = source.VisaDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
// Aggregate: WeaponDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.WeaponDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class WeaponDescriptorMapper
    {
        private static readonly FullName _fullName_edfi_WeaponDescriptor = new FullName("edfi", "WeaponDescriptor");
    
        public static bool SynchronizeTo(this IWeaponDescriptor source, IWeaponDescriptor target)
        {
            bool isModified = false;

            // Get the mapping contract for knowing what values to synchronize through to target entity
            var mappingContract = (WeaponDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_WeaponDescriptor);

            // Detect primary key changes
            if (
                !string.Equals(target.Namespace, source.Namespace, StringComparison.OrdinalIgnoreCase) 
                || !string.Equals(target.CodeValue, source.CodeValue, StringComparison.OrdinalIgnoreCase))
            {
                // Disallow PK column updates on WeaponDescriptor
                throw new BadRequestException("Key values for this resource cannot be changed. Delete and recreate the resource item.");
            }


            // Copy inherited non-PK properties


            if ((mappingContract?.IsCodeValueSupported != false)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((mappingContract?.IsDescriptionSupported != false)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveBeginDateSupported != false)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((mappingContract?.IsEffectiveEndDateSupported != false)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((mappingContract?.IsNamespaceSupported != false)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((mappingContract?.IsShortDescriptionSupported != false)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }

        public static void MapTo(this IWeaponDescriptor source, IWeaponDescriptor target, Action<IWeaponDescriptor, IWeaponDescriptor> onMapped)
        {
            // Get the mapping contract for determining what values to map through to target
            var mappingContract = (WeaponDescriptorMappingContract) GeneratedArtifactStaticDependencies
                .MappingContractProvider
                .GetMappingContract(_fullName_edfi_WeaponDescriptor);
    
            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.WeaponDescriptorId = source.WeaponDescriptorId;

            // Copy inherited non-PK properties

            if (mappingContract?.IsCodeValueSupported != false)
                target.CodeValue = source.CodeValue;

            if (mappingContract?.IsDescriptionSupported != false)
                target.Description = source.Description;

            if (mappingContract?.IsEffectiveBeginDateSupported != false)
                target.EffectiveBeginDate = source.EffectiveBeginDate;

            if (mappingContract?.IsEffectiveEndDateSupported != false)
                target.EffectiveEndDate = source.EffectiveEndDate;

            if (mappingContract?.IsNamespaceSupported != false)
                target.Namespace = source.Namespace;

            if (mappingContract?.IsShortDescriptionSupported != false)
                target.ShortDescription = source.ShortDescription;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            // Convert source to an ETag, if appropriate
            if (target is IHasETag entityWithETag)
                entityWithETag.ETag = GeneratedArtifactStaticDependencies.ETagProvider.GetETag(source);

            // Copy/assign LastModifiedDate, if appropriate
            if (target is IDateVersionedEntity targetDateVersionedEntity)
            {
                if (source is IHasETag etagSource)
                {
                    // Convert resource's supplied eTag value to entity's LastModifiedDate
                    targetDateVersionedEntity.LastModifiedDate = GeneratedArtifactStaticDependencies.ETagProvider.GetDateTime(etagSource.ETag);
                }
                else if (source is IDateVersionedEntity sourceDateVersionedEntity)
                {
                    // Copy LastModifiedDate, when mapping from entities to resources/entities
                    targetDateVersionedEntity.LastModifiedDate = sourceDateVersionedEntity.LastModifiedDate;
                }
            }
        }
    }

}
